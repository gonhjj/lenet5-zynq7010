// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_V_address0,
        out_V_ce0,
        out_V_we0,
        out_V_d0,
        out_V_q0,
        P1_out_V_address0,
        P1_out_V_ce0,
        P1_out_V_q0
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] out_V_address0;
output   out_V_ce0;
output   out_V_we0;
output  [15:0] out_V_d0;
input  [15:0] out_V_q0;
output  [10:0] P1_out_V_address0;
output   P1_out_V_ce0;
input  [15:0] P1_out_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] out_V_address0;
reg out_V_ce0;
reg out_V_we0;
reg[15:0] out_V_d0;
reg P1_out_V_ce0;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] K2_W_V_address0;
reg    K2_W_V_ce0;
wire  signed [8:0] K2_W_V_q0;
wire   [3:0] K2_B_V_address0;
reg    K2_B_V_ce0;
wire   [7:0] K2_B_V_q0;
wire   [3:0] i_fu_292_p2;
reg   [3:0] i_reg_842;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln1265_fu_322_p2;
reg   [7:0] add_ln1265_reg_847;
wire   [0:0] icmp_ln75_fu_286_p2;
wire   [3:0] j_fu_334_p2;
reg   [3:0] j_reg_855;
wire    ap_CS_fsm_state3;
wire   [7:0] add_ln1265_2_fu_344_p2;
reg   [7:0] add_ln1265_2_reg_860;
wire   [0:0] icmp_ln77_fu_328_p2;
wire   [2:0] x_fu_359_p2;
reg   [2:0] x_reg_868;
wire    ap_CS_fsm_state4;
wire  signed [9:0] sext_ln1116_fu_401_p1;
reg  signed [9:0] sext_ln1116_reg_873;
wire   [0:0] icmp_ln79_fu_353_p2;
wire   [63:0] zext_ln89_fu_405_p1;
reg   [63:0] zext_ln89_reg_878;
wire   [2:0] y_fu_419_p2;
reg   [2:0] y_reg_886;
wire    ap_CS_fsm_state5;
wire   [11:0] sub_ln1116_1_fu_464_p2;
reg   [11:0] sub_ln1116_1_reg_891;
wire   [0:0] icmp_ln81_fu_413_p2;
wire   [12:0] zext_ln83_fu_470_p1;
reg   [12:0] zext_ln83_reg_896;
wire   [1:0] set_1_fu_480_p2;
reg   [1:0] set_1_reg_904;
wire    ap_CS_fsm_state6;
wire   [3:0] shl_ln3_fu_490_p3;
reg   [3:0] shl_ln3_reg_909;
wire   [0:0] icmp_ln83_fu_474_p2;
wire   [3:0] k_1_fu_504_p2;
reg   [3:0] k_1_reg_917;
wire    ap_CS_fsm_state7;
wire  signed [8:0] sext_ln1117_fu_545_p1;
reg  signed [8:0] sext_ln1117_reg_922;
wire   [0:0] icmp_ln85_fu_498_p2;
reg   [10:0] out_V_addr_4_reg_927;
wire   [2:0] c_fu_567_p2;
reg   [2:0] c_reg_935;
wire    ap_CS_fsm_state8;
wire   [12:0] add_ln1117_8_fu_635_p2;
reg   [12:0] add_ln1117_8_reg_940;
wire   [0:0] icmp_ln87_fu_561_p2;
wire   [11:0] add_ln1116_3_fu_640_p2;
reg   [11:0] add_ln1116_3_reg_945;
wire    ap_CS_fsm_state9;
reg   [15:0] trunc_ln_reg_960;
wire    ap_CS_fsm_state10;
wire   [3:0] i_5_fu_684_p2;
reg   [3:0] i_5_reg_968;
wire    ap_CS_fsm_state12;
wire   [7:0] add_ln1265_1_fu_714_p2;
reg   [7:0] add_ln1265_1_reg_973;
wire   [0:0] icmp_ln98_fu_678_p2;
wire   [3:0] j_1_fu_726_p2;
reg   [3:0] j_1_reg_981;
wire    ap_CS_fsm_state13;
wire   [7:0] add_ln1265_3_fu_736_p2;
reg   [7:0] add_ln1265_3_reg_986;
wire   [0:0] icmp_ln100_fu_720_p2;
wire   [1:0] set_fu_747_p2;
reg   [1:0] set_reg_995;
wire    ap_CS_fsm_state14;
wire   [3:0] shl_ln_fu_757_p3;
reg   [3:0] shl_ln_reg_1000;
wire   [0:0] icmp_ln102_fu_741_p2;
wire   [3:0] k_fu_771_p2;
reg   [3:0] k_reg_1008;
wire    ap_CS_fsm_state15;
reg   [10:0] out_V_addr_reg_1013;
wire   [0:0] icmp_ln104_fu_765_p2;
reg   [10:0] out_V_addr_3_reg_1023;
reg   [3:0] i_0_reg_163;
reg   [3:0] j_0_reg_175;
reg   [2:0] x_0_reg_187;
reg   [2:0] y_0_reg_198;
reg   [1:0] set_0_reg_209;
reg   [3:0] k_0_reg_220;
reg   [2:0] c_0_reg_231;
wire    ap_CS_fsm_state11;
reg   [3:0] i1_0_reg_242;
reg   [3:0] j2_0_reg_253;
reg   [1:0] set3_0_reg_264;
reg   [3:0] k4_0_reg_275;
wire    ap_CS_fsm_state18;
wire   [63:0] zext_ln1265_7_fu_556_p1;
wire   [63:0] zext_ln1117_11_fu_645_p1;
wire   [63:0] zext_ln1116_7_fu_649_p1;
wire   [63:0] zext_ln1265_6_fu_794_p1;
wire   [63:0] zext_ln106_fu_782_p1;
wire   [63:0] zext_ln1495_fu_806_p1;
wire    ap_CS_fsm_state16;
wire   [15:0] add_ln703_fu_815_p2;
wire    ap_CS_fsm_state17;
wire   [0:0] tmp_16_fu_822_p3;
wire   [6:0] tmp_s_fu_298_p3;
wire   [4:0] tmp_3_fu_310_p3;
wire   [7:0] zext_ln1265_1_fu_318_p1;
wire   [7:0] zext_ln1265_fu_306_p1;
wire   [7:0] zext_ln1265_4_fu_340_p1;
wire   [3:0] zext_ln79_fu_349_p1;
wire   [3:0] add_ln89_fu_365_p2;
wire   [7:0] tmp_6_fu_371_p3;
wire   [4:0] tmp_9_fu_383_p3;
wire   [8:0] zext_ln1116_fu_379_p1;
wire   [8:0] zext_ln1116_5_fu_391_p1;
wire   [8:0] sub_ln1116_fu_395_p2;
wire   [3:0] zext_ln81_fu_409_p1;
wire   [3:0] add_ln89_1_fu_425_p2;
wire   [9:0] zext_ln1116_6_fu_431_p1;
wire   [9:0] add_ln1116_fu_435_p2;
wire   [8:0] trunc_ln1116_fu_440_p1;
wire   [10:0] tmp_13_fu_452_p3;
wire   [11:0] p_shl4_cast_fu_444_p3;
wire  signed [11:0] sext_ln1116_1_fu_460_p1;
wire   [0:0] trunc_ln89_fu_486_p1;
wire   [3:0] add_ln89_2_fu_510_p2;
wire   [6:0] tmp_10_fu_515_p3;
wire   [4:0] tmp_11_fu_527_p3;
wire   [7:0] zext_ln1117_fu_523_p1;
wire   [7:0] zext_ln1117_8_fu_535_p1;
wire   [7:0] sub_ln1117_fu_539_p2;
wire   [11:0] tmp_17_fu_549_p3;
wire   [8:0] zext_ln1117_10_fu_577_p1;
wire  signed [8:0] add_ln1117_fu_581_p2;
wire   [10:0] tmp_18_fu_590_p3;
wire  signed [63:0] sext_ln1117_2_fu_586_p1;
wire  signed [63:0] sext_ln1117_3_fu_598_p1;
wire   [63:0] add_ln1117_5_fu_602_p2;
wire   [63:0] add_ln1117_6_fu_608_p2;
wire   [10:0] trunc_ln1117_2_fu_617_p1;
wire   [12:0] trunc_ln1117_fu_613_p1;
wire   [12:0] p_shl8_cast_fu_621_p3;
wire   [12:0] add_ln1117_7_fu_629_p2;
wire   [11:0] zext_ln1117_9_fu_573_p1;
wire  signed [25:0] grp_fu_830_p3;
wire   [6:0] tmp_4_fu_690_p3;
wire   [4:0] tmp_5_fu_702_p3;
wire   [7:0] zext_ln1265_3_fu_710_p1;
wire   [7:0] zext_ln1265_2_fu_698_p1;
wire   [7:0] zext_ln1265_5_fu_732_p1;
wire   [0:0] trunc_ln106_fu_753_p1;
wire   [3:0] add_ln106_fu_777_p2;
wire   [11:0] tmp_14_fu_787_p3;
wire   [11:0] tmp_15_fu_799_p3;
wire  signed [15:0] sext_ln1265_fu_811_p1;
wire   [25:0] grp_fu_830_p2;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

conv2_K2_W_V #(
    .DataWidth( 9 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
K2_W_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(K2_W_V_address0),
    .ce0(K2_W_V_ce0),
    .q0(K2_W_V_q0)
);

conv2_K2_B_V #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
K2_B_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(K2_B_V_address0),
    .ce0(K2_B_V_ce0),
    .q0(K2_B_V_q0)
);

lenet_mac_muladd_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 26 ))
lenet_mac_muladd_dEe_U11(
    .din0(K2_W_V_q0),
    .din1(P1_out_V_q0),
    .din2(grp_fu_830_p2),
    .dout(grp_fu_830_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        c_0_reg_231 <= c_reg_935;
    end else if (((icmp_ln85_fu_498_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        c_0_reg_231 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_286_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_0_reg_242 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln100_fu_720_p2 == 1'd1))) begin
        i1_0_reg_242 <= i_5_reg_968;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_328_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_163 <= i_reg_842;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_163 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_678_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        j2_0_reg_253 <= 4'd0;
    end else if (((icmp_ln102_fu_741_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        j2_0_reg_253 <= j_1_reg_981;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln79_fu_353_p2 == 1'd1))) begin
        j_0_reg_175 <= j_reg_855;
    end else if (((icmp_ln75_fu_286_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_175 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln102_fu_741_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        k4_0_reg_275 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        k4_0_reg_275 <= k_reg_1008;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln83_fu_474_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        k_0_reg_220 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln87_fu_561_p2 == 1'd1))) begin
        k_0_reg_220 <= k_1_reg_917;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_fu_765_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        set3_0_reg_264 <= set_reg_995;
    end else if (((icmp_ln100_fu_720_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        set3_0_reg_264 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln85_fu_498_p2 == 1'd1))) begin
        set_0_reg_209 <= set_1_reg_904;
    end else if (((icmp_ln81_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        set_0_reg_209 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln81_fu_413_p2 == 1'd1))) begin
        x_0_reg_187 <= x_reg_868;
    end else if (((icmp_ln77_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        x_0_reg_187 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_fu_353_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        y_0_reg_198 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln83_fu_474_p2 == 1'd1))) begin
        y_0_reg_198 <= y_reg_886;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_561_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        add_ln1116_3_reg_945 <= add_ln1116_3_fu_640_p2;
        add_ln1117_8_reg_940 <= add_ln1117_8_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_678_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        add_ln1265_1_reg_973[7 : 1] <= add_ln1265_1_fu_714_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln1265_2_reg_860 <= add_ln1265_2_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_720_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        add_ln1265_3_reg_986 <= add_ln1265_3_fu_736_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_286_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln1265_reg_847[7 : 1] <= add_ln1265_fu_322_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c_reg_935 <= c_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_5_reg_968 <= i_5_fu_684_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_842 <= i_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_1_reg_981 <= j_1_fu_726_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_855 <= j_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        k_1_reg_917 <= k_1_fu_504_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        k_reg_1008 <= k_fu_771_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_fu_765_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        out_V_addr_3_reg_1023 <= zext_ln1495_fu_806_p1;
        out_V_addr_reg_1013 <= zext_ln1265_6_fu_794_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_498_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        out_V_addr_4_reg_927 <= zext_ln1265_7_fu_556_p1;
        sext_ln1117_reg_922[8 : 1] <= sext_ln1117_fu_545_p1[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        set_1_reg_904 <= set_1_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        set_reg_995 <= set_fu_747_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_fu_353_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sext_ln1116_reg_873[9 : 1] <= sext_ln1116_fu_401_p1[9 : 1];
        zext_ln89_reg_878[2 : 0] <= zext_ln89_fu_405_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln83_fu_474_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        shl_ln3_reg_909[3] <= shl_ln3_fu_490_p3[3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln102_fu_741_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        shl_ln_reg_1000[3] <= shl_ln_fu_757_p3[3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln81_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        sub_ln1116_1_reg_891[11 : 1] <= sub_ln1116_1_fu_464_p2[11 : 1];
        zext_ln83_reg_896[2 : 0] <= zext_ln83_fu_470_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        trunc_ln_reg_960 <= {{grp_fu_830_p3[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_reg_868 <= x_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y_reg_886 <= y_fu_419_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        K2_B_V_ce0 = 1'b1;
    end else begin
        K2_B_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        K2_W_V_ce0 = 1'b1;
    end else begin
        K2_W_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        P1_out_V_ce0 = 1'b1;
    end else begin
        P1_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state12) & (icmp_ln98_fu_678_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln98_fu_678_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18))) begin
        out_V_address0 = out_V_addr_3_reg_1023;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        out_V_address0 = out_V_addr_reg_1013;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        out_V_address0 = zext_ln1265_6_fu_794_p1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        out_V_address0 = out_V_addr_4_reg_927;
    end else begin
        out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state9))) begin
        out_V_ce0 = 1'b1;
    end else begin
        out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        out_V_d0 = 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        out_V_d0 = add_ln703_fu_815_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        out_V_d0 = trunc_ln_reg_960;
    end else begin
        out_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11) | ((tmp_16_fu_822_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state18)))) begin
        out_V_we0 = 1'b1;
    end else begin
        out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln75_fu_286_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln77_fu_328_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln79_fu_353_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln81_fu_413_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln83_fu_474_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln85_fu_498_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln87_fu_561_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln98_fu_678_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln100_fu_720_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln102_fu_741_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln104_fu_765_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign K2_B_V_address0 = zext_ln106_fu_782_p1;

assign K2_W_V_address0 = zext_ln1117_11_fu_645_p1;

assign P1_out_V_address0 = zext_ln1116_7_fu_649_p1;

assign add_ln106_fu_777_p2 = (shl_ln_reg_1000 + k4_0_reg_275);

assign add_ln1116_3_fu_640_p2 = (sub_ln1116_1_reg_891 + zext_ln1117_9_fu_573_p1);

assign add_ln1116_fu_435_p2 = ($signed(sext_ln1116_reg_873) + $signed(zext_ln1116_6_fu_431_p1));

assign add_ln1117_5_fu_602_p2 = ($signed(sext_ln1117_2_fu_586_p1) + $signed(sext_ln1117_3_fu_598_p1));

assign add_ln1117_6_fu_608_p2 = (add_ln1117_5_fu_602_p2 + zext_ln89_reg_878);

assign add_ln1117_7_fu_629_p2 = (trunc_ln1117_fu_613_p1 + p_shl8_cast_fu_621_p3);

assign add_ln1117_8_fu_635_p2 = (add_ln1117_7_fu_629_p2 + zext_ln83_reg_896);

assign add_ln1117_fu_581_p2 = ($signed(sext_ln1117_reg_922) + $signed(zext_ln1117_10_fu_577_p1));

assign add_ln1265_1_fu_714_p2 = (zext_ln1265_3_fu_710_p1 + zext_ln1265_2_fu_698_p1);

assign add_ln1265_2_fu_344_p2 = (zext_ln1265_4_fu_340_p1 + add_ln1265_reg_847);

assign add_ln1265_3_fu_736_p2 = (zext_ln1265_5_fu_732_p1 + add_ln1265_1_reg_973);

assign add_ln1265_fu_322_p2 = (zext_ln1265_1_fu_318_p1 + zext_ln1265_fu_306_p1);

assign add_ln703_fu_815_p2 = ($signed(out_V_q0) + $signed(sext_ln1265_fu_811_p1));

assign add_ln89_1_fu_425_p2 = (zext_ln81_fu_409_p1 + j_0_reg_175);

assign add_ln89_2_fu_510_p2 = (k_0_reg_220 + shl_ln3_reg_909);

assign add_ln89_fu_365_p2 = (zext_ln79_fu_349_p1 + i_0_reg_163);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_fu_567_p2 = (c_0_reg_231 + 3'd1);

assign grp_fu_830_p2 = {{out_V_q0}, {10'd0}};

assign i_5_fu_684_p2 = (i1_0_reg_242 + 4'd1);

assign i_fu_292_p2 = (i_0_reg_163 + 4'd1);

assign icmp_ln100_fu_720_p2 = ((j2_0_reg_253 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_741_p2 = ((set3_0_reg_264 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln104_fu_765_p2 = ((k4_0_reg_275 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_286_p2 = ((i_0_reg_163 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_328_p2 = ((j_0_reg_175 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_353_p2 = ((x_0_reg_187 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_413_p2 = ((y_0_reg_198 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_474_p2 = ((set_0_reg_209 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_498_p2 = ((k_0_reg_220 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_561_p2 = ((c_0_reg_231 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_678_p2 = ((i1_0_reg_242 == 4'd10) ? 1'b1 : 1'b0);

assign j_1_fu_726_p2 = (j2_0_reg_253 + 4'd1);

assign j_fu_334_p2 = (j_0_reg_175 + 4'd1);

assign k_1_fu_504_p2 = (k_0_reg_220 + 4'd1);

assign k_fu_771_p2 = (k4_0_reg_275 + 4'd1);

assign p_shl4_cast_fu_444_p3 = {{trunc_ln1116_fu_440_p1}, {3'd0}};

assign p_shl8_cast_fu_621_p3 = {{trunc_ln1117_2_fu_617_p1}, {2'd0}};

assign set_1_fu_480_p2 = (set_0_reg_209 + 2'd1);

assign set_fu_747_p2 = (set3_0_reg_264 + 2'd1);

assign sext_ln1116_1_fu_460_p1 = $signed(tmp_13_fu_452_p3);

assign sext_ln1116_fu_401_p1 = $signed(sub_ln1116_fu_395_p2);

assign sext_ln1117_2_fu_586_p1 = add_ln1117_fu_581_p2;

assign sext_ln1117_3_fu_598_p1 = $signed(tmp_18_fu_590_p3);

assign sext_ln1117_fu_545_p1 = $signed(sub_ln1117_fu_539_p2);

assign sext_ln1265_fu_811_p1 = $signed(K2_B_V_q0);

assign shl_ln3_fu_490_p3 = {{trunc_ln89_fu_486_p1}, {3'd0}};

assign shl_ln_fu_757_p3 = {{trunc_ln106_fu_753_p1}, {3'd0}};

assign sub_ln1116_1_fu_464_p2 = ($signed(p_shl4_cast_fu_444_p3) - $signed(sext_ln1116_1_fu_460_p1));

assign sub_ln1116_fu_395_p2 = (zext_ln1116_fu_379_p1 - zext_ln1116_5_fu_391_p1);

assign sub_ln1117_fu_539_p2 = (zext_ln1117_fu_523_p1 - zext_ln1117_8_fu_535_p1);

assign tmp_10_fu_515_p3 = {{add_ln89_2_fu_510_p2}, {3'd0}};

assign tmp_11_fu_527_p3 = {{add_ln89_2_fu_510_p2}, {1'd0}};

assign tmp_13_fu_452_p3 = {{add_ln1116_fu_435_p2}, {1'd0}};

assign tmp_14_fu_787_p3 = {{add_ln1265_3_reg_986}, {add_ln106_fu_777_p2}};

assign tmp_15_fu_799_p3 = {{add_ln1265_3_reg_986}, {k4_0_reg_275}};

assign tmp_16_fu_822_p3 = out_V_q0[32'd15];

assign tmp_17_fu_549_p3 = {{add_ln1265_2_reg_860}, {add_ln89_2_fu_510_p2}};

assign tmp_18_fu_590_p3 = {{add_ln1117_fu_581_p2}, {2'd0}};

assign tmp_3_fu_310_p3 = {{i_0_reg_163}, {1'd0}};

assign tmp_4_fu_690_p3 = {{i1_0_reg_242}, {3'd0}};

assign tmp_5_fu_702_p3 = {{i1_0_reg_242}, {1'd0}};

assign tmp_6_fu_371_p3 = {{add_ln89_fu_365_p2}, {4'd0}};

assign tmp_9_fu_383_p3 = {{add_ln89_fu_365_p2}, {1'd0}};

assign tmp_s_fu_298_p3 = {{i_0_reg_163}, {3'd0}};

assign trunc_ln106_fu_753_p1 = set3_0_reg_264[0:0];

assign trunc_ln1116_fu_440_p1 = add_ln1116_fu_435_p2[8:0];

assign trunc_ln1117_2_fu_617_p1 = add_ln1117_6_fu_608_p2[10:0];

assign trunc_ln1117_fu_613_p1 = add_ln1117_6_fu_608_p2[12:0];

assign trunc_ln89_fu_486_p1 = set_0_reg_209[0:0];

assign x_fu_359_p2 = (x_0_reg_187 + 3'd1);

assign y_fu_419_p2 = (y_0_reg_198 + 3'd1);

assign zext_ln106_fu_782_p1 = add_ln106_fu_777_p2;

assign zext_ln1116_5_fu_391_p1 = tmp_9_fu_383_p3;

assign zext_ln1116_6_fu_431_p1 = add_ln89_1_fu_425_p2;

assign zext_ln1116_7_fu_649_p1 = add_ln1116_3_reg_945;

assign zext_ln1116_fu_379_p1 = tmp_6_fu_371_p3;

assign zext_ln1117_10_fu_577_p1 = c_0_reg_231;

assign zext_ln1117_11_fu_645_p1 = add_ln1117_8_reg_940;

assign zext_ln1117_8_fu_535_p1 = tmp_11_fu_527_p3;

assign zext_ln1117_9_fu_573_p1 = c_0_reg_231;

assign zext_ln1117_fu_523_p1 = tmp_10_fu_515_p3;

assign zext_ln1265_1_fu_318_p1 = tmp_3_fu_310_p3;

assign zext_ln1265_2_fu_698_p1 = tmp_4_fu_690_p3;

assign zext_ln1265_3_fu_710_p1 = tmp_5_fu_702_p3;

assign zext_ln1265_4_fu_340_p1 = j_0_reg_175;

assign zext_ln1265_5_fu_732_p1 = j2_0_reg_253;

assign zext_ln1265_6_fu_794_p1 = tmp_14_fu_787_p3;

assign zext_ln1265_7_fu_556_p1 = tmp_17_fu_549_p3;

assign zext_ln1265_fu_306_p1 = tmp_s_fu_298_p3;

assign zext_ln1495_fu_806_p1 = tmp_15_fu_799_p3;

assign zext_ln79_fu_349_p1 = x_0_reg_187;

assign zext_ln81_fu_409_p1 = y_0_reg_198;

assign zext_ln83_fu_470_p1 = y_0_reg_198;

assign zext_ln89_fu_405_p1 = x_0_reg_187;

always @ (posedge ap_clk) begin
    add_ln1265_reg_847[0] <= 1'b0;
    sext_ln1116_reg_873[0] <= 1'b0;
    zext_ln89_reg_878[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    sub_ln1116_1_reg_891[0] <= 1'b0;
    zext_ln83_reg_896[12:3] <= 10'b0000000000;
    shl_ln3_reg_909[2:0] <= 3'b000;
    sext_ln1117_reg_922[0] <= 1'b0;
    add_ln1265_1_reg_973[0] <= 1'b0;
    shl_ln_reg_1000[2:0] <= 3'b000;
end

endmodule //conv2
