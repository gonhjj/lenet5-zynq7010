// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pool2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_V_address0,
        out_V_ce0,
        out_V_we0,
        out_V_d0,
        C2_out_V_address0,
        C2_out_V_ce0,
        C2_out_V_q0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] out_V_address0;
output   out_V_ce0;
output   out_V_we0;
output  [15:0] out_V_d0;
output  [10:0] C2_out_V_address0;
output   C2_out_V_ce0;
input  [15:0] C2_out_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_V_ce0;
reg out_V_we0;
reg C2_out_V_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_fu_169_p2;
reg   [2:0] i_reg_388;
wire    ap_CS_fsm_state2;
wire   [3:0] shl_ln_fu_175_p3;
reg   [3:0] shl_ln_reg_393;
wire   [0:0] icmp_ln119_fu_163_p2;
wire   [5:0] add_ln203_fu_199_p2;
reg   [5:0] add_ln203_reg_398;
wire   [2:0] j_fu_211_p2;
reg   [2:0] j_reg_406;
wire    ap_CS_fsm_state3;
wire   [3:0] shl_ln130_1_fu_217_p3;
reg   [3:0] shl_ln130_1_reg_411;
wire   [0:0] icmp_ln121_fu_205_p2;
wire   [9:0] tmp_3_cast_fu_234_p3;
reg   [9:0] tmp_3_cast_reg_416;
wire   [4:0] k_fu_248_p2;
reg   [4:0] k_reg_424;
wire    ap_CS_fsm_state4;
wire   [11:0] zext_ln203_3_fu_254_p1;
reg   [11:0] zext_ln203_3_reg_429;
wire   [0:0] icmp_ln123_fu_242_p2;
reg   [8:0] out_V_addr_reg_434;
wire   [1:0] x_fu_282_p2;
reg   [1:0] x_reg_442;
wire    ap_CS_fsm_state5;
wire   [7:0] add_ln1494_fu_317_p2;
reg   [7:0] add_ln1494_reg_447;
wire   [0:0] icmp_ln126_fu_276_p2;
wire   [1:0] y_fu_333_p2;
reg   [1:0] y_reg_455;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln128_fu_327_p2;
wire   [15:0] select_ln130_fu_377_p3;
wire    ap_CS_fsm_state7;
reg   [2:0] i_0_reg_83;
reg   [2:0] j_0_reg_94;
reg   [4:0] k_0_reg_105;
reg   [15:0] p_07_1_reg_116;
reg   [1:0] x_0_reg_129;
reg   [15:0] p_07_2_reg_140;
reg   [1:0] y_0_reg_152;
wire   [63:0] zext_ln203_5_fu_267_p1;
wire   [63:0] zext_ln1494_3_fu_366_p1;
wire   [4:0] tmp_1_fu_187_p3;
wire   [5:0] zext_ln203_fu_183_p1;
wire   [5:0] zext_ln203_1_fu_195_p1;
wire   [5:0] zext_ln203_2_fu_225_p1;
wire   [5:0] add_ln203_1_fu_229_p2;
wire   [9:0] zext_ln203_4_fu_258_p1;
wire   [9:0] add_ln203_2_fu_262_p2;
wire   [3:0] zext_ln126_fu_272_p1;
wire   [3:0] add_ln130_fu_288_p2;
wire   [6:0] tmp_4_fu_293_p3;
wire   [4:0] tmp_5_fu_305_p3;
wire   [7:0] zext_ln1494_1_fu_313_p1;
wire   [7:0] zext_ln1494_fu_301_p1;
wire   [3:0] zext_ln128_fu_323_p1;
wire   [3:0] add_ln130_1_fu_339_p2;
wire   [7:0] zext_ln1494_2_fu_344_p1;
wire   [7:0] add_ln1494_1_fu_348_p2;
wire   [11:0] tmp_7_cast_fu_353_p3;
wire   [11:0] add_ln1494_2_fu_361_p2;
wire   [0:0] icmp_ln1494_fu_371_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_83 <= i_reg_388;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_83 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_242_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_94 <= j_reg_406;
    end else if (((icmp_ln119_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_94 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_105 <= 5'd0;
    end else if (((icmp_ln126_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        k_0_reg_105 <= k_reg_424;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln128_fu_327_p2 == 1'd1))) begin
        p_07_1_reg_116 <= p_07_2_reg_140;
    end else if (((icmp_ln123_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_07_1_reg_116 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln126_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_07_2_reg_140 <= p_07_1_reg_116;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_07_2_reg_140 <= select_ln130_fu_377_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln128_fu_327_p2 == 1'd1))) begin
        x_0_reg_129 <= x_reg_442;
    end else if (((icmp_ln123_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        x_0_reg_129 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln126_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        y_0_reg_152 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        y_0_reg_152 <= y_reg_455;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln126_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln1494_reg_447[7 : 1] <= add_ln1494_fu_317_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln119_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln203_reg_398 <= add_ln203_fu_199_p2;
        shl_ln_reg_393[3 : 1] <= shl_ln_fu_175_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_388 <= i_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_406 <= j_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_424 <= k_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        out_V_addr_reg_434 <= zext_ln203_5_fu_267_p1;
        zext_ln203_3_reg_429[4 : 0] <= zext_ln203_3_fu_254_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln130_1_reg_411[3 : 1] <= shl_ln130_1_fu_217_p3[3 : 1];
        tmp_3_cast_reg_416[9 : 4] <= tmp_3_cast_fu_234_p3[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        x_reg_442 <= x_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_reg_455 <= y_fu_333_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C2_out_V_ce0 = 1'b1;
    end else begin
        C2_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln119_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln119_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_V_ce0 = 1'b1;
    end else begin
        out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln126_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        out_V_we0 = 1'b1;
    end else begin
        out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln119_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln121_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln123_fu_242_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln126_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln128_fu_327_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C2_out_V_address0 = zext_ln1494_3_fu_366_p1;

assign add_ln130_1_fu_339_p2 = (shl_ln130_1_reg_411 + zext_ln128_fu_323_p1);

assign add_ln130_fu_288_p2 = (zext_ln126_fu_272_p1 + shl_ln_reg_393);

assign add_ln1494_1_fu_348_p2 = (zext_ln1494_2_fu_344_p1 + add_ln1494_reg_447);

assign add_ln1494_2_fu_361_p2 = (zext_ln203_3_reg_429 + tmp_7_cast_fu_353_p3);

assign add_ln1494_fu_317_p2 = (zext_ln1494_1_fu_313_p1 + zext_ln1494_fu_301_p1);

assign add_ln203_1_fu_229_p2 = (zext_ln203_2_fu_225_p1 + add_ln203_reg_398);

assign add_ln203_2_fu_262_p2 = (tmp_3_cast_reg_416 + zext_ln203_4_fu_258_p1);

assign add_ln203_fu_199_p2 = (zext_ln203_fu_183_p1 + zext_ln203_1_fu_195_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign i_fu_169_p2 = (i_0_reg_83 + 3'd1);

assign icmp_ln119_fu_163_p2 = ((i_0_reg_83 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_205_p2 = ((j_0_reg_94 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln123_fu_242_p2 = ((k_0_reg_105 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln126_fu_276_p2 = ((x_0_reg_129 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln128_fu_327_p2 = ((y_0_reg_152 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_371_p2 = (($signed(C2_out_V_q0) > $signed(p_07_2_reg_140)) ? 1'b1 : 1'b0);

assign j_fu_211_p2 = (j_0_reg_94 + 3'd1);

assign k_fu_248_p2 = (k_0_reg_105 + 5'd1);

assign out_V_address0 = out_V_addr_reg_434;

assign out_V_d0 = p_07_1_reg_116;

assign select_ln130_fu_377_p3 = ((icmp_ln1494_fu_371_p2[0:0] === 1'b1) ? C2_out_V_q0 : p_07_2_reg_140);

assign shl_ln130_1_fu_217_p3 = {{j_0_reg_94}, {1'd0}};

assign shl_ln_fu_175_p3 = {{i_0_reg_83}, {1'd0}};

assign tmp_1_fu_187_p3 = {{i_0_reg_83}, {2'd0}};

assign tmp_3_cast_fu_234_p3 = {{add_ln203_1_fu_229_p2}, {4'd0}};

assign tmp_4_fu_293_p3 = {{add_ln130_fu_288_p2}, {3'd0}};

assign tmp_5_fu_305_p3 = {{add_ln130_fu_288_p2}, {1'd0}};

assign tmp_7_cast_fu_353_p3 = {{add_ln1494_1_fu_348_p2}, {4'd0}};

assign x_fu_282_p2 = (x_0_reg_129 + 2'd1);

assign y_fu_333_p2 = (y_0_reg_152 + 2'd1);

assign zext_ln126_fu_272_p1 = x_0_reg_129;

assign zext_ln128_fu_323_p1 = y_0_reg_152;

assign zext_ln1494_1_fu_313_p1 = tmp_5_fu_305_p3;

assign zext_ln1494_2_fu_344_p1 = add_ln130_1_fu_339_p2;

assign zext_ln1494_3_fu_366_p1 = add_ln1494_2_fu_361_p2;

assign zext_ln1494_fu_301_p1 = tmp_4_fu_293_p3;

assign zext_ln203_1_fu_195_p1 = tmp_1_fu_187_p3;

assign zext_ln203_2_fu_225_p1 = j_0_reg_94;

assign zext_ln203_3_fu_254_p1 = k_0_reg_105;

assign zext_ln203_4_fu_258_p1 = k_0_reg_105;

assign zext_ln203_5_fu_267_p1 = add_ln203_2_fu_262_p2;

assign zext_ln203_fu_183_p1 = i_0_reg_83;

always @ (posedge ap_clk) begin
    shl_ln_reg_393[0] <= 1'b0;
    shl_ln130_1_reg_411[0] <= 1'b0;
    tmp_3_cast_reg_416[3:0] <= 4'b0000;
    zext_ln203_3_reg_429[11:5] <= 7'b0000000;
    add_ln1494_reg_447[0] <= 1'b0;
end

endmodule //pool2
