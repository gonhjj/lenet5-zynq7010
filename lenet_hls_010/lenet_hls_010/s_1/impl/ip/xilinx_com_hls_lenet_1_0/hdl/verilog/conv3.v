// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_0_0_V_address0,
        out_0_0_V_ce0,
        out_0_0_V_we0,
        out_0_0_V_d0,
        out_0_0_V_q0,
        P2_out_V_address0,
        P2_out_V_ce0,
        P2_out_V_q0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] out_0_0_V_address0;
output   out_0_0_V_ce0;
output   out_0_0_V_we0;
output  [15:0] out_0_0_V_d0;
input  [15:0] out_0_0_V_q0;
output  [8:0] P2_out_V_address0;
output   P2_out_V_ce0;
input  [15:0] P2_out_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] out_0_0_V_address0;
reg out_0_0_V_ce0;
reg out_0_0_V_we0;
reg[15:0] out_0_0_V_d0;
reg P2_out_V_ce0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] K3_W_V_address0;
reg    K3_W_V_ce0;
wire  signed [7:0] K3_W_V_q0;
wire   [6:0] K3_B_V_address0;
reg    K3_B_V_ce0;
wire   [7:0] K3_B_V_q0;
wire   [2:0] add_ln148_fu_236_p2;
reg   [2:0] add_ln148_reg_559;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln158_fu_242_p1;
reg   [63:0] zext_ln158_reg_564;
wire   [0:0] icmp_ln148_fu_230_p2;
wire   [5:0] add_ln1116_fu_262_p2;
reg   [5:0] add_ln1116_reg_569;
wire   [2:0] add_ln150_fu_274_p2;
reg   [2:0] add_ln150_reg_577;
wire    ap_CS_fsm_state3;
wire   [16:0] zext_ln1116_2_fu_280_p1;
reg   [16:0] zext_ln1116_2_reg_582;
wire   [0:0] icmp_ln150_fu_268_p2;
wire   [9:0] tmp_19_cast_fu_293_p3;
reg   [9:0] tmp_19_cast_reg_587;
wire   [3:0] add_ln152_fu_307_p2;
reg   [3:0] add_ln152_reg_595;
wire    ap_CS_fsm_state4;
wire   [6:0] shl_ln1_fu_313_p3;
reg   [6:0] shl_ln1_reg_600;
wire   [0:0] icmp_ln152_fu_301_p2;
wire   [3:0] add_ln154_fu_331_p2;
reg   [3:0] add_ln154_reg_608;
wire    ap_CS_fsm_state5;
wire   [11:0] zext_ln1265_fu_355_p1;
reg   [11:0] zext_ln1265_reg_613;
wire   [0:0] icmp_ln154_fu_325_p2;
reg   [6:0] out_0_0_V_addr_2_reg_618;
wire   [4:0] add_ln156_fu_365_p2;
reg   [4:0] add_ln156_reg_626;
wire    ap_CS_fsm_state6;
wire   [16:0] add_ln1117_4_fu_433_p2;
reg   [16:0] add_ln1117_4_reg_631;
wire   [0:0] icmp_ln156_fu_359_p2;
wire   [9:0] add_ln1116_2_fu_438_p2;
reg   [9:0] add_ln1116_2_reg_636;
wire    ap_CS_fsm_state7;
reg   [15:0] trunc_ln_reg_651;
wire    ap_CS_fsm_state8;
wire   [3:0] add_ln171_fu_482_p2;
reg   [3:0] add_ln171_reg_659;
wire    ap_CS_fsm_state10;
wire   [6:0] shl_ln_fu_488_p3;
reg   [6:0] shl_ln_reg_664;
wire   [0:0] icmp_ln171_fu_476_p2;
wire   [3:0] add_ln173_fu_506_p2;
reg   [3:0] add_ln173_reg_672;
wire    ap_CS_fsm_state11;
reg   [6:0] out_0_0_V_addr_reg_677;
wire   [0:0] icmp_ln173_fu_500_p2;
reg   [6:0] out_0_0_V_addr_1_reg_687;
wire    ap_CS_fsm_state13;
reg   [2:0] x_0_0_0_reg_152;
reg   [2:0] y_0_0_0_reg_163;
reg   [3:0] set_0_0_0_reg_174;
reg   [3:0] k_0_0_0_reg_185;
reg   [4:0] c_0_0_0_reg_196;
wire    ap_CS_fsm_state9;
reg   [3:0] set3_0_0_0_reg_207;
reg   [3:0] k4_0_0_0_reg_218;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln158_1_fu_342_p1;
wire   [63:0] zext_ln1117_7_fu_443_p1;
wire   [63:0] zext_ln1116_4_fu_447_p1;
wire   [63:0] zext_ln175_fu_517_p1;
wire   [63:0] zext_ln176_fu_534_p1;
wire    ap_CS_fsm_state12;
wire   [15:0] add_ln703_fu_527_p2;
wire   [0:0] tmp_11_fu_539_p3;
wire   [4:0] tmp_s_fu_250_p3;
wire   [5:0] zext_ln1116_fu_246_p1;
wire   [5:0] zext_ln1116_1_fu_258_p1;
wire   [5:0] zext_ln1116_3_fu_284_p1;
wire   [5:0] add_ln1116_1_fu_288_p2;
wire   [6:0] zext_ln154_fu_321_p1;
wire   [6:0] add_ln158_fu_337_p2;
wire   [10:0] tmp_2_fu_347_p3;
wire   [11:0] zext_ln1117_4_fu_375_p1;
wire   [11:0] add_ln1117_fu_379_p2;
wire   [13:0] tmp_12_fu_388_p3;
wire   [63:0] zext_ln1117_5_fu_384_p1;
wire   [63:0] zext_ln1117_6_fu_396_p1;
wire   [63:0] add_ln1117_1_fu_400_p2;
wire   [63:0] add_ln1117_2_fu_406_p2;
wire   [14:0] trunc_ln1117_1_fu_415_p1;
wire   [16:0] trunc_ln1117_fu_411_p1;
wire   [16:0] p_shl1_cast_fu_419_p3;
wire   [16:0] add_ln1117_3_fu_427_p2;
wire   [9:0] zext_ln1117_fu_371_p1;
wire  signed [25:0] grp_fu_547_p3;
wire   [6:0] zext_ln173_fu_496_p1;
wire   [6:0] add_ln175_fu_512_p2;
wire  signed [15:0] sext_ln1265_fu_523_p1;
wire   [25:0] grp_fu_547_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

conv3_K3_W_V #(
    .DataWidth( 8 ),
    .AddressRange( 48000 ),
    .AddressWidth( 16 ))
K3_W_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(K3_W_V_address0),
    .ce0(K3_W_V_ce0),
    .q0(K3_W_V_q0)
);

conv3_K3_B_V #(
    .DataWidth( 8 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
K3_B_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(K3_B_V_address0),
    .ce0(K3_B_V_ce0),
    .q0(K3_B_V_q0)
);

lenet_mac_muladd_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 26 ))
lenet_mac_muladd_eOg_U19(
    .din0(K3_W_V_q0),
    .din1(P2_out_V_q0),
    .din2(grp_fu_547_p2),
    .dout(grp_fu_547_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        c_0_0_0_reg_196 <= add_ln156_reg_626;
    end else if (((icmp_ln154_fu_325_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        c_0_0_0_reg_196 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln171_fu_476_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        k4_0_0_0_reg_218 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        k4_0_0_0_reg_218 <= add_ln173_reg_672;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln156_fu_359_p2 == 1'd1))) begin
        k_0_0_0_reg_185 <= add_ln154_reg_608;
    end else if (((icmp_ln152_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_0_0_0_reg_185 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln173_fu_500_p2 == 1'd1))) begin
        set3_0_0_0_reg_207 <= add_ln171_reg_659;
    end else if (((icmp_ln148_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        set3_0_0_0_reg_207 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln150_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        set_0_0_0_reg_174 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln154_fu_325_p2 == 1'd1))) begin
        set_0_0_0_reg_174 <= add_ln152_reg_595;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln150_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        x_0_0_0_reg_152 <= add_ln148_reg_559;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_0_0_0_reg_152 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln152_fu_301_p2 == 1'd1))) begin
        y_0_0_0_reg_163 <= add_ln150_reg_577;
    end else if (((icmp_ln148_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_0_0_0_reg_163 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln156_fu_359_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln1116_2_reg_636 <= add_ln1116_2_fu_438_p2;
        add_ln1117_4_reg_631 <= add_ln1117_4_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln148_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln1116_reg_569 <= add_ln1116_fu_262_p2;
        zext_ln158_reg_564[2 : 0] <= zext_ln158_fu_242_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln148_reg_559 <= add_ln148_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln150_reg_577 <= add_ln150_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln152_reg_595 <= add_ln152_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln154_reg_608 <= add_ln154_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln156_reg_626 <= add_ln156_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln171_reg_659 <= add_ln171_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln173_reg_672 <= add_ln173_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        out_0_0_V_addr_1_reg_687[3 : 0] <= zext_ln176_fu_534_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln154_fu_325_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        out_0_0_V_addr_2_reg_618 <= zext_ln158_1_fu_342_p1;
        zext_ln1265_reg_613[10 : 4] <= zext_ln1265_fu_355_p1[10 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln173_fu_500_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        out_0_0_V_addr_reg_677 <= zext_ln175_fu_517_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln152_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shl_ln1_reg_600[6 : 3] <= shl_ln1_fu_313_p3[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln171_fu_476_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        shl_ln_reg_664[6 : 3] <= shl_ln_fu_488_p3[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln150_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_19_cast_reg_587[9 : 4] <= tmp_19_cast_fu_293_p3[9 : 4];
        zext_ln1116_2_reg_582[2 : 0] <= zext_ln1116_2_fu_280_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        trunc_ln_reg_651 <= {{grp_fu_547_p3[25:10]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        K3_B_V_ce0 = 1'b1;
    end else begin
        K3_B_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        K3_W_V_ce0 = 1'b1;
    end else begin
        K3_W_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        P2_out_V_ce0 = 1'b1;
    end else begin
        P2_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln171_fu_476_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln171_fu_476_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        out_0_0_V_address0 = out_0_0_V_addr_1_reg_687;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        out_0_0_V_address0 = zext_ln176_fu_534_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        out_0_0_V_address0 = out_0_0_V_addr_reg_677;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        out_0_0_V_address0 = zext_ln175_fu_517_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        out_0_0_V_address0 = out_0_0_V_addr_2_reg_618;
    end else begin
        out_0_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        out_0_0_V_ce0 = 1'b1;
    end else begin
        out_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        out_0_0_V_d0 = 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        out_0_0_V_d0 = add_ln703_fu_527_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        out_0_0_V_d0 = trunc_ln_reg_651;
    end else begin
        out_0_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state14) & (tmp_11_fu_539_p3 == 1'd1)))) begin
        out_0_0_V_we0 = 1'b1;
    end else begin
        out_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln148_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln150_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln152_fu_301_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln154_fu_325_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln156_fu_359_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln171_fu_476_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln173_fu_500_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign K3_B_V_address0 = zext_ln175_fu_517_p1;

assign K3_W_V_address0 = zext_ln1117_7_fu_443_p1;

assign P2_out_V_address0 = zext_ln1116_4_fu_447_p1;

assign add_ln1116_1_fu_288_p2 = (zext_ln1116_3_fu_284_p1 + add_ln1116_reg_569);

assign add_ln1116_2_fu_438_p2 = (tmp_19_cast_reg_587 + zext_ln1117_fu_371_p1);

assign add_ln1116_fu_262_p2 = (zext_ln1116_fu_246_p1 + zext_ln1116_1_fu_258_p1);

assign add_ln1117_1_fu_400_p2 = (zext_ln1117_5_fu_384_p1 + zext_ln1117_6_fu_396_p1);

assign add_ln1117_2_fu_406_p2 = (add_ln1117_1_fu_400_p2 + zext_ln158_reg_564);

assign add_ln1117_3_fu_427_p2 = (trunc_ln1117_fu_411_p1 + p_shl1_cast_fu_419_p3);

assign add_ln1117_4_fu_433_p2 = (add_ln1117_3_fu_427_p2 + zext_ln1116_2_reg_582);

assign add_ln1117_fu_379_p2 = (zext_ln1265_reg_613 + zext_ln1117_4_fu_375_p1);

assign add_ln148_fu_236_p2 = (x_0_0_0_reg_152 + 3'd1);

assign add_ln150_fu_274_p2 = (y_0_0_0_reg_163 + 3'd1);

assign add_ln152_fu_307_p2 = (set_0_0_0_reg_174 + 4'd1);

assign add_ln154_fu_331_p2 = (k_0_0_0_reg_185 + 4'd1);

assign add_ln156_fu_365_p2 = (c_0_0_0_reg_196 + 5'd1);

assign add_ln158_fu_337_p2 = (shl_ln1_reg_600 + zext_ln154_fu_321_p1);

assign add_ln171_fu_482_p2 = (set3_0_0_0_reg_207 + 4'd1);

assign add_ln173_fu_506_p2 = (k4_0_0_0_reg_218 + 4'd1);

assign add_ln175_fu_512_p2 = (shl_ln_reg_664 + zext_ln173_fu_496_p1);

assign add_ln703_fu_527_p2 = ($signed(out_0_0_V_q0) + $signed(sext_ln1265_fu_523_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_547_p2 = {{out_0_0_V_q0}, {10'd0}};

assign icmp_ln148_fu_230_p2 = ((x_0_0_0_reg_152 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln150_fu_268_p2 = ((y_0_0_0_reg_163 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln152_fu_301_p2 = ((set_0_0_0_reg_174 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln154_fu_325_p2 = ((k_0_0_0_reg_185 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln156_fu_359_p2 = ((c_0_0_0_reg_196 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln171_fu_476_p2 = ((set3_0_0_0_reg_207 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln173_fu_500_p2 = ((k4_0_0_0_reg_218 == 4'd8) ? 1'b1 : 1'b0);

assign p_shl1_cast_fu_419_p3 = {{trunc_ln1117_1_fu_415_p1}, {2'd0}};

assign sext_ln1265_fu_523_p1 = $signed(K3_B_V_q0);

assign shl_ln1_fu_313_p3 = {{set_0_0_0_reg_174}, {3'd0}};

assign shl_ln_fu_488_p3 = {{set3_0_0_0_reg_207}, {3'd0}};

assign tmp_11_fu_539_p3 = out_0_0_V_q0[32'd15];

assign tmp_12_fu_388_p3 = {{add_ln1117_fu_379_p2}, {2'd0}};

assign tmp_19_cast_fu_293_p3 = {{add_ln1116_1_fu_288_p2}, {4'd0}};

assign tmp_2_fu_347_p3 = {{add_ln158_fu_337_p2}, {4'd0}};

assign tmp_s_fu_250_p3 = {{x_0_0_0_reg_152}, {2'd0}};

assign trunc_ln1117_1_fu_415_p1 = add_ln1117_2_fu_406_p2[14:0];

assign trunc_ln1117_fu_411_p1 = add_ln1117_2_fu_406_p2[16:0];

assign zext_ln1116_1_fu_258_p1 = tmp_s_fu_250_p3;

assign zext_ln1116_2_fu_280_p1 = y_0_0_0_reg_163;

assign zext_ln1116_3_fu_284_p1 = y_0_0_0_reg_163;

assign zext_ln1116_4_fu_447_p1 = add_ln1116_2_reg_636;

assign zext_ln1116_fu_246_p1 = x_0_0_0_reg_152;

assign zext_ln1117_4_fu_375_p1 = c_0_0_0_reg_196;

assign zext_ln1117_5_fu_384_p1 = add_ln1117_fu_379_p2;

assign zext_ln1117_6_fu_396_p1 = tmp_12_fu_388_p3;

assign zext_ln1117_7_fu_443_p1 = add_ln1117_4_reg_631;

assign zext_ln1117_fu_371_p1 = c_0_0_0_reg_196;

assign zext_ln1265_fu_355_p1 = tmp_2_fu_347_p3;

assign zext_ln154_fu_321_p1 = k_0_0_0_reg_185;

assign zext_ln158_1_fu_342_p1 = add_ln158_fu_337_p2;

assign zext_ln158_fu_242_p1 = x_0_0_0_reg_152;

assign zext_ln173_fu_496_p1 = k4_0_0_0_reg_218;

assign zext_ln175_fu_517_p1 = add_ln175_fu_512_p2;

assign zext_ln176_fu_534_p1 = k4_0_0_0_reg_218;

always @ (posedge ap_clk) begin
    zext_ln158_reg_564[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln1116_2_reg_582[16:3] <= 14'b00000000000000;
    tmp_19_cast_reg_587[3:0] <= 4'b0000;
    shl_ln1_reg_600[2:0] <= 3'b000;
    zext_ln1265_reg_613[3:0] <= 4'b0000;
    zext_ln1265_reg_613[11] <= 1'b0;
    shl_ln_reg_664[2:0] <= 3'b000;
    out_0_0_V_addr_1_reg_687[6:4] <= 3'b000;
end

endmodule //conv3
