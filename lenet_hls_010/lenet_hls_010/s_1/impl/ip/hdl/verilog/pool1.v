// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pool1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_V_address0,
        out_V_ce0,
        out_V_we0,
        out_V_d0,
        C1_out_V_address0,
        C1_out_V_ce0,
        C1_out_V_q0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] out_V_address0;
output   out_V_ce0;
output   out_V_we0;
output  [15:0] out_V_d0;
output  [12:0] C1_out_V_address0;
output   C1_out_V_ce0;
input  [15:0] C1_out_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_V_ce0;
reg out_V_we0;
reg C1_out_V_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_fu_175_p2;
reg   [3:0] i_reg_446;
wire    ap_CS_fsm_state2;
wire   [4:0] shl_ln_fu_181_p3;
reg   [4:0] shl_ln_reg_451;
wire   [0:0] icmp_ln50_fu_169_p2;
wire  signed [9:0] sext_ln203_fu_211_p1;
reg  signed [9:0] sext_ln203_reg_456;
wire   [3:0] j_fu_221_p2;
reg   [3:0] j_reg_464;
wire    ap_CS_fsm_state3;
wire   [4:0] shl_ln61_1_fu_227_p3;
reg   [4:0] shl_ln61_1_reg_469;
wire   [0:0] icmp_ln52_fu_215_p2;
wire   [11:0] sub_ln203_1_fu_268_p2;
reg   [11:0] sub_ln203_1_reg_474;
wire   [2:0] k_fu_280_p2;
reg   [2:0] k_reg_482;
wire    ap_CS_fsm_state4;
wire   [13:0] zext_ln203_8_fu_286_p1;
reg   [13:0] zext_ln203_8_reg_487;
wire   [0:0] icmp_ln54_fu_274_p2;
reg   [10:0] out_V_addr_reg_492;
wire   [1:0] x_fu_314_p2;
reg   [1:0] x_reg_500;
wire    ap_CS_fsm_state5;
wire  signed [11:0] sext_ln1494_fu_355_p1;
reg  signed [11:0] sext_ln1494_reg_505;
wire   [0:0] icmp_ln57_fu_308_p2;
wire   [1:0] y_fu_369_p2;
reg   [1:0] y_reg_513;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln59_fu_363_p2;
wire   [15:0] select_ln61_fu_435_p3;
wire    ap_CS_fsm_state7;
reg   [3:0] i_0_reg_89;
reg   [3:0] j_0_reg_100;
reg   [2:0] k_0_reg_111;
reg   [15:0] p_07_1_reg_122;
reg   [1:0] x_0_reg_135;
reg   [15:0] p_07_2_reg_146;
reg   [1:0] y_0_reg_158;
wire   [63:0] zext_ln203_10_fu_299_p1;
wire   [63:0] zext_ln1494_6_fu_424_p1;
wire   [7:0] tmp_8_fu_189_p3;
wire   [8:0] zext_ln203_fu_197_p1;
wire   [8:0] zext_ln203_6_fu_201_p1;
wire   [8:0] sub_ln203_fu_205_p2;
wire   [9:0] zext_ln203_7_fu_235_p1;
wire   [9:0] add_ln203_fu_239_p2;
wire   [8:0] trunc_ln203_fu_244_p1;
wire   [10:0] tmp_7_fu_256_p3;
wire   [11:0] p_shl2_cast_fu_248_p3;
wire  signed [11:0] sext_ln203_1_fu_264_p1;
wire   [11:0] zext_ln203_9_fu_290_p1;
wire   [11:0] add_ln203_3_fu_294_p2;
wire   [4:0] zext_ln57_fu_304_p1;
wire   [4:0] add_ln61_fu_320_p2;
wire   [9:0] tmp_s_fu_325_p3;
wire   [6:0] tmp_1_fu_337_p3;
wire   [10:0] zext_ln1494_fu_333_p1;
wire   [10:0] zext_ln1494_4_fu_345_p1;
wire   [10:0] sub_ln1494_fu_349_p2;
wire   [4:0] zext_ln59_fu_359_p1;
wire   [4:0] add_ln61_1_fu_375_p2;
wire   [11:0] zext_ln1494_5_fu_380_p1;
wire   [11:0] add_ln1494_fu_384_p2;
wire   [10:0] trunc_ln1494_fu_389_p1;
wire   [12:0] tmp_9_fu_401_p3;
wire   [13:0] p_shl6_cast_fu_393_p3;
wire  signed [13:0] sext_ln1494_1_fu_409_p1;
wire   [13:0] sub_ln1494_1_fu_413_p2;
wire   [13:0] add_ln1494_3_fu_419_p2;
wire   [0:0] icmp_ln1494_fu_429_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_215_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_89 <= i_reg_446;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_89 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_100 <= 4'd0;
    end else if (((icmp_ln54_fu_274_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_100 <= j_reg_464;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln57_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        k_0_reg_111 <= k_reg_482;
    end else if (((icmp_ln52_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_111 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln59_fu_363_p2 == 1'd1))) begin
        p_07_1_reg_122 <= p_07_2_reg_146;
    end else if (((icmp_ln54_fu_274_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_07_1_reg_122 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln57_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_07_2_reg_146 <= p_07_1_reg_122;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_07_2_reg_146 <= select_ln61_fu_435_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln59_fu_363_p2 == 1'd1))) begin
        x_0_reg_135 <= x_reg_500;
    end else if (((icmp_ln54_fu_274_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        x_0_reg_135 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln57_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        y_0_reg_158 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        y_0_reg_158 <= y_reg_513;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_446 <= i_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_464 <= j_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_482 <= k_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_274_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        out_V_addr_reg_492 <= zext_ln203_10_fu_299_p1;
        zext_ln203_8_reg_487[2 : 0] <= zext_ln203_8_fu_286_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln57_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        sext_ln1494_reg_505[11 : 2] <= sext_ln1494_fu_355_p1[11 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln203_reg_456[9 : 1] <= sext_ln203_fu_211_p1[9 : 1];
        shl_ln_reg_451[4 : 1] <= shl_ln_fu_181_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln61_1_reg_469[4 : 1] <= shl_ln61_1_fu_227_p3[4 : 1];
        sub_ln203_1_reg_474[11 : 1] <= sub_ln203_1_fu_268_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        x_reg_500 <= x_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_reg_513 <= y_fu_369_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C1_out_V_ce0 = 1'b1;
    end else begin
        C1_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln50_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_V_ce0 = 1'b1;
    end else begin
        out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln57_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        out_V_we0 = 1'b1;
    end else begin
        out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln50_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln52_fu_215_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln54_fu_274_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln57_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln59_fu_363_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C1_out_V_address0 = zext_ln1494_6_fu_424_p1;

assign add_ln1494_3_fu_419_p2 = (sub_ln1494_1_fu_413_p2 + zext_ln203_8_reg_487);

assign add_ln1494_fu_384_p2 = ($signed(sext_ln1494_reg_505) + $signed(zext_ln1494_5_fu_380_p1));

assign add_ln203_3_fu_294_p2 = (sub_ln203_1_reg_474 + zext_ln203_9_fu_290_p1);

assign add_ln203_fu_239_p2 = ($signed(zext_ln203_7_fu_235_p1) + $signed(sext_ln203_reg_456));

assign add_ln61_1_fu_375_p2 = (zext_ln59_fu_359_p1 + shl_ln61_1_reg_469);

assign add_ln61_fu_320_p2 = (zext_ln57_fu_304_p1 + shl_ln_reg_451);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign i_fu_175_p2 = (i_0_reg_89 + 4'd1);

assign icmp_ln1494_fu_429_p2 = (($signed(C1_out_V_q0) > $signed(p_07_2_reg_146)) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_169_p2 = ((i_0_reg_89 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_215_p2 = ((j_0_reg_100 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_274_p2 = ((k_0_reg_111 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_308_p2 = ((x_0_reg_135 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_363_p2 = ((y_0_reg_158 == 2'd2) ? 1'b1 : 1'b0);

assign j_fu_221_p2 = (j_0_reg_100 + 4'd1);

assign k_fu_280_p2 = (k_0_reg_111 + 3'd1);

assign out_V_address0 = out_V_addr_reg_492;

assign out_V_d0 = p_07_1_reg_122;

assign p_shl2_cast_fu_248_p3 = {{trunc_ln203_fu_244_p1}, {3'd0}};

assign p_shl6_cast_fu_393_p3 = {{trunc_ln1494_fu_389_p1}, {3'd0}};

assign select_ln61_fu_435_p3 = ((icmp_ln1494_fu_429_p2[0:0] === 1'b1) ? C1_out_V_q0 : p_07_2_reg_146);

assign sext_ln1494_1_fu_409_p1 = $signed(tmp_9_fu_401_p3);

assign sext_ln1494_fu_355_p1 = $signed(sub_ln1494_fu_349_p2);

assign sext_ln203_1_fu_264_p1 = $signed(tmp_7_fu_256_p3);

assign sext_ln203_fu_211_p1 = $signed(sub_ln203_fu_205_p2);

assign shl_ln61_1_fu_227_p3 = {{j_0_reg_100}, {1'd0}};

assign shl_ln_fu_181_p3 = {{i_0_reg_89}, {1'd0}};

assign sub_ln1494_1_fu_413_p2 = ($signed(p_shl6_cast_fu_393_p3) - $signed(sext_ln1494_1_fu_409_p1));

assign sub_ln1494_fu_349_p2 = (zext_ln1494_fu_333_p1 - zext_ln1494_4_fu_345_p1);

assign sub_ln203_1_fu_268_p2 = ($signed(p_shl2_cast_fu_248_p3) - $signed(sext_ln203_1_fu_264_p1));

assign sub_ln203_fu_205_p2 = (zext_ln203_fu_197_p1 - zext_ln203_6_fu_201_p1);

assign tmp_1_fu_337_p3 = {{add_ln61_fu_320_p2}, {2'd0}};

assign tmp_7_fu_256_p3 = {{add_ln203_fu_239_p2}, {1'd0}};

assign tmp_8_fu_189_p3 = {{i_0_reg_89}, {4'd0}};

assign tmp_9_fu_401_p3 = {{add_ln1494_fu_384_p2}, {1'd0}};

assign tmp_s_fu_325_p3 = {{add_ln61_fu_320_p2}, {5'd0}};

assign trunc_ln1494_fu_389_p1 = add_ln1494_fu_384_p2[10:0];

assign trunc_ln203_fu_244_p1 = add_ln203_fu_239_p2[8:0];

assign x_fu_314_p2 = (x_0_reg_135 + 2'd1);

assign y_fu_369_p2 = (y_0_reg_158 + 2'd1);

assign zext_ln1494_4_fu_345_p1 = tmp_1_fu_337_p3;

assign zext_ln1494_5_fu_380_p1 = add_ln61_1_fu_375_p2;

assign zext_ln1494_6_fu_424_p1 = add_ln1494_3_fu_419_p2;

assign zext_ln1494_fu_333_p1 = tmp_s_fu_325_p3;

assign zext_ln203_10_fu_299_p1 = add_ln203_3_fu_294_p2;

assign zext_ln203_6_fu_201_p1 = shl_ln_fu_181_p3;

assign zext_ln203_7_fu_235_p1 = j_0_reg_100;

assign zext_ln203_8_fu_286_p1 = k_0_reg_111;

assign zext_ln203_9_fu_290_p1 = k_0_reg_111;

assign zext_ln203_fu_197_p1 = tmp_8_fu_189_p3;

assign zext_ln57_fu_304_p1 = x_0_reg_135;

assign zext_ln59_fu_359_p1 = y_0_reg_158;

always @ (posedge ap_clk) begin
    shl_ln_reg_451[0] <= 1'b0;
    sext_ln203_reg_456[0] <= 1'b0;
    shl_ln61_1_reg_469[0] <= 1'b0;
    sub_ln203_1_reg_474[0] <= 1'b0;
    zext_ln203_8_reg_487[13:3] <= 11'b00000000000;
    sext_ln1494_reg_505[1:0] <= 2'b00;
end

endmodule //pool1
