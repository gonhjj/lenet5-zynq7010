-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pool2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    out_V_ce0 : OUT STD_LOGIC;
    out_V_we0 : OUT STD_LOGIC;
    out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    C2_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    C2_out_V_ce0 : OUT STD_LOGIC;
    C2_out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pool2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_169_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_388 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln_fu_175_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_reg_393 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln119_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_199_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln203_reg_398 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_fu_211_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_406 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shl_ln130_1_fu_217_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln130_1_reg_411 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln121_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_cast_fu_234_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_cast_reg_416 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_fu_248_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_424 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln203_3_fu_254_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln203_3_reg_429 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln123_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_addr_reg_434 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_fu_282_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal x_reg_442 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln1494_fu_317_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1494_reg_447 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln126_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_333_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal y_reg_455 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln128_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln130_fu_377_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_0_reg_83 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_reg_94 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_0_reg_105 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_07_1_reg_116 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_0_reg_129 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_07_2_reg_140 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_0_reg_152 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln203_5_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1494_3_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_187_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln203_fu_183_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln203_1_fu_195_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln203_2_fu_225_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln203_1_fu_229_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln203_4_fu_258_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_2_fu_262_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln126_fu_272_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln130_fu_288_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_293_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_305_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1494_1_fu_313_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1494_fu_301_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln128_fu_323_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln130_1_fu_339_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1494_2_fu_344_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1494_1_fu_348_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_cast_fu_353_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1494_2_fu_361_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1494_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_83_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_83 <= i_reg_388;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_83 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_fu_242_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_94 <= j_reg_406;
            elsif (((icmp_ln119_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_94 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_0_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_fu_205_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_reg_105 <= ap_const_lv5_0;
            elsif (((icmp_ln126_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_0_reg_105 <= k_reg_424;
            end if; 
        end if;
    end process;

    p_07_1_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln128_fu_327_p2 = ap_const_lv1_1))) then 
                p_07_1_reg_116 <= p_07_2_reg_140;
            elsif (((icmp_ln123_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_07_1_reg_116 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    p_07_2_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_07_2_reg_140 <= p_07_1_reg_116;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_07_2_reg_140 <= select_ln130_fu_377_p3;
            end if; 
        end if;
    end process;

    x_0_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln128_fu_327_p2 = ap_const_lv1_1))) then 
                x_0_reg_129 <= x_reg_442;
            elsif (((icmp_ln123_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x_0_reg_129 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    y_0_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                y_0_reg_152 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                y_0_reg_152 <= y_reg_455;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    add_ln1494_reg_447(7 downto 1) <= add_ln1494_fu_317_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln203_reg_398 <= add_ln203_fu_199_p2;
                    shl_ln_reg_393(3 downto 1) <= shl_ln_fu_175_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_388 <= i_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_406 <= j_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_reg_424 <= k_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                out_V_addr_reg_434 <= zext_ln203_5_fu_267_p1(9 - 1 downto 0);
                    zext_ln203_3_reg_429(4 downto 0) <= zext_ln203_3_fu_254_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_fu_205_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    shl_ln130_1_reg_411(3 downto 1) <= shl_ln130_1_fu_217_p3(3 downto 1);
                    tmp_3_cast_reg_416(9 downto 4) <= tmp_3_cast_fu_234_p3(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                x_reg_442 <= x_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                y_reg_455 <= y_fu_333_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_393(0) <= '0';
    shl_ln130_1_reg_411(0) <= '0';
    tmp_3_cast_reg_416(3 downto 0) <= "0000";
    zext_ln203_3_reg_429(11 downto 5) <= "0000000";
    add_ln1494_reg_447(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln119_fu_163_p2, ap_CS_fsm_state3, icmp_ln121_fu_205_p2, ap_CS_fsm_state4, icmp_ln123_fu_242_p2, ap_CS_fsm_state5, icmp_ln126_fu_276_p2, ap_CS_fsm_state6, icmp_ln128_fu_327_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln119_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln121_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln123_fu_242_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln126_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln128_fu_327_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    C2_out_V_address0 <= zext_ln1494_3_fu_366_p1(11 - 1 downto 0);

    C2_out_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C2_out_V_ce0 <= ap_const_logic_1;
        else 
            C2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln130_1_fu_339_p2 <= std_logic_vector(unsigned(shl_ln130_1_reg_411) + unsigned(zext_ln128_fu_323_p1));
    add_ln130_fu_288_p2 <= std_logic_vector(unsigned(zext_ln126_fu_272_p1) + unsigned(shl_ln_reg_393));
    add_ln1494_1_fu_348_p2 <= std_logic_vector(unsigned(zext_ln1494_2_fu_344_p1) + unsigned(add_ln1494_reg_447));
    add_ln1494_2_fu_361_p2 <= std_logic_vector(unsigned(zext_ln203_3_reg_429) + unsigned(tmp_7_cast_fu_353_p3));
    add_ln1494_fu_317_p2 <= std_logic_vector(unsigned(zext_ln1494_1_fu_313_p1) + unsigned(zext_ln1494_fu_301_p1));
    add_ln203_1_fu_229_p2 <= std_logic_vector(unsigned(zext_ln203_2_fu_225_p1) + unsigned(add_ln203_reg_398));
    add_ln203_2_fu_262_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_416) + unsigned(zext_ln203_4_fu_258_p1));
    add_ln203_fu_199_p2 <= std_logic_vector(unsigned(zext_ln203_fu_183_p1) + unsigned(zext_ln203_1_fu_195_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln119_fu_163_p2)
    begin
        if ((((icmp_ln119_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln119_fu_163_p2)
    begin
        if (((icmp_ln119_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_169_p2 <= std_logic_vector(unsigned(i_0_reg_83) + unsigned(ap_const_lv3_1));
    icmp_ln119_fu_163_p2 <= "1" when (i_0_reg_83 = ap_const_lv3_5) else "0";
    icmp_ln121_fu_205_p2 <= "1" when (j_0_reg_94 = ap_const_lv3_5) else "0";
    icmp_ln123_fu_242_p2 <= "1" when (k_0_reg_105 = ap_const_lv5_10) else "0";
    icmp_ln126_fu_276_p2 <= "1" when (x_0_reg_129 = ap_const_lv2_2) else "0";
    icmp_ln128_fu_327_p2 <= "1" when (y_0_reg_152 = ap_const_lv2_2) else "0";
    icmp_ln1494_fu_371_p2 <= "1" when (signed(C2_out_V_q0) > signed(p_07_2_reg_140)) else "0";
    j_fu_211_p2 <= std_logic_vector(unsigned(j_0_reg_94) + unsigned(ap_const_lv3_1));
    k_fu_248_p2 <= std_logic_vector(unsigned(k_0_reg_105) + unsigned(ap_const_lv5_1));
    out_V_address0 <= out_V_addr_reg_434;

    out_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_V_ce0 <= ap_const_logic_1;
        else 
            out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_V_d0 <= p_07_1_reg_116;

    out_V_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln126_fu_276_p2)
    begin
        if (((icmp_ln126_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_V_we0 <= ap_const_logic_1;
        else 
            out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln130_fu_377_p3 <= 
        C2_out_V_q0 when (icmp_ln1494_fu_371_p2(0) = '1') else 
        p_07_2_reg_140;
    shl_ln130_1_fu_217_p3 <= (j_0_reg_94 & ap_const_lv1_0);
    shl_ln_fu_175_p3 <= (i_0_reg_83 & ap_const_lv1_0);
    tmp_1_fu_187_p3 <= (i_0_reg_83 & ap_const_lv2_0);
    tmp_3_cast_fu_234_p3 <= (add_ln203_1_fu_229_p2 & ap_const_lv4_0);
    tmp_4_fu_293_p3 <= (add_ln130_fu_288_p2 & ap_const_lv3_0);
    tmp_5_fu_305_p3 <= (add_ln130_fu_288_p2 & ap_const_lv1_0);
    tmp_7_cast_fu_353_p3 <= (add_ln1494_1_fu_348_p2 & ap_const_lv4_0);
    x_fu_282_p2 <= std_logic_vector(unsigned(x_0_reg_129) + unsigned(ap_const_lv2_1));
    y_fu_333_p2 <= std_logic_vector(unsigned(y_0_reg_152) + unsigned(ap_const_lv2_1));
    zext_ln126_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_129),4));
    zext_ln128_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_152),4));
    zext_ln1494_1_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_305_p3),8));
    zext_ln1494_2_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_1_fu_339_p2),8));
    zext_ln1494_3_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_2_fu_361_p2),64));
    zext_ln1494_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_293_p3),8));
    zext_ln203_1_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_187_p3),6));
    zext_ln203_2_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_94),6));
    zext_ln203_3_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_105),12));
    zext_ln203_4_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_105),10));
    zext_ln203_5_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_2_fu_262_p2),64));
    zext_ln203_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_83),6));
end behav;
