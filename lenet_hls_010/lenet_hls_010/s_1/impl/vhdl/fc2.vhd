-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_V_ce0 : OUT STD_LOGIC;
    out_V_we0 : OUT STD_LOGIC;
    out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    FC1_out_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    FC1_out_V_ce0 : OUT STD_LOGIC;
    FC1_out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of fc2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv10_54 : STD_LOGIC_VECTOR (9 downto 0) := "0001010100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal FC2_W_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal FC2_W_V_ce0 : STD_LOGIC;
    signal FC2_W_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal FC2_B_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal FC2_B_V_ce0 : STD_LOGIC;
    signal FC2_B_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln219_fu_165_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln219_reg_317 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_177_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_325 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_V_addr_reg_330 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln219_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_194_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_338 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln222_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_3_fu_251_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_361 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal out_V_addr_1_reg_366 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln228_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_107 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_118 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_6_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_0_reg_143 : STD_LOGIC_VECTOR (6 downto 0);
    signal i1_0_reg_154 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln221_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_1_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln224_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln230_fu_257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln231_fu_303_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1117_fu_205_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1117_fu_209_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_308_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1265_fu_263_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln703_fu_267_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1265_fu_263_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln703_fu_271_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln703_fu_267_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_fu_275_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_287_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1495_fu_281_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln231_fu_295_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_308_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component lenet_mac_muladd_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component fc2_FC2_W_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component fc2_FC2_B_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    FC2_W_V_U : component fc2_FC2_W_V
    generic map (
        DataWidth => 10,
        AddressRange => 840,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FC2_W_V_address0,
        ce0 => FC2_W_V_ce0,
        q0 => FC2_W_V_q0);

    FC2_B_V_U : component fc2_FC2_B_V
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FC2_B_V_address0,
        ce0 => FC2_B_V_ce0,
        q0 => FC2_B_V_q0);

    lenet_mac_muladd_g8j_U31 : component lenet_mac_muladd_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        din2_WIDTH => 26,
        dout_WIDTH => 26)
    port map (
        din0 => FC1_out_V_q0,
        din1 => FC2_W_V_q0,
        din2 => grp_fu_308_p2,
        dout => grp_fu_308_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_0_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln219_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_0_reg_154 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i1_0_reg_154 <= i_3_reg_361;
            end if; 
        end if;
    end process;

    i_0_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln222_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_107 <= i_reg_325;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_107 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_143 <= j_reg_338;
            elsif (((icmp_ln219_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_143 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    p_Val2_6_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_Val2_6_reg_130 <= grp_fu_308_p3(25 downto 10);
            elsif (((icmp_ln219_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Val2_6_reg_130 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln222_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_118 <= add_ln219_reg_317;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_118 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln219_reg_317 <= add_ln219_fu_165_p2;
                i_reg_325 <= i_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_3_reg_361 <= i_3_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_338 <= j_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln228_fu_245_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                out_V_addr_1_reg_366 <= zext_ln230_fu_257_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln219_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                out_V_addr_reg_330 <= zext_ln221_fu_183_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln219_fu_171_p2, ap_CS_fsm_state3, icmp_ln222_fu_188_p2, ap_CS_fsm_state5, icmp_ln228_fu_245_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln219_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln222_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln228_fu_245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    FC1_out_V_address0 <= zext_ln224_fu_200_p1(7 - 1 downto 0);

    FC1_out_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            FC1_out_V_ce0 <= ap_const_logic_1;
        else 
            FC1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FC2_B_V_address0 <= zext_ln230_fu_257_p1(4 - 1 downto 0);

    FC2_B_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            FC2_B_V_ce0 <= ap_const_logic_1;
        else 
            FC2_B_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FC2_W_V_address0 <= zext_ln1117_1_fu_215_p1(10 - 1 downto 0);

    FC2_W_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            FC2_W_V_ce0 <= ap_const_logic_1;
        else 
            FC2_W_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1117_fu_209_p2 <= std_logic_vector(unsigned(zext_ln1117_fu_205_p1) + unsigned(phi_mul_reg_118));
    add_ln1495_fu_281_p2 <= std_logic_vector(unsigned(trunc_ln703_fu_271_p1) + unsigned(sext_ln703_fu_267_p1));
    add_ln219_fu_165_p2 <= std_logic_vector(unsigned(phi_mul_reg_118) + unsigned(ap_const_lv10_54));
    add_ln703_fu_275_p2 <= std_logic_vector(signed(sext_ln1265_fu_263_p1) + signed(out_V_q0));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln228_fu_245_p2)
    begin
        if ((((icmp_ln228_fu_245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln228_fu_245_p2)
    begin
        if (((icmp_ln228_fu_245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_308_p2 <= (p_Val2_6_reg_130 & ap_const_lv10_0);
    i_3_fu_251_p2 <= std_logic_vector(unsigned(i1_0_reg_154) + unsigned(ap_const_lv4_1));
    i_fu_177_p2 <= std_logic_vector(unsigned(i_0_reg_107) + unsigned(ap_const_lv4_1));
    icmp_ln219_fu_171_p2 <= "1" when (i_0_reg_107 = ap_const_lv4_A) else "0";
    icmp_ln222_fu_188_p2 <= "1" when (j_0_reg_143 = ap_const_lv7_54) else "0";
    icmp_ln228_fu_245_p2 <= "1" when (i1_0_reg_154 = ap_const_lv4_A) else "0";
    j_fu_194_p2 <= std_logic_vector(unsigned(j_0_reg_143) + unsigned(ap_const_lv7_1));

    out_V_address0_assign_proc : process(out_V_addr_reg_330, ap_CS_fsm_state3, ap_CS_fsm_state5, out_V_addr_1_reg_366, ap_CS_fsm_state6, zext_ln230_fu_257_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_V_address0 <= out_V_addr_1_reg_366;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_V_address0 <= zext_ln230_fu_257_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_V_address0 <= out_V_addr_reg_330;
        else 
            out_V_address0 <= "XXXX";
        end if; 
    end process;


    out_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_V_ce0 <= ap_const_logic_1;
        else 
            out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_V_d0_assign_proc : process(ap_CS_fsm_state3, p_Val2_6_reg_130, ap_CS_fsm_state6, zext_ln231_fu_303_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_V_d0 <= zext_ln231_fu_303_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_V_d0 <= p_Val2_6_reg_130;
        else 
            out_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_V_we0 <= ap_const_logic_1;
        else 
            out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln231_fu_295_p3 <= 
        ap_const_lv15_0 when (tmp_fu_287_p3(0) = '1') else 
        add_ln1495_fu_281_p2;
    sext_ln1265_fu_263_p0 <= FC2_B_V_q0;
        sext_ln1265_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_fu_263_p0),16));

    sext_ln703_fu_267_p0 <= FC2_B_V_q0;
        sext_ln703_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_fu_267_p0),15));

    tmp_fu_287_p3 <= add_ln703_fu_275_p2(15 downto 15);
    trunc_ln703_fu_271_p1 <= out_V_q0(15 - 1 downto 0);
    zext_ln1117_1_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_fu_209_p2),64));
    zext_ln1117_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_143),10));
    zext_ln221_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_107),64));
    zext_ln224_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_143),64));
    zext_ln230_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_154),64));
    zext_ln231_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln231_fu_295_p3),16));
end behav;
