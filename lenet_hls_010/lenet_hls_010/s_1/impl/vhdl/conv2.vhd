-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    out_V_ce0 : OUT STD_LOGIC;
    out_V_we0 : OUT STD_LOGIC;
    out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    P1_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    P1_out_V_ce0 : OUT STD_LOGIC;
    P1_out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of conv2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal K2_W_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal K2_W_V_ce0 : STD_LOGIC;
    signal K2_W_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal K2_B_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal K2_B_V_ce0 : STD_LOGIC;
    signal K2_B_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_292_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_842 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln1265_fu_322_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1265_reg_847 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln75_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_334_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_855 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln1265_2_fu_344_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1265_2_reg_860 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln77_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_359_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_reg_868 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sext_ln1116_fu_401_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1116_reg_873 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln79_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln89_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln89_reg_878 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_419_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_reg_886 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sub_ln1116_1_fu_464_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1116_1_reg_891 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln81_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln83_fu_470_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln83_reg_896 : STD_LOGIC_VECTOR (12 downto 0);
    signal set_1_fu_480_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal set_1_reg_904 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal shl_ln3_fu_490_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln3_reg_909 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln83_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_504_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_917 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sext_ln1117_fu_545_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1117_reg_922 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln85_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_addr_4_reg_927 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_fu_567_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_935 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln1117_8_fu_635_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1117_8_reg_940 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln87_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1116_3_fu_640_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1116_3_reg_945 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln_reg_960 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_5_fu_684_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_968 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln1265_1_fu_714_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1265_1_reg_973 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln98_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_726_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_981 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln1265_3_fu_736_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1265_3_reg_986 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln100_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal set_fu_747_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal set_reg_995 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal shl_ln_fu_757_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_reg_1000 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln102_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_771_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_1008 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal out_V_addr_reg_1013 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln104_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_addr_3_reg_1023 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_0_reg_163 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_175 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_0_reg_187 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_0_reg_198 : STD_LOGIC_VECTOR (2 downto 0);
    signal set_0_reg_209 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_0_reg_220 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_231 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i1_0_reg_242 : STD_LOGIC_VECTOR (3 downto 0);
    signal j2_0_reg_253 : STD_LOGIC_VECTOR (3 downto 0);
    signal set3_0_reg_264 : STD_LOGIC_VECTOR (1 downto 0);
    signal k4_0_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln1265_7_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_11_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_7_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1265_6_fu_794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_fu_782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1495_fu_806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln703_fu_815_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_16_fu_822_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_298_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_310_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1265_1_fu_318_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1265_fu_306_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1265_4_fu_340_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln79_fu_349_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln89_fu_365_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_371_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_383_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1116_fu_379_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1116_5_fu_391_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1116_fu_395_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln81_fu_409_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln89_1_fu_425_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1116_6_fu_431_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1116_fu_435_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1116_fu_440_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_452_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_444_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1116_1_fu_460_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln89_fu_486_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln89_2_fu_510_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_515_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_fu_527_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1117_fu_523_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1117_8_fu_535_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln1117_fu_539_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_549_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1117_10_fu_577_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1117_fu_581_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_18_fu_590_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1117_2_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1117_3_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1117_5_fu_602_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1117_6_fu_608_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1117_2_fu_617_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1117_fu_613_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl8_cast_fu_621_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1117_7_fu_629_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1117_9_fu_573_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_830_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_4_fu_690_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_702_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1265_3_fu_710_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1265_2_fu_698_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1265_5_fu_732_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln106_fu_753_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln106_fu_777_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_fu_787_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_fu_799_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1265_fu_811_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_830_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component lenet_mac_muladd_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component conv2_K2_W_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component conv2_K2_B_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    K2_W_V_U : component conv2_K2_W_V
    generic map (
        DataWidth => 9,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => K2_W_V_address0,
        ce0 => K2_W_V_ce0,
        q0 => K2_W_V_q0);

    K2_B_V_U : component conv2_K2_B_V
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => K2_B_V_address0,
        ce0 => K2_B_V_ce0,
        q0 => K2_B_V_q0);

    lenet_mac_muladd_dEe_U11 : component lenet_mac_muladd_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 26,
        dout_WIDTH => 26)
    port map (
        din0 => K2_W_V_q0,
        din1 => P1_out_V_q0,
        din2 => grp_fu_830_p2,
        dout => grp_fu_830_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                c_0_reg_231 <= c_reg_935;
            elsif (((icmp_ln85_fu_498_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                c_0_reg_231 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i1_0_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_0_reg_242 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln100_fu_720_p2 = ap_const_lv1_1))) then 
                i1_0_reg_242 <= i_5_reg_968;
            end if; 
        end if;
    end process;

    i_0_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_fu_328_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_163 <= i_reg_842;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_163 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j2_0_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_fu_678_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                j2_0_reg_253 <= ap_const_lv4_0;
            elsif (((icmp_ln102_fu_741_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                j2_0_reg_253 <= j_1_reg_981;
            end if; 
        end if;
    end process;

    j_0_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln79_fu_353_p2 = ap_const_lv1_1))) then 
                j_0_reg_175 <= j_reg_855;
            elsif (((icmp_ln75_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_175 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k4_0_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln102_fu_741_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                k4_0_reg_275 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                k4_0_reg_275 <= k_reg_1008;
            end if; 
        end if;
    end process;

    k_0_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln83_fu_474_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k_0_reg_220 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln87_fu_561_p2 = ap_const_lv1_1))) then 
                k_0_reg_220 <= k_1_reg_917;
            end if; 
        end if;
    end process;

    set3_0_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                set3_0_reg_264 <= set_reg_995;
            elsif (((icmp_ln100_fu_720_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                set3_0_reg_264 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    set_0_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln85_fu_498_p2 = ap_const_lv1_1))) then 
                set_0_reg_209 <= set_1_reg_904;
            elsif (((icmp_ln81_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                set_0_reg_209 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    x_0_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln81_fu_413_p2 = ap_const_lv1_1))) then 
                x_0_reg_187 <= x_reg_868;
            elsif (((icmp_ln77_fu_328_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_0_reg_187 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    y_0_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_353_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                y_0_reg_198 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln83_fu_474_p2 = ap_const_lv1_1))) then 
                y_0_reg_198 <= y_reg_886;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_561_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                add_ln1116_3_reg_945 <= add_ln1116_3_fu_640_p2;
                add_ln1117_8_reg_940 <= add_ln1117_8_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_fu_678_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    add_ln1265_1_reg_973(7 downto 1) <= add_ln1265_1_fu_714_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_fu_328_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln1265_2_reg_860 <= add_ln1265_2_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_720_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                add_ln1265_3_reg_986 <= add_ln1265_3_fu_736_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    add_ln1265_reg_847(7 downto 1) <= add_ln1265_fu_322_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                c_reg_935 <= c_fu_567_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_5_reg_968 <= i_5_fu_684_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_842 <= i_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                j_1_reg_981 <= j_1_fu_726_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_855 <= j_fu_334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                k_1_reg_917 <= k_1_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                k_reg_1008 <= k_fu_771_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_765_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                out_V_addr_3_reg_1023 <= zext_ln1495_fu_806_p1(11 - 1 downto 0);
                out_V_addr_reg_1013 <= zext_ln1265_6_fu_794_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_498_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                out_V_addr_4_reg_927 <= zext_ln1265_7_fu_556_p1(11 - 1 downto 0);
                    sext_ln1117_reg_922(8 downto 1) <= sext_ln1117_fu_545_p1(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                set_1_reg_904 <= set_1_fu_480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                set_reg_995 <= set_fu_747_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_353_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    sext_ln1116_reg_873(9 downto 1) <= sext_ln1116_fu_401_p1(9 downto 1);
                    zext_ln89_reg_878(2 downto 0) <= zext_ln89_fu_405_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln83_fu_474_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    shl_ln3_reg_909(3) <= shl_ln3_fu_490_p3(3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln102_fu_741_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    shl_ln_reg_1000(3) <= shl_ln_fu_757_p3(3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln81_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    sub_ln1116_1_reg_891(11 downto 1) <= sub_ln1116_1_fu_464_p2(11 downto 1);
                    zext_ln83_reg_896(2 downto 0) <= zext_ln83_fu_470_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                trunc_ln_reg_960 <= grp_fu_830_p3(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                x_reg_868 <= x_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                y_reg_886 <= y_fu_419_p2;
            end if;
        end if;
    end process;
    add_ln1265_reg_847(0) <= '0';
    sext_ln1116_reg_873(0) <= '0';
    zext_ln89_reg_878(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    sub_ln1116_1_reg_891(0) <= '0';
    zext_ln83_reg_896(12 downto 3) <= "0000000000";
    shl_ln3_reg_909(2 downto 0) <= "000";
    sext_ln1117_reg_922(0) <= '0';
    add_ln1265_1_reg_973(0) <= '0';
    shl_ln_reg_1000(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln75_fu_286_p2, ap_CS_fsm_state3, icmp_ln77_fu_328_p2, ap_CS_fsm_state4, icmp_ln79_fu_353_p2, ap_CS_fsm_state5, icmp_ln81_fu_413_p2, ap_CS_fsm_state6, icmp_ln83_fu_474_p2, ap_CS_fsm_state7, icmp_ln85_fu_498_p2, ap_CS_fsm_state8, icmp_ln87_fu_561_p2, ap_CS_fsm_state12, icmp_ln98_fu_678_p2, ap_CS_fsm_state13, icmp_ln100_fu_720_p2, ap_CS_fsm_state14, icmp_ln102_fu_741_p2, ap_CS_fsm_state15, icmp_ln104_fu_765_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln75_fu_286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln77_fu_328_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln79_fu_353_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln81_fu_413_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln83_fu_474_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln85_fu_498_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln87_fu_561_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln98_fu_678_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln100_fu_720_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln102_fu_741_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln104_fu_765_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    K2_B_V_address0 <= zext_ln106_fu_782_p1(4 - 1 downto 0);

    K2_B_V_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            K2_B_V_ce0 <= ap_const_logic_1;
        else 
            K2_B_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    K2_W_V_address0 <= zext_ln1117_11_fu_645_p1(12 - 1 downto 0);

    K2_W_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            K2_W_V_ce0 <= ap_const_logic_1;
        else 
            K2_W_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    P1_out_V_address0 <= zext_ln1116_7_fu_649_p1(11 - 1 downto 0);

    P1_out_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            P1_out_V_ce0 <= ap_const_logic_1;
        else 
            P1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln106_fu_777_p2 <= std_logic_vector(unsigned(shl_ln_reg_1000) + unsigned(k4_0_reg_275));
    add_ln1116_3_fu_640_p2 <= std_logic_vector(unsigned(sub_ln1116_1_reg_891) + unsigned(zext_ln1117_9_fu_573_p1));
    add_ln1116_fu_435_p2 <= std_logic_vector(signed(sext_ln1116_reg_873) + signed(zext_ln1116_6_fu_431_p1));
    add_ln1117_5_fu_602_p2 <= std_logic_vector(signed(sext_ln1117_2_fu_586_p1) + signed(sext_ln1117_3_fu_598_p1));
    add_ln1117_6_fu_608_p2 <= std_logic_vector(unsigned(add_ln1117_5_fu_602_p2) + unsigned(zext_ln89_reg_878));
    add_ln1117_7_fu_629_p2 <= std_logic_vector(unsigned(trunc_ln1117_fu_613_p1) + unsigned(p_shl8_cast_fu_621_p3));
    add_ln1117_8_fu_635_p2 <= std_logic_vector(unsigned(add_ln1117_7_fu_629_p2) + unsigned(zext_ln83_reg_896));
    add_ln1117_fu_581_p2 <= std_logic_vector(signed(sext_ln1117_reg_922) + signed(zext_ln1117_10_fu_577_p1));
    add_ln1265_1_fu_714_p2 <= std_logic_vector(unsigned(zext_ln1265_3_fu_710_p1) + unsigned(zext_ln1265_2_fu_698_p1));
    add_ln1265_2_fu_344_p2 <= std_logic_vector(unsigned(zext_ln1265_4_fu_340_p1) + unsigned(add_ln1265_reg_847));
    add_ln1265_3_fu_736_p2 <= std_logic_vector(unsigned(zext_ln1265_5_fu_732_p1) + unsigned(add_ln1265_1_reg_973));
    add_ln1265_fu_322_p2 <= std_logic_vector(unsigned(zext_ln1265_1_fu_318_p1) + unsigned(zext_ln1265_fu_306_p1));
    add_ln703_fu_815_p2 <= std_logic_vector(unsigned(out_V_q0) + unsigned(sext_ln1265_fu_811_p1));
    add_ln89_1_fu_425_p2 <= std_logic_vector(unsigned(zext_ln81_fu_409_p1) + unsigned(j_0_reg_175));
    add_ln89_2_fu_510_p2 <= std_logic_vector(unsigned(k_0_reg_220) + unsigned(shl_ln3_reg_909));
    add_ln89_fu_365_p2 <= std_logic_vector(unsigned(zext_ln79_fu_349_p1) + unsigned(i_0_reg_163));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12, icmp_ln98_fu_678_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln98_fu_678_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12, icmp_ln98_fu_678_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln98_fu_678_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_567_p2 <= std_logic_vector(unsigned(c_0_reg_231) + unsigned(ap_const_lv3_1));
    grp_fu_830_p2 <= (out_V_q0 & ap_const_lv10_0);
    i_5_fu_684_p2 <= std_logic_vector(unsigned(i1_0_reg_242) + unsigned(ap_const_lv4_1));
    i_fu_292_p2 <= std_logic_vector(unsigned(i_0_reg_163) + unsigned(ap_const_lv4_1));
    icmp_ln100_fu_720_p2 <= "1" when (j2_0_reg_253 = ap_const_lv4_A) else "0";
    icmp_ln102_fu_741_p2 <= "1" when (set3_0_reg_264 = ap_const_lv2_2) else "0";
    icmp_ln104_fu_765_p2 <= "1" when (k4_0_reg_275 = ap_const_lv4_8) else "0";
    icmp_ln75_fu_286_p2 <= "1" when (i_0_reg_163 = ap_const_lv4_A) else "0";
    icmp_ln77_fu_328_p2 <= "1" when (j_0_reg_175 = ap_const_lv4_A) else "0";
    icmp_ln79_fu_353_p2 <= "1" when (x_0_reg_187 = ap_const_lv3_5) else "0";
    icmp_ln81_fu_413_p2 <= "1" when (y_0_reg_198 = ap_const_lv3_5) else "0";
    icmp_ln83_fu_474_p2 <= "1" when (set_0_reg_209 = ap_const_lv2_2) else "0";
    icmp_ln85_fu_498_p2 <= "1" when (k_0_reg_220 = ap_const_lv4_8) else "0";
    icmp_ln87_fu_561_p2 <= "1" when (c_0_reg_231 = ap_const_lv3_6) else "0";
    icmp_ln98_fu_678_p2 <= "1" when (i1_0_reg_242 = ap_const_lv4_A) else "0";
    j_1_fu_726_p2 <= std_logic_vector(unsigned(j2_0_reg_253) + unsigned(ap_const_lv4_1));
    j_fu_334_p2 <= std_logic_vector(unsigned(j_0_reg_175) + unsigned(ap_const_lv4_1));
    k_1_fu_504_p2 <= std_logic_vector(unsigned(k_0_reg_220) + unsigned(ap_const_lv4_1));
    k_fu_771_p2 <= std_logic_vector(unsigned(k4_0_reg_275) + unsigned(ap_const_lv4_1));

    out_V_address0_assign_proc : process(out_V_addr_4_reg_927, ap_CS_fsm_state9, ap_CS_fsm_state15, out_V_addr_reg_1013, out_V_addr_3_reg_1023, ap_CS_fsm_state11, ap_CS_fsm_state18, zext_ln1265_6_fu_794_p1, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_V_address0 <= out_V_addr_3_reg_1023;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            out_V_address0 <= out_V_addr_reg_1013;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_V_address0 <= zext_ln1265_6_fu_794_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            out_V_address0 <= out_V_addr_4_reg_927;
        else 
            out_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    out_V_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            out_V_ce0 <= ap_const_logic_1;
        else 
            out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_V_d0_assign_proc : process(trunc_ln_reg_960, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state16, add_ln703_fu_815_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            out_V_d0 <= ap_const_lv16_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            out_V_d0 <= add_ln703_fu_815_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_V_d0 <= trunc_ln_reg_960;
        else 
            out_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_V_we0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state16, tmp_16_fu_822_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((tmp_16_fu_822_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            out_V_we0 <= ap_const_logic_1;
        else 
            out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl4_cast_fu_444_p3 <= (trunc_ln1116_fu_440_p1 & ap_const_lv3_0);
    p_shl8_cast_fu_621_p3 <= (trunc_ln1117_2_fu_617_p1 & ap_const_lv2_0);
    set_1_fu_480_p2 <= std_logic_vector(unsigned(set_0_reg_209) + unsigned(ap_const_lv2_1));
    set_fu_747_p2 <= std_logic_vector(unsigned(set3_0_reg_264) + unsigned(ap_const_lv2_1));
        sext_ln1116_1_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_452_p3),12));

        sext_ln1116_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1116_fu_395_p2),10));

        sext_ln1117_2_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1117_fu_581_p2),64));

        sext_ln1117_3_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_fu_590_p3),64));

        sext_ln1117_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1117_fu_539_p2),9));

        sext_ln1265_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(K2_B_V_q0),16));

    shl_ln3_fu_490_p3 <= (trunc_ln89_fu_486_p1 & ap_const_lv3_0);
    shl_ln_fu_757_p3 <= (trunc_ln106_fu_753_p1 & ap_const_lv3_0);
    sub_ln1116_1_fu_464_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_444_p3) - unsigned(sext_ln1116_1_fu_460_p1));
    sub_ln1116_fu_395_p2 <= std_logic_vector(unsigned(zext_ln1116_fu_379_p1) - unsigned(zext_ln1116_5_fu_391_p1));
    sub_ln1117_fu_539_p2 <= std_logic_vector(unsigned(zext_ln1117_fu_523_p1) - unsigned(zext_ln1117_8_fu_535_p1));
    tmp_10_fu_515_p3 <= (add_ln89_2_fu_510_p2 & ap_const_lv3_0);
    tmp_11_fu_527_p3 <= (add_ln89_2_fu_510_p2 & ap_const_lv1_0);
    tmp_13_fu_452_p3 <= (add_ln1116_fu_435_p2 & ap_const_lv1_0);
    tmp_14_fu_787_p3 <= (add_ln1265_3_reg_986 & add_ln106_fu_777_p2);
    tmp_15_fu_799_p3 <= (add_ln1265_3_reg_986 & k4_0_reg_275);
    tmp_16_fu_822_p3 <= out_V_q0(15 downto 15);
    tmp_17_fu_549_p3 <= (add_ln1265_2_reg_860 & add_ln89_2_fu_510_p2);
    tmp_18_fu_590_p3 <= (add_ln1117_fu_581_p2 & ap_const_lv2_0);
    tmp_3_fu_310_p3 <= (i_0_reg_163 & ap_const_lv1_0);
    tmp_4_fu_690_p3 <= (i1_0_reg_242 & ap_const_lv3_0);
    tmp_5_fu_702_p3 <= (i1_0_reg_242 & ap_const_lv1_0);
    tmp_6_fu_371_p3 <= (add_ln89_fu_365_p2 & ap_const_lv4_0);
    tmp_9_fu_383_p3 <= (add_ln89_fu_365_p2 & ap_const_lv1_0);
    tmp_s_fu_298_p3 <= (i_0_reg_163 & ap_const_lv3_0);
    trunc_ln106_fu_753_p1 <= set3_0_reg_264(1 - 1 downto 0);
    trunc_ln1116_fu_440_p1 <= add_ln1116_fu_435_p2(9 - 1 downto 0);
    trunc_ln1117_2_fu_617_p1 <= add_ln1117_6_fu_608_p2(11 - 1 downto 0);
    trunc_ln1117_fu_613_p1 <= add_ln1117_6_fu_608_p2(13 - 1 downto 0);
    trunc_ln89_fu_486_p1 <= set_0_reg_209(1 - 1 downto 0);
    x_fu_359_p2 <= std_logic_vector(unsigned(x_0_reg_187) + unsigned(ap_const_lv3_1));
    y_fu_419_p2 <= std_logic_vector(unsigned(y_0_reg_198) + unsigned(ap_const_lv3_1));
    zext_ln106_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln106_fu_777_p2),64));
    zext_ln1116_5_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_383_p3),9));
    zext_ln1116_6_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln89_1_fu_425_p2),10));
    zext_ln1116_7_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_3_reg_945),64));
    zext_ln1116_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_371_p3),9));
    zext_ln1117_10_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_231),9));
    zext_ln1117_11_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_8_reg_940),64));
    zext_ln1117_8_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_527_p3),8));
    zext_ln1117_9_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_231),12));
    zext_ln1117_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_515_p3),8));
    zext_ln1265_1_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_310_p3),8));
    zext_ln1265_2_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_690_p3),8));
    zext_ln1265_3_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_702_p3),8));
    zext_ln1265_4_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_175),8));
    zext_ln1265_5_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_reg_253),8));
    zext_ln1265_6_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_787_p3),64));
    zext_ln1265_7_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_549_p3),64));
    zext_ln1265_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_298_p3),8));
    zext_ln1495_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_799_p3),64));
    zext_ln79_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_187),4));
    zext_ln81_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_198),4));
    zext_ln83_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_198),13));
    zext_ln89_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_187),64));
end behav;
