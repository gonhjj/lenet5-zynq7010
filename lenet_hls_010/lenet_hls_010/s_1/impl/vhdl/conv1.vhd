-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_r_EN_A : OUT STD_LOGIC;
    input_r_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_r_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    out_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_V_ce0 : OUT STD_LOGIC;
    out_V_we0 : OUT STD_LOGIC;
    out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of conv1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_A : STD_LOGIC_VECTOR (11 downto 0) := "000000001010";
    constant ap_const_lv12_FF6 : STD_LOGIC_VECTOR (11 downto 0) := "111111110110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal K1_W_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal K1_W_V_ce0 : STD_LOGIC;
    signal K1_W_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal K1_B_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal K1_B_V_ce0 : STD_LOGIC;
    signal K1_B_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_fu_346_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_1152 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln11_fu_360_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln11_reg_1157 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln7_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_368_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_reg_1162 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_2_fu_386_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_1170 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln203_fu_396_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln203_reg_1175 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln9_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_reg_1185 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal man_V_2_fu_463_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_1191 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln571_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_1196 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_1202 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_501_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1208 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_1214 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_515_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln583_reg_1220 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln603_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_reg_1226 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_703_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_reg_1234 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sext_ln1265_fu_739_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1265_reg_1239 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln15_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_749_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_1247 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sub_ln1265_2_fu_788_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln1265_2_reg_1252 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln17_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_804_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_reg_1260 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln25_fu_810_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln25_reg_1265 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln19_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln21_1_fu_816_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln21_1_reg_1270 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_fu_830_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_reg_1278 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln21_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1116_8_fu_854_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1116_8_reg_1288 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal sext_ln1192_fu_858_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1192_reg_1293 : STD_LOGIC_VECTOR (25 downto 0);
    signal k_2_fu_868_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_2_reg_1301 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln23_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_addr_5_reg_1311 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln_reg_1316 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_7_fu_974_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_7_reg_1324 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal sext_ln1265_1_fu_1010_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1265_1_reg_1329 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln32_fu_968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_1020_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_3_reg_1337 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal sub_ln1265_3_fu_1059_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln1265_3_reg_1342 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln34_fu_1014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_1071_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_1350 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal out_V_addr_reg_1355 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln36_fu_1065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_V_ce0 : STD_LOGIC;
    signal in_V_we0 : STD_LOGIC;
    signal in_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_reg_223 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_reg_234 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i4_0_reg_245 : STD_LOGIC_VECTOR (4 downto 0);
    signal j5_0_reg_257 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_0_reg_269 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_0_reg_280 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_0_reg_292 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i6_0_reg_303 : STD_LOGIC_VECTOR (4 downto 0);
    signal j7_0_reg_314 : STD_LOGIC_VECTOR (4 downto 0);
    signal k8_0_reg_325 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln11_1_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_11_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_fu_849_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_16_fu_932_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1265_16_fu_942_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1265_15_fu_1091_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_fu_1077_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_r_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln39_fu_1136_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_352_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln11_fu_364_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln203_fu_392_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln9_fu_376_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln11_fu_401_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_427_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_441_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_fu_445_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_9_fu_453_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_s_fu_419_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_1_fu_457_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_415_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_437_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_477_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln581_fu_489_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_495_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_20_fu_519_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln581_fu_539_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_547_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_551_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_fu_560_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_563_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln581cast_fu_579_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln571_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_583_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln586_fu_556_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln585_1_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_571_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln582_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_fu_647_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_1_fu_661_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln603_1_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_674_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_709_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_721_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1265_8_fu_717_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1265_9_fu_729_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1265_fu_733_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1265_12_fu_755_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1265_fu_759_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1265_fu_764_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_fu_776_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl2_cast_fu_768_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1265_2_fu_784_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln19_fu_794_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln21_fu_820_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln25_1_fu_836_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_fu_842_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_fu_882_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1117_13_fu_890_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1117_12_fu_878_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1117_fu_894_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1117_9_fu_900_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_25_fu_909_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1117_15_fu_917_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1117_14_fu_905_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1117_10_fu_921_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1117_11_fu_927_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1117_fu_874_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1265_6_fu_937_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1141_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_15_fu_980_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_fu_992_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1265_10_fu_988_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1265_11_fu_1000_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1265_1_fu_1004_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1265_13_fu_1026_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1265_4_fu_1030_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1265_1_fu_1035_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_23_fu_1047_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl8_cast_fu_1039_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1265_3_fu_1055_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1265_14_fu_1082_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1265_5_fu_1086_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1265_fu_1096_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln703_fu_1100_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln703_fu_1104_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_fu_1108_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_1120_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1495_fu_1114_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln39_fu_1128_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1141_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1141_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component lenet_fpext_32ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenet_mac_muladd_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component conv1_K1_W_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component conv1_K1_B_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component conv1_in_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    K1_W_V_U : component conv1_K1_W_V
    generic map (
        DataWidth => 11,
        AddressRange => 150,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => K1_W_V_address0,
        ce0 => K1_W_V_ce0,
        q0 => K1_W_V_q0);

    K1_B_V_U : component conv1_K1_B_V
    generic map (
        DataWidth => 9,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => K1_B_V_address0,
        ce0 => K1_B_V_ce0,
        q0 => K1_B_V_q0);

    in_V_U : component conv1_in_V
    generic map (
        DataWidth => 16,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => in_V_address0,
        ce0 => in_V_ce0,
        we0 => in_V_we0,
        d0 => in_V_d0,
        q0 => in_V_q0);

    lenet_fpext_32ns_bkb_U1 : component lenet_fpext_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_r_Dout_A,
        ce => ap_const_logic_1,
        dout => grp_fu_336_p1);

    lenet_mac_muladd_cud_U2 : component lenet_mac_muladd_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        din2_WIDTH => 26,
        dout_WIDTH => 26)
    port map (
        din0 => grp_fu_1141_p0,
        din1 => K1_W_V_q0,
        din2 => grp_fu_1141_p2,
        dout => grp_fu_1141_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i4_0_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_fu_340_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i4_0_reg_245 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln17_fu_743_p2 = ap_const_lv1_1))) then 
                i4_0_reg_245 <= i_6_reg_1234;
            end if; 
        end if;
    end process;

    i6_0_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln15_fu_697_p2 = ap_const_lv1_1))) then 
                i6_0_reg_303 <= ap_const_lv5_0;
            elsif (((icmp_ln34_fu_1014_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i6_0_reg_303 <= i_7_reg_1324;
            end if; 
        end if;
    end process;

    i_0_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_223 <= i_reg_1152;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_223 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j5_0_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_697_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                j5_0_reg_257 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln19_fu_798_p2 = ap_const_lv1_1))) then 
                j5_0_reg_257 <= j_reg_1247;
            end if; 
        end if;
    end process;

    j7_0_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_968_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                j7_0_reg_314 <= ap_const_lv5_0;
            elsif (((icmp_ln36_fu_1065_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                j7_0_reg_314 <= j_3_reg_1337;
            end if; 
        end if;
    end process;

    j_0_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_fu_340_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_234 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_reg_234 <= j_2_reg_1170;
            end if; 
        end if;
    end process;

    k8_0_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                k8_0_reg_325 <= k_reg_1350;
            elsif (((icmp_ln34_fu_1014_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                k8_0_reg_325 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_0_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                k_0_reg_292 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                k_0_reg_292 <= k_2_reg_1301;
            end if; 
        end if;
    end process;

    x_0_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln21_fu_824_p2 = ap_const_lv1_1))) then 
                x_0_reg_269 <= x_reg_1260;
            elsif (((icmp_ln17_fu_743_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                x_0_reg_269 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    y_0_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln23_fu_862_p2 = ap_const_lv1_1))) then 
                y_0_reg_280 <= y_reg_1278;
            elsif (((icmp_ln19_fu_798_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                y_0_reg_280 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_380_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln203_reg_1175 <= add_ln203_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_798_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                add_ln25_reg_1265 <= add_ln25_fu_810_p2;
                    zext_ln21_1_reg_1270(2 downto 0) <= zext_ln21_1_fu_816_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_6_reg_1234 <= i_6_fu_703_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_7_reg_1324 <= i_7_fu_974_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1152 <= i_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln571_reg_1196 <= icmp_ln571_fu_471_p2;
                icmp_ln581_reg_1202 <= icmp_ln581_fu_483_p2;
                icmp_ln582_reg_1214 <= icmp_ln582_fu_509_p2;
                icmp_ln603_reg_1226 <= icmp_ln603_fu_529_p2;
                man_V_2_reg_1191 <= man_V_2_fu_463_p3;
                sh_amt_reg_1208 <= sh_amt_fu_501_p3;
                trunc_ln583_reg_1220 <= trunc_ln583_fu_515_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                input_load_reg_1185 <= input_r_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_2_reg_1170 <= j_2_fu_386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                j_3_reg_1337 <= j_3_fu_1020_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                j_reg_1247 <= j_fu_749_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                k_2_reg_1301 <= k_2_fu_868_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                k_reg_1350 <= k_fu_1071_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_862_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                out_V_addr_5_reg_1311 <= zext_ln1265_16_fu_942_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_1065_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                out_V_addr_reg_1355 <= zext_ln1265_15_fu_1091_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                sext_ln1192_reg_1293 <= sext_ln1192_fu_858_p1;
                    zext_ln1116_8_reg_1288(2 downto 0) <= zext_ln1116_8_fu_854_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_968_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    sext_ln1265_1_reg_1329(11 downto 2) <= sext_ln1265_1_fu_1010_p1(11 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_697_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    sext_ln1265_reg_1239(11 downto 2) <= sext_ln1265_fu_739_p1(11 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_fu_340_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_1162(9 downto 5) <= shl_ln_fu_368_p3(9 downto 5);
                    zext_ln11_reg_1157(10 downto 5) <= zext_ln11_fu_360_p1(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_743_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    sub_ln1265_2_reg_1252(13 downto 1) <= sub_ln1265_2_fu_788_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_1014_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    sub_ln1265_3_reg_1342(13 downto 1) <= sub_ln1265_3_fu_1059_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                trunc_ln_reg_1316 <= grp_fu_1141_p3(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                x_reg_1260 <= x_fu_804_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                y_reg_1278 <= y_fu_830_p2;
            end if;
        end if;
    end process;
    zext_ln11_reg_1157(4 downto 0) <= "00000";
    zext_ln11_reg_1157(11) <= '0';
    shl_ln_reg_1162(4 downto 0) <= "00000";
    sext_ln1265_reg_1239(1 downto 0) <= "00";
    sub_ln1265_2_reg_1252(0) <= '0';
    zext_ln21_1_reg_1270(5 downto 3) <= "000";
    zext_ln1116_8_reg_1288(8 downto 3) <= "000000";
    sext_ln1265_1_reg_1329(1 downto 0) <= "00";
    sub_ln1265_3_reg_1342(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln7_fu_340_p2, ap_CS_fsm_state3, icmp_ln9_fu_380_p2, ap_CS_fsm_state7, icmp_ln15_fu_697_p2, ap_CS_fsm_state8, icmp_ln17_fu_743_p2, ap_CS_fsm_state9, icmp_ln19_fu_798_p2, ap_CS_fsm_state10, icmp_ln21_fu_824_p2, ap_CS_fsm_state12, icmp_ln23_fu_862_p2, ap_CS_fsm_state15, icmp_ln32_fu_968_p2, ap_CS_fsm_state16, icmp_ln34_fu_1014_p2, ap_CS_fsm_state17, icmp_ln36_fu_1065_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln7_fu_340_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln9_fu_380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln15_fu_697_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln17_fu_743_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln19_fu_798_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln21_fu_824_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln23_fu_862_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln32_fu_968_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln34_fu_1014_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln36_fu_1065_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_477_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_437_p1));
    K1_B_V_address0 <= zext_ln38_fu_1077_p1(3 - 1 downto 0);

    K1_B_V_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            K1_B_V_ce0 <= ap_const_logic_1;
        else 
            K1_B_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    K1_W_V_address0 <= zext_ln1117_16_fu_932_p1(8 - 1 downto 0);

    K1_W_V_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            K1_W_V_ce0 <= ap_const_logic_1;
        else 
            K1_W_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1117_10_fu_921_p2 <= std_logic_vector(unsigned(zext_ln1117_15_fu_917_p1) + unsigned(zext_ln1117_14_fu_905_p1));
    add_ln1117_11_fu_927_p2 <= std_logic_vector(unsigned(zext_ln1116_8_reg_1288) + unsigned(add_ln1117_10_fu_921_p2));
    add_ln1117_9_fu_900_p2 <= std_logic_vector(unsigned(zext_ln21_1_reg_1270) + unsigned(add_ln1117_fu_894_p2));
    add_ln1117_fu_894_p2 <= std_logic_vector(unsigned(zext_ln1117_13_fu_890_p1) + unsigned(zext_ln1117_12_fu_878_p1));
    add_ln11_fu_401_p2 <= std_logic_vector(unsigned(shl_ln_reg_1162) + unsigned(zext_ln9_fu_376_p1));
    add_ln1265_4_fu_1030_p2 <= std_logic_vector(signed(sext_ln1265_1_reg_1329) + signed(zext_ln1265_13_fu_1026_p1));
    add_ln1265_5_fu_1086_p2 <= std_logic_vector(unsigned(sub_ln1265_3_reg_1342) + unsigned(zext_ln1265_14_fu_1082_p1));
    add_ln1265_6_fu_937_p2 <= std_logic_vector(unsigned(zext_ln1117_fu_874_p1) + unsigned(sub_ln1265_2_reg_1252));
    add_ln1265_fu_759_p2 <= std_logic_vector(signed(sext_ln1265_reg_1239) + signed(zext_ln1265_12_fu_755_p1));
    add_ln1495_fu_1114_p2 <= std_logic_vector(unsigned(zext_ln703_fu_1100_p1) + unsigned(trunc_ln703_fu_1104_p1));
    add_ln203_fu_396_p2 <= std_logic_vector(unsigned(zext_ln11_reg_1157) + unsigned(zext_ln203_fu_392_p1));
    add_ln25_1_fu_836_p2 <= std_logic_vector(unsigned(zext_ln21_fu_820_p1) + unsigned(j5_0_reg_257));
    add_ln25_fu_810_p2 <= std_logic_vector(unsigned(i4_0_reg_245) + unsigned(zext_ln19_fu_794_p1));
    add_ln581_fu_489_p2 <= std_logic_vector(signed(ap_const_lv12_FF6) + signed(F2_fu_477_p2));
    add_ln703_fu_1108_p2 <= std_logic_vector(unsigned(out_V_q0) + unsigned(zext_ln1265_fu_1096_p1));
    and_ln581_fu_608_p2 <= (xor_ln582_fu_602_p2 and icmp_ln581_reg_1202);
    and_ln582_fu_593_p2 <= (xor_ln571_fu_588_p2 and icmp_ln582_reg_1214);
    and_ln585_1_fu_625_p2 <= (icmp_ln585_fu_542_p2 and and_ln581_fu_608_p2);
    and_ln585_fu_619_p2 <= (xor_ln585_fu_613_p2 and and_ln581_fu_608_p2);
    and_ln603_fu_642_p2 <= (xor_ln581_fu_636_p2 and icmp_ln603_reg_1226);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state15, icmp_ln32_fu_968_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln32_fu_968_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15, icmp_ln32_fu_968_p2)
    begin
        if (((icmp_ln32_fu_968_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_fu_551_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_1191),to_integer(unsigned('0' & zext_ln586_fu_547_p1(31-1 downto 0)))));
    bitcast_ln696_fu_560_p1 <= input_load_reg_1185;
    exp_tmp_V_fu_427_p4 <= ireg_V_fu_411_p1(62 downto 52);
    grp_fu_1141_p0 <= sext_ln1192_reg_1293(16 - 1 downto 0);
    grp_fu_1141_p2 <= (out_V_q0 & ap_const_lv10_0);
    i_6_fu_703_p2 <= std_logic_vector(unsigned(i4_0_reg_245) + unsigned(ap_const_lv5_1));
    i_7_fu_974_p2 <= std_logic_vector(unsigned(i6_0_reg_303) + unsigned(ap_const_lv5_1));
    i_fu_346_p2 <= std_logic_vector(unsigned(i_0_reg_223) + unsigned(ap_const_lv6_1));
    icmp_ln15_fu_697_p2 <= "1" when (i4_0_reg_245 = ap_const_lv5_1C) else "0";
    icmp_ln17_fu_743_p2 <= "1" when (j5_0_reg_257 = ap_const_lv5_1C) else "0";
    icmp_ln19_fu_798_p2 <= "1" when (x_0_reg_269 = ap_const_lv3_5) else "0";
    icmp_ln21_fu_824_p2 <= "1" when (y_0_reg_280 = ap_const_lv3_5) else "0";
    icmp_ln23_fu_862_p2 <= "1" when (k_0_reg_292 = ap_const_lv3_6) else "0";
    icmp_ln32_fu_968_p2 <= "1" when (i6_0_reg_303 = ap_const_lv5_1C) else "0";
    icmp_ln34_fu_1014_p2 <= "1" when (j7_0_reg_314 = ap_const_lv5_1C) else "0";
    icmp_ln36_fu_1065_p2 <= "1" when (k8_0_reg_325 = ap_const_lv3_6) else "0";
    icmp_ln571_fu_471_p2 <= "1" when (trunc_ln556_fu_415_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_483_p2 <= "1" when (signed(F2_fu_477_p2) > signed(ap_const_lv12_A)) else "0";
    icmp_ln582_fu_509_p2 <= "1" when (F2_fu_477_p2 = ap_const_lv12_A) else "0";
    icmp_ln585_fu_542_p2 <= "1" when (unsigned(sh_amt_reg_1208) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_529_p2 <= "1" when (tmp_20_fu_519_p4 = ap_const_lv8_0) else "0";
    icmp_ln7_fu_340_p2 <= "1" when (i_0_reg_223 = ap_const_lv6_20) else "0";
    icmp_ln9_fu_380_p2 <= "1" when (j_0_reg_234 = ap_const_lv6_20) else "0";

    in_V_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state6, zext_ln203_11_fu_535_p1, zext_ln1116_fu_849_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            in_V_address0 <= zext_ln1116_fu_849_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            in_V_address0 <= zext_ln203_11_fu_535_p1(10 - 1 downto 0);
        else 
            in_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    in_V_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            in_V_ce0 <= ap_const_logic_1;
        else 
            in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_V_d0 <= 
        select_ln603_2_fu_674_p3 when (or_ln603_2_fu_682_p2(0) = '1') else 
        ap_const_lv16_0;

    in_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            in_V_we0 <= ap_const_logic_1;
        else 
            in_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_r_Addr_A <= std_logic_vector(shift_left(unsigned(input_r_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    input_r_Addr_A_orig <= zext_ln11_1_fu_406_p1(32 - 1 downto 0);
    input_r_Din_A <= ap_const_lv32_0;

    input_r_EN_A_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_EN_A <= ap_const_logic_1;
        else 
            input_r_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    input_r_WEN_A <= ap_const_lv4_0;
    ireg_V_fu_411_p1 <= grp_fu_336_p1;
    j_2_fu_386_p2 <= std_logic_vector(unsigned(j_0_reg_234) + unsigned(ap_const_lv6_1));
    j_3_fu_1020_p2 <= std_logic_vector(unsigned(j7_0_reg_314) + unsigned(ap_const_lv5_1));
    j_fu_749_p2 <= std_logic_vector(unsigned(j5_0_reg_257) + unsigned(ap_const_lv5_1));
    k_2_fu_868_p2 <= std_logic_vector(unsigned(k_0_reg_292) + unsigned(ap_const_lv3_1));
    k_fu_1071_p2 <= std_logic_vector(unsigned(k8_0_reg_325) + unsigned(ap_const_lv3_1));
    man_V_1_fu_457_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_9_fu_453_p1));
    man_V_2_fu_463_p3 <= 
        man_V_1_fu_457_p2 when (p_Result_s_fu_419_p3(0) = '1') else 
        p_Result_9_fu_453_p1;
    or_ln581_fu_631_p2 <= (or_ln582_fu_598_p2 or icmp_ln581_reg_1202);
    or_ln582_fu_598_p2 <= (icmp_ln582_reg_1214 or icmp_ln571_reg_1196);
    or_ln603_1_fu_668_p2 <= (and_ln585_fu_619_p2 or and_ln582_fu_593_p2);
    or_ln603_2_fu_682_p2 <= (or_ln603_fu_655_p2 or or_ln603_1_fu_668_p2);
    or_ln603_fu_655_p2 <= (and_ln603_fu_642_p2 or and_ln585_1_fu_625_p2);

    out_V_address0_assign_proc : process(ap_CS_fsm_state12, out_V_addr_5_reg_1311, ap_CS_fsm_state17, out_V_addr_reg_1355, ap_CS_fsm_state14, ap_CS_fsm_state18, zext_ln1265_16_fu_942_p1, zext_ln1265_15_fu_1091_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            out_V_address0 <= out_V_addr_reg_1355;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_V_address0 <= zext_ln1265_15_fu_1091_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_V_address0 <= out_V_addr_5_reg_1311;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_V_address0 <= zext_ln1265_16_fu_942_p1(13 - 1 downto 0);
        else 
            out_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    out_V_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            out_V_ce0 <= ap_const_logic_1;
        else 
            out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_V_d0_assign_proc : process(trunc_ln_reg_1316, ap_CS_fsm_state14, ap_CS_fsm_state18, zext_ln39_fu_1136_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            out_V_d0 <= zext_ln39_fu_1136_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_V_d0 <= trunc_ln_reg_1316;
        else 
            out_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_V_we0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            out_V_we0 <= ap_const_logic_1;
        else 
            out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_9_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_445_p3),54));
    p_Result_s_fu_419_p3 <= ireg_V_fu_411_p1(63 downto 63);
    p_shl2_cast_fu_768_p3 <= (trunc_ln1265_fu_764_p1 & ap_const_lv3_0);
    p_shl8_cast_fu_1039_p3 <= (trunc_ln1265_1_fu_1035_p1 & ap_const_lv3_0);
    select_ln39_fu_1128_p3 <= 
        ap_const_lv15_0 when (tmp_24_fu_1120_p3(0) = '1') else 
        add_ln1495_fu_1114_p2;
    select_ln588_fu_571_p3 <= 
        ap_const_lv16_FFFF when (tmp_21_fu_563_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln603_1_fu_661_p3 <= 
        select_ln588_fu_571_p3 when (and_ln585_fu_619_p2(0) = '1') else 
        trunc_ln583_reg_1220;
    select_ln603_2_fu_674_p3 <= 
        select_ln603_fu_647_p3 when (or_ln603_fu_655_p2(0) = '1') else 
        select_ln603_1_fu_661_p3;
    select_ln603_fu_647_p3 <= 
        shl_ln604_fu_583_p2 when (and_ln603_fu_642_p2(0) = '1') else 
        trunc_ln586_fu_556_p1;
        sext_ln1192_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_V_q0),26));

        sext_ln1265_1_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1265_1_fu_1004_p2),12));

        sext_ln1265_2_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_fu_776_p3),14));

        sext_ln1265_3_fu_1055_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_fu_1047_p3),14));

        sext_ln1265_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1265_fu_733_p2),12));

        sext_ln581_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1208),32));

    sext_ln581cast_fu_579_p1 <= sext_ln581_fu_539_p1(16 - 1 downto 0);
    sh_amt_fu_501_p3 <= 
        add_ln581_fu_489_p2 when (icmp_ln581_fu_483_p2(0) = '1') else 
        sub_ln581_fu_495_p2;
    shl_ln604_fu_583_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_1220),to_integer(unsigned('0' & sext_ln581cast_fu_579_p1(16-1 downto 0)))));
    shl_ln_fu_368_p3 <= (trunc_ln11_fu_364_p1 & ap_const_lv5_0);
    sub_ln1265_1_fu_1004_p2 <= std_logic_vector(unsigned(zext_ln1265_10_fu_988_p1) - unsigned(zext_ln1265_11_fu_1000_p1));
    sub_ln1265_2_fu_788_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_768_p3) - unsigned(sext_ln1265_2_fu_784_p1));
    sub_ln1265_3_fu_1059_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_1039_p3) - unsigned(sext_ln1265_3_fu_1055_p1));
    sub_ln1265_fu_733_p2 <= std_logic_vector(unsigned(zext_ln1265_8_fu_717_p1) - unsigned(zext_ln1265_9_fu_729_p1));
    sub_ln581_fu_495_p2 <= std_logic_vector(unsigned(ap_const_lv12_A) - unsigned(F2_fu_477_p2));
    tmp_12_fu_352_p3 <= (i_0_reg_223 & ap_const_lv5_0);
    tmp_13_fu_709_p3 <= (i4_0_reg_245 & ap_const_lv5_0);
    tmp_14_fu_721_p3 <= (i4_0_reg_245 & ap_const_lv2_0);
    tmp_15_fu_980_p3 <= (i6_0_reg_303 & ap_const_lv5_0);
    tmp_16_fu_992_p3 <= (i6_0_reg_303 & ap_const_lv2_0);
    tmp_17_fu_842_p3 <= (add_ln25_reg_1265 & add_ln25_1_fu_836_p2);
    tmp_18_fu_882_p3 <= (k_0_reg_292 & ap_const_lv2_0);
    tmp_20_fu_519_p4 <= sh_amt_fu_501_p3(11 downto 4);
    tmp_21_fu_563_p3 <= bitcast_ln696_fu_560_p1(31 downto 31);
    tmp_22_fu_776_p3 <= (add_ln1265_fu_759_p2 & ap_const_lv1_0);
    tmp_23_fu_1047_p3 <= (add_ln1265_4_fu_1030_p2 & ap_const_lv1_0);
    tmp_24_fu_1120_p3 <= add_ln703_fu_1108_p2(15 downto 15);
    tmp_25_fu_909_p3 <= (add_ln1117_9_fu_900_p2 & ap_const_lv2_0);
    tmp_fu_445_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_441_p1);
    trunc_ln11_fu_364_p1 <= i_0_reg_223(5 - 1 downto 0);
    trunc_ln1265_1_fu_1035_p1 <= add_ln1265_4_fu_1030_p2(11 - 1 downto 0);
    trunc_ln1265_fu_764_p1 <= add_ln1265_fu_759_p2(11 - 1 downto 0);
    trunc_ln556_fu_415_p1 <= ireg_V_fu_411_p1(63 - 1 downto 0);
    trunc_ln565_fu_441_p1 <= ireg_V_fu_411_p1(52 - 1 downto 0);
    trunc_ln583_fu_515_p1 <= man_V_2_fu_463_p3(16 - 1 downto 0);
    trunc_ln586_fu_556_p1 <= ashr_ln586_fu_551_p2(16 - 1 downto 0);
    trunc_ln703_fu_1104_p1 <= out_V_q0(15 - 1 downto 0);
    x_fu_804_p2 <= std_logic_vector(unsigned(x_0_reg_269) + unsigned(ap_const_lv3_1));
    xor_ln571_fu_588_p2 <= (icmp_ln571_reg_1196 xor ap_const_lv1_1);
    xor_ln581_fu_636_p2 <= (or_ln581_fu_631_p2 xor ap_const_lv1_1);
    xor_ln582_fu_602_p2 <= (or_ln582_fu_598_p2 xor ap_const_lv1_1);
    xor_ln585_fu_613_p2 <= (icmp_ln585_fu_542_p2 xor ap_const_lv1_1);
    y_fu_830_p2 <= std_logic_vector(unsigned(y_0_reg_280) + unsigned(ap_const_lv3_1));
    zext_ln1116_8_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_280),9));
    zext_ln1116_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_842_p3),64));
    zext_ln1117_12_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_292),6));
    zext_ln1117_13_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_882_p3),6));
    zext_ln1117_14_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_9_fu_900_p2),9));
    zext_ln1117_15_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_909_p3),9));
    zext_ln1117_16_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_11_fu_927_p2),64));
    zext_ln1117_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_292),14));
    zext_ln11_1_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_fu_401_p2),64));
    zext_ln11_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_352_p3),12));
    zext_ln1265_10_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_980_p3),11));
    zext_ln1265_11_fu_1000_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_992_p3),11));
    zext_ln1265_12_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j5_0_reg_257),12));
    zext_ln1265_13_fu_1026_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j7_0_reg_314),12));
    zext_ln1265_14_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k8_0_reg_325),14));
    zext_ln1265_15_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1265_5_fu_1086_p2),64));
    zext_ln1265_16_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1265_6_fu_937_p2),64));
    zext_ln1265_8_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_709_p3),11));
    zext_ln1265_9_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_721_p3),11));
    zext_ln1265_fu_1096_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(K1_B_V_q0),16));
    zext_ln19_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_269),5));
    zext_ln203_11_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_reg_1175),64));
    zext_ln203_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_234),12));
    zext_ln21_1_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_269),6));
    zext_ln21_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_280),5));
    zext_ln38_fu_1077_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k8_0_reg_325),64));
    zext_ln39_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln39_fu_1128_p3),16));
    zext_ln461_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_427_p4),12));
    zext_ln586_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_539_p1),54));
    zext_ln703_fu_1100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(K1_B_V_q0),15));
    zext_ln9_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_234),10));
end behav;
