-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv1_K1_W_V_rom is 
    generic(
             DWIDTH     : integer := 11; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 150
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv1_K1_W_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11101010011", 1 => "00010010111", 2 => "00010111000", 
    3 => "00010011010", 4 => "00011001010", 5 => "00010111100", 
    6 => "00000010001", 7 => "00100101001", 8 => "00011101011", 
    9 => "11110000100", 10 => "00011001101", 11 => "00110010111", 
    12 => "00011100000", 13 => "11110101011", 14 => "11010111000", 
    15 => "00011011100", 16 => "00111100100", 17 => "00110010000", 
    18 => "11111011100", 19 => "11110110101", 20 => "00100010010", 
    21 => "00110100010", 22 => "00110000110", 23 => "11111110011", 
    24 => "00001100100", 25 => "11111010000", 26 => "11100001101", 
    27 => "11011001110", 28 => "11110000011", 29 => "11111010011", 
    30 => "11100111101", 31 => "11011000101", 32 => "00000010101", 
    33 => "11010111011", 34 => "11100110001", 35 => "11111010100", 
    36 => "11110010001", 37 => "11111000111", 38 => "11100001101", 
    39 => "11100001011", 40 => "00100001111", 41 => "11110001111", 
    42 => "11100110001", 43 => "11110101100", 44 => "11101010100", 
    45 => "00110000101", 46 => "00000100010", 47 => "00010000010", 
    48 => "11111000001", 49 => "11110101100", 50 => "00000001010", 
    51 => "11011001001", 52 => "00001011001", 53 => "00011101011", 
    54 => "00011111101", 55 => "11101010100", 56 => "11010001011", 
    57 => "11110010011", 58 => "00100000011", 59 => "00011100110", 
    60 => "11010111100", 61 => "11111000100", 62 => "11110010101", 
    63 => "00101111001", 64 => "00001011011", 65 => "00011010001", 
    66 => "11110010011", 67 => "00101100101", 68 => "00010110010", 
    69 => "00001001001", 70 => "00001100101", 71 => "00011011000", 
    72 => "11111100110", 73 => "00110001011", 74 => "00100000100", 
    75 => "00001011111", 76 => "00011101110", 77 => "11111000011", 
    78 => "11010010000", 79 => "11101111001", 80 => "00011001000", 
    81 => "00101000110", 82 => "11101100100", 83 => "11100110110", 
    84 => "11000011100", 85 => "00010011000", 86 => "00011011111", 
    87 => "11110011110", 88 => "11100101011", 89 => "11111010100", 
    90 => "00111000100", 91 => "00100001100", 92 => "11111001100", 
    93 => "11110111001", 94 => "11110101110", 95 => "00100100101", 
    96 => "00111011001", 97 => "00010010101", 98 => "00100111110", 
    99 => "00011101111", 100 => "11110010100", 101 => "11110111001", 
    102 => "11101101111", 103 => "11111110011", 104 => "11101000101", 
    105 => "11110100111", 106 => "11101010010", 107 => "11110001110", 
    108 => "00000111011", 109 => "11011101111", 110 => "11110111110", 
    111 => "11101001101", 112 => "11100001101", 113 => "00001011111", 
    114 => "11110011000", 115 => "11110110110", 116 => "11100101010", 
    117 => "11111111101", 118 => "11110100001", 119 => "11101100010", 
    120 => "11111001000", 121 => "00000010010", 122 => "11100110011", 
    123 => "11111000101", 124 => "11100010100", 125 => "00101010110", 
    126 => "00000011101", 127 => "00000000100", 128 => "11011001001", 
    129 => "11011010010", 130 => "00010000100", 131 => "00110010000", 
    132 => "00000000111", 133 => "00001101111", 134 => "11111010100", 
    135 => "00001101001", 136 => "00101010000", 137 => "00001101110", 
    138 => "11111111100", 139 => "11110011100", 140 => "00100010010", 
    141 => "01000001001", 142 => "00011100101", 143 => "00000111000", 
    144 => "00000101000", 145 => "00011001111", 146 => "00110000101", 
    147 => "00110010111", 148 => "00100010000", 149 => "00110001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv1_K1_W_V is
    generic (
        DataWidth : INTEGER := 11;
        AddressRange : INTEGER := 150;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv1_K1_W_V is
    component conv1_K1_W_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv1_K1_W_V_rom_U :  component conv1_K1_W_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


