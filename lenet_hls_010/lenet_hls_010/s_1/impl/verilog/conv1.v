// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_Addr_A,
        input_r_EN_A,
        input_r_WEN_A,
        input_r_Din_A,
        input_r_Dout_A,
        out_V_address0,
        out_V_ce0,
        out_V_we0,
        out_V_d0,
        out_V_q0
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] input_r_Addr_A;
output   input_r_EN_A;
output  [3:0] input_r_WEN_A;
output  [31:0] input_r_Din_A;
input  [31:0] input_r_Dout_A;
output  [12:0] out_V_address0;
output   out_V_ce0;
output   out_V_we0;
output  [15:0] out_V_d0;
input  [15:0] out_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_EN_A;
reg[12:0] out_V_address0;
reg out_V_ce0;
reg out_V_we0;
reg[15:0] out_V_d0;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] K1_W_V_address0;
reg    K1_W_V_ce0;
wire  signed [10:0] K1_W_V_q0;
wire   [2:0] K1_B_V_address0;
reg    K1_B_V_ce0;
wire   [8:0] K1_B_V_q0;
wire   [5:0] i_fu_346_p2;
reg   [5:0] i_reg_1152;
wire    ap_CS_fsm_state2;
wire   [11:0] zext_ln11_fu_360_p1;
reg   [11:0] zext_ln11_reg_1157;
wire   [0:0] icmp_ln7_fu_340_p2;
wire   [9:0] shl_ln_fu_368_p3;
reg   [9:0] shl_ln_reg_1162;
wire   [5:0] j_2_fu_386_p2;
reg   [5:0] j_2_reg_1170;
wire    ap_CS_fsm_state3;
wire   [11:0] add_ln203_fu_396_p2;
reg   [11:0] add_ln203_reg_1175;
wire   [0:0] icmp_ln9_fu_380_p2;
reg   [31:0] input_load_reg_1185;
wire    ap_CS_fsm_state4;
wire   [53:0] man_V_2_fu_463_p3;
reg   [53:0] man_V_2_reg_1191;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln571_fu_471_p2;
reg   [0:0] icmp_ln571_reg_1196;
wire   [0:0] icmp_ln581_fu_483_p2;
reg   [0:0] icmp_ln581_reg_1202;
wire  signed [11:0] sh_amt_fu_501_p3;
reg  signed [11:0] sh_amt_reg_1208;
wire   [0:0] icmp_ln582_fu_509_p2;
reg   [0:0] icmp_ln582_reg_1214;
wire   [15:0] trunc_ln583_fu_515_p1;
reg   [15:0] trunc_ln583_reg_1220;
wire   [0:0] icmp_ln603_fu_529_p2;
reg   [0:0] icmp_ln603_reg_1226;
wire   [4:0] i_6_fu_703_p2;
reg   [4:0] i_6_reg_1234;
wire    ap_CS_fsm_state7;
wire  signed [11:0] sext_ln1265_fu_739_p1;
reg  signed [11:0] sext_ln1265_reg_1239;
wire   [0:0] icmp_ln15_fu_697_p2;
wire   [4:0] j_fu_749_p2;
reg   [4:0] j_reg_1247;
wire    ap_CS_fsm_state8;
wire   [13:0] sub_ln1265_2_fu_788_p2;
reg   [13:0] sub_ln1265_2_reg_1252;
wire   [0:0] icmp_ln17_fu_743_p2;
wire   [2:0] x_fu_804_p2;
reg   [2:0] x_reg_1260;
wire    ap_CS_fsm_state9;
wire   [4:0] add_ln25_fu_810_p2;
reg   [4:0] add_ln25_reg_1265;
wire   [0:0] icmp_ln19_fu_798_p2;
wire   [5:0] zext_ln21_1_fu_816_p1;
reg   [5:0] zext_ln21_1_reg_1270;
wire   [2:0] y_fu_830_p2;
reg   [2:0] y_reg_1278;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln21_fu_824_p2;
wire   [8:0] zext_ln1116_8_fu_854_p1;
reg   [8:0] zext_ln1116_8_reg_1288;
wire    ap_CS_fsm_state11;
wire  signed [25:0] sext_ln1192_fu_858_p1;
reg  signed [25:0] sext_ln1192_reg_1293;
wire   [2:0] k_2_fu_868_p2;
reg   [2:0] k_2_reg_1301;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln23_fu_862_p2;
reg   [12:0] out_V_addr_5_reg_1311;
reg   [15:0] trunc_ln_reg_1316;
wire    ap_CS_fsm_state13;
wire   [4:0] i_7_fu_974_p2;
reg   [4:0] i_7_reg_1324;
wire    ap_CS_fsm_state15;
wire  signed [11:0] sext_ln1265_1_fu_1010_p1;
reg  signed [11:0] sext_ln1265_1_reg_1329;
wire   [0:0] icmp_ln32_fu_968_p2;
wire   [4:0] j_3_fu_1020_p2;
reg   [4:0] j_3_reg_1337;
wire    ap_CS_fsm_state16;
wire   [13:0] sub_ln1265_3_fu_1059_p2;
reg   [13:0] sub_ln1265_3_reg_1342;
wire   [0:0] icmp_ln34_fu_1014_p2;
wire   [2:0] k_fu_1071_p2;
reg   [2:0] k_reg_1350;
wire    ap_CS_fsm_state17;
reg   [12:0] out_V_addr_reg_1355;
wire   [0:0] icmp_ln36_fu_1065_p2;
reg   [9:0] in_V_address0;
reg    in_V_ce0;
reg    in_V_we0;
wire   [15:0] in_V_d0;
wire   [15:0] in_V_q0;
reg   [5:0] i_0_reg_223;
reg   [5:0] j_0_reg_234;
wire    ap_CS_fsm_state6;
reg   [4:0] i4_0_reg_245;
reg   [4:0] j5_0_reg_257;
reg   [2:0] x_0_reg_269;
reg   [2:0] y_0_reg_280;
reg   [2:0] k_0_reg_292;
wire    ap_CS_fsm_state14;
reg   [4:0] i6_0_reg_303;
reg   [4:0] j7_0_reg_314;
reg   [2:0] k8_0_reg_325;
wire    ap_CS_fsm_state18;
wire   [63:0] zext_ln11_1_fu_406_p1;
wire   [63:0] zext_ln203_11_fu_535_p1;
wire   [63:0] zext_ln1116_fu_849_p1;
wire   [63:0] zext_ln1117_16_fu_932_p1;
wire   [63:0] zext_ln1265_16_fu_942_p1;
wire   [63:0] zext_ln1265_15_fu_1091_p1;
wire   [63:0] zext_ln38_fu_1077_p1;
wire   [31:0] input_r_Addr_A_orig;
wire   [15:0] zext_ln39_fu_1136_p1;
wire   [10:0] tmp_12_fu_352_p3;
wire   [4:0] trunc_ln11_fu_364_p1;
wire   [11:0] zext_ln203_fu_392_p1;
wire   [9:0] zext_ln9_fu_376_p1;
wire   [9:0] add_ln11_fu_401_p2;
wire   [63:0] grp_fu_336_p1;
wire   [63:0] ireg_V_fu_411_p1;
wire   [10:0] exp_tmp_V_fu_427_p4;
wire   [51:0] trunc_ln565_fu_441_p1;
wire   [52:0] tmp_fu_445_p3;
wire   [53:0] p_Result_9_fu_453_p1;
wire   [0:0] p_Result_s_fu_419_p3;
wire   [53:0] man_V_1_fu_457_p2;
wire   [62:0] trunc_ln556_fu_415_p1;
wire   [11:0] zext_ln461_fu_437_p1;
wire   [11:0] F2_fu_477_p2;
wire   [11:0] add_ln581_fu_489_p2;
wire   [11:0] sub_ln581_fu_495_p2;
wire   [7:0] tmp_20_fu_519_p4;
wire  signed [31:0] sext_ln581_fu_539_p1;
wire   [53:0] zext_ln586_fu_547_p1;
wire   [53:0] ashr_ln586_fu_551_p2;
wire   [31:0] bitcast_ln696_fu_560_p1;
wire   [0:0] tmp_21_fu_563_p3;
wire   [15:0] sext_ln581cast_fu_579_p1;
wire   [0:0] xor_ln571_fu_588_p2;
wire   [0:0] or_ln582_fu_598_p2;
wire   [0:0] xor_ln582_fu_602_p2;
wire   [0:0] icmp_ln585_fu_542_p2;
wire   [0:0] and_ln581_fu_608_p2;
wire   [0:0] xor_ln585_fu_613_p2;
wire   [0:0] or_ln581_fu_631_p2;
wire   [0:0] xor_ln581_fu_636_p2;
wire   [0:0] and_ln603_fu_642_p2;
wire   [15:0] shl_ln604_fu_583_p2;
wire   [15:0] trunc_ln586_fu_556_p1;
wire   [0:0] and_ln585_1_fu_625_p2;
wire   [0:0] and_ln585_fu_619_p2;
wire   [15:0] select_ln588_fu_571_p3;
wire   [0:0] and_ln582_fu_593_p2;
wire   [0:0] or_ln603_fu_655_p2;
wire   [15:0] select_ln603_fu_647_p3;
wire   [15:0] select_ln603_1_fu_661_p3;
wire   [0:0] or_ln603_1_fu_668_p2;
wire   [0:0] or_ln603_2_fu_682_p2;
wire   [15:0] select_ln603_2_fu_674_p3;
wire   [9:0] tmp_13_fu_709_p3;
wire   [6:0] tmp_14_fu_721_p3;
wire   [10:0] zext_ln1265_8_fu_717_p1;
wire   [10:0] zext_ln1265_9_fu_729_p1;
wire   [10:0] sub_ln1265_fu_733_p2;
wire   [11:0] zext_ln1265_12_fu_755_p1;
wire   [11:0] add_ln1265_fu_759_p2;
wire   [10:0] trunc_ln1265_fu_764_p1;
wire   [12:0] tmp_22_fu_776_p3;
wire   [13:0] p_shl2_cast_fu_768_p3;
wire  signed [13:0] sext_ln1265_2_fu_784_p1;
wire   [4:0] zext_ln19_fu_794_p1;
wire   [4:0] zext_ln21_fu_820_p1;
wire   [4:0] add_ln25_1_fu_836_p2;
wire   [9:0] tmp_17_fu_842_p3;
wire   [4:0] tmp_18_fu_882_p3;
wire   [5:0] zext_ln1117_13_fu_890_p1;
wire   [5:0] zext_ln1117_12_fu_878_p1;
wire   [5:0] add_ln1117_fu_894_p2;
wire   [5:0] add_ln1117_9_fu_900_p2;
wire   [7:0] tmp_25_fu_909_p3;
wire   [8:0] zext_ln1117_15_fu_917_p1;
wire   [8:0] zext_ln1117_14_fu_905_p1;
wire   [8:0] add_ln1117_10_fu_921_p2;
wire   [8:0] add_ln1117_11_fu_927_p2;
wire   [13:0] zext_ln1117_fu_874_p1;
wire   [13:0] add_ln1265_6_fu_937_p2;
wire  signed [25:0] grp_fu_1141_p3;
wire   [9:0] tmp_15_fu_980_p3;
wire   [6:0] tmp_16_fu_992_p3;
wire   [10:0] zext_ln1265_10_fu_988_p1;
wire   [10:0] zext_ln1265_11_fu_1000_p1;
wire   [10:0] sub_ln1265_1_fu_1004_p2;
wire   [11:0] zext_ln1265_13_fu_1026_p1;
wire   [11:0] add_ln1265_4_fu_1030_p2;
wire   [10:0] trunc_ln1265_1_fu_1035_p1;
wire   [12:0] tmp_23_fu_1047_p3;
wire   [13:0] p_shl8_cast_fu_1039_p3;
wire  signed [13:0] sext_ln1265_3_fu_1055_p1;
wire   [13:0] zext_ln1265_14_fu_1082_p1;
wire   [13:0] add_ln1265_5_fu_1086_p2;
wire   [15:0] zext_ln1265_fu_1096_p1;
wire   [14:0] zext_ln703_fu_1100_p1;
wire   [14:0] trunc_ln703_fu_1104_p1;
wire   [15:0] add_ln703_fu_1108_p2;
wire   [0:0] tmp_24_fu_1120_p3;
wire   [14:0] add_ln1495_fu_1114_p2;
wire   [14:0] select_ln39_fu_1128_p3;
wire  signed [15:0] grp_fu_1141_p0;
wire   [25:0] grp_fu_1141_p2;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

conv1_K1_W_V #(
    .DataWidth( 11 ),
    .AddressRange( 150 ),
    .AddressWidth( 8 ))
K1_W_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(K1_W_V_address0),
    .ce0(K1_W_V_ce0),
    .q0(K1_W_V_q0)
);

conv1_K1_B_V #(
    .DataWidth( 9 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
K1_B_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(K1_B_V_address0),
    .ce0(K1_B_V_ce0),
    .q0(K1_B_V_q0)
);

conv1_in_V #(
    .DataWidth( 16 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
in_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(in_V_address0),
    .ce0(in_V_ce0),
    .we0(in_V_we0),
    .d0(in_V_d0),
    .q0(in_V_q0)
);

lenet_fpext_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
lenet_fpext_32ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_r_Dout_A),
    .ce(1'b1),
    .dout(grp_fu_336_p1)
);

lenet_mac_muladd_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 26 ))
lenet_mac_muladd_cud_U2(
    .din0(grp_fu_1141_p0),
    .din1(K1_W_V_q0),
    .din2(grp_fu_1141_p2),
    .dout(grp_fu_1141_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_340_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i4_0_reg_245 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln17_fu_743_p2 == 1'd1))) begin
        i4_0_reg_245 <= i_6_reg_1234;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln15_fu_697_p2 == 1'd1))) begin
        i6_0_reg_303 <= 5'd0;
    end else if (((icmp_ln34_fu_1014_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        i6_0_reg_303 <= i_7_reg_1324;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_380_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_223 <= i_reg_1152;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_223 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_697_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        j5_0_reg_257 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln19_fu_798_p2 == 1'd1))) begin
        j5_0_reg_257 <= j_reg_1247;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_968_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        j7_0_reg_314 <= 5'd0;
    end else if (((icmp_ln36_fu_1065_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        j7_0_reg_314 <= j_3_reg_1337;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_340_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_234 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_reg_234 <= j_2_reg_1170;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        k8_0_reg_325 <= k_reg_1350;
    end else if (((icmp_ln34_fu_1014_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        k8_0_reg_325 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        k_0_reg_292 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        k_0_reg_292 <= k_2_reg_1301;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln21_fu_824_p2 == 1'd1))) begin
        x_0_reg_269 <= x_reg_1260;
    end else if (((icmp_ln17_fu_743_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        x_0_reg_269 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln23_fu_862_p2 == 1'd1))) begin
        y_0_reg_280 <= y_reg_1278;
    end else if (((icmp_ln19_fu_798_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        y_0_reg_280 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_380_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln203_reg_1175 <= add_ln203_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_798_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        add_ln25_reg_1265 <= add_ln25_fu_810_p2;
        zext_ln21_1_reg_1270[2 : 0] <= zext_ln21_1_fu_816_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_6_reg_1234 <= i_6_fu_703_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_7_reg_1324 <= i_7_fu_974_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1152 <= i_fu_346_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln571_reg_1196 <= icmp_ln571_fu_471_p2;
        icmp_ln581_reg_1202 <= icmp_ln581_fu_483_p2;
        icmp_ln582_reg_1214 <= icmp_ln582_fu_509_p2;
        icmp_ln603_reg_1226 <= icmp_ln603_fu_529_p2;
        man_V_2_reg_1191 <= man_V_2_fu_463_p3;
        sh_amt_reg_1208 <= sh_amt_fu_501_p3;
        trunc_ln583_reg_1220 <= trunc_ln583_fu_515_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_load_reg_1185 <= input_r_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_2_reg_1170 <= j_2_fu_386_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        j_3_reg_1337 <= j_3_fu_1020_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_1247 <= j_fu_749_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        k_2_reg_1301 <= k_2_fu_868_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        k_reg_1350 <= k_fu_1071_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_862_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        out_V_addr_5_reg_1311 <= zext_ln1265_16_fu_942_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_1065_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        out_V_addr_reg_1355 <= zext_ln1265_15_fu_1091_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sext_ln1192_reg_1293 <= sext_ln1192_fu_858_p1;
        zext_ln1116_8_reg_1288[2 : 0] <= zext_ln1116_8_fu_854_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_968_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        sext_ln1265_1_reg_1329[11 : 2] <= sext_ln1265_1_fu_1010_p1[11 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_697_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        sext_ln1265_reg_1239[11 : 2] <= sext_ln1265_fu_739_p1[11 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_340_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_1162[9 : 5] <= shl_ln_fu_368_p3[9 : 5];
        zext_ln11_reg_1157[10 : 5] <= zext_ln11_fu_360_p1[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_743_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        sub_ln1265_2_reg_1252[13 : 1] <= sub_ln1265_2_fu_788_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_1014_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        sub_ln1265_3_reg_1342[13 : 1] <= sub_ln1265_3_fu_1059_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        trunc_ln_reg_1316 <= {{grp_fu_1141_p3[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        x_reg_1260 <= x_fu_804_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        y_reg_1278 <= y_fu_830_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        K1_B_V_ce0 = 1'b1;
    end else begin
        K1_B_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        K1_W_V_ce0 = 1'b1;
    end else begin
        K1_W_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln32_fu_968_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_968_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        in_V_address0 = zext_ln1116_fu_849_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        in_V_address0 = zext_ln203_11_fu_535_p1;
    end else begin
        in_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10))) begin
        in_V_ce0 = 1'b1;
    end else begin
        in_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_V_we0 = 1'b1;
    end else begin
        in_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_r_EN_A = 1'b1;
    end else begin
        input_r_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        out_V_address0 = out_V_addr_reg_1355;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        out_V_address0 = zext_ln1265_15_fu_1091_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        out_V_address0 = out_V_addr_5_reg_1311;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        out_V_address0 = zext_ln1265_16_fu_942_p1;
    end else begin
        out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state12))) begin
        out_V_ce0 = 1'b1;
    end else begin
        out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        out_V_d0 = zext_ln39_fu_1136_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        out_V_d0 = trunc_ln_reg_1316;
    end else begin
        out_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14))) begin
        out_V_we0 = 1'b1;
    end else begin
        out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln7_fu_340_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln9_fu_380_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln15_fu_697_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln17_fu_743_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln19_fu_798_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln21_fu_824_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln23_fu_862_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln32_fu_968_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln34_fu_1014_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((icmp_ln36_fu_1065_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_477_p2 = (12'd1075 - zext_ln461_fu_437_p1);

assign K1_B_V_address0 = zext_ln38_fu_1077_p1;

assign K1_W_V_address0 = zext_ln1117_16_fu_932_p1;

assign add_ln1117_10_fu_921_p2 = (zext_ln1117_15_fu_917_p1 + zext_ln1117_14_fu_905_p1);

assign add_ln1117_11_fu_927_p2 = (zext_ln1116_8_reg_1288 + add_ln1117_10_fu_921_p2);

assign add_ln1117_9_fu_900_p2 = (zext_ln21_1_reg_1270 + add_ln1117_fu_894_p2);

assign add_ln1117_fu_894_p2 = (zext_ln1117_13_fu_890_p1 + zext_ln1117_12_fu_878_p1);

assign add_ln11_fu_401_p2 = (shl_ln_reg_1162 + zext_ln9_fu_376_p1);

assign add_ln1265_4_fu_1030_p2 = ($signed(sext_ln1265_1_reg_1329) + $signed(zext_ln1265_13_fu_1026_p1));

assign add_ln1265_5_fu_1086_p2 = (sub_ln1265_3_reg_1342 + zext_ln1265_14_fu_1082_p1);

assign add_ln1265_6_fu_937_p2 = (zext_ln1117_fu_874_p1 + sub_ln1265_2_reg_1252);

assign add_ln1265_fu_759_p2 = ($signed(sext_ln1265_reg_1239) + $signed(zext_ln1265_12_fu_755_p1));

assign add_ln1495_fu_1114_p2 = (zext_ln703_fu_1100_p1 + trunc_ln703_fu_1104_p1);

assign add_ln203_fu_396_p2 = (zext_ln11_reg_1157 + zext_ln203_fu_392_p1);

assign add_ln25_1_fu_836_p2 = (zext_ln21_fu_820_p1 + j5_0_reg_257);

assign add_ln25_fu_810_p2 = (i4_0_reg_245 + zext_ln19_fu_794_p1);

assign add_ln581_fu_489_p2 = ($signed(12'd4086) + $signed(F2_fu_477_p2));

assign add_ln703_fu_1108_p2 = (out_V_q0 + zext_ln1265_fu_1096_p1);

assign and_ln581_fu_608_p2 = (xor_ln582_fu_602_p2 & icmp_ln581_reg_1202);

assign and_ln582_fu_593_p2 = (xor_ln571_fu_588_p2 & icmp_ln582_reg_1214);

assign and_ln585_1_fu_625_p2 = (icmp_ln585_fu_542_p2 & and_ln581_fu_608_p2);

assign and_ln585_fu_619_p2 = (xor_ln585_fu_613_p2 & and_ln581_fu_608_p2);

assign and_ln603_fu_642_p2 = (xor_ln581_fu_636_p2 & icmp_ln603_reg_1226);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ashr_ln586_fu_551_p2 = $signed(man_V_2_reg_1191) >>> zext_ln586_fu_547_p1;

assign bitcast_ln696_fu_560_p1 = input_load_reg_1185;

assign exp_tmp_V_fu_427_p4 = {{ireg_V_fu_411_p1[62:52]}};

assign grp_fu_1141_p0 = sext_ln1192_reg_1293;

assign grp_fu_1141_p2 = {{out_V_q0}, {10'd0}};

assign i_6_fu_703_p2 = (i4_0_reg_245 + 5'd1);

assign i_7_fu_974_p2 = (i6_0_reg_303 + 5'd1);

assign i_fu_346_p2 = (i_0_reg_223 + 6'd1);

assign icmp_ln15_fu_697_p2 = ((i4_0_reg_245 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_743_p2 = ((j5_0_reg_257 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_798_p2 = ((x_0_reg_269 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_824_p2 = ((y_0_reg_280 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_862_p2 = ((k_0_reg_292 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_968_p2 = ((i6_0_reg_303 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_1014_p2 = ((j7_0_reg_314 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_1065_p2 = ((k8_0_reg_325 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_471_p2 = ((trunc_ln556_fu_415_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_483_p2 = (($signed(F2_fu_477_p2) > $signed(12'd10)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_509_p2 = ((F2_fu_477_p2 == 12'd10) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_542_p2 = ((sh_amt_reg_1208 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_529_p2 = ((tmp_20_fu_519_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_340_p2 = ((i_0_reg_223 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_380_p2 = ((j_0_reg_234 == 6'd32) ? 1'b1 : 1'b0);

assign in_V_d0 = ((or_ln603_2_fu_682_p2[0:0] === 1'b1) ? select_ln603_2_fu_674_p3 : 16'd0);

assign input_r_Addr_A = input_r_Addr_A_orig << 32'd2;

assign input_r_Addr_A_orig = zext_ln11_1_fu_406_p1;

assign input_r_Din_A = 32'd0;

assign input_r_WEN_A = 4'd0;

assign ireg_V_fu_411_p1 = grp_fu_336_p1;

assign j_2_fu_386_p2 = (j_0_reg_234 + 6'd1);

assign j_3_fu_1020_p2 = (j7_0_reg_314 + 5'd1);

assign j_fu_749_p2 = (j5_0_reg_257 + 5'd1);

assign k_2_fu_868_p2 = (k_0_reg_292 + 3'd1);

assign k_fu_1071_p2 = (k8_0_reg_325 + 3'd1);

assign man_V_1_fu_457_p2 = (54'd0 - p_Result_9_fu_453_p1);

assign man_V_2_fu_463_p3 = ((p_Result_s_fu_419_p3[0:0] === 1'b1) ? man_V_1_fu_457_p2 : p_Result_9_fu_453_p1);

assign or_ln581_fu_631_p2 = (or_ln582_fu_598_p2 | icmp_ln581_reg_1202);

assign or_ln582_fu_598_p2 = (icmp_ln582_reg_1214 | icmp_ln571_reg_1196);

assign or_ln603_1_fu_668_p2 = (and_ln585_fu_619_p2 | and_ln582_fu_593_p2);

assign or_ln603_2_fu_682_p2 = (or_ln603_fu_655_p2 | or_ln603_1_fu_668_p2);

assign or_ln603_fu_655_p2 = (and_ln603_fu_642_p2 | and_ln585_1_fu_625_p2);

assign p_Result_9_fu_453_p1 = tmp_fu_445_p3;

assign p_Result_s_fu_419_p3 = ireg_V_fu_411_p1[32'd63];

assign p_shl2_cast_fu_768_p3 = {{trunc_ln1265_fu_764_p1}, {3'd0}};

assign p_shl8_cast_fu_1039_p3 = {{trunc_ln1265_1_fu_1035_p1}, {3'd0}};

assign select_ln39_fu_1128_p3 = ((tmp_24_fu_1120_p3[0:0] === 1'b1) ? 15'd0 : add_ln1495_fu_1114_p2);

assign select_ln588_fu_571_p3 = ((tmp_21_fu_563_p3[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign select_ln603_1_fu_661_p3 = ((and_ln585_fu_619_p2[0:0] === 1'b1) ? select_ln588_fu_571_p3 : trunc_ln583_reg_1220);

assign select_ln603_2_fu_674_p3 = ((or_ln603_fu_655_p2[0:0] === 1'b1) ? select_ln603_fu_647_p3 : select_ln603_1_fu_661_p3);

assign select_ln603_fu_647_p3 = ((and_ln603_fu_642_p2[0:0] === 1'b1) ? shl_ln604_fu_583_p2 : trunc_ln586_fu_556_p1);

assign sext_ln1192_fu_858_p1 = $signed(in_V_q0);

assign sext_ln1265_1_fu_1010_p1 = $signed(sub_ln1265_1_fu_1004_p2);

assign sext_ln1265_2_fu_784_p1 = $signed(tmp_22_fu_776_p3);

assign sext_ln1265_3_fu_1055_p1 = $signed(tmp_23_fu_1047_p3);

assign sext_ln1265_fu_739_p1 = $signed(sub_ln1265_fu_733_p2);

assign sext_ln581_fu_539_p1 = sh_amt_reg_1208;

assign sext_ln581cast_fu_579_p1 = sext_ln581_fu_539_p1[15:0];

assign sh_amt_fu_501_p3 = ((icmp_ln581_fu_483_p2[0:0] === 1'b1) ? add_ln581_fu_489_p2 : sub_ln581_fu_495_p2);

assign shl_ln604_fu_583_p2 = trunc_ln583_reg_1220 << sext_ln581cast_fu_579_p1;

assign shl_ln_fu_368_p3 = {{trunc_ln11_fu_364_p1}, {5'd0}};

assign sub_ln1265_1_fu_1004_p2 = (zext_ln1265_10_fu_988_p1 - zext_ln1265_11_fu_1000_p1);

assign sub_ln1265_2_fu_788_p2 = ($signed(p_shl2_cast_fu_768_p3) - $signed(sext_ln1265_2_fu_784_p1));

assign sub_ln1265_3_fu_1059_p2 = ($signed(p_shl8_cast_fu_1039_p3) - $signed(sext_ln1265_3_fu_1055_p1));

assign sub_ln1265_fu_733_p2 = (zext_ln1265_8_fu_717_p1 - zext_ln1265_9_fu_729_p1);

assign sub_ln581_fu_495_p2 = (12'd10 - F2_fu_477_p2);

assign tmp_12_fu_352_p3 = {{i_0_reg_223}, {5'd0}};

assign tmp_13_fu_709_p3 = {{i4_0_reg_245}, {5'd0}};

assign tmp_14_fu_721_p3 = {{i4_0_reg_245}, {2'd0}};

assign tmp_15_fu_980_p3 = {{i6_0_reg_303}, {5'd0}};

assign tmp_16_fu_992_p3 = {{i6_0_reg_303}, {2'd0}};

assign tmp_17_fu_842_p3 = {{add_ln25_reg_1265}, {add_ln25_1_fu_836_p2}};

assign tmp_18_fu_882_p3 = {{k_0_reg_292}, {2'd0}};

assign tmp_20_fu_519_p4 = {{sh_amt_fu_501_p3[11:4]}};

assign tmp_21_fu_563_p3 = bitcast_ln696_fu_560_p1[32'd31];

assign tmp_22_fu_776_p3 = {{add_ln1265_fu_759_p2}, {1'd0}};

assign tmp_23_fu_1047_p3 = {{add_ln1265_4_fu_1030_p2}, {1'd0}};

assign tmp_24_fu_1120_p3 = add_ln703_fu_1108_p2[32'd15];

assign tmp_25_fu_909_p3 = {{add_ln1117_9_fu_900_p2}, {2'd0}};

assign tmp_fu_445_p3 = {{1'd1}, {trunc_ln565_fu_441_p1}};

assign trunc_ln11_fu_364_p1 = i_0_reg_223[4:0];

assign trunc_ln1265_1_fu_1035_p1 = add_ln1265_4_fu_1030_p2[10:0];

assign trunc_ln1265_fu_764_p1 = add_ln1265_fu_759_p2[10:0];

assign trunc_ln556_fu_415_p1 = ireg_V_fu_411_p1[62:0];

assign trunc_ln565_fu_441_p1 = ireg_V_fu_411_p1[51:0];

assign trunc_ln583_fu_515_p1 = man_V_2_fu_463_p3[15:0];

assign trunc_ln586_fu_556_p1 = ashr_ln586_fu_551_p2[15:0];

assign trunc_ln703_fu_1104_p1 = out_V_q0[14:0];

assign x_fu_804_p2 = (x_0_reg_269 + 3'd1);

assign xor_ln571_fu_588_p2 = (icmp_ln571_reg_1196 ^ 1'd1);

assign xor_ln581_fu_636_p2 = (or_ln581_fu_631_p2 ^ 1'd1);

assign xor_ln582_fu_602_p2 = (or_ln582_fu_598_p2 ^ 1'd1);

assign xor_ln585_fu_613_p2 = (icmp_ln585_fu_542_p2 ^ 1'd1);

assign y_fu_830_p2 = (y_0_reg_280 + 3'd1);

assign zext_ln1116_8_fu_854_p1 = y_0_reg_280;

assign zext_ln1116_fu_849_p1 = tmp_17_fu_842_p3;

assign zext_ln1117_12_fu_878_p1 = k_0_reg_292;

assign zext_ln1117_13_fu_890_p1 = tmp_18_fu_882_p3;

assign zext_ln1117_14_fu_905_p1 = add_ln1117_9_fu_900_p2;

assign zext_ln1117_15_fu_917_p1 = tmp_25_fu_909_p3;

assign zext_ln1117_16_fu_932_p1 = add_ln1117_11_fu_927_p2;

assign zext_ln1117_fu_874_p1 = k_0_reg_292;

assign zext_ln11_1_fu_406_p1 = add_ln11_fu_401_p2;

assign zext_ln11_fu_360_p1 = tmp_12_fu_352_p3;

assign zext_ln1265_10_fu_988_p1 = tmp_15_fu_980_p3;

assign zext_ln1265_11_fu_1000_p1 = tmp_16_fu_992_p3;

assign zext_ln1265_12_fu_755_p1 = j5_0_reg_257;

assign zext_ln1265_13_fu_1026_p1 = j7_0_reg_314;

assign zext_ln1265_14_fu_1082_p1 = k8_0_reg_325;

assign zext_ln1265_15_fu_1091_p1 = add_ln1265_5_fu_1086_p2;

assign zext_ln1265_16_fu_942_p1 = add_ln1265_6_fu_937_p2;

assign zext_ln1265_8_fu_717_p1 = tmp_13_fu_709_p3;

assign zext_ln1265_9_fu_729_p1 = tmp_14_fu_721_p3;

assign zext_ln1265_fu_1096_p1 = K1_B_V_q0;

assign zext_ln19_fu_794_p1 = x_0_reg_269;

assign zext_ln203_11_fu_535_p1 = add_ln203_reg_1175;

assign zext_ln203_fu_392_p1 = j_0_reg_234;

assign zext_ln21_1_fu_816_p1 = x_0_reg_269;

assign zext_ln21_fu_820_p1 = y_0_reg_280;

assign zext_ln38_fu_1077_p1 = k8_0_reg_325;

assign zext_ln39_fu_1136_p1 = select_ln39_fu_1128_p3;

assign zext_ln461_fu_437_p1 = exp_tmp_V_fu_427_p4;

assign zext_ln586_fu_547_p1 = $unsigned(sext_ln581_fu_539_p1);

assign zext_ln703_fu_1100_p1 = K1_B_V_q0;

assign zext_ln9_fu_376_p1 = j_0_reg_234;

always @ (posedge ap_clk) begin
    zext_ln11_reg_1157[4:0] <= 5'b00000;
    zext_ln11_reg_1157[11] <= 1'b0;
    shl_ln_reg_1162[4:0] <= 5'b00000;
    sext_ln1265_reg_1239[1:0] <= 2'b00;
    sub_ln1265_2_reg_1252[0] <= 1'b0;
    zext_ln21_1_reg_1270[5:3] <= 3'b000;
    zext_ln1116_8_reg_1288[8:3] <= 6'b000000;
    sext_ln1265_1_reg_1329[1:0] <= 2'b00;
    sub_ln1265_3_reg_1342[0] <= 1'b0;
end

endmodule //conv1
