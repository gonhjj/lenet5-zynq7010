// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lenet,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.614000,HLS_SYN_LAT=1744145,HLS_SYN_TPT=none,HLS_SYN_MEM=62,HLS_SYN_DSP=14,HLS_SYN_FF=2927,HLS_SYN_LUT=5192,HLS_VERSION=2019_1}" *)

module lenet (
        ap_clk,
        ap_rst_n,
        input_r_Addr_A,
        input_r_EN_A,
        input_r_WEN_A,
        input_r_Din_A,
        input_r_Dout_A,
        input_r_Clk_A,
        input_r_Rst_A,
        Cout_Addr_A,
        Cout_EN_A,
        Cout_WEN_A,
        Cout_Din_A,
        Cout_Dout_A,
        Cout_Clk_A,
        Cout_Rst_A,
        s_axi_Crtl_AWVALID,
        s_axi_Crtl_AWREADY,
        s_axi_Crtl_AWADDR,
        s_axi_Crtl_WVALID,
        s_axi_Crtl_WREADY,
        s_axi_Crtl_WDATA,
        s_axi_Crtl_WSTRB,
        s_axi_Crtl_ARVALID,
        s_axi_Crtl_ARREADY,
        s_axi_Crtl_ARADDR,
        s_axi_Crtl_RVALID,
        s_axi_Crtl_RREADY,
        s_axi_Crtl_RDATA,
        s_axi_Crtl_RRESP,
        s_axi_Crtl_BVALID,
        s_axi_Crtl_BREADY,
        s_axi_Crtl_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;
parameter    C_S_AXI_CRTL_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] input_r_Addr_A;
output   input_r_EN_A;
output  [3:0] input_r_WEN_A;
output  [31:0] input_r_Din_A;
input  [31:0] input_r_Dout_A;
output   input_r_Clk_A;
output   input_r_Rst_A;
output  [31:0] Cout_Addr_A;
output   Cout_EN_A;
output  [3:0] Cout_WEN_A;
output  [31:0] Cout_Din_A;
input  [31:0] Cout_Dout_A;
output   Cout_Clk_A;
output   Cout_Rst_A;
input   s_axi_Crtl_AWVALID;
output   s_axi_Crtl_AWREADY;
input  [C_S_AXI_CRTL_ADDR_WIDTH - 1:0] s_axi_Crtl_AWADDR;
input   s_axi_Crtl_WVALID;
output   s_axi_Crtl_WREADY;
input  [C_S_AXI_CRTL_DATA_WIDTH - 1:0] s_axi_Crtl_WDATA;
input  [C_S_AXI_CRTL_WSTRB_WIDTH - 1:0] s_axi_Crtl_WSTRB;
input   s_axi_Crtl_ARVALID;
output   s_axi_Crtl_ARREADY;
input  [C_S_AXI_CRTL_ADDR_WIDTH - 1:0] s_axi_Crtl_ARADDR;
output   s_axi_Crtl_RVALID;
input   s_axi_Crtl_RREADY;
output  [C_S_AXI_CRTL_DATA_WIDTH - 1:0] s_axi_Crtl_RDATA;
output  [1:0] s_axi_Crtl_RRESP;
output   s_axi_Crtl_BVALID;
input   s_axi_Crtl_BREADY;
output  [1:0] s_axi_Crtl_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [12:0] C1_out_V_address0;
reg    C1_out_V_ce0;
reg    C1_out_V_we0;
wire   [15:0] C1_out_V_q0;
reg   [10:0] P1_out_V_address0;
reg    P1_out_V_ce0;
reg    P1_out_V_we0;
wire   [15:0] P1_out_V_q0;
reg   [10:0] C2_out_V_address0;
reg    C2_out_V_ce0;
reg    C2_out_V_we0;
wire   [15:0] C2_out_V_q0;
reg   [8:0] P2_out_V_address0;
reg    P2_out_V_ce0;
reg    P2_out_V_we0;
wire   [15:0] P2_out_V_q0;
reg   [6:0] C3_out_V_0_0_address0;
reg    C3_out_V_0_0_ce0;
reg    C3_out_V_0_0_we0;
wire   [15:0] C3_out_V_0_0_q0;
reg   [6:0] Re_out_V_address0;
reg    Re_out_V_ce0;
reg    Re_out_V_we0;
wire   [15:0] Re_out_V_q0;
reg   [6:0] FC1_out_V_address0;
reg    FC1_out_V_ce0;
reg    FC1_out_V_we0;
wire   [15:0] FC1_out_V_q0;
reg   [3:0] FC2_out_V_address0;
reg    FC2_out_V_ce0;
reg    FC2_out_V_we0;
wire   [15:0] FC2_out_V_q0;
wire   [6:0] m_fu_214_p2;
reg   [6:0] m_reg_228;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln191_fu_220_p1;
reg   [63:0] zext_ln191_reg_233;
wire   [0:0] icmp_ln189_fu_208_p2;
wire    grp_softmax_fu_124_ap_start;
wire    grp_softmax_fu_124_ap_done;
wire    grp_softmax_fu_124_ap_idle;
wire    grp_softmax_fu_124_ap_ready;
wire   [31:0] grp_softmax_fu_124_out_r_Addr_A;
wire    grp_softmax_fu_124_out_r_EN_A;
wire   [3:0] grp_softmax_fu_124_out_r_WEN_A;
wire   [31:0] grp_softmax_fu_124_out_r_Din_A;
wire   [3:0] grp_softmax_fu_124_FC2_out_V_address0;
wire    grp_softmax_fu_124_FC2_out_V_ce0;
wire    grp_conv1_fu_132_ap_start;
wire    grp_conv1_fu_132_ap_done;
wire    grp_conv1_fu_132_ap_idle;
wire    grp_conv1_fu_132_ap_ready;
wire   [31:0] grp_conv1_fu_132_input_r_Addr_A;
wire    grp_conv1_fu_132_input_r_EN_A;
wire   [3:0] grp_conv1_fu_132_input_r_WEN_A;
wire   [31:0] grp_conv1_fu_132_input_r_Din_A;
wire   [12:0] grp_conv1_fu_132_out_V_address0;
wire    grp_conv1_fu_132_out_V_ce0;
wire    grp_conv1_fu_132_out_V_we0;
wire   [15:0] grp_conv1_fu_132_out_V_d0;
wire    grp_conv2_fu_144_ap_start;
wire    grp_conv2_fu_144_ap_done;
wire    grp_conv2_fu_144_ap_idle;
wire    grp_conv2_fu_144_ap_ready;
wire   [10:0] grp_conv2_fu_144_out_V_address0;
wire    grp_conv2_fu_144_out_V_ce0;
wire    grp_conv2_fu_144_out_V_we0;
wire   [15:0] grp_conv2_fu_144_out_V_d0;
wire   [10:0] grp_conv2_fu_144_P1_out_V_address0;
wire    grp_conv2_fu_144_P1_out_V_ce0;
wire    grp_conv3_fu_156_ap_start;
wire    grp_conv3_fu_156_ap_done;
wire    grp_conv3_fu_156_ap_idle;
wire    grp_conv3_fu_156_ap_ready;
wire   [6:0] grp_conv3_fu_156_out_0_0_V_address0;
wire    grp_conv3_fu_156_out_0_0_V_ce0;
wire    grp_conv3_fu_156_out_0_0_V_we0;
wire   [15:0] grp_conv3_fu_156_out_0_0_V_d0;
wire   [8:0] grp_conv3_fu_156_P2_out_V_address0;
wire    grp_conv3_fu_156_P2_out_V_ce0;
wire    grp_pool1_fu_168_ap_start;
wire    grp_pool1_fu_168_ap_done;
wire    grp_pool1_fu_168_ap_idle;
wire    grp_pool1_fu_168_ap_ready;
wire   [10:0] grp_pool1_fu_168_out_V_address0;
wire    grp_pool1_fu_168_out_V_ce0;
wire    grp_pool1_fu_168_out_V_we0;
wire   [15:0] grp_pool1_fu_168_out_V_d0;
wire   [12:0] grp_pool1_fu_168_C1_out_V_address0;
wire    grp_pool1_fu_168_C1_out_V_ce0;
wire    grp_pool2_fu_176_ap_start;
wire    grp_pool2_fu_176_ap_done;
wire    grp_pool2_fu_176_ap_idle;
wire    grp_pool2_fu_176_ap_ready;
wire   [8:0] grp_pool2_fu_176_out_V_address0;
wire    grp_pool2_fu_176_out_V_ce0;
wire    grp_pool2_fu_176_out_V_we0;
wire   [15:0] grp_pool2_fu_176_out_V_d0;
wire   [10:0] grp_pool2_fu_176_C2_out_V_address0;
wire    grp_pool2_fu_176_C2_out_V_ce0;
wire    grp_fc1_fu_184_ap_start;
wire    grp_fc1_fu_184_ap_done;
wire    grp_fc1_fu_184_ap_idle;
wire    grp_fc1_fu_184_ap_ready;
wire   [6:0] grp_fc1_fu_184_out_V_address0;
wire    grp_fc1_fu_184_out_V_ce0;
wire    grp_fc1_fu_184_out_V_we0;
wire   [15:0] grp_fc1_fu_184_out_V_d0;
wire   [6:0] grp_fc1_fu_184_Re_out_V_address0;
wire    grp_fc1_fu_184_Re_out_V_ce0;
wire    grp_fc2_fu_196_ap_start;
wire    grp_fc2_fu_196_ap_done;
wire    grp_fc2_fu_196_ap_idle;
wire    grp_fc2_fu_196_ap_ready;
wire   [3:0] grp_fc2_fu_196_out_V_address0;
wire    grp_fc2_fu_196_out_V_ce0;
wire    grp_fc2_fu_196_out_V_we0;
wire   [15:0] grp_fc2_fu_196_out_V_d0;
wire   [6:0] grp_fc2_fu_196_FC1_out_V_address0;
wire    grp_fc2_fu_196_FC1_out_V_ce0;
reg   [6:0] m_0_i_reg_113;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
reg    grp_softmax_fu_124_ap_start_reg;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
reg    grp_conv1_fu_132_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_conv2_fu_144_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_conv3_fu_156_ap_start_reg;
wire    ap_CS_fsm_state9;
reg    grp_pool1_fu_168_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_pool2_fu_176_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    grp_fc1_fu_184_ap_start_reg;
wire    ap_CS_fsm_state13;
reg    grp_fc2_fu_196_ap_start_reg;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 grp_softmax_fu_124_ap_start_reg = 1'b0;
#0 grp_conv1_fu_132_ap_start_reg = 1'b0;
#0 grp_conv2_fu_144_ap_start_reg = 1'b0;
#0 grp_conv3_fu_156_ap_start_reg = 1'b0;
#0 grp_pool1_fu_168_ap_start_reg = 1'b0;
#0 grp_pool2_fu_176_ap_start_reg = 1'b0;
#0 grp_fc1_fu_184_ap_start_reg = 1'b0;
#0 grp_fc2_fu_196_ap_start_reg = 1'b0;
end

lenet_C1_out_V #(
    .DataWidth( 16 ),
    .AddressRange( 4704 ),
    .AddressWidth( 13 ))
C1_out_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(C1_out_V_address0),
    .ce0(C1_out_V_ce0),
    .we0(C1_out_V_we0),
    .d0(grp_conv1_fu_132_out_V_d0),
    .q0(C1_out_V_q0)
);

lenet_P1_out_V #(
    .DataWidth( 16 ),
    .AddressRange( 1176 ),
    .AddressWidth( 11 ))
P1_out_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(P1_out_V_address0),
    .ce0(P1_out_V_ce0),
    .we0(P1_out_V_we0),
    .d0(grp_pool1_fu_168_out_V_d0),
    .q0(P1_out_V_q0)
);

lenet_C2_out_V #(
    .DataWidth( 16 ),
    .AddressRange( 1600 ),
    .AddressWidth( 11 ))
C2_out_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(C2_out_V_address0),
    .ce0(C2_out_V_ce0),
    .we0(C2_out_V_we0),
    .d0(grp_conv2_fu_144_out_V_d0),
    .q0(C2_out_V_q0)
);

lenet_P2_out_V #(
    .DataWidth( 16 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
P2_out_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(P2_out_V_address0),
    .ce0(P2_out_V_ce0),
    .we0(P2_out_V_we0),
    .d0(grp_pool2_fu_176_out_V_d0),
    .q0(P2_out_V_q0)
);

lenet_C3_out_V_0_0 #(
    .DataWidth( 16 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
C3_out_V_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(C3_out_V_0_0_address0),
    .ce0(C3_out_V_0_0_ce0),
    .we0(C3_out_V_0_0_we0),
    .d0(grp_conv3_fu_156_out_0_0_V_d0),
    .q0(C3_out_V_0_0_q0)
);

lenet_C3_out_V_0_0 #(
    .DataWidth( 16 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
Re_out_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Re_out_V_address0),
    .ce0(Re_out_V_ce0),
    .we0(Re_out_V_we0),
    .d0(C3_out_V_0_0_q0),
    .q0(Re_out_V_q0)
);

lenet_FC1_out_V #(
    .DataWidth( 16 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
FC1_out_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(FC1_out_V_address0),
    .ce0(FC1_out_V_ce0),
    .we0(FC1_out_V_we0),
    .d0(grp_fc1_fu_184_out_V_d0),
    .q0(FC1_out_V_q0)
);

lenet_FC2_out_V #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
FC2_out_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(FC2_out_V_address0),
    .ce0(FC2_out_V_ce0),
    .we0(FC2_out_V_we0),
    .d0(grp_fc2_fu_196_out_V_d0),
    .q0(FC2_out_V_q0)
);

lenet_Crtl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_DATA_WIDTH ))
lenet_Crtl_s_axi_U(
    .AWVALID(s_axi_Crtl_AWVALID),
    .AWREADY(s_axi_Crtl_AWREADY),
    .AWADDR(s_axi_Crtl_AWADDR),
    .WVALID(s_axi_Crtl_WVALID),
    .WREADY(s_axi_Crtl_WREADY),
    .WDATA(s_axi_Crtl_WDATA),
    .WSTRB(s_axi_Crtl_WSTRB),
    .ARVALID(s_axi_Crtl_ARVALID),
    .ARREADY(s_axi_Crtl_ARREADY),
    .ARADDR(s_axi_Crtl_ARADDR),
    .RVALID(s_axi_Crtl_RVALID),
    .RREADY(s_axi_Crtl_RREADY),
    .RDATA(s_axi_Crtl_RDATA),
    .RRESP(s_axi_Crtl_RRESP),
    .BVALID(s_axi_Crtl_BVALID),
    .BREADY(s_axi_Crtl_BREADY),
    .BRESP(s_axi_Crtl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

softmax grp_softmax_fu_124(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_softmax_fu_124_ap_start),
    .ap_done(grp_softmax_fu_124_ap_done),
    .ap_idle(grp_softmax_fu_124_ap_idle),
    .ap_ready(grp_softmax_fu_124_ap_ready),
    .out_r_Addr_A(grp_softmax_fu_124_out_r_Addr_A),
    .out_r_EN_A(grp_softmax_fu_124_out_r_EN_A),
    .out_r_WEN_A(grp_softmax_fu_124_out_r_WEN_A),
    .out_r_Din_A(grp_softmax_fu_124_out_r_Din_A),
    .out_r_Dout_A(Cout_Dout_A),
    .FC2_out_V_address0(grp_softmax_fu_124_FC2_out_V_address0),
    .FC2_out_V_ce0(grp_softmax_fu_124_FC2_out_V_ce0),
    .FC2_out_V_q0(FC2_out_V_q0)
);

conv1 grp_conv1_fu_132(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_conv1_fu_132_ap_start),
    .ap_done(grp_conv1_fu_132_ap_done),
    .ap_idle(grp_conv1_fu_132_ap_idle),
    .ap_ready(grp_conv1_fu_132_ap_ready),
    .input_r_Addr_A(grp_conv1_fu_132_input_r_Addr_A),
    .input_r_EN_A(grp_conv1_fu_132_input_r_EN_A),
    .input_r_WEN_A(grp_conv1_fu_132_input_r_WEN_A),
    .input_r_Din_A(grp_conv1_fu_132_input_r_Din_A),
    .input_r_Dout_A(input_r_Dout_A),
    .out_V_address0(grp_conv1_fu_132_out_V_address0),
    .out_V_ce0(grp_conv1_fu_132_out_V_ce0),
    .out_V_we0(grp_conv1_fu_132_out_V_we0),
    .out_V_d0(grp_conv1_fu_132_out_V_d0),
    .out_V_q0(C1_out_V_q0)
);

conv2 grp_conv2_fu_144(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_conv2_fu_144_ap_start),
    .ap_done(grp_conv2_fu_144_ap_done),
    .ap_idle(grp_conv2_fu_144_ap_idle),
    .ap_ready(grp_conv2_fu_144_ap_ready),
    .out_V_address0(grp_conv2_fu_144_out_V_address0),
    .out_V_ce0(grp_conv2_fu_144_out_V_ce0),
    .out_V_we0(grp_conv2_fu_144_out_V_we0),
    .out_V_d0(grp_conv2_fu_144_out_V_d0),
    .out_V_q0(C2_out_V_q0),
    .P1_out_V_address0(grp_conv2_fu_144_P1_out_V_address0),
    .P1_out_V_ce0(grp_conv2_fu_144_P1_out_V_ce0),
    .P1_out_V_q0(P1_out_V_q0)
);

conv3 grp_conv3_fu_156(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_conv3_fu_156_ap_start),
    .ap_done(grp_conv3_fu_156_ap_done),
    .ap_idle(grp_conv3_fu_156_ap_idle),
    .ap_ready(grp_conv3_fu_156_ap_ready),
    .out_0_0_V_address0(grp_conv3_fu_156_out_0_0_V_address0),
    .out_0_0_V_ce0(grp_conv3_fu_156_out_0_0_V_ce0),
    .out_0_0_V_we0(grp_conv3_fu_156_out_0_0_V_we0),
    .out_0_0_V_d0(grp_conv3_fu_156_out_0_0_V_d0),
    .out_0_0_V_q0(C3_out_V_0_0_q0),
    .P2_out_V_address0(grp_conv3_fu_156_P2_out_V_address0),
    .P2_out_V_ce0(grp_conv3_fu_156_P2_out_V_ce0),
    .P2_out_V_q0(P2_out_V_q0)
);

pool1 grp_pool1_fu_168(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_pool1_fu_168_ap_start),
    .ap_done(grp_pool1_fu_168_ap_done),
    .ap_idle(grp_pool1_fu_168_ap_idle),
    .ap_ready(grp_pool1_fu_168_ap_ready),
    .out_V_address0(grp_pool1_fu_168_out_V_address0),
    .out_V_ce0(grp_pool1_fu_168_out_V_ce0),
    .out_V_we0(grp_pool1_fu_168_out_V_we0),
    .out_V_d0(grp_pool1_fu_168_out_V_d0),
    .C1_out_V_address0(grp_pool1_fu_168_C1_out_V_address0),
    .C1_out_V_ce0(grp_pool1_fu_168_C1_out_V_ce0),
    .C1_out_V_q0(C1_out_V_q0)
);

pool2 grp_pool2_fu_176(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_pool2_fu_176_ap_start),
    .ap_done(grp_pool2_fu_176_ap_done),
    .ap_idle(grp_pool2_fu_176_ap_idle),
    .ap_ready(grp_pool2_fu_176_ap_ready),
    .out_V_address0(grp_pool2_fu_176_out_V_address0),
    .out_V_ce0(grp_pool2_fu_176_out_V_ce0),
    .out_V_we0(grp_pool2_fu_176_out_V_we0),
    .out_V_d0(grp_pool2_fu_176_out_V_d0),
    .C2_out_V_address0(grp_pool2_fu_176_C2_out_V_address0),
    .C2_out_V_ce0(grp_pool2_fu_176_C2_out_V_ce0),
    .C2_out_V_q0(C2_out_V_q0)
);

fc1 grp_fc1_fu_184(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fc1_fu_184_ap_start),
    .ap_done(grp_fc1_fu_184_ap_done),
    .ap_idle(grp_fc1_fu_184_ap_idle),
    .ap_ready(grp_fc1_fu_184_ap_ready),
    .out_V_address0(grp_fc1_fu_184_out_V_address0),
    .out_V_ce0(grp_fc1_fu_184_out_V_ce0),
    .out_V_we0(grp_fc1_fu_184_out_V_we0),
    .out_V_d0(grp_fc1_fu_184_out_V_d0),
    .out_V_q0(FC1_out_V_q0),
    .Re_out_V_address0(grp_fc1_fu_184_Re_out_V_address0),
    .Re_out_V_ce0(grp_fc1_fu_184_Re_out_V_ce0),
    .Re_out_V_q0(Re_out_V_q0)
);

fc2 grp_fc2_fu_196(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fc2_fu_196_ap_start),
    .ap_done(grp_fc2_fu_196_ap_done),
    .ap_idle(grp_fc2_fu_196_ap_idle),
    .ap_ready(grp_fc2_fu_196_ap_ready),
    .out_V_address0(grp_fc2_fu_196_out_V_address0),
    .out_V_ce0(grp_fc2_fu_196_out_V_ce0),
    .out_V_we0(grp_fc2_fu_196_out_V_we0),
    .out_V_d0(grp_fc2_fu_196_out_V_d0),
    .out_V_q0(FC2_out_V_q0),
    .FC1_out_V_address0(grp_fc2_fu_196_FC1_out_V_address0),
    .FC1_out_V_ce0(grp_fc2_fu_196_FC1_out_V_ce0),
    .FC1_out_V_q0(FC1_out_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_conv1_fu_132_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_conv1_fu_132_ap_start_reg <= 1'b1;
        end else if ((grp_conv1_fu_132_ap_ready == 1'b1)) begin
            grp_conv1_fu_132_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_conv2_fu_144_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_conv2_fu_144_ap_start_reg <= 1'b1;
        end else if ((grp_conv2_fu_144_ap_ready == 1'b1)) begin
            grp_conv2_fu_144_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_conv3_fu_156_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_conv3_fu_156_ap_start_reg <= 1'b1;
        end else if ((grp_conv3_fu_156_ap_ready == 1'b1)) begin
            grp_conv3_fu_156_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_fc1_fu_184_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln189_fu_208_p2 == 1'd1))) begin
            grp_fc1_fu_184_ap_start_reg <= 1'b1;
        end else if ((grp_fc1_fu_184_ap_ready == 1'b1)) begin
            grp_fc1_fu_184_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_fc2_fu_196_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            grp_fc2_fu_196_ap_start_reg <= 1'b1;
        end else if ((grp_fc2_fu_196_ap_ready == 1'b1)) begin
            grp_fc2_fu_196_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pool1_fu_168_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_pool1_fu_168_ap_start_reg <= 1'b1;
        end else if ((grp_pool1_fu_168_ap_ready == 1'b1)) begin
            grp_pool1_fu_168_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pool2_fu_176_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_pool2_fu_176_ap_start_reg <= 1'b1;
        end else if ((grp_pool2_fu_176_ap_ready == 1'b1)) begin
            grp_pool2_fu_176_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_softmax_fu_124_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            grp_softmax_fu_124_ap_start_reg <= 1'b1;
        end else if ((grp_softmax_fu_124_ap_ready == 1'b1)) begin
            grp_softmax_fu_124_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        m_0_i_reg_113 <= m_reg_228;
    end else if (((grp_conv3_fu_156_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        m_0_i_reg_113 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        m_reg_228 <= m_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln189_fu_208_p2 == 1'd0))) begin
        zext_ln191_reg_233[6 : 0] <= zext_ln191_fu_220_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C1_out_V_address0 = grp_pool1_fu_168_C1_out_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        C1_out_V_address0 = grp_conv1_fu_132_out_V_address0;
    end else begin
        C1_out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C1_out_V_ce0 = grp_pool1_fu_168_C1_out_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        C1_out_V_ce0 = grp_conv1_fu_132_out_V_ce0;
    end else begin
        C1_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        C1_out_V_we0 = grp_conv1_fu_132_out_V_we0;
    end else begin
        C1_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        C2_out_V_address0 = grp_pool2_fu_176_C2_out_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C2_out_V_address0 = grp_conv2_fu_144_out_V_address0;
    end else begin
        C2_out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        C2_out_V_ce0 = grp_pool2_fu_176_C2_out_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C2_out_V_ce0 = grp_conv2_fu_144_out_V_ce0;
    end else begin
        C2_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C2_out_V_we0 = grp_conv2_fu_144_out_V_we0;
    end else begin
        C2_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        C3_out_V_0_0_address0 = zext_ln191_fu_220_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        C3_out_V_0_0_address0 = grp_conv3_fu_156_out_0_0_V_address0;
    end else begin
        C3_out_V_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        C3_out_V_0_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        C3_out_V_0_0_ce0 = grp_conv3_fu_156_out_0_0_V_ce0;
    end else begin
        C3_out_V_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C3_out_V_0_0_we0 = grp_conv3_fu_156_out_0_0_V_we0;
    end else begin
        C3_out_V_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        FC1_out_V_address0 = grp_fc2_fu_196_FC1_out_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        FC1_out_V_address0 = grp_fc1_fu_184_out_V_address0;
    end else begin
        FC1_out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        FC1_out_V_ce0 = grp_fc2_fu_196_FC1_out_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        FC1_out_V_ce0 = grp_fc1_fu_184_out_V_ce0;
    end else begin
        FC1_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        FC1_out_V_we0 = grp_fc1_fu_184_out_V_we0;
    end else begin
        FC1_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        FC2_out_V_address0 = grp_fc2_fu_196_out_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        FC2_out_V_address0 = grp_softmax_fu_124_FC2_out_V_address0;
    end else begin
        FC2_out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        FC2_out_V_ce0 = grp_fc2_fu_196_out_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        FC2_out_V_ce0 = grp_softmax_fu_124_FC2_out_V_ce0;
    end else begin
        FC2_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        FC2_out_V_we0 = grp_fc2_fu_196_out_V_we0;
    end else begin
        FC2_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        P1_out_V_address0 = grp_pool1_fu_168_out_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        P1_out_V_address0 = grp_conv2_fu_144_P1_out_V_address0;
    end else begin
        P1_out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        P1_out_V_ce0 = grp_pool1_fu_168_out_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        P1_out_V_ce0 = grp_conv2_fu_144_P1_out_V_ce0;
    end else begin
        P1_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        P1_out_V_we0 = grp_pool1_fu_168_out_V_we0;
    end else begin
        P1_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        P2_out_V_address0 = grp_pool2_fu_176_out_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        P2_out_V_address0 = grp_conv3_fu_156_P2_out_V_address0;
    end else begin
        P2_out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        P2_out_V_ce0 = grp_pool2_fu_176_out_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        P2_out_V_ce0 = grp_conv3_fu_156_P2_out_V_ce0;
    end else begin
        P2_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        P2_out_V_we0 = grp_pool2_fu_176_out_V_we0;
    end else begin
        P2_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        Re_out_V_address0 = zext_ln191_reg_233;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        Re_out_V_address0 = grp_fc1_fu_184_Re_out_V_address0;
    end else begin
        Re_out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        Re_out_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        Re_out_V_ce0 = grp_fc1_fu_184_Re_out_V_ce0;
    end else begin
        Re_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        Re_out_V_we0 = 1'b1;
    end else begin
        Re_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (grp_softmax_fu_124_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (grp_softmax_fu_124_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_conv1_fu_132_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_pool1_fu_168_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_conv2_fu_144_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_pool2_fu_176_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_conv3_fu_156_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln189_fu_208_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state13 : begin
            if (((grp_fc1_fu_184_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((grp_fc2_fu_196_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (grp_softmax_fu_124_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Cout_Addr_A = grp_softmax_fu_124_out_r_Addr_A;

assign Cout_Clk_A = ap_clk;

assign Cout_Din_A = grp_softmax_fu_124_out_r_Din_A;

assign Cout_EN_A = grp_softmax_fu_124_out_r_EN_A;

assign Cout_Rst_A = ap_rst_n_inv;

assign Cout_WEN_A = grp_softmax_fu_124_out_r_WEN_A;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_conv1_fu_132_ap_start = grp_conv1_fu_132_ap_start_reg;

assign grp_conv2_fu_144_ap_start = grp_conv2_fu_144_ap_start_reg;

assign grp_conv3_fu_156_ap_start = grp_conv3_fu_156_ap_start_reg;

assign grp_fc1_fu_184_ap_start = grp_fc1_fu_184_ap_start_reg;

assign grp_fc2_fu_196_ap_start = grp_fc2_fu_196_ap_start_reg;

assign grp_pool1_fu_168_ap_start = grp_pool1_fu_168_ap_start_reg;

assign grp_pool2_fu_176_ap_start = grp_pool2_fu_176_ap_start_reg;

assign grp_softmax_fu_124_ap_start = grp_softmax_fu_124_ap_start_reg;

assign icmp_ln189_fu_208_p2 = ((m_0_i_reg_113 == 7'd120) ? 1'b1 : 1'b0);

assign input_r_Addr_A = grp_conv1_fu_132_input_r_Addr_A;

assign input_r_Clk_A = ap_clk;

assign input_r_Din_A = 32'd0;

assign input_r_EN_A = grp_conv1_fu_132_input_r_EN_A;

assign input_r_Rst_A = ap_rst_n_inv;

assign input_r_WEN_A = 4'd0;

assign m_fu_214_p2 = (m_0_i_reg_113 + 7'd1);

assign zext_ln191_fu_220_p1 = m_0_i_reg_113;

always @ (posedge ap_clk) begin
    zext_ln191_reg_233[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //lenet
