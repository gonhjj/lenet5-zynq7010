-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet is
generic (
    C_S_AXI_CRTL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CRTL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_r_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_r_EN_A : OUT STD_LOGIC;
    input_r_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_r_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_Clk_A : OUT STD_LOGIC;
    input_r_Rst_A : OUT STD_LOGIC;
    Cout_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Cout_EN_A : OUT STD_LOGIC;
    Cout_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    Cout_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Cout_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    Cout_Clk_A : OUT STD_LOGIC;
    Cout_Rst_A : OUT STD_LOGIC;
    s_axi_Crtl_AWVALID : IN STD_LOGIC;
    s_axi_Crtl_AWREADY : OUT STD_LOGIC;
    s_axi_Crtl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_ADDR_WIDTH-1 downto 0);
    s_axi_Crtl_WVALID : IN STD_LOGIC;
    s_axi_Crtl_WREADY : OUT STD_LOGIC;
    s_axi_Crtl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_DATA_WIDTH-1 downto 0);
    s_axi_Crtl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_DATA_WIDTH/8-1 downto 0);
    s_axi_Crtl_ARVALID : IN STD_LOGIC;
    s_axi_Crtl_ARREADY : OUT STD_LOGIC;
    s_axi_Crtl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_ADDR_WIDTH-1 downto 0);
    s_axi_Crtl_RVALID : OUT STD_LOGIC;
    s_axi_Crtl_RREADY : IN STD_LOGIC;
    s_axi_Crtl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_DATA_WIDTH-1 downto 0);
    s_axi_Crtl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_Crtl_BVALID : OUT STD_LOGIC;
    s_axi_Crtl_BREADY : IN STD_LOGIC;
    s_axi_Crtl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of lenet is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lenet,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.614000,HLS_SYN_LAT=1744145,HLS_SYN_TPT=none,HLS_SYN_MEM=62,HLS_SYN_DSP=14,HLS_SYN_FF=2927,HLS_SYN_LUT=5192,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal C1_out_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal C1_out_V_ce0 : STD_LOGIC;
    signal C1_out_V_we0 : STD_LOGIC;
    signal C1_out_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal P1_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal P1_out_V_ce0 : STD_LOGIC;
    signal P1_out_V_we0 : STD_LOGIC;
    signal P1_out_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal C2_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal C2_out_V_ce0 : STD_LOGIC;
    signal C2_out_V_we0 : STD_LOGIC;
    signal C2_out_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal P2_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal P2_out_V_ce0 : STD_LOGIC;
    signal P2_out_V_we0 : STD_LOGIC;
    signal P2_out_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal C3_out_V_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal C3_out_V_0_0_ce0 : STD_LOGIC;
    signal C3_out_V_0_0_we0 : STD_LOGIC;
    signal C3_out_V_0_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Re_out_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal Re_out_V_ce0 : STD_LOGIC;
    signal Re_out_V_we0 : STD_LOGIC;
    signal Re_out_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal FC1_out_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal FC1_out_V_ce0 : STD_LOGIC;
    signal FC1_out_V_we0 : STD_LOGIC;
    signal FC1_out_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal FC2_out_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal FC2_out_V_ce0 : STD_LOGIC;
    signal FC2_out_V_we0 : STD_LOGIC;
    signal FC2_out_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_fu_214_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal m_reg_228 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln191_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln191_reg_233 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln189_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_softmax_fu_124_ap_start : STD_LOGIC;
    signal grp_softmax_fu_124_ap_done : STD_LOGIC;
    signal grp_softmax_fu_124_ap_idle : STD_LOGIC;
    signal grp_softmax_fu_124_ap_ready : STD_LOGIC;
    signal grp_softmax_fu_124_out_r_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_fu_124_out_r_EN_A : STD_LOGIC;
    signal grp_softmax_fu_124_out_r_WEN_A : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_softmax_fu_124_out_r_Din_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_fu_124_FC2_out_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_softmax_fu_124_FC2_out_V_ce0 : STD_LOGIC;
    signal grp_conv1_fu_132_ap_start : STD_LOGIC;
    signal grp_conv1_fu_132_ap_done : STD_LOGIC;
    signal grp_conv1_fu_132_ap_idle : STD_LOGIC;
    signal grp_conv1_fu_132_ap_ready : STD_LOGIC;
    signal grp_conv1_fu_132_input_r_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_132_input_r_EN_A : STD_LOGIC;
    signal grp_conv1_fu_132_input_r_WEN_A : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_132_input_r_Din_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_132_out_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_conv1_fu_132_out_V_ce0 : STD_LOGIC;
    signal grp_conv1_fu_132_out_V_we0 : STD_LOGIC;
    signal grp_conv1_fu_132_out_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_conv2_fu_144_ap_start : STD_LOGIC;
    signal grp_conv2_fu_144_ap_done : STD_LOGIC;
    signal grp_conv2_fu_144_ap_idle : STD_LOGIC;
    signal grp_conv2_fu_144_ap_ready : STD_LOGIC;
    signal grp_conv2_fu_144_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv2_fu_144_out_V_ce0 : STD_LOGIC;
    signal grp_conv2_fu_144_out_V_we0 : STD_LOGIC;
    signal grp_conv2_fu_144_out_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_conv2_fu_144_P1_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv2_fu_144_P1_out_V_ce0 : STD_LOGIC;
    signal grp_conv3_fu_156_ap_start : STD_LOGIC;
    signal grp_conv3_fu_156_ap_done : STD_LOGIC;
    signal grp_conv3_fu_156_ap_idle : STD_LOGIC;
    signal grp_conv3_fu_156_ap_ready : STD_LOGIC;
    signal grp_conv3_fu_156_out_0_0_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_conv3_fu_156_out_0_0_V_ce0 : STD_LOGIC;
    signal grp_conv3_fu_156_out_0_0_V_we0 : STD_LOGIC;
    signal grp_conv3_fu_156_out_0_0_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_conv3_fu_156_P2_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_conv3_fu_156_P2_out_V_ce0 : STD_LOGIC;
    signal grp_pool1_fu_168_ap_start : STD_LOGIC;
    signal grp_pool1_fu_168_ap_done : STD_LOGIC;
    signal grp_pool1_fu_168_ap_idle : STD_LOGIC;
    signal grp_pool1_fu_168_ap_ready : STD_LOGIC;
    signal grp_pool1_fu_168_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pool1_fu_168_out_V_ce0 : STD_LOGIC;
    signal grp_pool1_fu_168_out_V_we0 : STD_LOGIC;
    signal grp_pool1_fu_168_out_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pool1_fu_168_C1_out_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_pool1_fu_168_C1_out_V_ce0 : STD_LOGIC;
    signal grp_pool2_fu_176_ap_start : STD_LOGIC;
    signal grp_pool2_fu_176_ap_done : STD_LOGIC;
    signal grp_pool2_fu_176_ap_idle : STD_LOGIC;
    signal grp_pool2_fu_176_ap_ready : STD_LOGIC;
    signal grp_pool2_fu_176_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pool2_fu_176_out_V_ce0 : STD_LOGIC;
    signal grp_pool2_fu_176_out_V_we0 : STD_LOGIC;
    signal grp_pool2_fu_176_out_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pool2_fu_176_C2_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pool2_fu_176_C2_out_V_ce0 : STD_LOGIC;
    signal grp_fc1_fu_184_ap_start : STD_LOGIC;
    signal grp_fc1_fu_184_ap_done : STD_LOGIC;
    signal grp_fc1_fu_184_ap_idle : STD_LOGIC;
    signal grp_fc1_fu_184_ap_ready : STD_LOGIC;
    signal grp_fc1_fu_184_out_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fc1_fu_184_out_V_ce0 : STD_LOGIC;
    signal grp_fc1_fu_184_out_V_we0 : STD_LOGIC;
    signal grp_fc1_fu_184_out_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fc1_fu_184_Re_out_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fc1_fu_184_Re_out_V_ce0 : STD_LOGIC;
    signal grp_fc2_fu_196_ap_start : STD_LOGIC;
    signal grp_fc2_fu_196_ap_done : STD_LOGIC;
    signal grp_fc2_fu_196_ap_idle : STD_LOGIC;
    signal grp_fc2_fu_196_ap_ready : STD_LOGIC;
    signal grp_fc2_fu_196_out_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc2_fu_196_out_V_ce0 : STD_LOGIC;
    signal grp_fc2_fu_196_out_V_we0 : STD_LOGIC;
    signal grp_fc2_fu_196_out_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fc2_fu_196_FC1_out_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fc2_fu_196_FC1_out_V_ce0 : STD_LOGIC;
    signal m_0_i_reg_113 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_softmax_fu_124_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_conv1_fu_132_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_conv2_fu_144_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_conv3_fu_156_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_pool1_fu_168_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_pool2_fu_176_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fc1_fu_184_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fc2_fu_196_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component softmax IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_EN_A : OUT STD_LOGIC;
        out_r_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_r_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
        FC2_out_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        FC2_out_V_ce0 : OUT STD_LOGIC;
        FC2_out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_r_EN_A : OUT STD_LOGIC;
        input_r_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_r_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
        out_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        out_V_ce0 : OUT STD_LOGIC;
        out_V_we0 : OUT STD_LOGIC;
        out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        out_V_ce0 : OUT STD_LOGIC;
        out_V_we0 : OUT STD_LOGIC;
        out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        P1_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        P1_out_V_ce0 : OUT STD_LOGIC;
        P1_out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_0_0_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_0_0_V_ce0 : OUT STD_LOGIC;
        out_0_0_V_we0 : OUT STD_LOGIC;
        out_0_0_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_0_0_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        P2_out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        P2_out_V_ce0 : OUT STD_LOGIC;
        P2_out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pool1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        out_V_ce0 : OUT STD_LOGIC;
        out_V_we0 : OUT STD_LOGIC;
        out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C1_out_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        C1_out_V_ce0 : OUT STD_LOGIC;
        C1_out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pool2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        out_V_ce0 : OUT STD_LOGIC;
        out_V_we0 : OUT STD_LOGIC;
        out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        C2_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        C2_out_V_ce0 : OUT STD_LOGIC;
        C2_out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fc1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_V_ce0 : OUT STD_LOGIC;
        out_V_we0 : OUT STD_LOGIC;
        out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Re_out_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        Re_out_V_ce0 : OUT STD_LOGIC;
        Re_out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fc2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_V_ce0 : OUT STD_LOGIC;
        out_V_we0 : OUT STD_LOGIC;
        out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        FC1_out_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        FC1_out_V_ce0 : OUT STD_LOGIC;
        FC1_out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lenet_C1_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lenet_P1_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lenet_C2_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lenet_P2_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lenet_C3_out_V_0_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lenet_FC1_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lenet_FC2_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lenet_Crtl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    C1_out_V_U : component lenet_C1_out_V
    generic map (
        DataWidth => 16,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => C1_out_V_address0,
        ce0 => C1_out_V_ce0,
        we0 => C1_out_V_we0,
        d0 => grp_conv1_fu_132_out_V_d0,
        q0 => C1_out_V_q0);

    P1_out_V_U : component lenet_P1_out_V
    generic map (
        DataWidth => 16,
        AddressRange => 1176,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => P1_out_V_address0,
        ce0 => P1_out_V_ce0,
        we0 => P1_out_V_we0,
        d0 => grp_pool1_fu_168_out_V_d0,
        q0 => P1_out_V_q0);

    C2_out_V_U : component lenet_C2_out_V
    generic map (
        DataWidth => 16,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => C2_out_V_address0,
        ce0 => C2_out_V_ce0,
        we0 => C2_out_V_we0,
        d0 => grp_conv2_fu_144_out_V_d0,
        q0 => C2_out_V_q0);

    P2_out_V_U : component lenet_P2_out_V
    generic map (
        DataWidth => 16,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => P2_out_V_address0,
        ce0 => P2_out_V_ce0,
        we0 => P2_out_V_we0,
        d0 => grp_pool2_fu_176_out_V_d0,
        q0 => P2_out_V_q0);

    C3_out_V_0_0_U : component lenet_C3_out_V_0_0
    generic map (
        DataWidth => 16,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => C3_out_V_0_0_address0,
        ce0 => C3_out_V_0_0_ce0,
        we0 => C3_out_V_0_0_we0,
        d0 => grp_conv3_fu_156_out_0_0_V_d0,
        q0 => C3_out_V_0_0_q0);

    Re_out_V_U : component lenet_C3_out_V_0_0
    generic map (
        DataWidth => 16,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Re_out_V_address0,
        ce0 => Re_out_V_ce0,
        we0 => Re_out_V_we0,
        d0 => C3_out_V_0_0_q0,
        q0 => Re_out_V_q0);

    FC1_out_V_U : component lenet_FC1_out_V
    generic map (
        DataWidth => 16,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => FC1_out_V_address0,
        ce0 => FC1_out_V_ce0,
        we0 => FC1_out_V_we0,
        d0 => grp_fc1_fu_184_out_V_d0,
        q0 => FC1_out_V_q0);

    FC2_out_V_U : component lenet_FC2_out_V
    generic map (
        DataWidth => 16,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => FC2_out_V_address0,
        ce0 => FC2_out_V_ce0,
        we0 => FC2_out_V_we0,
        d0 => grp_fc2_fu_196_out_V_d0,
        q0 => FC2_out_V_q0);

    lenet_Crtl_s_axi_U : component lenet_Crtl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_Crtl_AWVALID,
        AWREADY => s_axi_Crtl_AWREADY,
        AWADDR => s_axi_Crtl_AWADDR,
        WVALID => s_axi_Crtl_WVALID,
        WREADY => s_axi_Crtl_WREADY,
        WDATA => s_axi_Crtl_WDATA,
        WSTRB => s_axi_Crtl_WSTRB,
        ARVALID => s_axi_Crtl_ARVALID,
        ARREADY => s_axi_Crtl_ARREADY,
        ARADDR => s_axi_Crtl_ARADDR,
        RVALID => s_axi_Crtl_RVALID,
        RREADY => s_axi_Crtl_RREADY,
        RDATA => s_axi_Crtl_RDATA,
        RRESP => s_axi_Crtl_RRESP,
        BVALID => s_axi_Crtl_BVALID,
        BREADY => s_axi_Crtl_BREADY,
        BRESP => s_axi_Crtl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    grp_softmax_fu_124 : component softmax
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_softmax_fu_124_ap_start,
        ap_done => grp_softmax_fu_124_ap_done,
        ap_idle => grp_softmax_fu_124_ap_idle,
        ap_ready => grp_softmax_fu_124_ap_ready,
        out_r_Addr_A => grp_softmax_fu_124_out_r_Addr_A,
        out_r_EN_A => grp_softmax_fu_124_out_r_EN_A,
        out_r_WEN_A => grp_softmax_fu_124_out_r_WEN_A,
        out_r_Din_A => grp_softmax_fu_124_out_r_Din_A,
        out_r_Dout_A => Cout_Dout_A,
        FC2_out_V_address0 => grp_softmax_fu_124_FC2_out_V_address0,
        FC2_out_V_ce0 => grp_softmax_fu_124_FC2_out_V_ce0,
        FC2_out_V_q0 => FC2_out_V_q0);

    grp_conv1_fu_132 : component conv1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv1_fu_132_ap_start,
        ap_done => grp_conv1_fu_132_ap_done,
        ap_idle => grp_conv1_fu_132_ap_idle,
        ap_ready => grp_conv1_fu_132_ap_ready,
        input_r_Addr_A => grp_conv1_fu_132_input_r_Addr_A,
        input_r_EN_A => grp_conv1_fu_132_input_r_EN_A,
        input_r_WEN_A => grp_conv1_fu_132_input_r_WEN_A,
        input_r_Din_A => grp_conv1_fu_132_input_r_Din_A,
        input_r_Dout_A => input_r_Dout_A,
        out_V_address0 => grp_conv1_fu_132_out_V_address0,
        out_V_ce0 => grp_conv1_fu_132_out_V_ce0,
        out_V_we0 => grp_conv1_fu_132_out_V_we0,
        out_V_d0 => grp_conv1_fu_132_out_V_d0,
        out_V_q0 => C1_out_V_q0);

    grp_conv2_fu_144 : component conv2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv2_fu_144_ap_start,
        ap_done => grp_conv2_fu_144_ap_done,
        ap_idle => grp_conv2_fu_144_ap_idle,
        ap_ready => grp_conv2_fu_144_ap_ready,
        out_V_address0 => grp_conv2_fu_144_out_V_address0,
        out_V_ce0 => grp_conv2_fu_144_out_V_ce0,
        out_V_we0 => grp_conv2_fu_144_out_V_we0,
        out_V_d0 => grp_conv2_fu_144_out_V_d0,
        out_V_q0 => C2_out_V_q0,
        P1_out_V_address0 => grp_conv2_fu_144_P1_out_V_address0,
        P1_out_V_ce0 => grp_conv2_fu_144_P1_out_V_ce0,
        P1_out_V_q0 => P1_out_V_q0);

    grp_conv3_fu_156 : component conv3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv3_fu_156_ap_start,
        ap_done => grp_conv3_fu_156_ap_done,
        ap_idle => grp_conv3_fu_156_ap_idle,
        ap_ready => grp_conv3_fu_156_ap_ready,
        out_0_0_V_address0 => grp_conv3_fu_156_out_0_0_V_address0,
        out_0_0_V_ce0 => grp_conv3_fu_156_out_0_0_V_ce0,
        out_0_0_V_we0 => grp_conv3_fu_156_out_0_0_V_we0,
        out_0_0_V_d0 => grp_conv3_fu_156_out_0_0_V_d0,
        out_0_0_V_q0 => C3_out_V_0_0_q0,
        P2_out_V_address0 => grp_conv3_fu_156_P2_out_V_address0,
        P2_out_V_ce0 => grp_conv3_fu_156_P2_out_V_ce0,
        P2_out_V_q0 => P2_out_V_q0);

    grp_pool1_fu_168 : component pool1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pool1_fu_168_ap_start,
        ap_done => grp_pool1_fu_168_ap_done,
        ap_idle => grp_pool1_fu_168_ap_idle,
        ap_ready => grp_pool1_fu_168_ap_ready,
        out_V_address0 => grp_pool1_fu_168_out_V_address0,
        out_V_ce0 => grp_pool1_fu_168_out_V_ce0,
        out_V_we0 => grp_pool1_fu_168_out_V_we0,
        out_V_d0 => grp_pool1_fu_168_out_V_d0,
        C1_out_V_address0 => grp_pool1_fu_168_C1_out_V_address0,
        C1_out_V_ce0 => grp_pool1_fu_168_C1_out_V_ce0,
        C1_out_V_q0 => C1_out_V_q0);

    grp_pool2_fu_176 : component pool2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pool2_fu_176_ap_start,
        ap_done => grp_pool2_fu_176_ap_done,
        ap_idle => grp_pool2_fu_176_ap_idle,
        ap_ready => grp_pool2_fu_176_ap_ready,
        out_V_address0 => grp_pool2_fu_176_out_V_address0,
        out_V_ce0 => grp_pool2_fu_176_out_V_ce0,
        out_V_we0 => grp_pool2_fu_176_out_V_we0,
        out_V_d0 => grp_pool2_fu_176_out_V_d0,
        C2_out_V_address0 => grp_pool2_fu_176_C2_out_V_address0,
        C2_out_V_ce0 => grp_pool2_fu_176_C2_out_V_ce0,
        C2_out_V_q0 => C2_out_V_q0);

    grp_fc1_fu_184 : component fc1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fc1_fu_184_ap_start,
        ap_done => grp_fc1_fu_184_ap_done,
        ap_idle => grp_fc1_fu_184_ap_idle,
        ap_ready => grp_fc1_fu_184_ap_ready,
        out_V_address0 => grp_fc1_fu_184_out_V_address0,
        out_V_ce0 => grp_fc1_fu_184_out_V_ce0,
        out_V_we0 => grp_fc1_fu_184_out_V_we0,
        out_V_d0 => grp_fc1_fu_184_out_V_d0,
        out_V_q0 => FC1_out_V_q0,
        Re_out_V_address0 => grp_fc1_fu_184_Re_out_V_address0,
        Re_out_V_ce0 => grp_fc1_fu_184_Re_out_V_ce0,
        Re_out_V_q0 => Re_out_V_q0);

    grp_fc2_fu_196 : component fc2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fc2_fu_196_ap_start,
        ap_done => grp_fc2_fu_196_ap_done,
        ap_idle => grp_fc2_fu_196_ap_idle,
        ap_ready => grp_fc2_fu_196_ap_ready,
        out_V_address0 => grp_fc2_fu_196_out_V_address0,
        out_V_ce0 => grp_fc2_fu_196_out_V_ce0,
        out_V_we0 => grp_fc2_fu_196_out_V_we0,
        out_V_d0 => grp_fc2_fu_196_out_V_d0,
        out_V_q0 => FC2_out_V_q0,
        FC1_out_V_address0 => grp_fc2_fu_196_FC1_out_V_address0,
        FC1_out_V_ce0 => grp_fc2_fu_196_FC1_out_V_ce0,
        FC1_out_V_q0 => FC1_out_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv1_fu_132_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv1_fu_132_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_conv1_fu_132_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv1_fu_132_ap_ready = ap_const_logic_1)) then 
                    grp_conv1_fu_132_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv2_fu_144_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv2_fu_144_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_conv2_fu_144_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv2_fu_144_ap_ready = ap_const_logic_1)) then 
                    grp_conv2_fu_144_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv3_fu_156_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv3_fu_156_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_conv3_fu_156_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv3_fu_156_ap_ready = ap_const_logic_1)) then 
                    grp_conv3_fu_156_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fc1_fu_184_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fc1_fu_184_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln189_fu_208_p2 = ap_const_lv1_1))) then 
                    grp_fc1_fu_184_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fc1_fu_184_ap_ready = ap_const_logic_1)) then 
                    grp_fc1_fu_184_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fc2_fu_196_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fc2_fu_196_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    grp_fc2_fu_196_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fc2_fu_196_ap_ready = ap_const_logic_1)) then 
                    grp_fc2_fu_196_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pool1_fu_168_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pool1_fu_168_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_pool1_fu_168_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pool1_fu_168_ap_ready = ap_const_logic_1)) then 
                    grp_pool1_fu_168_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pool2_fu_176_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pool2_fu_176_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_pool2_fu_176_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pool2_fu_176_ap_ready = ap_const_logic_1)) then 
                    grp_pool2_fu_176_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_softmax_fu_124_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_softmax_fu_124_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    grp_softmax_fu_124_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_softmax_fu_124_ap_ready = ap_const_logic_1)) then 
                    grp_softmax_fu_124_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    m_0_i_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                m_0_i_reg_113 <= m_reg_228;
            elsif (((grp_conv3_fu_156_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                m_0_i_reg_113 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                m_reg_228 <= m_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln189_fu_208_p2 = ap_const_lv1_0))) then
                    zext_ln191_reg_233(6 downto 0) <= zext_ln191_fu_220_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln191_reg_233(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state11, icmp_ln189_fu_208_p2, grp_softmax_fu_124_ap_done, grp_conv1_fu_132_ap_done, grp_conv2_fu_144_ap_done, grp_conv3_fu_156_ap_done, grp_pool1_fu_168_ap_done, grp_pool2_fu_176_ap_done, grp_fc1_fu_184_ap_done, grp_fc2_fu_196_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_conv1_fu_132_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_pool1_fu_168_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_conv2_fu_144_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_pool2_fu_176_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_conv3_fu_156_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln189_fu_208_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((grp_fc1_fu_184_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_fc2_fu_196_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_softmax_fu_124_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;

    C1_out_V_address0_assign_proc : process(grp_conv1_fu_132_out_V_address0, grp_pool1_fu_168_C1_out_V_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C1_out_V_address0 <= grp_pool1_fu_168_C1_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            C1_out_V_address0 <= grp_conv1_fu_132_out_V_address0;
        else 
            C1_out_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    C1_out_V_ce0_assign_proc : process(grp_conv1_fu_132_out_V_ce0, grp_pool1_fu_168_C1_out_V_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C1_out_V_ce0 <= grp_pool1_fu_168_C1_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            C1_out_V_ce0 <= grp_conv1_fu_132_out_V_ce0;
        else 
            C1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C1_out_V_we0_assign_proc : process(grp_conv1_fu_132_out_V_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            C1_out_V_we0 <= grp_conv1_fu_132_out_V_we0;
        else 
            C1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C2_out_V_address0_assign_proc : process(grp_conv2_fu_144_out_V_address0, grp_pool2_fu_176_C2_out_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C2_out_V_address0 <= grp_pool2_fu_176_C2_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C2_out_V_address0 <= grp_conv2_fu_144_out_V_address0;
        else 
            C2_out_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    C2_out_V_ce0_assign_proc : process(grp_conv2_fu_144_out_V_ce0, grp_pool2_fu_176_C2_out_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C2_out_V_ce0 <= grp_pool2_fu_176_C2_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C2_out_V_ce0 <= grp_conv2_fu_144_out_V_ce0;
        else 
            C2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C2_out_V_we0_assign_proc : process(grp_conv2_fu_144_out_V_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C2_out_V_we0 <= grp_conv2_fu_144_out_V_we0;
        else 
            C2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C3_out_V_0_0_address0_assign_proc : process(ap_CS_fsm_state11, zext_ln191_fu_220_p1, grp_conv3_fu_156_out_0_0_V_address0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            C3_out_V_0_0_address0 <= zext_ln191_fu_220_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C3_out_V_0_0_address0 <= grp_conv3_fu_156_out_0_0_V_address0;
        else 
            C3_out_V_0_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    C3_out_V_0_0_ce0_assign_proc : process(ap_CS_fsm_state11, grp_conv3_fu_156_out_0_0_V_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            C3_out_V_0_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C3_out_V_0_0_ce0 <= grp_conv3_fu_156_out_0_0_V_ce0;
        else 
            C3_out_V_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C3_out_V_0_0_we0_assign_proc : process(grp_conv3_fu_156_out_0_0_V_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C3_out_V_0_0_we0 <= grp_conv3_fu_156_out_0_0_V_we0;
        else 
            C3_out_V_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Cout_Addr_A <= grp_softmax_fu_124_out_r_Addr_A;
    Cout_Clk_A <= ap_clk;
    Cout_Din_A <= grp_softmax_fu_124_out_r_Din_A;
    Cout_EN_A <= grp_softmax_fu_124_out_r_EN_A;
    Cout_Rst_A <= ap_rst_n_inv;
    Cout_WEN_A <= grp_softmax_fu_124_out_r_WEN_A;

    FC1_out_V_address0_assign_proc : process(grp_fc1_fu_184_out_V_address0, grp_fc2_fu_196_FC1_out_V_address0, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            FC1_out_V_address0 <= grp_fc2_fu_196_FC1_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            FC1_out_V_address0 <= grp_fc1_fu_184_out_V_address0;
        else 
            FC1_out_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    FC1_out_V_ce0_assign_proc : process(grp_fc1_fu_184_out_V_ce0, grp_fc2_fu_196_FC1_out_V_ce0, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            FC1_out_V_ce0 <= grp_fc2_fu_196_FC1_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            FC1_out_V_ce0 <= grp_fc1_fu_184_out_V_ce0;
        else 
            FC1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    FC1_out_V_we0_assign_proc : process(grp_fc1_fu_184_out_V_we0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            FC1_out_V_we0 <= grp_fc1_fu_184_out_V_we0;
        else 
            FC1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    FC2_out_V_address0_assign_proc : process(grp_softmax_fu_124_FC2_out_V_address0, grp_fc2_fu_196_out_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            FC2_out_V_address0 <= grp_fc2_fu_196_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            FC2_out_V_address0 <= grp_softmax_fu_124_FC2_out_V_address0;
        else 
            FC2_out_V_address0 <= "XXXX";
        end if; 
    end process;


    FC2_out_V_ce0_assign_proc : process(grp_softmax_fu_124_FC2_out_V_ce0, grp_fc2_fu_196_out_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            FC2_out_V_ce0 <= grp_fc2_fu_196_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            FC2_out_V_ce0 <= grp_softmax_fu_124_FC2_out_V_ce0;
        else 
            FC2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    FC2_out_V_we0_assign_proc : process(grp_fc2_fu_196_out_V_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            FC2_out_V_we0 <= grp_fc2_fu_196_out_V_we0;
        else 
            FC2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    P1_out_V_address0_assign_proc : process(grp_conv2_fu_144_P1_out_V_address0, grp_pool1_fu_168_out_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            P1_out_V_address0 <= grp_pool1_fu_168_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            P1_out_V_address0 <= grp_conv2_fu_144_P1_out_V_address0;
        else 
            P1_out_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    P1_out_V_ce0_assign_proc : process(grp_conv2_fu_144_P1_out_V_ce0, grp_pool1_fu_168_out_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            P1_out_V_ce0 <= grp_pool1_fu_168_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            P1_out_V_ce0 <= grp_conv2_fu_144_P1_out_V_ce0;
        else 
            P1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    P1_out_V_we0_assign_proc : process(grp_pool1_fu_168_out_V_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            P1_out_V_we0 <= grp_pool1_fu_168_out_V_we0;
        else 
            P1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    P2_out_V_address0_assign_proc : process(grp_conv3_fu_156_P2_out_V_address0, grp_pool2_fu_176_out_V_address0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            P2_out_V_address0 <= grp_pool2_fu_176_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            P2_out_V_address0 <= grp_conv3_fu_156_P2_out_V_address0;
        else 
            P2_out_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    P2_out_V_ce0_assign_proc : process(grp_conv3_fu_156_P2_out_V_ce0, grp_pool2_fu_176_out_V_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            P2_out_V_ce0 <= grp_pool2_fu_176_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            P2_out_V_ce0 <= grp_conv3_fu_156_P2_out_V_ce0;
        else 
            P2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    P2_out_V_we0_assign_proc : process(grp_pool2_fu_176_out_V_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            P2_out_V_we0 <= grp_pool2_fu_176_out_V_we0;
        else 
            P2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Re_out_V_address0_assign_proc : process(zext_ln191_reg_233, grp_fc1_fu_184_Re_out_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Re_out_V_address0 <= zext_ln191_reg_233(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            Re_out_V_address0 <= grp_fc1_fu_184_Re_out_V_address0;
        else 
            Re_out_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    Re_out_V_ce0_assign_proc : process(grp_fc1_fu_184_Re_out_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Re_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            Re_out_V_ce0 <= grp_fc1_fu_184_Re_out_V_ce0;
        else 
            Re_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Re_out_V_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Re_out_V_we0 <= ap_const_logic_1;
        else 
            Re_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(grp_softmax_fu_124_ap_done, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_softmax_fu_124_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_softmax_fu_124_ap_done, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_softmax_fu_124_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_conv1_fu_132_ap_start <= grp_conv1_fu_132_ap_start_reg;
    grp_conv2_fu_144_ap_start <= grp_conv2_fu_144_ap_start_reg;
    grp_conv3_fu_156_ap_start <= grp_conv3_fu_156_ap_start_reg;
    grp_fc1_fu_184_ap_start <= grp_fc1_fu_184_ap_start_reg;
    grp_fc2_fu_196_ap_start <= grp_fc2_fu_196_ap_start_reg;
    grp_pool1_fu_168_ap_start <= grp_pool1_fu_168_ap_start_reg;
    grp_pool2_fu_176_ap_start <= grp_pool2_fu_176_ap_start_reg;
    grp_softmax_fu_124_ap_start <= grp_softmax_fu_124_ap_start_reg;
    icmp_ln189_fu_208_p2 <= "1" when (m_0_i_reg_113 = ap_const_lv7_78) else "0";
    input_r_Addr_A <= grp_conv1_fu_132_input_r_Addr_A;
    input_r_Clk_A <= ap_clk;
    input_r_Din_A <= ap_const_lv32_0;
    input_r_EN_A <= grp_conv1_fu_132_input_r_EN_A;
    input_r_Rst_A <= ap_rst_n_inv;
    input_r_WEN_A <= ap_const_lv4_0;
    m_fu_214_p2 <= std_logic_vector(unsigned(m_0_i_reg_113) + unsigned(ap_const_lv7_1));
    zext_ln191_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_i_reg_113),64));
end behav;
