-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_0_0_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_0_0_V_ce0 : OUT STD_LOGIC;
    out_0_0_V_we0 : OUT STD_LOGIC;
    out_0_0_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_0_0_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    P2_out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    P2_out_V_ce0 : OUT STD_LOGIC;
    P2_out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of conv3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal K3_W_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal K3_W_V_ce0 : STD_LOGIC;
    signal K3_W_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal K3_B_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal K3_B_V_ce0 : STD_LOGIC;
    signal K3_B_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln148_fu_236_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln148_reg_559 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln158_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_reg_564 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln148_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1116_fu_262_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1116_reg_569 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln150_fu_274_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln150_reg_577 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln1116_2_fu_280_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1116_2_reg_582 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln150_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_cast_fu_293_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_19_cast_reg_587 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln152_fu_307_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln152_reg_595 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal shl_ln1_fu_313_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln1_reg_600 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln152_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln154_fu_331_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln154_reg_608 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln1265_fu_355_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1265_reg_613 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln154_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_0_0_V_addr_2_reg_618 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln156_fu_365_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln156_reg_626 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln1117_4_fu_433_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1117_4_reg_631 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln156_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1116_2_fu_438_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1116_2_reg_636 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln_reg_651 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln171_fu_482_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln171_reg_659 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal shl_ln_fu_488_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_reg_664 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln171_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln173_fu_506_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln173_reg_672 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal out_0_0_V_addr_reg_677 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln173_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_0_0_V_addr_1_reg_687 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal x_0_0_0_reg_152 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_0_0_0_reg_163 : STD_LOGIC_VECTOR (2 downto 0);
    signal set_0_0_0_reg_174 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_0_0_0_reg_185 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_0_0_reg_196 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal set3_0_0_0_reg_207 : STD_LOGIC_VECTOR (3 downto 0);
    signal k4_0_0_0_reg_218 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln158_1_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_7_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_4_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln703_fu_527_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_539_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_250_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1116_fu_246_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1116_1_fu_258_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1116_3_fu_284_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1116_1_fu_288_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln154_fu_321_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln158_fu_337_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_347_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1117_4_fu_375_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1117_fu_379_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_fu_388_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1117_5_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_6_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1117_1_fu_400_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1117_2_fu_406_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1117_1_fu_415_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln1117_fu_411_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl1_cast_fu_419_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1117_3_fu_427_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1117_fu_371_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_547_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln173_fu_496_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln175_fu_512_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1265_fu_523_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_547_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component lenet_mac_muladd_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component conv3_K3_W_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv3_K3_B_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    K3_W_V_U : component conv3_K3_W_V
    generic map (
        DataWidth => 8,
        AddressRange => 48000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => K3_W_V_address0,
        ce0 => K3_W_V_ce0,
        q0 => K3_W_V_q0);

    K3_B_V_U : component conv3_K3_B_V
    generic map (
        DataWidth => 8,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => K3_B_V_address0,
        ce0 => K3_B_V_ce0,
        q0 => K3_B_V_q0);

    lenet_mac_muladd_eOg_U19 : component lenet_mac_muladd_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 26,
        dout_WIDTH => 26)
    port map (
        din0 => K3_W_V_q0,
        din1 => P2_out_V_q0,
        din2 => grp_fu_547_p2,
        dout => grp_fu_547_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_0_0_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                c_0_0_0_reg_196 <= add_ln156_reg_626;
            elsif (((icmp_ln154_fu_325_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                c_0_0_0_reg_196 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k4_0_0_0_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln171_fu_476_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                k4_0_0_0_reg_218 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                k4_0_0_0_reg_218 <= add_ln173_reg_672;
            end if; 
        end if;
    end process;

    k_0_0_0_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln156_fu_359_p2 = ap_const_lv1_1))) then 
                k_0_0_0_reg_185 <= add_ln154_reg_608;
            elsif (((icmp_ln152_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k_0_0_0_reg_185 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    set3_0_0_0_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln173_fu_500_p2 = ap_const_lv1_1))) then 
                set3_0_0_0_reg_207 <= add_ln171_reg_659;
            elsif (((icmp_ln148_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                set3_0_0_0_reg_207 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    set_0_0_0_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln150_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                set_0_0_0_reg_174 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln154_fu_325_p2 = ap_const_lv1_1))) then 
                set_0_0_0_reg_174 <= add_ln152_reg_595;
            end if; 
        end if;
    end process;

    x_0_0_0_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln150_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_0_0_0_reg_152 <= add_ln148_reg_559;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_0_0_0_reg_152 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    y_0_0_0_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln152_fu_301_p2 = ap_const_lv1_1))) then 
                y_0_0_0_reg_163 <= add_ln150_reg_577;
            elsif (((icmp_ln148_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_0_0_0_reg_163 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln156_fu_359_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln1116_2_reg_636 <= add_ln1116_2_fu_438_p2;
                add_ln1117_4_reg_631 <= add_ln1117_4_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln148_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln1116_reg_569 <= add_ln1116_fu_262_p2;
                    zext_ln158_reg_564(2 downto 0) <= zext_ln158_fu_242_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln148_reg_559 <= add_ln148_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln150_reg_577 <= add_ln150_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln152_reg_595 <= add_ln152_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln154_reg_608 <= add_ln154_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln156_reg_626 <= add_ln156_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln171_reg_659 <= add_ln171_fu_482_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln173_reg_672 <= add_ln173_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                    out_0_0_V_addr_1_reg_687(3 downto 0) <= zext_ln176_fu_534_p1(7 - 1 downto 0)(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln154_fu_325_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                out_0_0_V_addr_2_reg_618 <= zext_ln158_1_fu_342_p1(7 - 1 downto 0);
                    zext_ln1265_reg_613(10 downto 4) <= zext_ln1265_fu_355_p1(10 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln173_fu_500_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                out_0_0_V_addr_reg_677 <= zext_ln175_fu_517_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln152_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    shl_ln1_reg_600(6 downto 3) <= shl_ln1_fu_313_p3(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln171_fu_476_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    shl_ln_reg_664(6 downto 3) <= shl_ln_fu_488_p3(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln150_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_19_cast_reg_587(9 downto 4) <= tmp_19_cast_fu_293_p3(9 downto 4);
                    zext_ln1116_2_reg_582(2 downto 0) <= zext_ln1116_2_fu_280_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                trunc_ln_reg_651 <= grp_fu_547_p3(25 downto 10);
            end if;
        end if;
    end process;
    zext_ln158_reg_564(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln1116_2_reg_582(16 downto 3) <= "00000000000000";
    tmp_19_cast_reg_587(3 downto 0) <= "0000";
    shl_ln1_reg_600(2 downto 0) <= "000";
    zext_ln1265_reg_613(3 downto 0) <= "0000";
    zext_ln1265_reg_613(11) <= '0';
    shl_ln_reg_664(2 downto 0) <= "000";
    out_0_0_V_addr_1_reg_687(6 downto 4) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln148_fu_230_p2, ap_CS_fsm_state3, icmp_ln150_fu_268_p2, ap_CS_fsm_state4, icmp_ln152_fu_301_p2, ap_CS_fsm_state5, icmp_ln154_fu_325_p2, ap_CS_fsm_state6, icmp_ln156_fu_359_p2, ap_CS_fsm_state10, icmp_ln171_fu_476_p2, ap_CS_fsm_state11, icmp_ln173_fu_500_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln148_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln150_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln152_fu_301_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln154_fu_325_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln156_fu_359_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln171_fu_476_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln173_fu_500_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    K3_B_V_address0 <= zext_ln175_fu_517_p1(7 - 1 downto 0);

    K3_B_V_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            K3_B_V_ce0 <= ap_const_logic_1;
        else 
            K3_B_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    K3_W_V_address0 <= zext_ln1117_7_fu_443_p1(16 - 1 downto 0);

    K3_W_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            K3_W_V_ce0 <= ap_const_logic_1;
        else 
            K3_W_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    P2_out_V_address0 <= zext_ln1116_4_fu_447_p1(9 - 1 downto 0);

    P2_out_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            P2_out_V_ce0 <= ap_const_logic_1;
        else 
            P2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1116_1_fu_288_p2 <= std_logic_vector(unsigned(zext_ln1116_3_fu_284_p1) + unsigned(add_ln1116_reg_569));
    add_ln1116_2_fu_438_p2 <= std_logic_vector(unsigned(tmp_19_cast_reg_587) + unsigned(zext_ln1117_fu_371_p1));
    add_ln1116_fu_262_p2 <= std_logic_vector(unsigned(zext_ln1116_fu_246_p1) + unsigned(zext_ln1116_1_fu_258_p1));
    add_ln1117_1_fu_400_p2 <= std_logic_vector(unsigned(zext_ln1117_5_fu_384_p1) + unsigned(zext_ln1117_6_fu_396_p1));
    add_ln1117_2_fu_406_p2 <= std_logic_vector(unsigned(add_ln1117_1_fu_400_p2) + unsigned(zext_ln158_reg_564));
    add_ln1117_3_fu_427_p2 <= std_logic_vector(unsigned(trunc_ln1117_fu_411_p1) + unsigned(p_shl1_cast_fu_419_p3));
    add_ln1117_4_fu_433_p2 <= std_logic_vector(unsigned(add_ln1117_3_fu_427_p2) + unsigned(zext_ln1116_2_reg_582));
    add_ln1117_fu_379_p2 <= std_logic_vector(unsigned(zext_ln1265_reg_613) + unsigned(zext_ln1117_4_fu_375_p1));
    add_ln148_fu_236_p2 <= std_logic_vector(unsigned(x_0_0_0_reg_152) + unsigned(ap_const_lv3_1));
    add_ln150_fu_274_p2 <= std_logic_vector(unsigned(y_0_0_0_reg_163) + unsigned(ap_const_lv3_1));
    add_ln152_fu_307_p2 <= std_logic_vector(unsigned(set_0_0_0_reg_174) + unsigned(ap_const_lv4_1));
    add_ln154_fu_331_p2 <= std_logic_vector(unsigned(k_0_0_0_reg_185) + unsigned(ap_const_lv4_1));
    add_ln156_fu_365_p2 <= std_logic_vector(unsigned(c_0_0_0_reg_196) + unsigned(ap_const_lv5_1));
    add_ln158_fu_337_p2 <= std_logic_vector(unsigned(shl_ln1_reg_600) + unsigned(zext_ln154_fu_321_p1));
    add_ln171_fu_482_p2 <= std_logic_vector(unsigned(set3_0_0_0_reg_207) + unsigned(ap_const_lv4_1));
    add_ln173_fu_506_p2 <= std_logic_vector(unsigned(k4_0_0_0_reg_218) + unsigned(ap_const_lv4_1));
    add_ln175_fu_512_p2 <= std_logic_vector(unsigned(shl_ln_reg_664) + unsigned(zext_ln173_fu_496_p1));
    add_ln703_fu_527_p2 <= std_logic_vector(unsigned(out_0_0_V_q0) + unsigned(sext_ln1265_fu_523_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, icmp_ln171_fu_476_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln171_fu_476_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, icmp_ln171_fu_476_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln171_fu_476_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_547_p2 <= (out_0_0_V_q0 & ap_const_lv10_0);
    icmp_ln148_fu_230_p2 <= "1" when (x_0_0_0_reg_152 = ap_const_lv3_5) else "0";
    icmp_ln150_fu_268_p2 <= "1" when (y_0_0_0_reg_163 = ap_const_lv3_5) else "0";
    icmp_ln152_fu_301_p2 <= "1" when (set_0_0_0_reg_174 = ap_const_lv4_F) else "0";
    icmp_ln154_fu_325_p2 <= "1" when (k_0_0_0_reg_185 = ap_const_lv4_8) else "0";
    icmp_ln156_fu_359_p2 <= "1" when (c_0_0_0_reg_196 = ap_const_lv5_10) else "0";
    icmp_ln171_fu_476_p2 <= "1" when (set3_0_0_0_reg_207 = ap_const_lv4_F) else "0";
    icmp_ln173_fu_500_p2 <= "1" when (k4_0_0_0_reg_218 = ap_const_lv4_8) else "0";

    out_0_0_V_address0_assign_proc : process(out_0_0_V_addr_2_reg_618, ap_CS_fsm_state7, ap_CS_fsm_state11, out_0_0_V_addr_reg_677, out_0_0_V_addr_1_reg_687, ap_CS_fsm_state13, ap_CS_fsm_state9, ap_CS_fsm_state14, zext_ln175_fu_517_p1, zext_ln176_fu_534_p1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_0_0_V_address0 <= out_0_0_V_addr_1_reg_687;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_0_0_V_address0 <= zext_ln176_fu_534_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_0_0_V_address0 <= out_0_0_V_addr_reg_677;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_0_0_V_address0 <= zext_ln175_fu_517_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            out_0_0_V_address0 <= out_0_0_V_addr_2_reg_618;
        else 
            out_0_0_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    out_0_0_V_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            out_0_0_V_ce0 <= ap_const_logic_1;
        else 
            out_0_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_0_V_d0_assign_proc : process(trunc_ln_reg_651, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state12, add_ln703_fu_527_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_0_0_V_d0 <= ap_const_lv16_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_0_0_V_d0 <= add_ln703_fu_527_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_0_0_V_d0 <= trunc_ln_reg_651;
        else 
            out_0_0_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_0_0_V_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state12, tmp_11_fu_539_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_11_fu_539_p3 = ap_const_lv1_1)))) then 
            out_0_0_V_we0 <= ap_const_logic_1;
        else 
            out_0_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_419_p3 <= (trunc_ln1117_1_fu_415_p1 & ap_const_lv2_0);
        sext_ln1265_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(K3_B_V_q0),16));

    shl_ln1_fu_313_p3 <= (set_0_0_0_reg_174 & ap_const_lv3_0);
    shl_ln_fu_488_p3 <= (set3_0_0_0_reg_207 & ap_const_lv3_0);
    tmp_11_fu_539_p3 <= out_0_0_V_q0(15 downto 15);
    tmp_12_fu_388_p3 <= (add_ln1117_fu_379_p2 & ap_const_lv2_0);
    tmp_19_cast_fu_293_p3 <= (add_ln1116_1_fu_288_p2 & ap_const_lv4_0);
    tmp_2_fu_347_p3 <= (add_ln158_fu_337_p2 & ap_const_lv4_0);
    tmp_s_fu_250_p3 <= (x_0_0_0_reg_152 & ap_const_lv2_0);
    trunc_ln1117_1_fu_415_p1 <= add_ln1117_2_fu_406_p2(15 - 1 downto 0);
    trunc_ln1117_fu_411_p1 <= add_ln1117_2_fu_406_p2(17 - 1 downto 0);
    zext_ln1116_1_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_250_p3),6));
    zext_ln1116_2_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_0_0_reg_163),17));
    zext_ln1116_3_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_0_0_reg_163),6));
    zext_ln1116_4_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_2_reg_636),64));
    zext_ln1116_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_0_0_reg_152),6));
    zext_ln1117_4_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_0_0_reg_196),12));
    zext_ln1117_5_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_fu_379_p2),64));
    zext_ln1117_6_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_388_p3),64));
    zext_ln1117_7_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_4_reg_631),64));
    zext_ln1117_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_0_0_reg_196),10));
    zext_ln1265_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_347_p3),12));
    zext_ln154_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_0_reg_185),7));
    zext_ln158_1_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln158_fu_337_p2),64));
    zext_ln158_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_0_0_reg_152),64));
    zext_ln173_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k4_0_0_0_reg_218),7));
    zext_ln175_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln175_fu_512_p2),64));
    zext_ln176_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k4_0_0_0_reg_218),64));
end behav;
