-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_EN_A : OUT STD_LOGIC;
    out_r_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    FC2_out_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    FC2_out_V_ce0 : OUT STD_LOGIC;
    FC2_out_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of softmax is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv17_1FFE8 : STD_LOGIC_VECTOR (16 downto 0) := "11111111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln243_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_208_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_575 : STD_LOGIC_VECTOR (3 downto 0);
    signal rhs_V_fu_214_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_reg_580 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln245_fu_224_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln251_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_reg_593 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln249_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_243_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_603 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln935_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_608 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_Result_6_fu_264_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_reg_613 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_4_fu_278_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_V_4_reg_618 : STD_LOGIC_VECTOR (16 downto 0);
    signal l_fu_304_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln943_fu_312_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_630 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln944_fu_316_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_635 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal or_ln_fu_423_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_641 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_646 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_522_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_reg_651 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal out_addr_reg_675 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln255_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_556_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_680 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_load_reg_685 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal p_Val2_1_reg_127 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_reg_137 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_0_reg_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_0_reg_160 : STD_LOGIC_VECTOR (3 downto 0);
    signal i2_0_reg_171 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal zext_ln245_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln257_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_r_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_fu_249_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_fu_249_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln935_fu_258_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_3_fu_253_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_V_fu_272_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_s_fu_286_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_7_fu_296_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_331_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_347_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln947_fu_351_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln947_fu_357_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lshr_ln947_fu_361_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_4_fu_367_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln947_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_384_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln944_fu_321_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln949_fu_398_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_3_fu_404_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_fu_445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln958_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_1_fu_462_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_2_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_5_fu_474_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_fu_488_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln964_fu_496_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_fu_504_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_509_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_6_fu_484_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_515_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln739_fu_534_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);

    component lenet_fadd_32ns_3hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_fdiv_32ns_3ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_fexp_32ns_3jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    lenet_fadd_32ns_3hbi_U37 : component lenet_fadd_32ns_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_0_reg_148,
        din1 => tmp_1_reg_661,
        ce => ap_const_logic_1,
        dout => grp_fu_182_p2);

    lenet_fdiv_32ns_3ibs_U38 : component lenet_fdiv_32ns_3ibs
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => out_load_reg_685,
        din1 => sum_0_reg_148,
        ce => ap_const_logic_1,
        dout => grp_fu_187_p2);

    lenet_fexp_32ns_3jbC_U39 : component lenet_fexp_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => grp_fu_192_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_192_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_0_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln243_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i1_0_reg_160 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i1_0_reg_160 <= i_1_reg_603;
            end if; 
        end if;
    end process;

    i2_0_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln249_fu_232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i2_0_reg_171 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                i2_0_reg_171 <= i_2_reg_680;
            end if; 
        end if;
    end process;

    i_0_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_137 <= i_reg_575;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_0_reg_137 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    p_Val2_1_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_Val2_1_reg_127 <= select_ln245_fu_224_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                p_Val2_1_reg_127 <= FC2_out_V_q0;
            end if; 
        end if;
    end process;

    sum_0_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln243_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                sum_0_reg_148 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                sum_0_reg_148 <= grp_fu_182_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln249_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                i_1_reg_603 <= i_1_fu_243_p2;
                    zext_ln251_reg_593(3 downto 0) <= zext_ln251_fu_238_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln255_fu_545_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                i_2_reg_680 <= i_2_fu_556_p2;
                out_addr_reg_675 <= zext_ln257_fu_551_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln243_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i_reg_575 <= i_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln935_reg_608 <= icmp_ln935_fu_258_p2;
                l_reg_625 <= l_fu_304_p3;
                p_Result_6_reg_613 <= tmp_V_3_fu_253_p2(16 downto 16);
                tmp_V_4_reg_618 <= tmp_V_4_fu_278_p3;
                trunc_ln943_reg_630 <= trunc_ln943_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_608 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                icmp_ln958_reg_646 <= icmp_ln958_fu_431_p2;
                    or_ln_reg_641(0) <= or_ln_fu_423_p3(0);
                sub_ln944_reg_635 <= sub_ln944_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                out_load_reg_685 <= out_r_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_608 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                p_Result_8_reg_651 <= p_Result_8_fu_522_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln243_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                rhs_V_reg_580 <= rhs_V_fu_214_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_1_reg_661 <= grp_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                tmp_reg_690 <= grp_fu_187_p2;
            end if;
        end if;
    end process;
    zext_ln251_reg_593(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    or_ln_reg_641(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln243_fu_197_p2, ap_CS_fsm_state5, icmp_ln249_fu_232_p2, ap_CS_fsm_state21, icmp_ln255_fu_545_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln243_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln249_fu_232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln255_fu_545_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    FC2_out_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, zext_ln251_fu_238_p1, ap_CS_fsm_state5, zext_ln245_fu_203_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            FC2_out_V_address0 <= zext_ln251_fu_238_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            FC2_out_V_address0 <= zext_ln245_fu_203_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            FC2_out_V_address0 <= ap_const_lv4_0;
        else 
            FC2_out_V_address0 <= "XXXX";
        end if; 
    end process;


    FC2_out_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            FC2_out_V_ce0 <= ap_const_logic_1;
        else 
            FC2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_fu_378_p2 <= (icmp_ln947_fu_341_p2 and icmp_ln947_1_fu_372_p2);
    add_ln949_fu_398_p2 <= std_logic_vector(signed(ap_const_lv17_1FFE8) + signed(trunc_ln944_fu_321_p1));
    add_ln958_fu_440_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_635));
    add_ln964_fu_509_p2 <= std_logic_vector(unsigned(select_ln964_fu_496_p3) + unsigned(sub_ln964_fu_504_p2));
    and_ln949_fu_411_p2 <= (xor_ln949_fu_392_p2 and p_Result_3_fu_404_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state21, icmp_ln255_fu_545_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln255_fu_545_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21, icmp_ln255_fu_545_p2)
    begin
        if (((icmp_ln255_fu_545_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln739_fu_534_p1 <= p_Result_8_reg_651;
    grp_fu_192_p1 <= 
        ap_const_lv32_0 when (icmp_ln935_reg_608(0) = '1') else 
        bitcast_ln739_fu_534_p1;
    i_1_fu_243_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(i1_0_reg_160));
    i_2_fu_556_p2 <= std_logic_vector(unsigned(i2_0_reg_171) + unsigned(ap_const_lv4_1));
    i_fu_208_p2 <= std_logic_vector(unsigned(i_0_reg_137) + unsigned(ap_const_lv4_1));
    icmp_ln1494_fu_218_p2 <= "1" when (signed(FC2_out_V_q0) > signed(p_Val2_1_reg_127)) else "0";
    icmp_ln243_fu_197_p2 <= "1" when (i_0_reg_137 = ap_const_lv4_A) else "0";
    icmp_ln249_fu_232_p2 <= "1" when (i1_0_reg_160 = ap_const_lv4_A) else "0";
    icmp_ln255_fu_545_p2 <= "1" when (i2_0_reg_171 = ap_const_lv4_A) else "0";
    icmp_ln935_fu_258_p0 <= FC2_out_V_q0;
    icmp_ln935_fu_258_p2 <= "1" when (icmp_ln935_fu_258_p0 = p_Val2_1_reg_127) else "0";
    icmp_ln947_1_fu_372_p2 <= "0" when (p_Result_4_fu_367_p2 = ap_const_lv17_0) else "1";
    icmp_ln947_fu_341_p2 <= "1" when (signed(tmp_4_fu_331_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln958_fu_431_p2 <= "1" when (signed(lsb_index_fu_325_p2) > signed(ap_const_lv32_0)) else "0";
    
    l_fu_304_p3_proc : process(p_Result_7_fu_296_p3)
    begin
        l_fu_304_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_7_fu_296_p3(i) = '1' then
                l_fu_304_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lhs_V_fu_249_p0 <= FC2_out_V_q0;
        lhs_V_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_249_p0),17));

    lsb_index_fu_325_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_fu_316_p2));
    lshr_ln947_fu_361_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv17_1FFFF),to_integer(unsigned('0' & zext_ln947_fu_357_p1(17-1 downto 0)))));
    lshr_ln958_fu_445_p2 <= std_logic_vector(shift_right(unsigned(m_fu_437_p1),to_integer(unsigned('0' & add_ln958_fu_440_p2(31-1 downto 0)))));
    m_1_fu_462_p3 <= 
        lshr_ln958_fu_445_p2 when (icmp_ln958_reg_646(0) = '1') else 
        shl_ln958_fu_456_p2;
    m_2_fu_469_p2 <= std_logic_vector(unsigned(m_1_fu_462_p3) + unsigned(or_ln_reg_641));
    m_5_fu_474_p4 <= m_2_fu_469_p2(31 downto 1);
    m_6_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_5_fu_474_p4),32));
    m_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_618),32));
    or_ln949_fu_417_p2 <= (and_ln949_fu_411_p2 or a_fu_378_p2);
    or_ln_fu_423_p3 <= (ap_const_lv31_0 & or_ln949_fu_417_p2);
    out_r_Addr_A <= std_logic_vector(shift_left(unsigned(out_r_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    out_r_Addr_A_orig_assign_proc : process(zext_ln251_reg_593, out_addr_reg_675, ap_CS_fsm_state21, ap_CS_fsm_state35, ap_CS_fsm_state17, zext_ln257_fu_551_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            out_r_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_addr_reg_675),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            out_r_Addr_A_orig <= zext_ln257_fu_551_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_r_Addr_A_orig <= zext_ln251_reg_593(32 - 1 downto 0);
        else 
            out_r_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_Din_A_assign_proc : process(tmp_1_reg_661, tmp_reg_690, ap_CS_fsm_state35, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            out_r_Din_A <= tmp_reg_690;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_r_Din_A <= tmp_1_reg_661;
        else 
            out_r_Din_A <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_EN_A_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state35, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            out_r_EN_A <= ap_const_logic_1;
        else 
            out_r_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    out_r_WEN_A_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            out_r_WEN_A <= ap_const_lv4_F;
        else 
            out_r_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    p_Result_3_fu_404_p3 <= tmp_V_4_reg_618(to_integer(unsigned(add_ln949_fu_398_p2)) downto to_integer(unsigned(add_ln949_fu_398_p2))) when (to_integer(unsigned(add_ln949_fu_398_p2))>= 0 and to_integer(unsigned(add_ln949_fu_398_p2))<=16) else "-";
    p_Result_4_fu_367_p2 <= (tmp_V_4_reg_618 and lshr_ln947_fu_361_p2);
    p_Result_6_fu_264_p3 <= tmp_V_3_fu_253_p2(16 downto 16);
    p_Result_7_fu_296_p3 <= (ap_const_lv15_7FFF & p_Result_s_fu_286_p4);
    p_Result_8_fu_522_p5 <= (tmp_3_fu_515_p3 & m_6_fu_484_p1(22 downto 0));
    
    p_Result_s_fu_286_p4_proc : process(tmp_V_4_fu_278_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable p_Result_s_fu_286_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_10(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_4_fu_278_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_10(5-1 downto 0)));
            for p_Result_s_fu_286_p4_i in 0 to 17-1 loop
                v0_cpy(p_Result_s_fu_286_p4_i) := tmp_V_4_fu_278_p3(17-1-p_Result_s_fu_286_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(17-1 downto 0)))));
        res_mask := res_mask(17-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_286_p4 <= resvalue(17-1 downto 0);
    end process;

        rhs_V_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_reg_127),17));

    select_ln245_fu_224_p3 <= 
        FC2_out_V_q0 when (icmp_ln1494_fu_218_p2(0) = '1') else 
        p_Val2_1_reg_127;
    select_ln964_fu_496_p3 <= 
        ap_const_lv8_7F when (tmp_6_fu_488_p3(0) = '1') else 
        ap_const_lv8_7E;
    shl_ln958_fu_456_p2 <= std_logic_vector(shift_left(unsigned(m_fu_437_p1),to_integer(unsigned('0' & sub_ln958_fu_451_p2(31-1 downto 0)))));
    sub_ln944_fu_316_p2 <= std_logic_vector(unsigned(ap_const_lv32_11) - unsigned(l_reg_625));
    sub_ln947_fu_351_p2 <= std_logic_vector(unsigned(ap_const_lv5_A) - unsigned(trunc_ln947_fu_347_p1));
    sub_ln958_fu_451_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_635));
    sub_ln964_fu_504_p2 <= std_logic_vector(unsigned(ap_const_lv8_7) - unsigned(trunc_ln943_reg_630));
    tmp_3_fu_515_p3 <= (p_Result_6_reg_613 & add_ln964_fu_509_p2);
    tmp_4_fu_331_p4 <= lsb_index_fu_325_p2(31 downto 1);
    tmp_5_fu_384_p3 <= lsb_index_fu_325_p2(31 downto 31);
    tmp_6_fu_488_p3 <= m_2_fu_469_p2(25 downto 25);
    tmp_V_3_fu_253_p2 <= std_logic_vector(signed(lhs_V_fu_249_p1) - signed(rhs_V_reg_580));
    tmp_V_4_fu_278_p3 <= 
        tmp_V_fu_272_p2 when (p_Result_6_fu_264_p3(0) = '1') else 
        tmp_V_3_fu_253_p2;
    tmp_V_fu_272_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(tmp_V_3_fu_253_p2));
    trunc_ln943_fu_312_p1 <= l_fu_304_p3(8 - 1 downto 0);
    trunc_ln944_fu_321_p1 <= sub_ln944_fu_316_p2(17 - 1 downto 0);
    trunc_ln947_fu_347_p1 <= sub_ln944_fu_316_p2(5 - 1 downto 0);
    xor_ln949_fu_392_p2 <= (tmp_5_fu_384_p3 xor ap_const_lv1_1);
    zext_ln245_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_137),64));
    zext_ln251_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_160),64));
    zext_ln257_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_171),64));
    zext_ln947_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_351_p2),17));
end behav;
