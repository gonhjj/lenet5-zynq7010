# 1 "lenet.cpp"
# 1 "lenet.cpp" 1
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 152 "<built-in>" 3
# 1 "<command line>" 1







# 1 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\etc/autopilot_ssdm_op.h" 1
# 157 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow));

    void _ssdm_op_Return(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecKeepValue(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_Unroll(...) __attribute__ ((nothrow));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow));
    void _ssdm_Inline(...) __attribute__ ((nothrow));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow));

    void _ssdm_DataPack(...) __attribute__ ((nothrow));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow));

    void __xilinx_ip_top(...) __attribute__ ((nothrow));


}
# 9 "<command line>" 2
# 1 "<built-in>" 2
# 1 "lenet.cpp" 2
# 1 "./param.h" 1



# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 1 3
# 37 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 3
# 37 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 3

# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++config.h" 1 3
# 275 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++config.h" 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/os_defines.h" 1 3
# 276 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++config.h" 2 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/cpu_defines.h" 1 3
# 279 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++config.h" 2 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 1 3
# 38 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
# 38 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3

# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 1 3
# 37 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 3
# 37 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 3

# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iosfwd" 1 3
# 38 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iosfwd" 3
# 38 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iosfwd" 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stringfwd.h" 1 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stringfwd.h" 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stringfwd.h" 3



namespace std {

  template<typename _Alloc>
    class allocator;







  template<class _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

  template<> struct char_traits<char>;

  typedef basic_string<char> string;


  template<> struct char_traits<wchar_t>;

  typedef basic_string<wchar_t> wstring;
# 82 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stringfwd.h" 3
}
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iosfwd" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 1 3
# 40 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3
# 40 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3

# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 1 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 31 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 3 4
typedef __typeof__(((int*)0)-((int*)0)) ptrdiff_t;



typedef __typeof__(sizeof(int)) size_t;
# 44 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3




namespace std {

  using ::ptrdiff_t;
  using ::size_t;

}
# 44 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 2 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 1 3








# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 10 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include/_mingw_mac.h" 1 3
# 10 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 2 3
# 277 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\vadefs.h" 1 3
# 13 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\vadefs.h" 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 674 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include/sdks/_mingw_directx.h" 1 3
# 674 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 2 3

# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include/sdks/_mingw_ddk.h" 1 3
# 675 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 2 3
# 13 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\vadefs.h" 2 3


#pragma pack(push,_CRT_PACKING)


extern "C" {





  typedef __builtin_va_list __gnuc_va_list;






  typedef __gnuc_va_list va_list;
# 99 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\vadefs.h" 3
}


#pragma pack(pop)
# 277 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 2 3


#pragma pack(push,_CRT_PACKING)
# 370 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef unsigned long long size_t;
# 380 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef long long ssize_t;
# 392 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef long long intptr_t;
# 405 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef unsigned long long uintptr_t;
# 418 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef long long ptrdiff_t;
# 436 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
# 456 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
typedef int errno_t;




typedef long __time32_t;




__extension__ typedef long long __time64_t;







typedef __time64_t time_t;
# 607 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct,*_locale_t;



typedef struct tagLC_ID {
  unsigned short wLanguage;
  unsigned short wCountry;
  unsigned short wCodePage;
} LC_ID,*LPLC_ID;




typedef struct threadlocaleinfostruct {
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned long lc_handle[6];
  LC_ID lc_id[6];
  struct {
    char *locale;
    wchar_t *wlocale;
    int *refcount;
    int *wrefcount;
  } lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct lconv *lconv;
  int *ctype1_refcount;
  unsigned short *ctype1;
  const unsigned short *pctype;
  const unsigned char *pclmap;
  const unsigned char *pcumap;
  struct __lc_time_data *lc_time_curr;
} threadlocinfo;



extern "C" {



const char *__mingw_get_crt_info (void);


}


#pragma pack(pop)
# 9 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 2 3


#pragma pack(push,_CRT_PACKING)


extern "C" {
# 27 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  struct _iobuf {
    char *_ptr;
    int _cnt;
    char *_base;
    int _flag;
    int _file;
    int _charbuf;
    int _bufsiz;
    char *_tmpfname;
  };
  typedef struct _iobuf FILE;





  __attribute__ ((__dllimport__)) FILE * __iob_func(void);
# 66 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  typedef unsigned long _fsize_t;




  struct _wfinddata32_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };

  struct _wfinddata32i64_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    __extension__ long long size;
    wchar_t name[260];
  };

  struct _wfinddata64i32_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };

  struct _wfinddata64_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    __extension__ long long size;
    wchar_t name[260];
  };
# 164 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  extern unsigned short ** __imp__pctype;
# 178 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  extern unsigned short ** __imp__wctype;
# 193 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  extern unsigned short ** __imp__pwctype;
# 217 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  int iswalpha(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswalpha_l(wint_t _C,_locale_t _Locale);
  int iswupper(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswupper_l(wint_t _C,_locale_t _Locale);
  int iswlower(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswlower_l(wint_t _C,_locale_t _Locale);
  int iswdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswdigit_l(wint_t _C,_locale_t _Locale);
  int iswxdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswxdigit_l(wint_t _C,_locale_t _Locale);
  int iswspace(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswspace_l(wint_t _C,_locale_t _Locale);
  int iswpunct(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswpunct_l(wint_t _C,_locale_t _Locale);
  int iswalnum(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswalnum_l(wint_t _C,_locale_t _Locale);
  int iswprint(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswprint_l(wint_t _C,_locale_t _Locale);
  int iswgraph(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswgraph_l(wint_t _C,_locale_t _Locale);
  int iswcntrl(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswcntrl_l(wint_t _C,_locale_t _Locale);
  int iswascii(wint_t _C);
  int isleadbyte(int _C);
  __attribute__ ((__dllimport__)) int _isleadbyte_l(int _C,_locale_t _Locale);
  wint_t towupper(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t _towupper_l(wint_t _C,_locale_t _Locale);
  wint_t towlower(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t _towlower_l(wint_t _C,_locale_t _Locale);
  int iswctype(wint_t _C,wctype_t _Type);
  __attribute__ ((__dllimport__)) int _iswctype_l(wint_t _C,wctype_t _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __iswcsymf(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswcsymf_l(wint_t _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __iswcsym(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswcsym_l(wint_t _C,_locale_t _Locale);
  int is_wctype(wint_t _C,wctype_t _Type);


  int iswblank(wint_t _C);







  __attribute__ ((__dllimport__)) wchar_t * _wgetcwd(wchar_t *_DstBuf,int _SizeInWords);
  __attribute__ ((__dllimport__)) wchar_t * _wgetdcwd(int _Drive,wchar_t *_DstBuf,int _SizeInWords);
  wchar_t * _wgetdcwd_nolock(int _Drive,wchar_t *_DstBuf,int _SizeInWords);
  __attribute__ ((__dllimport__)) int _wchdir(const wchar_t *_Path);
  __attribute__ ((__dllimport__)) int _wmkdir(const wchar_t *_Path);
  __attribute__ ((__dllimport__)) int _wrmdir(const wchar_t *_Path);





  __attribute__ ((__dllimport__)) int _waccess(const wchar_t *_Filename,int _AccessMode);
  __attribute__ ((__dllimport__)) int _wchmod(const wchar_t *_Filename,int _Mode);
  __attribute__ ((__dllimport__)) int _wcreat(const wchar_t *_Filename,int _PermissionMode) ;
  __attribute__ ((__dllimport__)) intptr_t _wfindfirst32(const wchar_t *_Filename,struct _wfinddata32_t *_FindData);
  __attribute__ ((__dllimport__)) int _wfindnext32(intptr_t _FindHandle,struct _wfinddata32_t *_FindData);
  __attribute__ ((__dllimport__)) int _wunlink(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) int _wrename(const wchar_t *_NewFilename,const wchar_t *_OldFilename);
  __attribute__ ((__dllimport__)) wchar_t * _wmktemp(wchar_t *_TemplateName) ;
  __attribute__ ((__dllimport__)) intptr_t _wfindfirst32i64(const wchar_t *_Filename,struct _wfinddata32i64_t *_FindData);
  intptr_t _wfindfirst64i32(const wchar_t *_Filename,struct _wfinddata64i32_t *_FindData);
  __attribute__ ((__dllimport__)) intptr_t _wfindfirst64(const wchar_t *_Filename,struct _wfinddata64_t *_FindData);
  __attribute__ ((__dllimport__)) int _wfindnext32i64(intptr_t _FindHandle,struct _wfinddata32i64_t *_FindData);
  int _wfindnext64i32(intptr_t _FindHandle,struct _wfinddata64i32_t *_FindData);
  __attribute__ ((__dllimport__)) int _wfindnext64(intptr_t _FindHandle,struct _wfinddata64_t *_FindData);
  __attribute__ ((__dllimport__)) errno_t _wsopen_s(int *_FileHandle,const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,int _PermissionFlag);
  __attribute__ ((__dllimport__)) int _wopen(const wchar_t *_Filename,int _OpenFlag,...) ;
  __attribute__ ((__dllimport__)) int _wsopen(const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,...) ;




  __attribute__ ((__dllimport__)) wchar_t * _wsetlocale(int _Category,const wchar_t *_Locale);





  __attribute__ ((__dllimport__)) intptr_t _wexecl(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wexecle(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wexeclp(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wexeclpe(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wexecv(const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t _wexecve(const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t _wexecvp(const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t _wexecvpe(const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t _wspawnl(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wspawnle(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wspawnlp(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wspawnlpe(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wspawnv(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t _wspawnve(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t _wspawnvp(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t _wspawnvpe(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);


  __attribute__ ((__dllimport__)) int _wsystem(const wchar_t *_Command);
# 360 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  typedef unsigned short _ino_t;

  typedef unsigned short ino_t;





  typedef unsigned int _dev_t;

  typedef unsigned int dev_t;







  typedef long _off_t;

  typedef long off_t;






  __extension__ typedef long long _off64_t;

  __extension__ typedef long long off64_t;
# 412 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  struct _stat32 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
  };


  struct stat {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    time_t st_atime;
    time_t st_mtime;
    time_t st_ctime;
  };


  struct _stat32i64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __extension__ long long st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
  };

  struct _stat64i32 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
  };

  struct _stat64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __extension__ long long st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
  };
# 493 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  __attribute__ ((__dllimport__)) int _wstat32(const wchar_t *_Name,struct _stat32 *_Stat);
  __attribute__ ((__dllimport__)) int _wstat32i64(const wchar_t *_Name,struct _stat32i64 *_Stat);
  int _wstat64i32(const wchar_t *_Name,struct _stat64i32 *_Stat);
  __attribute__ ((__dllimport__)) int _wstat64(const wchar_t *_Name,struct _stat64 *_Stat);
# 507 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t *_cgetws(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) wint_t _getwch(void);
  __attribute__ ((__dllimport__)) wint_t _getwche(void);
  __attribute__ ((__dllimport__)) wint_t _putwch(wchar_t _WCh);
  __attribute__ ((__dllimport__)) wint_t _ungetwch(wint_t _WCh);
  __attribute__ ((__dllimport__)) int _cputws(const wchar_t *_String);
  __attribute__ ((__dllimport__)) int _cwprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _cwscanf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _cwscanf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vcwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _cwprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vcwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);

  __attribute__ ((__dllimport__)) int _cwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vcwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _cwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vcwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  wint_t _putwch_nolock(wchar_t _WCh);
  wint_t _getwch_nolock(void);
  wint_t _getwche_nolock(void);
  wint_t _ungetwch_nolock(wint_t _WCh);
# 540 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  __attribute__ ((__dllimport__)) FILE * _wfsopen(const wchar_t *_Filename,const wchar_t *_Mode,int _ShFlag);


  wint_t fgetwc(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t _fgetwchar(void);
  wint_t fputwc(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t _fputwchar(wchar_t _Ch);
  wint_t getwc(FILE *_File);
  wint_t getwchar(void);
  wint_t putwc(wchar_t _Ch,FILE *_File);
  wint_t putwchar(wchar_t _Ch);
  wint_t ungetwc(wint_t _Ch,FILE *_File);
  wchar_t * fgetws(wchar_t * __restrict__ _Dst,int _SizeInWords,FILE * __restrict__ _File);
  int fputws(const wchar_t * __restrict__ _Str,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) wchar_t * _getws(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) int _putws(const wchar_t *_Str);
  int fwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
  int wprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _scwprintf(const wchar_t * __restrict__ _Format,...);
  int vfwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
  int vwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int swprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ , ...) ;
  __attribute__ ((__dllimport__)) int _swprintf_l(wchar_t * __restrict__ ,size_t _SizeInWords,const wchar_t * __restrict__ _Format,_locale_t _Locale,... ) ;
  __attribute__ ((__dllimport__)) int vswprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ ,va_list) ;
  __attribute__ ((__dllimport__)) int _swprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vswprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _snwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _vsnwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,va_list _Args) ;

  int snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...);
  int vsnwprintf (wchar_t * __restrict__ , size_t, const wchar_t * __restrict__ , va_list);






  int vwscanf (const wchar_t * __restrict__ , va_list);
  int vfwscanf (FILE * __restrict__ ,const wchar_t * __restrict__ ,va_list);
  int vswscanf (const wchar_t * __restrict__ ,const wchar_t * __restrict__ ,va_list);

  __attribute__ ((__dllimport__)) int _fwprintf_p(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _wprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vfwprintf_p(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _swprintf_p(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vswprintf_p(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _scwprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vscwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _wprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _wprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _fwprintf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _fwprintf_p_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vfwprintf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vfwprintf_p_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _swprintf_c_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _swprintf_p_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vswprintf_c_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vswprintf_p_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _scwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _scwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vscwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _snwprintf_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vsnwprintf_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList) ;
  __attribute__ ((__dllimport__)) int _swprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vswprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,va_list _Args);
  __attribute__ ((__dllimport__)) int __swprintf_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,_locale_t _Plocinfo,...) ;
  __attribute__ ((__dllimport__)) int _vswprintf_l(wchar_t * __restrict__ _Dest,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList) ;
  __attribute__ ((__dllimport__)) int __vswprintf_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,_locale_t _Plocinfo,va_list _Args) ;
# 621 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t * _wtempnam(const wchar_t *_Directory,const wchar_t *_FilePrefix);
  __attribute__ ((__dllimport__)) int _vscwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vscwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  int fwscanf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _fwscanf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  int swscanf(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _swscanf_l(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) int _snwscanf(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _snwscanf_l(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  int wscanf(const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _wscanf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) FILE * _wfdopen(int _FileHandle ,const wchar_t *_Mode);
  __attribute__ ((__dllimport__)) FILE * _wfopen(const wchar_t * __restrict__ _Filename,const wchar_t * __restrict__ _Mode) ;
  __attribute__ ((__dllimport__)) FILE * _wfreopen(const wchar_t * __restrict__ _Filename,const wchar_t * __restrict__ _Mode,FILE * __restrict__ _OldFile) ;



  __attribute__ ((__dllimport__)) void _wperror(const wchar_t *_ErrMsg);

  __attribute__ ((__dllimport__)) FILE * _wpopen(const wchar_t *_Command,const wchar_t *_Mode);



  __attribute__ ((__dllimport__)) int _wremove(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) wchar_t * _wtmpnam(wchar_t *_Buffer);
  __attribute__ ((__dllimport__)) wint_t _fgetwc_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t _fputwc_nolock(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t _ungetwc_nolock(wint_t _Ch,FILE *_File);
# 669 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t * _itow(int _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t * _ltow(long _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t * _ultow(unsigned long _Value,wchar_t *_Dest,int _Radix) ;
  double wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  __attribute__ ((__dllimport__)) double _wcstod_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,_locale_t _Locale);
  float wcstof( const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);

  float wcstof (const wchar_t * __restrict__, wchar_t ** __restrict__);
  long double wcstold (const wchar_t * __restrict__, wchar_t ** __restrict__);

  long wcstol(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long _wcstol_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long wcstoul(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long _wcstoul_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t * _wgetenv(const wchar_t *_VarName) ;




  __attribute__ ((__dllimport__)) double _wtof(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) double _wtof_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int _wtoi(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) int _wtoi_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) long _wtol(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) long _wtol_l(const wchar_t *_Str,_locale_t _Locale);

  __extension__ __attribute__ ((__dllimport__)) wchar_t * _i64tow(long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) wchar_t * _ui64tow(unsigned long long _Val,wchar_t *_DstBuf,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long _wtoi64(const wchar_t *_Str);
  __extension__ __attribute__ ((__dllimport__)) long long _wtoi64_l(const wchar_t *_Str,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long long _wcstoi64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long _wcstoi64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long _wcstoui64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long _wcstoui64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);





  __attribute__ ((__dllimport__)) wchar_t * _wfullpath(wchar_t *_FullPath,const wchar_t *_Path,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) void _wmakepath(wchar_t *_ResultPath,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);




  __attribute__ ((__dllimport__)) int _wputenv(const wchar_t *_EnvString);
  __attribute__ ((__dllimport__)) void _wsearchenv(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath) ;
  __attribute__ ((__dllimport__)) void _wsplitpath(const wchar_t *_FullPath,wchar_t *_Drive,wchar_t *_Dir,wchar_t *_Filename,wchar_t *_Ext) ;





  __attribute__ ((__dllimport__)) wchar_t * _wcsdup(const wchar_t *_Str);
  wchar_t * wcscat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
                wchar_t * wcschr(const wchar_t *_Str,wchar_t _Ch);
  int wcscmp(const wchar_t *_Str1,const wchar_t *_Str2);
  wchar_t * wcscpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
  size_t wcscspn(const wchar_t *_Str,const wchar_t *_Control);
  size_t wcslen(const wchar_t *_Str);
  size_t wcsnlen(const wchar_t *_Src,size_t _MaxCount);
  wchar_t * wcsncat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  int wcsncmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  wchar_t * wcsncpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  wchar_t * _wcsncpy_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count,_locale_t _Locale) ;
                wchar_t * wcspbrk(const wchar_t *_Str,const wchar_t *_Control);
                wchar_t * wcsrchr(const wchar_t *_Str,wchar_t _Ch);
  size_t wcsspn(const wchar_t *_Str,const wchar_t *_Control);
                wchar_t * wcsstr(const wchar_t *_Str,const wchar_t *_SubStr);
  wchar_t * wcstok(wchar_t * __restrict__ _Str,const wchar_t * __restrict__ _Delim) ;
  __attribute__ ((__dllimport__)) wchar_t * _wcserror(int _ErrNum) ;
  __attribute__ ((__dllimport__)) wchar_t * __wcserror(const wchar_t *_Str) ;
  __attribute__ ((__dllimport__)) int _wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int _wcsicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int _wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int _wcsnicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t * _wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) wchar_t * _wcsrev(wchar_t *_Str);
  __attribute__ ((__dllimport__)) wchar_t * _wcsset(wchar_t *_Str,wchar_t _Val) ;
  __attribute__ ((__dllimport__)) wchar_t * _wcslwr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcslwr_l(wchar_t *_String,_locale_t _Locale) ;
  __attribute__ ((__dllimport__)) wchar_t * _wcsupr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcsupr_l(wchar_t *_String,_locale_t _Locale) ;
  size_t wcsxfrm(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t _wcsxfrm_l(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);
  int wcscoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int _wcscoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int _wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int _wcsicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int _wcsncoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int _wcsncoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int _wcsnicoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int _wcsnicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);


  wchar_t * wcsdup(const wchar_t *_Str) ;

  int wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2) ;
  int wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount) ;
  wchar_t * wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  wchar_t * wcsrev(wchar_t *_Str) ;
  wchar_t * wcsset(wchar_t *_Str,wchar_t _Val) ;
  wchar_t * wcslwr(wchar_t *_Str) ;
  wchar_t * wcsupr(wchar_t *_Str) ;
  int wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2) ;





  struct tm {
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
  };





  __attribute__ ((__dllimport__)) wchar_t * _wasctime(const struct tm *_Tm);
  wchar_t * _wctime32(const __time32_t *_Time) ;
  size_t wcsftime(wchar_t * __restrict__ _Buf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,const struct tm * __restrict__ _Tm);
  __attribute__ ((__dllimport__)) size_t _wcsftime_l(wchar_t * __restrict__ _Buf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,const struct tm * __restrict__ _Tm,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t * _wstrdate(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) wchar_t * _wstrtime(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) wchar_t * _wctime64(const __time64_t *_Time) ;



  wchar_t * _wctime(const time_t *_Time) ;
# 816 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  typedef int mbstate_t;
  typedef wchar_t _Wint_t;

  wint_t btowc(int);
  size_t mbrlen(const char * __restrict__ _Ch,size_t _SizeInBytes,mbstate_t * __restrict__ _State);
  size_t mbrtowc(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SizeInBytes,mbstate_t * __restrict__ _State);
  size_t mbsrtowcs(wchar_t * __restrict__ _Dest,const char ** __restrict__ _PSrc,size_t _Count,mbstate_t * __restrict__ _State) ;
  size_t wcrtomb(char * __restrict__ _Dest,wchar_t _Source,mbstate_t * __restrict__ _State) ;
  size_t wcsrtombs(char * __restrict__ _Dest,const wchar_t ** __restrict__ _PSource,size_t _Count,mbstate_t * __restrict__ _State) ;
  int wctob(wint_t _WCh);


  wchar_t * wmemset(wchar_t *s, wchar_t c, size_t n);
                wchar_t * wmemchr(const wchar_t *s, wchar_t c, size_t n);
  int wmemcmp(const wchar_t *s1, const wchar_t *s2,size_t n);
  wchar_t * wmemcpy(wchar_t * __restrict__ s1,const wchar_t * __restrict__ s2,size_t n) ;
  wchar_t * wmemmove(wchar_t *s1, const wchar_t *s2, size_t n) ;
  int fwide(FILE *stream,int mode);
  int mbsinit(const mbstate_t *ps);
  __extension__ long long wcstoll(const wchar_t * __restrict__ nptr,wchar_t ** __restrict__ endptr, int base);
  __extension__ unsigned long long wcstoull(const wchar_t * __restrict__ nptr,wchar_t ** __restrict__ endptr, int base);


  void * memmove(void *_Dst,const void *_Src,size_t _MaxCount);
  void * memcpy(void * __restrict__ _Dst,const void * __restrict__ _Src,size_t _MaxCount) ;
# 876 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
}


#pragma pack(pop)


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\sec_api/wchar_s.h" 1 3








# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 1 3
# 9 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\sec_api/wchar_s.h" 2 3
# 881 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 2 3
# 47 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 2 3
# 64 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3
namespace std {

  using ::mbstate_t;

}
# 138 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3
namespace std {

  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;



  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;





  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;


  inline wchar_t*
  wcschr(wchar_t* __p, wchar_t __c)
  { return wcschr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcspbrk(wchar_t* __s1, const wchar_t* __s2)
  { return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wcsrchr(wchar_t* __p, wchar_t __c)
  { return wcsrchr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcsstr(wchar_t* __s1, const wchar_t* __s2)
  { return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wmemchr(wchar_t* __p, wchar_t __c, size_t __n)
  { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }


}







namespace __gnu_cxx {






  using ::wcstold;
# 257 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3
  using ::wcstoll;
  using ::wcstoull;


}

namespace std {

  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;

}
# 42 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 2 3
# 69 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3
namespace std {
# 89 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3
  typedef long long streamoff;







  typedef ptrdiff_t streamsize;
# 110 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 132 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;
# 238 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3
}
# 42 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iosfwd" 2 3

namespace std {
# 73 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;




  typedef basic_ios<char> ios;
  typedef basic_streambuf<char> streambuf;
  typedef basic_istream<char> istream;
  typedef basic_ostream<char> ostream;
  typedef basic_iostream<char> iostream;
  typedef basic_stringbuf<char> stringbuf;
  typedef basic_istringstream<char> istringstream;
  typedef basic_ostringstream<char> ostringstream;
  typedef basic_stringstream<char> stringstream;
  typedef basic_filebuf<char> filebuf;
  typedef basic_ifstream<char> ifstream;
  typedef basic_ofstream<char> ofstream;
  typedef basic_fstream<char> fstream;


  typedef basic_ios<wchar_t> wios;
  typedef basic_streambuf<wchar_t> wstreambuf;
  typedef basic_istream<wchar_t> wistream;
  typedef basic_ostream<wchar_t> wostream;
  typedef basic_iostream<wchar_t> wiostream;
  typedef basic_stringbuf<wchar_t> wstringbuf;
  typedef basic_istringstream<wchar_t> wistringstream;
  typedef basic_ostringstream<wchar_t> wostringstream;
  typedef basic_stringstream<wchar_t> wstringstream;
  typedef basic_filebuf<wchar_t> wfilebuf;
  typedef basic_ifstream<wchar_t> wifstream;
  typedef basic_ofstream<wchar_t> wofstream;
  typedef basic_fstream<wchar_t> wfstream;



}
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception" 1 3
# 35 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception" 3
# 35 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();



  void terminate() throw() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();



  void unexpected() __attribute__ ((__noreturn__));
# 117 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception" 3
  bool uncaught_exception() throw() __attribute__ ((__pure__));


}

namespace __gnu_cxx {
# 140 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception" 3
  void __verbose_terminate_handler();

}

}

#pragma GCC visibility pop
# 40 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 1 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 3

# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 1 3
# 61 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 44 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3
# 62 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/functexcept.h" 1 3
# 37 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/functexcept.h" 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception_defines.h" 1 3
# 38 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/functexcept.h" 2 3

namespace std {


  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));

}
# 63 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/cpp_type_traits.h" 1 3
# 36 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/cpp_type_traits.h" 3
# 36 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/cpp_type_traits.h" 3
# 68 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/cpp_type_traits.h" 3
namespace __gnu_cxx {

  template<typename _Iterator, typename _Container>
    class __normal_iterator;

}

namespace std {

  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };




  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 193 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_fundamental
    : public __traitor<__is_void<_Tp>, __is_arithmetic<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };
# 416 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/cpp_type_traits.h" 3
  template<typename _Tp>
    class __is_iterator_helper
    {
      typedef char __one;
      typedef struct { char __arr[2]; } __two;

      template<typename _Up>
        struct _Wrap_type
 { };

      template<typename _Up>
        static __one __test(_Wrap_type<typename _Up::iterator_category>*);

      template<typename _Up>
        static __two __test(...);

    public:
      static const bool __value = (sizeof(__test<_Tp>(0)) == 1
       || __is_pointer<_Tp>::__value);
    };

  template<typename _Tp>
    struct __is_iterator
    {
      enum { __value = __is_iterator_helper<_Tp>::__value };
      typedef typename __truth_type<__value>::__type __type;
    };

}
# 64 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/type_traits.h" 1 3
# 32 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/type_traits.h" 3
# 32 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/type_traits.h" 3




namespace __gnu_cxx {


  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };

  template<typename _Tp>
    struct __promote<_Tp, false>
    { typedef _Tp __type; };

  template<typename _Tp, typename _Up>
    struct __promote_2
    {
    private:
      typedef typename __promote<_Tp>::__type __type1;
      typedef typename __promote<_Up>::__type __type2;

    public:
      typedef __typeof__(__type1() + __type2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp>
    struct __promote_3
    {
    private:
      typedef typename __promote<_Tp>::__type __type1;
      typedef typename __promote<_Up>::__type __type2;
      typedef typename __promote<_Vp>::__type __type3;

    public:
      typedef __typeof__(__type1() + __type2() + __type3()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp>
    struct __promote_4
    {
    private:
      typedef typename __promote<_Tp>::__type __type1;
      typedef typename __promote<_Up>::__type __type2;
      typedef typename __promote<_Vp>::__type __type3;
      typedef typename __promote<_Wp>::__type __type4;

    public:
      typedef __typeof__(__type1() + __type2() + __type3() + __type4()) __type;
    };

}
# 65 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/numeric_traits.h" 1 3
# 32 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/numeric_traits.h" 3
# 32 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/numeric_traits.h" 3




namespace __gnu_cxx {
# 51 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 96 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 3010 / 10000);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };

}
# 66 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 1 3
# 60 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/move.h" 1 3
# 34 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/move.h" 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 44 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3
# 35 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/move.h" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/concept_check.h" 1 3
# 33 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/concept_check.h" 3
# 33 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/concept_check.h" 3
# 36 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/move.h" 2 3
# 95 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/move.h" 3
namespace std {
# 104 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/move.h" 3
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
    {



      _Tp __tmp = (__a);
      __a = (__b);
      __b = (__tmp);
    }



  template<typename _Tp, size_t _Nm>
    inline void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }

}
# 61 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 2 3






namespace std {


  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      pair()
      : first(), second() { }


      pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }
# 113 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 3
      template<class _U1, class _U2>
        pair(const pair<_U1, _U2>& __p)
 : first(__p.first),
   second(__p.second) { }
# 149 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 3
    };


  template<class _T1, class _T2>
    inline bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<class _T1, class _T2>
    inline bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<class _T1, class _T2>
    inline bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<class _T1, class _T2>
    inline bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<class _T1, class _T2>
    inline bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<class _T1, class _T2>
    inline bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }
# 211 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 3
  template<class _T1, class _T2>
    inline pair<_T1, _T2>
    make_pair(_T1 __x, _T2 __y)
    { return pair<_T1, _T2>(__x, __y); }
# 257 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 3
}
# 67 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 1 3
# 63 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 3
# 63 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 44 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3
# 66 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 2 3

namespace std {
# 84 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 111 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 135 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 3
  template<typename _Iterator>
    struct iterator_traits
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };


  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }



}
# 68 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_funcs.h" 1 3
# 63 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_funcs.h" 3
# 63 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_funcs.h" 3



namespace std {

  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {



      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {



      return __last - __first;
    }
# 108 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {


      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {



      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {



      __i += __n;
    }
# 166 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }

}
# 69 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 1 3
# 68 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
namespace std {
# 94 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;







      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }






      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }






      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }






      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 281 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>







    inline typename reverse_iterator<_IteratorL>::difference_type
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)

    { return __y.base() - __x.base(); }
# 393 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 420 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_back(__value);
 return *this;
      }
# 443 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 469 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 484 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 510 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_front(__value);
 return *this;
      }
# 533 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 559 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 578 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 621 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
      insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }
# 647 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 673 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }



}

namespace __gnu_cxx {
# 694 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i)
        : _M_current(__i.base()) { }


      reference
      operator*() const
      { return *_M_current; }

      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int)
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int)
      { return __normal_iterator(_M_current--); }


      reference
      operator[](const difference_type& __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(const difference_type& __n)
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
      { return _M_current; }
    };
# 792 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>







    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)

    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }

}
# 70 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3

# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\debug/debug.h" 1 3
# 47 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 72 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3


namespace std {




  template<bool _BoolType>
    struct __iter_swap
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          typedef typename iterator_traits<_ForwardIterator1>::value_type
            _ValueType1;
          _ValueType1 __tmp = (*__a);
          *__a = (*__b);
          *__b = (__tmp);
 }
    };

  template<>
    struct __iter_swap<true>
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          swap(*__a, *__b);
        }
    };
# 115 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
      typedef typename iterator_traits<_ForwardIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator2>::value_type
 _ValueType2;
# 134 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
      typedef typename iterator_traits<_ForwardIterator1>::reference
 _ReferenceType1;
      typedef typename iterator_traits<_ForwardIterator2>::reference
 _ReferenceType2;
      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 && __are_same<_ValueType1&, _ReferenceType1>::__value
 && __are_same<_ValueType2&, _ReferenceType2>::__value>::
 iter_swap(__a, __b);
    }
# 156 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {





                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 184 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {



      if (__b < __a)
 return __b;
      return __a;
    }
# 207 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {



      if (__a < __b)
 return __b;
      return __a;
    }
# 230 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 251 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }




  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type
      _S_base(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type
      _S_base(_Iterator __it)
      { return __it.base(); }
    };



  template<typename _Iterator>
    struct _Niter_base
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }


  template<typename _Iterator>
    struct _Miter_base
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };
# 339 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };
# 377 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_pod(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 462 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 514 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };
# 542 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };
# 572 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_pod(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 631 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 689 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      __builtin_memset(__first, static_cast<unsigned char>(__tmp),
         __last - __first);
    }
# 733 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {



                                                     ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (; __n > 0; --__n, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __n > 0; --__n, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 791 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {



      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   return !__builtin_memcmp(__first1, __first2, sizeof(_Tp)
       * (__last1 - __first1));
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = (__is_integer<_ValueType1>::__value
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }


  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 typedef typename iterator_traits<_II1>::iterator_category _Category1;
 typedef typename iterator_traits<_II2>::iterator_category _Category2;
 typedef std::__lc_rai<_Category1, _Category2> __rai_type;

 __last1 = __rai_type::__newlast1(__first1, __last1,
      __first2, __last2);
 for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
      ++__first1, ++__first2)
   {
     if (*__first1 < *__first2)
       return true;
     if (*__first2 < *__first1)
       return false;
   }
 return __first1 == __last1 && __first2 != __last2;
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   const int __result = __builtin_memcmp(__first1, __first2,
      std::min(__len1, __len2));
   return __result != 0 ? __result < 0 : __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }
# 952 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;




                                                                  ;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }



  template<typename _Size>
    inline _Size
    __lg(_Size __n)
    {
      _Size __k;
      for (__k = 0; __n != 0; __n >>= 1)
 ++__k;
      return __k - 1;
    }

  inline int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

}

namespace std {
# 1028 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {






                                                       ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1060 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1091 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {

      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;




                                                       ;
                                                       ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1125 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;




                                                       ;
                                                       ;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, ++__first2)
 {
   if (__comp(*__first1, *__first2))
     return true;
   if (__comp(*__first2, *__first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 1165 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {






                                                       ;

      while (__first1 != __last1 && *__first1 == *__first2)
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1202 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      while (__first1 != __last1 && bool(__binary_pred(*__first1, *__first2)))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }

}
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 2 3

# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 1 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 44 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3
# 44 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 2 3
# 43 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 2 3








namespace __gnu_cxx {
# 63 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 88 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((-1)); }

      static int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }

}

namespace std {
# 229 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return __builtin_memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n)); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n)); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return static_cast<char_type*>(__builtin_memset(__s, __a, __n)); }

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }



      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((-1)); }

      static int_type
      not_eof(const int_type& __c)
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return wcslen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return wmemchr(__s, __a, __n); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemmove(__s1, __s2, __n); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcpy(__s1, __s2, __n); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return wmemset(__s, __a, __n); }

      static char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((wint_t)(0xFFFF)); }

      static int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };


}
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/localefwd.h" 1 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/localefwd.h" 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/localefwd.h" 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++locale.h" 1 3
# 40 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++locale.h" 3
# 40 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++locale.h" 3

# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\clocale" 1 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\clocale" 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\clocale" 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\locale.h" 1 3








# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 9 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\locale.h" 2 3


#pragma pack(push,_CRT_PACKING)


extern "C" {
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\locale.h" 3
  struct lconv {
    char *decimal_point;
    char *thousands_sep;
    char *grouping;
    char *int_curr_symbol;
    char *currency_symbol;
    char *mon_decimal_point;
    char *mon_thousands_sep;
    char *mon_grouping;
    char *positive_sign;
    char *negative_sign;
    char int_frac_digits;
    char frac_digits;
    char p_cs_precedes;
    char p_sep_by_space;
    char n_cs_precedes;
    char n_sep_by_space;
    char p_sign_posn;
    char n_sign_posn;
  };
# 75 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\locale.h" 3
  int _configthreadlocale(int _Flag);
  char * setlocale(int _Category,const char *_Locale);
  __attribute__ ((__dllimport__)) struct lconv * localeconv(void);
  _locale_t _get_current_locale(void);
  _locale_t _create_locale(int _Category,const char *_Locale);
  void _free_locale(_locale_t _Locale);
  _locale_t __get_current_locale(void);
  _locale_t __create_locale(int _Category,const char *_Locale);
  void __free_locale(_locale_t _Locale);







}


#pragma pack(pop)
# 44 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\clocale" 2 3








namespace std {

  using ::lconv;
  using ::setlocale;
  using ::localeconv;

}
# 42 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++locale.h" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 44 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3
# 43 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++locale.h" 2 3



namespace std {

  typedef int* __c_locale;





  inline int
  __convert_from_v(const __c_locale&, char* __out,
     const int __size __attribute__((__unused__)),
     const char* __fmt, ...)
  {
    char* __old = std::setlocale(4, __null);
    char* __sav = __null;
    if (__builtin_strcmp(__old, "C"))
      {
 const size_t __len = __builtin_strlen(__old) + 1;
 __sav = new char[__len];
 __builtin_memcpy(__sav, __old, __len);
 std::setlocale(4, "C");
      }

    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);

    if (__sav)
      {
 std::setlocale(4, __sav);
 delete [] __sav;
      }
    return __ret;
  }

}
# 42 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/localefwd.h" 2 3

# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 1 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\ctype.h" 1 3








# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 9 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\ctype.h" 2 3



extern "C" {
# 72 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\ctype.h" 3
  extern const unsigned char __newclmap[];
  extern const unsigned char __newcumap[];
  extern pthreadlocinfo __ptlocinfo;
  extern pthreadmbcinfo __ptmbcinfo;
  extern int __globallocalestatus;
  extern int __locale_changed;
  extern struct threadlocaleinfostruct __initiallocinfo;
  extern _locale_tstruct __initiallocalestructinfo;
  pthreadlocinfo __updatetlocinfo(void);
  pthreadmbcinfo __updatetmbcinfo(void);
# 100 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\ctype.h" 3
  __attribute__ ((__dllimport__)) int _isctype(int _C,int _Type);
  __attribute__ ((__dllimport__)) int _isctype_l(int _C,int _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isalpha(int _C);
  __attribute__ ((__dllimport__)) int _isalpha_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isupper(int _C);
  __attribute__ ((__dllimport__)) int _isupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int islower(int _C);
  __attribute__ ((__dllimport__)) int _islower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isdigit(int _C);
  __attribute__ ((__dllimport__)) int _isdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isxdigit(int _C);
  __attribute__ ((__dllimport__)) int _isxdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isspace(int _C);
  __attribute__ ((__dllimport__)) int _isspace_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int ispunct(int _C);
  __attribute__ ((__dllimport__)) int _ispunct_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isalnum(int _C);
  __attribute__ ((__dllimport__)) int _isalnum_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isprint(int _C);
  __attribute__ ((__dllimport__)) int _isprint_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isgraph(int _C);
  __attribute__ ((__dllimport__)) int _isgraph_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int iscntrl(int _C);
  __attribute__ ((__dllimport__)) int _iscntrl_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int toupper(int _C);
  __attribute__ ((__dllimport__)) int tolower(int _C);
  __attribute__ ((__dllimport__)) int _tolower(int _C);
  __attribute__ ((__dllimport__)) int _tolower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int _toupper(int _C);
  __attribute__ ((__dllimport__)) int _toupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __isascii(int _C);
  __attribute__ ((__dllimport__)) int __toascii(int _C);
  __attribute__ ((__dllimport__)) int __iscsymf(int _C);
  __attribute__ ((__dllimport__)) int __iscsym(int _C);


int isblank(int _C);
# 193 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\ctype.h" 3
  extern int * __imp___mb_cur_max;
# 275 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\ctype.h" 3
}
# 44 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 2 3
# 63 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 3
namespace std {

  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;

}
# 44 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/localefwd.h" 2 3

namespace std {
# 54 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;


  template<typename _CharT>
    class collate;
  template<typename _CharT> class
    collate_byname;


  class time_base;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;

  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;

  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;


  class messages_base;
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;

}
# 42 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 1 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3

# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/atomicity.h" 1 3
# 34 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/atomicity.h" 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr.h" 1 3
# 30 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr.h" 3
#pragma GCC visibility push(default)
# 162 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr.h" 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 1 3
# 70 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\errno.h" 1 3








# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 9 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\errno.h" 2 3



extern "C" {




__attribute__ ((__dllimport__)) extern int * _errno(void);


errno_t _set_errno(int _Value);
errno_t _get_errno(int *_Value);
# 74 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\errno.h" 3
}
# 71 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 2 3

# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 73 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 2 3
# 340 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 3
extern "C" {


typedef unsigned long __gthread_key_t;

typedef struct {
  int done;
  long started;
} __gthread_once_t;

typedef struct {
  long counter;
  void *sema;
} __gthread_mutex_t;

typedef struct {
  long counter;
  long depth;
  unsigned long owner;
  void *sema;
} __gthread_recursive_mutex_t;
# 374 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 3
extern int _CRT_MT;
extern int __mingwthr_key_dtor (unsigned long, void (*) (void *));
# 401 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{

  return _CRT_MT;



}







extern int __gthr_win32_once (__gthread_once_t *, void (*) (void));
extern int __gthr_win32_key_create (__gthread_key_t *, void (*) (void*));
extern int __gthr_win32_key_delete (__gthread_key_t);
extern void * __gthr_win32_getspecific (__gthread_key_t);
extern int __gthr_win32_setspecific (__gthread_key_t, const void *);
extern void __gthr_win32_mutex_init_function (__gthread_mutex_t *);
extern int __gthr_win32_mutex_lock (__gthread_mutex_t *);
extern int __gthr_win32_mutex_trylock (__gthread_mutex_t *);
extern int __gthr_win32_mutex_unlock (__gthread_mutex_t *);
extern void
  __gthr_win32_recursive_mutex_init_function (__gthread_recursive_mutex_t *);
extern int __gthr_win32_recursive_mutex_lock (__gthread_recursive_mutex_t *);
extern int
  __gthr_win32_recursive_mutex_trylock (__gthread_recursive_mutex_t *);
extern int __gthr_win32_recursive_mutex_unlock (__gthread_recursive_mutex_t *);
extern void __gthr_win32_mutex_destroy (__gthread_mutex_t *);

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthr_win32_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthr_win32_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthr_win32_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthr_win32_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthr_win32_setspecific (__key, __ptr);
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  __gthr_win32_mutex_init_function (__mutex);
}

static inline void
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  __gthr_win32_mutex_destroy (__mutex);
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_mutex_trylock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_mutex_unlock (__mutex);
  else
    return 0;
}

static inline void
__gthread_recursive_mutex_init_function (__gthread_recursive_mutex_t *__mutex)
{
   __gthr_win32_recursive_mutex_init_function (__mutex);
}

static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_recursive_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_recursive_mutex_trylock (__mutex);
  else
    return 0;
}

static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_recursive_mutex_unlock (__mutex);
  else
    return 0;
}
# 767 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 3
}
# 163 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr.h" 2 3







#pragma GCC visibility pop
# 35 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/atomicity.h" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/atomic_word.h" 1 3
# 32 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/atomic_word.h" 3
typedef int _Atomic_word;
# 36 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/atomicity.h" 2 3

namespace __gnu_cxx {






  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __sync_fetch_and_add(__mem, __val); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __sync_fetch_and_add(__mem, __val); }
# 61 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }

}
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 2 3

# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 1 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 1 3
# 38 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 3
# 38 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 3




# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/allocator.h" 1 3
# 48 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/allocator.h" 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++allocator.h" 1 3
# 34 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++allocator.h" 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/new_allocator.h" 1 3
# 33 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/new_allocator.h" 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\new" 1 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\new" 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\new" 3

# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 44 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\new" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };

  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();
}
# 92 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\new" 3
void* operator new(std::size_t) throw (std::bad_alloc);
void* operator new[](std::size_t) throw (std::bad_alloc);
void operator delete(void*) throw();
void operator delete[](void*) throw();
void* operator new(std::size_t, const std::nothrow_t&) throw();
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();


inline void* operator new(std::size_t, void* __p) throw() { return __p; }
inline void* operator new[](std::size_t, void* __p) throw() { return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 34 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/new_allocator.h" 2 3



namespace __gnu_cxx {

  using std::size_t;
  using std::ptrdiff_t;
# 50 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }

      pointer
      address(reference __x) const { return &__x; }

      const_pointer
      address(const_reference __x) const { return &__x; }



      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw()
      { return size_t(-1) / sizeof(_Tp); }



      void
      construct(pointer __p, const _Tp& __val)
      { ::new((void *)__p) _Tp(__val); }
# 114 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/new_allocator.h" 3
      void
      destroy(pointer __p) { __p->~_Tp(); }
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }

}
# 35 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++allocator.h" 2 3
# 49 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/allocator.h" 2 3

namespace std {
# 59 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/allocator.h" 3
  template<typename _Tp>
    class allocator;


  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };
    };
# 85 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/allocator.h" 3
  template<typename _Tp>
    class allocator: public __gnu_cxx::new_allocator<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __gnu_cxx::new_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    { return false; }





  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two)
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };
# 204 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/allocator.h" 3
}
# 43 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 2 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream_insert.h" 1 3
# 33 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream_insert.h" 3
# 33 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream_insert.h" 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cxxabi-forced.h" 1 3
# 33 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cxxabi-forced.h" 3
# 33 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cxxabi-forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 36 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream_insert.h" 2 3

namespace std {

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   if (true)
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   if (false)
     {
       __out._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }





  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);



}
# 46 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 2 3



# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 1 3
# 60 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
namespace std {
# 99 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {
      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {
      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;
      typedef _Result result_type;
    };
# 134 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
# 198 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };
# 262 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };
# 345 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 416 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st : public unary_function<_Pair,
           typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
    };

  template<typename _Pair>
    struct _Select2nd : public unary_function<_Pair,
           typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 523 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }



}



# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\backward/binders.h" 1 3
# 60 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\backward/binders.h" 3
namespace std {
# 97 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }


}
# 713 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 2 3
# 50 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 2 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 1 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3



# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\initializer_list" 1 3
# 33 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\initializer_list" 3
# 33 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\initializer_list" 3
# 43 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 2 3

namespace std {
# 103 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type::size_type size_type;
      typedef typename _CharT_alloc_type::difference_type difference_type;
      typedef typename _CharT_alloc_type::reference reference;
      typedef typename _CharT_alloc_type::const_reference const_reference;
      typedef typename _CharT_alloc_type::pointer pointer;
      typedef typename _CharT_alloc_type::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
                                                            const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;

    private:
# 140 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
# 165 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage[];

        static _Rep&
        _S_empty_rep()
        {



   void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
   return *reinterpret_cast<_Rep*>(__p);
 }

        bool
 _M_is_leaked() const
        { return this->_M_refcount < 0; }

        bool
 _M_is_shared() const
        { return this->_M_refcount > 0; }

        void
 _M_set_leaked()
        { this->_M_refcount = -1; }

        void
 _M_set_sharable()
        { this->_M_refcount = 0; }

 void
 _M_set_length_and_sharable(size_type __n)
 {



     {
       this->_M_set_sharable();
       this->_M_length = __n;
       traits_type::assign(this->_M_refdata()[__n], _S_terminal);


     }
 }

 _CharT*
 _M_refdata() throw()
 { return reinterpret_cast<_CharT*>(this + 1); }

 _CharT*
 _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
 {
   return (!_M_is_leaked() && __alloc1 == __alloc2)
           ? _M_refcopy() : _M_clone(__alloc1);
 }


 static _Rep*
 _S_create(size_type, size_type, const _Alloc&);

 void
 _M_dispose(const _Alloc& __a)
 {



     if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
             -1) <= 0)
       _M_destroy(__a);
 }

 void
 _M_destroy(const _Alloc&) throw();

 _CharT*
 _M_refcopy() throw()
 {



            __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
   return _M_refdata();
 }

 _CharT*
 _M_clone(const _Alloc&, size_type __res = 0);
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider(_CharT* __dat, const _Alloc& __a)
 : _Alloc(__a), _M_p(__dat) { }

 _CharT* _M_p;
      };

    public:




      static const size_type npos = static_cast<size_type>(-1);

    private:

      mutable _Alloc_hider _M_dataplus;

      _CharT*
      _M_data() const
      { return _M_dataplus._M_p; }

      _CharT*
      _M_data(_CharT* __p)
      { return (_M_dataplus._M_p = __p); }

      _Rep*
      _M_rep() const
      { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }



      iterator
      _M_ibegin() const
      { return iterator(_M_data()); }

      iterator
      _M_iend() const
      { return iterator(_M_data() + this->size()); }

      void
      _M_leak()
      {
 if (!_M_rep()->_M_is_leaked())
   _M_leak_hard();
      }

      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range((__s));
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }


      size_type
      _M_limit(size_type __pos, size_type __off) const
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _M_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _M_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, ++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2)
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_mutate(size_type __pos, size_type __len1, size_type __len2);

      void
      _M_leak_hard();

      static _Rep&
      _S_empty_rep()
      { return _Rep::_S_empty_rep(); }

    public:







      basic_string()



      : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()){ }





      explicit
      basic_string(const _Alloc& __a);






      basic_string(const basic_string& __str);






      basic_string(const basic_string& __str, size_type __pos,
     size_type __n = npos);







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a);
# 468 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc());





      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());






      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
# 516 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc());




      ~basic_string()
      { _M_rep()->_M_dispose(this->get_allocator()); }





      basic_string&
      operator=(const basic_string& __str)
      { return this->assign(__str); }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 549 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 589 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      iterator
      begin()
      {
 _M_leak();
 return iterator(_M_data());
      }





      const_iterator
      begin() const
      { return const_iterator(_M_data()); }





      iterator
      end()
      {
 _M_leak();
 return iterator(_M_data() + this->size());
      }





      const_iterator
      end() const
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(this->begin()); }
# 695 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
    public:



      size_type
      size() const
      { return _M_rep()->_M_length; }



      size_type
      length() const
      { return _M_rep()->_M_length; }


      size_type
      max_size() const
      { return _Rep::_S_max_size; }
# 724 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 737 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }
# 757 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      capacity() const
      { return _M_rep()->_M_capacity; }
# 778 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear()
      { _M_mutate(0, this->size(), 0); }





      bool
      empty() const
      { return this->size() == 0; }
# 807 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const
      {
                                       ;
 return _M_data()[__pos];
      }
# 824 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {

                                       ;

                                         ;
 _M_leak();
 return _M_data()[__pos];
      }
# 845 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("basic_string::at"));
 return _M_data()[__n];
      }
# 864 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range(("basic_string::at"));
 _M_leak();
 return _M_data()[__n];
      }







      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }
# 920 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str);
# 935 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n);







      basic_string&
      append(const _CharT* __s, size_type __n);






      basic_string&
      append(const _CharT* __s)
      {
                               ;
 return this->append(__s, traits_type::length(__s));
      }
# 967 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c);
# 989 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_iend(), _M_iend(), __first, __last); }





      void
      push_back(_CharT __c)
      {
 const size_type __len = 1 + this->size();
 if (__len > this->capacity() || _M_rep()->_M_is_shared())
   this->reserve(__len);
 traits_type::assign(_M_data()[this->size()], __c);
 _M_rep()->_M_set_length_and_sharable(__len);
      }






      basic_string&
      assign(const basic_string& __str);
# 1045 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return this->assign(__str._M_data()
       + __str._M_check(__pos, "basic_string::assign"),
       __str._M_limit(__pos, __n)); }
# 1061 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n);
# 1073 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
                               ;
 return this->assign(__s, traits_type::length(__s));
      }
# 1089 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1101 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }
# 1129 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      void
      insert(iterator __p, size_type __n, _CharT __c)
      { this->replace(__p, __p, __n, __c); }
# 1144 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      template<class _InputIterator>
        void
        insert(iterator __p, _InputIterator __beg, _InputIterator __end)
        { this->replace(__p, __p, __beg, __end); }
# 1175 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->insert(__pos1, __str, size_type(0), __str.size()); }
# 1197 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->insert(__pos1, __str._M_data()
       + __str._M_check(__pos2, "basic_string::insert"),
       __str._M_limit(__pos2, __n)); }
# 1220 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n);
# 1238 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
                               ;
 return this->insert(__pos, __s, traits_type::length(__s));
      }
# 1261 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1278 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      iterator
      insert(iterator __p, _CharT __c)
      {
                                                                 ;
 const size_type __pos = __p - _M_ibegin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1302 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_mutate(_M_check(__pos, "basic_string::erase"),
    _M_limit(__pos, __n), size_type(0));
 return *this;
      }
# 1318 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      iterator
      erase(iterator __position)
      {

                               ;
 const size_type __pos = __position - _M_ibegin();
 _M_mutate(__pos, size_type(1), size_type(0));
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1338 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 1357 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1379 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1403 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2);
# 1422 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
                               ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1445 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1463 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1481 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
      {

                          ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
      }
# 1502 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s)
      {
                               ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 1523 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
      {

                          ;
 return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
      }
# 1545 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        replace(iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {

                            ;
                                             ;
   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
 }



      basic_string&
      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 1620 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
        size_type __n2);



      template<class _InIterator>
        static _CharT*
        _S_construct_aux(_InIterator __beg, _InIterator __end,
    const _Alloc& __a, __false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          return _S_construct(__beg, __end, __a, _Tag());
 }



      template<class _Integer>
        static _CharT*
        _S_construct_aux(_Integer __beg, _Integer __end,
    const _Alloc& __a, __true_type)
        { return _S_construct_aux_2(static_cast<size_type>(__beg),
        __end, __a); }

      static _CharT*
      _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
      { return _S_construct(__req, __c, __a); }

      template<class _InIterator>
        static _CharT*
        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   return _S_construct_aux(__beg, __end, __a, _Integral());
        }


      template<class _InIterator>
        static _CharT*
         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
        input_iterator_tag);



      template<class _FwdIterator>
        static _CharT*
        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
       forward_iterator_tag);

      static _CharT*
      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);

    public:
# 1701 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 1711 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      void
      swap(basic_string& __s);
# 1721 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      const _CharT*
      c_str() const
      { return _M_data(); }







      const _CharT*
      data() const
      { return _M_data(); }




      allocator_type
      get_allocator() const
      { return _M_dataplus; }
# 1753 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;
# 1766 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      { return this->find(__str.data(), __pos, __str.size()); }
# 1780 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 1797 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const;
# 1810 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 1825 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;
# 1838 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 1855 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const;
# 1868 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 1883 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1896 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 1915 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const
      { return this->find(__c, __pos); }
# 1929 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 1944 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1957 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 1976 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const
      { return this->rfind(__c, __pos); }
# 1990 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2005 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const;
# 2019 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2036 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const;
# 2049 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2065 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const;
# 2078 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2095 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const;
# 2110 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2128 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2158 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2182 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;
# 2200 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const;
# 2223 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 2248 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
  };
# 2260 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }
# 2331 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs)
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 2377 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 2414 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 2451 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 2488 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 2525 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 2562 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }
# 2579 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 2597 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 2620 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 2638 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return getline(__is, __str, __is.widen('\n')); }

  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);


}
# 53 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 2 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.tcc" 1 3
# 42 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.tcc" 3
# 42 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.tcc" 3



namespace std {

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_max_size = (((npos - sizeof(_Rep_base))/sizeof(_CharT)) - 1) / 4;

  template<typename _CharT, typename _Traits, typename _Alloc>
    const _CharT
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_terminal = _CharT();

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;



  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[
    (sizeof(_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) /
      sizeof(size_type)];





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     input_iterator_tag)
      {





 _CharT __buf[128];
 size_type __len = 0;
 while (__beg != __end && __len < sizeof(__buf) / sizeof(_CharT))
   {
     __buf[__len++] = *__beg;
     ++__beg;
   }
 _Rep* __r = _Rep::_S_create(__len, size_type(0), __a);
 _M_copy(__r->_M_refdata(), __buf, __len);
 if (true)
   {
     while (__beg != __end)
       {
  if (__len == __r->_M_capacity)
    {

      _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);
      _M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);
      __r->_M_destroy(__a);
      __r = __another;
    }
  __r->_M_refdata()[__len++] = *__beg;
  ++__beg;
       }
   }
 if (false)
   {
     __r->_M_destroy(__a);
                            ;
   }
 __r->_M_set_length_and_sharable(__len);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template <typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     forward_iterator_tag)
      {





 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   __throw_logic_error(("basic_string::_S_construct NULL not valid"));

 const size_type __dnew = static_cast<size_type>(std::distance(__beg,
              __end));

 _Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);
 if (true)
   { _S_copy_chars(__r->_M_refdata(), __beg, __end); }
 if (false)
   {
     __r->_M_destroy(__a);
                            ;
   }
 __r->_M_set_length_and_sharable(__dnew);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::
    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)
    {





      _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);
      if (__n)
 _M_assign(__r->_M_refdata(), __n, __c);

      __r->_M_set_length_and_sharable(__n);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str)
    : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()),
       __str.get_allocator()),
    __str.get_allocator())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _Alloc& __a)
    : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos, size_type __n)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, _Alloc()), _Alloc())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos,
   size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :
          __s + npos, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(size_type __n, _CharT __c, const _Alloc& __a)
    : _M_dataplus(_S_construct(__n, __c, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)
    : _M_dataplus(_S_construct(__beg, __end, __a), __a)
    { }
# 239 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const basic_string& __str)
    {
      if (_M_rep() != __str._M_rep())
 {

   const allocator_type __a = this->get_allocator();
   _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const _CharT* __s, size_type __n)
    {
                                             ;
      _M_check_length(this->size(), __n, "basic_string::assign");
      if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 return _M_replace_safe(size_type(0), this->size(), __s, __n);
      else
 {

   const size_type __pos = __s - _M_data();
   if (__pos >= __n)
     _M_copy(_M_data(), __s, __n);
   else if (__pos)
     _M_move(_M_data(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__n);
   return *this;
 }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(size_type __n, _CharT __c)
    {
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_assign(_M_data() + this->size(), __n, __c);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const _CharT* __s, size_type __n)
    {
                                             ;
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     {
       if (_M_disjunct(__s))
  this->reserve(__len);
       else
  {
    const size_type __off = __s - _M_data();
    this->reserve(__len);
    __s = _M_data() + __off;
  }
     }
   _M_copy(_M_data() + this->size(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str)
    {
      const size_type __size = __str.size();
      if (__size)
 {
   const size_type __len = __size + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data(), __size);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str, size_type __pos, size_type __n)
    {
      __str._M_check(__pos, "basic_string::append");
      __n = __str._M_limit(__pos, __n);
      if (__n)
 {
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data() + __pos, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     insert(size_type __pos, const _CharT* __s, size_type __n)
     {
                                              ;
       _M_check(__pos, "basic_string::insert");
       _M_check_length(size_type(0), __n, "basic_string::insert");
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, size_type(0), __s, __n);
       else
         {

           const size_type __off = __s - _M_data();
           _M_mutate(__pos, 0, __n);
           __s = _M_data() + __off;
           _CharT* __p = _M_data() + __pos;
           if (__s + __n <= __p)
             _M_copy(__p, __s, __n);
           else if (__s >= __p)
             _M_copy(__p, __s + __n, __n);
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy(__p, __s, __nleft);
               _M_copy(__p + __nleft, __p + __n, __n - __nleft);
             }
           return *this;
         }
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     typename basic_string<_CharT, _Traits, _Alloc>::iterator
     basic_string<_CharT, _Traits, _Alloc>::
     erase(iterator __first, iterator __last)
     {

                           ;




       const size_type __size = __last - __first;
       if (__size)
  {
    const size_type __pos = __first - _M_ibegin();
    _M_mutate(__pos, __size, size_type(0));
    _M_rep()->_M_set_leaked();
    return iterator(_M_data() + __pos);
  }
       else
  return __first;
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     replace(size_type __pos, size_type __n1, const _CharT* __s,
      size_type __n2)
     {
                                               ;
       _M_check(__pos, "basic_string::replace");
       __n1 = _M_limit(__pos, __n1);
       _M_check_length(__n1, __n2, "basic_string::replace");
       bool __left;
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, __n1, __s, __n2);
       else if ((__left = __s + __n2 <= _M_data() + __pos)
  || _M_data() + __pos + __n1 <= __s)
  {

    size_type __off = __s - _M_data();
    __left ? __off : (__off += __n2 - __n1);
    _M_mutate(__pos, __n1, __n2);
    _M_copy(_M_data() + __pos, _M_data() + __off, __n2);
    return *this;
  }
       else
  {

    const basic_string __tmp(__s, __n2);
    return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);
  }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_destroy(const _Alloc& __a) throw ()
    {
      const size_type __size = sizeof(_Rep_base) +
                        (this->_M_capacity + 1) * sizeof(_CharT);
      _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_leak_hard()
    {




      if (_M_rep()->_M_is_shared())
 _M_mutate(0, 0, 0);
      _M_rep()->_M_set_leaked();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, size_type __len2)
    {
      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if (__new_size > this->capacity() || _M_rep()->_M_is_shared())
 {

   const allocator_type __a = get_allocator();
   _Rep* __r = _Rep::_S_create(__new_size, this->capacity(), __a);

   if (__pos)
     _M_copy(__r->_M_refdata(), _M_data(), __pos);
   if (__how_much)
     _M_copy(__r->_M_refdata() + __pos + __len2,
      _M_data() + __pos + __len1, __how_much);

   _M_rep()->_M_dispose(__a);
   _M_data(__r->_M_refdata());
 }
      else if (__how_much && __len1 != __len2)
 {

   _M_move(_M_data() + __pos + __len2,
    _M_data() + __pos + __len1, __how_much);
 }
      _M_rep()->_M_set_length_and_sharable(__new_size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {
      if (__res != this->capacity() || _M_rep()->_M_is_shared())
        {

   if (__res < this->size())
     __res = this->size();
   const allocator_type __a = get_allocator();
   _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
        }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s)
    {
      if (_M_rep()->_M_is_leaked())
 _M_rep()->_M_set_sharable();
      if (__s._M_rep()->_M_is_leaked())
 __s._M_rep()->_M_set_sharable();
      if (this->get_allocator() == __s.get_allocator())
 {
   _CharT* __tmp = _M_data();
   _M_data(__s._M_data());
   __s._M_data(__tmp);
 }

      else
 {
   const basic_string __tmp1(_M_ibegin(), _M_iend(),
        __s.get_allocator());
   const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(),
        this->get_allocator());
   *this = __tmp2;
   __s = __tmp1;
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::_Rep*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _S_create(size_type __capacity, size_type __old_capacity,
       const _Alloc& __alloc)
    {


      if (__capacity > _S_max_size)
 __throw_length_error(("basic_string::_S_create"));
# 576 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.tcc" 3
      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof(void*);







      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 __capacity = 2 * __old_capacity;




      size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);

      const size_type __adj_size = __size + __malloc_header_size;
      if (__adj_size > __pagesize && __capacity > __old_capacity)
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof(_CharT);

   if (__capacity > _S_max_size)
     __capacity = _S_max_size;
   __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
 }



      void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);
      _Rep *__p = new (__place) _Rep;
      __p->_M_capacity = __capacity;







      __p->_M_set_sharable();
      return __p;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_clone(const _Alloc& __alloc, size_type __res)
    {

      const size_type __requested_cap = this->_M_length + __res;
      _Rep* __r = _Rep::_S_create(__requested_cap, this->_M_capacity,
      __alloc);
      if (this->_M_length)
 _M_copy(__r->_M_refdata(), _M_refdata(), this->_M_length);

      __r->_M_set_length_and_sharable(this->_M_length);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      _M_check_length(__size, __n, "basic_string::resize");
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->erase(__n);

    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 _M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
 return _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),
          __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_assign(_M_data() + __pos1, __n2, __c);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
      size_type __n2)
    {
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_copy(_M_data() + __pos1, __s, __n2);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
                                      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
                                             ;
      if (__n)
 _M_copy(__s, _M_data() + __pos, __n);

      return __n;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      const _CharT* __data = _M_data();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;

      if (__n <= __size)
 {
   for (; __pos <= __size - __n; ++__pos)
     if (traits_type::eq(__data[__pos], __s[0])
  && traits_type::compare(__data + __pos + 1,
     __s + 1, __n - 1) == 0)
       return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
                                    ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
                                    ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
                                              ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   if (true)
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }





  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);



}
# 56 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 2 3
# 42 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 2 3


namespace std {
# 61 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 97 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 116 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    locale() throw();
# 125 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 135 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 150 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 163 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 175 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 189 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 204 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    string
    name() const;
# 223 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 251 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 267 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    static locale
    global(const locale&);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 302 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 0 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);
  };
# 336 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 367 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();

  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    facet(const facet&);

    facet&
    operator=(const facet&);
  };
# 431 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    void
    _M_install_cache(const facet*, size_t);
  };
# 574 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw();
# 591 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc);
# 608 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
  template<typename _CharT>
    class collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 635 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 649 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 666 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 685 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 699 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 728 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 744 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 757 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }

    protected:
      virtual
      ~collate_byname() { }
    };

}



# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.tcc" 1 3
# 37 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.tcc" 3
# 37 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.tcc" 3

namespace std {

  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      if (true)
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      if (false)
 {
   _M_impl->_M_remove_reference();
                          ;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      if (true)
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      if (false)
 {
   __tmp->_M_remove_reference();
                          ;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }


  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }

  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      if (true)
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      if (false)
 {
   delete [] __c;
                          ;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }





  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);



}
# 815 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 2 3
# 43 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 2 3
# 53 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
namespace std {





  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16
    };

  inline _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }

  inline _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16
    };

  inline _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }

  inline _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16
    };

  inline _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }

  inline _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };
# 206 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
  class ios_base
  {
  public:







    class failure : public exception
    {
    public:


      explicit
      failure(const string& __str) throw();



      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();

    private:
      string _M_msg;
    };
# 262 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 337 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 368 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 400 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;


    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 426 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 443 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    typedef void (*event_callback) (event, ios_base&, int);
# 455 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      { return __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1); }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 559 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 575 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 592 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 618 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 669 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 681 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 692 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 703 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 722 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    static int
    xalloc() throw();
# 738 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 759 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 776 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();



  private:
    ios_base(const ios_base&);

    ios_base&
    operator=(const ios_base&);
  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }

}
# 43 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 1 3
# 37 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
# 37 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3








namespace std {

  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 113 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(__streambuf_type*, __streambuf_type*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:
# 179 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 203 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      locale
      pubimbue(const locale &__loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 220 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 233 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      __streambuf_type*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }

      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }

      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }

      int
      pubsync() { return this->sync(); }
# 260 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 274 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 292 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 314 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 333 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 348 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 373 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 400 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 426 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 440 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 458 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 474 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 485 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 505 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 521 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 531 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 552 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual void
      imbue(const locale&)
      { }
# 567 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 578 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 590 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 603 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual int
      sync() { return 0; }
# 625 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 641 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 663 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 676 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 700 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual int_type
      pbackfail(int_type = traits_type::eof())
      { return traits_type::eof(); }
# 718 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 744 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual int_type
      overflow(int_type = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 759 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }


    private:


      basic_streambuf(const __streambuf_type& __sb)
      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur),
      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg),
      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_cur),
      _M_buf_locale(__sb._M_buf_locale)
      { }

      __streambuf_type&
      operator=(const __streambuf_type&) { return *this; };
    };


  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);


}



# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf.tcc" 1 3
# 38 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf.tcc" 3
# 38 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf.tcc" 3

namespace std {

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }





  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);



}
# 799 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 2 3
# 44 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 1 3
# 35 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
# 35 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3



# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 1 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3

# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwctype" 1 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwctype" 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwctype" 3




# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wctype.h" 1 3
# 13 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wctype.h" 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 13 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wctype.h" 2 3


#pragma pack(push,_CRT_PACKING)


extern "C" {
# 166 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wctype.h" 3
  typedef wchar_t wctrans_t;
  wint_t towctrans(wint_t,wctrans_t);
  wctrans_t wctrans(const char *);
  wctype_t wctype(const char *);


}


#pragma pack(pop)
# 46 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwctype" 2 3
# 75 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwctype" 3
namespace std {

  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;

}
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 1 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 3
# 42 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/ctype_base.h" 1 3
# 37 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/ctype_base.h" 3
namespace std {


  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = 1 << 0;
    static const mask lower = 1 << 1;
    static const mask alpha = 1 << 2;
    static const mask digit = 1 << 3;
    static const mask xdigit = 1 << 4;
    static const mask space = 1 << 5;
    static const mask print = 1 << 6;
    static const mask graph = (1 << 2) | (1 << 3) | (1 << 9);
    static const mask cntrl = 1 << 8;
    static const mask punct = 1 << 9;
    static const mask alnum = (1 << 2) | (1 << 3);
  };

}
# 43 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 2 3






# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf_iterator.h" 1 3
# 35 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf_iterator.h" 3
# 35 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf_iterator.h" 3




namespace std {
# 48 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*, _CharT&>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
               istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

    private:







      mutable streambuf_type* _M_sbuf;
      mutable int_type _M_c;

    public:

      istreambuf_iterator() throw()
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(istream_type& __s) throw()
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) throw()
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {







 return traits_type::to_char_type(_M_get());
      }


      istreambuf_iterator&
      operator++()
      {


                        ;
 if (_M_sbuf)
   {
     _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {


                        ;

 istreambuf_iterator __old = *this;
 if (_M_sbuf)
   {
     __old._M_c = _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 const int_type __eof = traits_type::eof();
 int_type __ret = __eof;
 if (_M_sbuf)
   {
     if (!traits_type::eq_int_type(_M_c, __eof))
       __ret = _M_c;
     else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),
            __eof))
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof() const
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(_M_get(), __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) throw ()
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) throw ()
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const throw()
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
                           ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof())
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   if (!traits_type::eq_int_type(__c, traits_type::eof()))
     __first._M_c = __c;
   else
     __first._M_sbuf = 0;
 }
      return __first;
    }



}
# 50 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 2 3

namespace std {
# 63 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 141 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 159 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 176 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 192 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 208 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 222 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 237 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 251 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 266 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 283 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 302 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 321 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 343 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char *__to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 368 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 387 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 406 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 425 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 443 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const = 0;
# 460 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 476 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const = 0;
# 493 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 512 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const = 0;
# 533 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi,
        char_type* __dest) const = 0;
# 555 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const = 0;
# 579 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const = 0;
    };
# 602 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 671 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 708 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 721 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 734 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 749 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 763 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 777 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 792 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 809 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 825 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 842 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 862 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 889 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 920 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 953 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char *__to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1002 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1019 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1035 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1052 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1072 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1095 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }
# 1121 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char) const
      { return __c; }
# 1147 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char, char* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1172 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1205 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1216 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1240 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1259 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1277 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1295 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1312 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1329 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1345 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1362 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1382 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const;
# 1404 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;
# 1427 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const;
# 1453 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname() { };
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


}



# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/ctype_inline.h" 1 3
# 37 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/ctype_inline.h" 3
namespace std {

  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return (_M_table[static_cast<unsigned char>(__c) ] & __m); }


  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high && !this->is(__m, *__low))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high && this->is(__m, *__low) != 0)
      ++__low;
    return __low;
  }

}
# 1509 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 2 3

namespace std {


  class __num_base
  {
  public:


    enum
      {
        _S_ominus,
        _S_oplus,
        _S_ox,
        _S_oX,
        _S_odigits,
        _S_odigits_end = _S_odigits + 16,
        _S_oudigits = _S_odigits_end,
        _S_oudigits_end = _S_oudigits + 16,
        _S_oe = _S_odigits + 14,
        _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0) : facet(__refs),
      _M_grouping(__null), _M_grouping_size(0), _M_use_grouping(false),
      _M_truename(__null), _M_truename_size(0), _M_falsename(__null),
      _M_falsename_size(0), _M_decimal_point(_CharT()),
      _M_thousands_sep(_CharT()), _M_allocated(false)
      { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }
# 1634 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0) : facet(__refs), _M_data(__null)
      { _M_initialize_numpunct(); }
# 1671 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1685 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(__null)
      { _M_initialize_numpunct(__cloc); }
# 1699 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1712 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1743 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1756 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1769 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1786 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1798 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1811 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1824 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1837 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = __null);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }

    protected:
      virtual
      ~numpunct_byname() { }
    };
# 1907 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1928 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1954 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 1990 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2049 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2091 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
        iter_type
        _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
        _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
        _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2162 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      void*&) const;
# 2227 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2245 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2266 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2284 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, bool __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2326 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __f, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2389 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, double __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2414 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __f, __fill, __v); }

    protected:
      template<typename _ValueT>
        iter_type
        _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
        iter_type
        _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { };
# 2462 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, double __v) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, long double __v) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, const void* __v) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;
# 2520 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }


  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }

}



# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 1 3
# 35 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
# 35 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3

namespace std {



  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = __null;
     if (true)
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     if (false)
       {
  delete __tmp;
                         ;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      _M_allocated = true;

      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      if (true)
 {
   _M_grouping_size = __np.grouping().size();
   __grouping = new char[_M_grouping_size];
   __np.grouping().copy(__grouping, _M_grouping_size);
   _M_grouping = __grouping;
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(_M_grouping[0]) > 0
        && (_M_grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   _M_truename_size = __np.truename().size();
   __truename = new _CharT[_M_truename_size];
   __np.truename().copy(__truename, _M_truename_size);
   _M_truename = __truename;

   _M_falsename_size = __np.falsename().size();
   __falsename = new _CharT[_M_falsename_size];
   __np.falsename().copy(__falsename, _M_falsename_size);
   _M_falsename = __falsename;

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);
 }
      if (false)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
                          ;
 }
    }
# 135 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
   ? -__gnu_cxx::__numeric_traits<_ValueT>::__min
   : __gnu_cxx::__numeric_traits<_ValueT>::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative
  && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;
     else
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 729 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 965 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);




 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
          __fbuf, __prec, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
       __fbuf, __prec, __v);
   }
# 1026 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1151 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }
# 1188 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }





  extern template class numpunct<char>;
  extern template class numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class numpunct<wchar_t>;
  extern template class numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);



}
# 2601 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 2 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 2 3


namespace std {

  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 60 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:







      operator void*() const
      { return this->fail() ? 0 : const_cast<basic_ios*>(this); }

      bool
      operator!() const
      { return this->fail(); }
# 125 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 136 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
                          ;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 189 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 210 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 245 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 283 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 295 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 335 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 349 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 378 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 398 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 418 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 437 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);

      void
      _M_cache_locale(const locale& __loc);
    };

}



# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.tcc" 1 3
# 34 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.tcc" 3
# 34 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.tcc" 3

namespace std {

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 144 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = &use_facet<__ctype_type>(__loc);
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = &use_facet<__num_put_type>(__loc);
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = &use_facet<__num_get_type>(__loc);
      else
 _M_num_get = 0;
    }





  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;



}
# 471 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 2 3
# 45 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 40 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 2 3


namespace std {
# 53 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 80 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 106 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 163 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }


      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 248 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 281 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      put(char_type __c);


      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 309 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 322 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      flush();
# 333 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      pos_type
      tellp();
# 344 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      seekp(pos_type);
# 356 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }

      template<typename _ValueT>
        __ostream_type&
        _M_insert(_ValueT __v);
    };
# 375 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 394 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 404 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 425 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      operator bool() const
      { return _M_ok; }
    };
# 446 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 488 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 538 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }







  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
# 582 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
}



# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream.tcc" 1 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream.tcc" 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream.tcc" 3



namespace std {

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   if (true)
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   if (true)
     { _M_write(__s, __n); }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      if (true)
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   if (true)
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   if (false)
     {
       __out._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }





  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);



}
# 586 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 2 3
# 40 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 2 3
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 1 3
# 38 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
# 38 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3




namespace std {
# 53 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:
# 89 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 118 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 165 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 237 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 247 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 279 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      int_type
      get();
# 293 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      get(char_type& __c);
# 320 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 331 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 354 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 364 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 393 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 404 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 428 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      ignore();

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore(streamsize __n, int_type __delim);
# 445 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      int_type
      peek();
# 463 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 482 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 498 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      putback(char_type __c);
# 513 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      unget();
# 531 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      int
      sync();
# 545 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      pos_type
      tellg();
# 560 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      seekg(pos_type);
# 576 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }

      template<typename _ValueT>
        __istream_type&
        _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 631 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 667 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 680 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      operator bool() const
      { return _M_ok; }
    };
# 697 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 739 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 767 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }
    };
# 828 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);
# 850 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
}



# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/istream.tcc" 1 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/istream.tcc" 3
# 39 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/istream.tcc" 3



namespace std {

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 {
   if (__in.tie())
     __in.tie()->flush();
   if (!__noskip && bool(__in.flags() & ios_base::skipws))
     {
       const __int_type __eof = traits_type::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       const __ctype_type& __ct = __check_facet(__in._M_ctype);
       while (!traits_type::eq_int_type(__c, __eof)
       && __ct.is(ctype_base::space,
    traits_type::to_char_type(__c)))
  __c = __sb->snextc();




       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   if (true)
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::failbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          if (true)
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 512 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      if (true)
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
           ios_base::in);
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {


      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {

       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::in);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {


      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {

       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::in);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }





  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;



}
# 854 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 2 3
# 41 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 2 3

namespace std {
# 58 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;

}
# 5 "./param.h" 2
# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 1 3
# 10 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
# 10 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 12 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 2 3


struct _exception;

#pragma pack(push,_CRT_PACKING)
# 75 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
extern "C" {



  extern double * __imp__HUGE;
# 91 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  struct _exception {
    int type;
    const char *name;
    double arg1;
    double arg2;
    double retval;
  };

  void __mingw_raise_matherr (int typ, const char *name, double a1, double a2,
         double rslt);
  void __mingw_setusermatherr (int ( *)(struct _exception *));
  __attribute__ ((__dllimport__)) void __setusermatherr(int ( *)(struct _exception *));



  double sin(double _X);
  double cos(double _X);
  double tan(double _X);
  double sinh(double _X);
  double cosh(double _X);
  double tanh(double _X);
  double asin(double _X);
  double acos(double _X);
  double atan(double _X);
  double atan2(double _Y,double _X);
  double exp(double _X);
  double log(double _X);
  double log10(double _X);
  double pow(double _X,double _Y);
  double sqrt(double _X);
  double ceil(double _X);
  double floor(double _X);
  double fabs(double _X);
# 135 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  double ldexp(double _X,int _Y);
  double frexp(double _X,int *_Y);
  double modf(double _X,double *_Y);
  double fmod(double _X,double _Y);

  void sincos (double __x, double *p_sin, double *p_cos);
  void sincosl (long double __x, long double *p_sin, long double *p_cos);
  void sincosf (float __x, float *p_sin, float *p_cos);



  int abs(int _X);
  long labs(long _X);



  double atof(const char *_String);
  double _atof_l(const char *_String,_locale_t _Locale);
# 162 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  struct _complex {
    double x;
    double y;
  };


  __attribute__ ((__dllimport__)) double _cabs(struct _complex _ComplexA);
  double _hypot(double _X,double _Y);
  __attribute__ ((__dllimport__)) double _j0(double _X);
  __attribute__ ((__dllimport__)) double _j1(double _X);
  __attribute__ ((__dllimport__)) double _jn(int _X,double _Y);
  __attribute__ ((__dllimport__)) double _y0(double _X);
  __attribute__ ((__dllimport__)) double _y1(double _X);
  __attribute__ ((__dllimport__)) double _yn(int _X,double _Y);


  __attribute__ ((__dllimport__)) int _matherr (struct _exception *);
# 189 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  __attribute__ ((__dllimport__)) double _chgsign (double _X);
  __attribute__ ((__dllimport__)) double _copysign (double _Number,double _Sign);
  __attribute__ ((__dllimport__)) double _logb (double);
  __attribute__ ((__dllimport__)) double _nextafter (double, double);
  __attribute__ ((__dllimport__)) double _scalb (double, long);
  __attribute__ ((__dllimport__)) int _finite (double);
  __attribute__ ((__dllimport__)) int _fpclass (double);
  __attribute__ ((__dllimport__)) int _isnan (double);






__attribute__ ((__dllimport__)) double j0 (double) ;
__attribute__ ((__dllimport__)) double j1 (double) ;
__attribute__ ((__dllimport__)) double jn (int, double) ;
__attribute__ ((__dllimport__)) double y0 (double) ;
__attribute__ ((__dllimport__)) double y1 (double) ;
__attribute__ ((__dllimport__)) double yn (int, double) ;

__attribute__ ((__dllimport__)) double chgsign (double);
# 219 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  __attribute__ ((__dllimport__)) int finite (double);
  __attribute__ ((__dllimport__)) int fpclass (double);
# 264 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
typedef float float_t;
typedef double double_t;
# 299 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  extern int __fpclassifyl (long double);
  extern int __fpclassifyf (float);
  extern int __fpclassify (double);
# 335 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  extern int __isnan (double);
  extern int __isnanf (float);
  extern int __isnanl (long double);
# 376 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  extern int __signbit (double);
  extern int __signbitf (float);
  extern int __signbitl (long double);
# 404 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  extern float sinf(float _X);
  extern long double sinl(long double);

  extern float cosf(float _X);
  extern long double cosl(long double);

  extern float tanf(float _X);
  extern long double tanl(long double);
  extern float asinf(float _X);
  extern long double asinl(long double);

  extern float acosf (float);
  extern long double acosl (long double);

  extern float atanf (float);
  extern long double atanl (long double);

  extern float atan2f (float, float);
  extern long double atan2l (long double, long double);


  extern float sinhf(float _X);



  extern long double sinhl(long double);

  extern float coshf(float _X);



  extern long double coshl(long double);

  extern float tanhf(float _X);



  extern long double tanhl(long double);



  extern double acosh (double);
  extern float acoshf (float);
  extern long double acoshl (long double);


  extern double asinh (double);
  extern float asinhf (float);
  extern long double asinhl (long double);


  extern double atanh (double);
  extern float atanhf (float);
  extern long double atanhl (long double);



  extern float expf(float _X);



  extern long double expl(long double);


  extern double exp2(double);
  extern float exp2f(float);
  extern long double exp2l(long double);



  extern double expm1(double);
  extern float expm1f(float);
  extern long double expm1l(long double);


  extern float frexpf(float _X,int *_Y);



  extern long double frexpl(long double,int *);




  extern int ilogb (double);
  extern int ilogbf (float);
  extern int ilogbl (long double);


  extern float ldexpf(float _X,int _Y);



  extern long double ldexpl (long double, int);


  extern float logf (float);
  extern long double logl(long double);


  extern float log10f (float);
  extern long double log10l(long double);


  extern double log1p(double);
  extern float log1pf(float);
  extern long double log1pl(long double);


  extern double log2 (double);
  extern float log2f (float);
  extern long double log2l (long double);


  extern double logb (double);
  extern float logbf (float);
  extern long double logbl (long double);
# 553 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  extern float modff (float, float*);
  extern long double modfl (long double, long double*);


  extern double scalbn (double, int);
  extern float scalbnf (float, int);
  extern long double scalbnl (long double, int);

  extern double scalbln (double, long);
  extern float scalblnf (float, long);
  extern long double scalblnl (long double, long);



  extern double cbrt (double);
  extern float cbrtf (float);
  extern long double cbrtl (long double);


  extern float fabsf (float x);
# 583 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  extern long double fabsl (long double);
# 595 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  extern double hypot (double, double) ;
  extern float hypotf (float x, float y);



  extern long double hypotl (long double, long double);


  extern float powf(float _X,float _Y);



  extern long double powl (long double, long double);


  extern float sqrtf (float);
  extern long double sqrtl(long double);


  extern double erf (double);
  extern float erff (float);
  extern long double erfl (long double);


  extern double erfc (double);
  extern float erfcf (float);
  extern long double erfcl (long double);


  extern double lgamma (double);
  extern float lgammaf (float);
  extern long double lgammal (long double);


  extern double tgamma (double);
  extern float tgammaf (float);
  extern long double tgammal (long double);


  extern float ceilf (float);
  extern long double ceill (long double);


  extern float floorf (float);
  extern long double floorl (long double);


  extern double nearbyint ( double);
  extern float nearbyintf (float);
  extern long double nearbyintl (long double);



extern double rint (double);
extern float rintf (float);
extern long double rintl (long double);


extern long lrint (double);
extern long lrintf (float);
extern long lrintl (long double);

__extension__ long long llrint (double);
__extension__ long long llrintf (float);
__extension__ long long llrintl (long double);
# 739 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  extern double round (double);
  extern float roundf (float);
  extern long double roundl (long double);


  extern long lround (double);
  extern long lroundf (float);
  extern long lroundl (long double);
  __extension__ long long llround (double);
  __extension__ long long llroundf (float);
  __extension__ long long llroundl (long double);



  extern double trunc (double);
  extern float truncf (float);
  extern long double truncl (long double);


  extern float fmodf (float, float);
  extern long double fmodl (long double, long double);


  extern double remainder (double, double);
  extern float remainderf (float, float);
  extern long double remainderl (long double, long double);


  extern double remquo(double, double, int *);
  extern float remquof(float, float, int *);
  extern long double remquol(long double, long double, int *);


  extern double copysign (double, double);
  extern float copysignf (float, float);
  extern long double copysignl (long double, long double);


  extern double nan(const char *tagp);
  extern float nanf(const char *tagp);
  extern long double nanl(const char *tagp);
# 788 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  extern double nextafter (double, double);
  extern float nextafterf (float, float);
  extern long double nextafterl (long double, long double);


  extern double nexttoward (double, long double);
  extern float nexttowardf (float, long double);
  extern long double nexttowardl (long double, long double);



  extern double fdim (double x, double y);
  extern float fdimf (float x, float y);
  extern long double fdiml (long double x, long double y);







  extern double fmax (double, double);
  extern float fmaxf (float, float);
  extern long double fmaxl (long double, long double);


  extern double fmin (double, double);
  extern float fminf (float, float);
  extern long double fminl (long double, long double);



  extern double fma (double, double, double);
  extern float fmaf (float, float, float);
  extern long double fmal (long double, long double, long double);
# 871 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
   __attribute__ ((__dllimport__)) float _copysignf (float _Number,float _Sign);
   __attribute__ ((__dllimport__)) float _chgsignf (float _X);
   __attribute__ ((__dllimport__)) float _logbf(float _X);
   __attribute__ ((__dllimport__)) float _nextafterf(float _X,float _Y);
   __attribute__ ((__dllimport__)) int _finitef(float _X);
   __attribute__ ((__dllimport__)) int _isnanf(float _X);
   __attribute__ ((__dllimport__)) int _fpclassf(float _X);



   extern long double _chgsignl (long double);
# 893 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
}




#pragma pack(pop)
# 6 "./param.h" 2

# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 1 3








# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 9 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 2 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw_print_push.h" 1 3
# 11 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 2 3


#pragma pack(push,_CRT_PACKING)


extern "C" {
# 101 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 3
  __attribute__ ((__dllimport__)) FILE * __iob_func(void);
# 120 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 3
  __extension__ typedef long long fpos_t;
# 157 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 3
  __attribute__ ((__dllimport__)) int _filbuf(FILE *_File);
  __attribute__ ((__dllimport__)) int _flsbuf(int _Ch,FILE *_File);



  __attribute__ ((__dllimport__)) FILE * _fsopen(const char *_Filename,const char *_Mode,int _ShFlag);

  void clearerr(FILE *_File);
  int fclose(FILE *_File);
  __attribute__ ((__dllimport__)) int _fcloseall(void);



  __attribute__ ((__dllimport__)) FILE * _fdopen(int _FileHandle,const char *_Mode);

  int feof(FILE *_File);
  int ferror(FILE *_File);
  int fflush(FILE *_File);
  int fgetc(FILE *_File);
  __attribute__ ((__dllimport__)) int _fgetchar(void);
  int fgetpos(FILE * __restrict__ _File ,fpos_t * __restrict__ _Pos);
  char * fgets(char * __restrict__ _Buf,int _MaxCount,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int _fileno(FILE *_File);



  __attribute__ ((__dllimport__)) char * _tempnam(const char *_DirName,const char *_FilePrefix);
  __attribute__ ((__dllimport__)) int _flushall(void);
  FILE * fopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode) ;
  FILE *fopen64(const char * __restrict__ filename,const char * __restrict__ mode);
  int fprintf(FILE * __restrict__ _File,const char * __restrict__ _Format,...);
  int fputc(int _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) int _fputchar(int _Ch);
  int fputs(const char * __restrict__ _Str,FILE * __restrict__ _File);
  size_t fread(void * __restrict__ _DstBuf,size_t _ElementSize,size_t _Count,FILE * __restrict__ _File);
  FILE * freopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode,FILE * __restrict__ _File) ;
  int fscanf(FILE * __restrict__ _File,const char * __restrict__ _Format,...) ;
  int _fscanf_l(FILE * __restrict__ _File,const char * __restrict__ _Format,_locale_t locale,...) ;
  int fsetpos(FILE *_File,const fpos_t *_Pos);
  int fseek(FILE *_File,long _Offset,int _Origin);
  int fseeko64(FILE* stream, _off64_t offset, int whence);
  long ftell(FILE *_File);
  _off64_t ftello64(FILE * stream);
  __extension__ int _fseeki64(FILE *_File,long long _Offset,int _Origin);
  __extension__ long long _ftelli64(FILE *_File);
  size_t fwrite(const void * __restrict__ _Str,size_t _Size,size_t _Count,FILE * __restrict__ _File);
  int getc(FILE *_File);
  int getchar(void);
  __attribute__ ((__dllimport__)) int _getmaxstdio(void);
  char * gets(char *_Buffer) ;
  int _getw(FILE *_File);


  void perror(const char *_ErrMsg);

  __attribute__ ((__dllimport__)) int _pclose(FILE *_File);
  __attribute__ ((__dllimport__)) FILE * _popen(const char *_Command,const char *_Mode);




  int printf(const char * __restrict__ _Format,...);
  int putc(int _Ch,FILE *_File);
  int putchar(int _Ch);
  int puts(const char *_Str);
  __attribute__ ((__dllimport__)) int _putw(int _Word,FILE *_File);


  int remove(const char *_Filename);
  int rename(const char *_OldFilename,const char *_NewFilename);
  __attribute__ ((__dllimport__)) int _unlink(const char *_Filename);

  int unlink(const char *_Filename) ;


  void rewind(FILE *_File);
  __attribute__ ((__dllimport__)) int _rmtmp(void);
  int scanf(const char * __restrict__ _Format,...) ;
  int _scanf_l(const char * __restrict__ format,_locale_t locale,... ) ;
  void setbuf(FILE * __restrict__ _File,char * __restrict__ _Buffer) ;
  __attribute__ ((__dllimport__)) int _setmaxstdio(int _Max);
  __attribute__ ((__dllimport__)) unsigned int _set_output_format(unsigned int _Format);
  __attribute__ ((__dllimport__)) unsigned int _get_output_format(void);
  unsigned int __mingw_set_output_format(unsigned int _Format);
  unsigned int __mingw_get_output_format(void);




  int setvbuf(FILE * __restrict__ _File,char * __restrict__ _Buf,int _Mode,size_t _Size);
  __attribute__ ((__dllimport__)) int _scprintf(const char * __restrict__ _Format,...);
  int sscanf(const char * __restrict__ _Src,const char * __restrict__ _Format,...) ;
  int _sscanf_l(const char * __restrict__ buffer,const char * __restrict__ format,_locale_t locale,...) ;
  __attribute__ ((__dllimport__)) int _snscanf(const char * __restrict__ _Src,size_t _MaxCount,const char * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _snscanf_l(const char * __restrict__ input,size_t length,const char * __restrict__ format,_locale_t locale,...) ;
  FILE * tmpfile(void) ;
  char * tmpnam(char *_Buffer);
  int ungetc(int _Ch,FILE *_File);
  int vfprintf(FILE * __restrict__ _File,const char * __restrict__ _Format,va_list _ArgList);
  int vprintf(const char * __restrict__ _Format,va_list _ArgList);


  extern
    __attribute__((__format__ (gnu_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
    int __mingw_vsnprintf(char * __restrict__ _DstBuf,size_t _MaxCount,const char * __restrict__ _Format,
      va_list _ArgList);
  extern
    __attribute__((__format__ (gnu_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
    int __mingw_snprintf(char * __restrict__ s, size_t n, const char * __restrict__ format, ...);
  extern
    __attribute__((__format__ (gnu_printf, 1, 2))) __attribute__ ((__nonnull__ (1)))
    int __mingw_printf(const char * __restrict__ , ... ) __attribute__ ((__nothrow__));
  extern
    __attribute__((__format__ (gnu_printf, 1, 0))) __attribute__ ((__nonnull__ (1)))
    int __mingw_vprintf (const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
  extern
    __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
    int __mingw_fprintf (FILE * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
  extern
    __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
    int __mingw_vfprintf (FILE * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
  extern
    __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
    int __mingw_sprintf (char * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
  extern
    __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
    int __mingw_vsprintf (char * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));

  __attribute__ ((__dllimport__)) int _snprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _snprintf_l(char * __restrict__ buffer,size_t count,const char * __restrict__ format,_locale_t locale,...) ;
  __attribute__ ((__dllimport__)) int _vsnprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,va_list _Args) ;
  __attribute__ ((__dllimport__)) int _vsnprintf_l(char * __restrict__ buffer,size_t count,const char * __restrict__ format,_locale_t locale,va_list argptr) ;
  int sprintf(char * __restrict__ _Dest,const char * __restrict__ _Format,...) ;
  int _sprintf_l(char * __restrict__ buffer,const char * __restrict__ format,_locale_t locale,...) ;
  int vsprintf(char * __restrict__ _Dest,const char * __restrict__ _Format,va_list _Args) ;







  int vsnprintf(char * __restrict__ _DstBuf,size_t _MaxCount,const char * __restrict__ _Format,va_list _ArgList) ;

  int snprintf(char * __restrict__ s, size_t n, const char * __restrict__ format, ...);
# 312 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 3
  int vscanf(const char * __restrict__ Format, va_list argp);
  int vfscanf (FILE * __restrict__ fp, const char * __restrict__ Format,va_list argp);
  int vsscanf (const char * __restrict__ _Str,const char * __restrict__ Format,va_list argp);

  __attribute__ ((__dllimport__)) int _vscprintf(const char * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _set_printf_count_output(int _Value);
  __attribute__ ((__dllimport__)) int _get_printf_count_output(void);
# 475 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 3
  __attribute__ ((__dllimport__)) void _lock_file(FILE *_File);
  __attribute__ ((__dllimport__)) void _unlock_file(FILE *_File);
  __attribute__ ((__dllimport__)) int _fclose_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) int _fflush_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) size_t _fread_nolock(void * __restrict__ _DstBuf,size_t _ElementSize,size_t _Count,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int _fseek_nolock(FILE *_File,long _Offset,int _Origin);
  __attribute__ ((__dllimport__)) long _ftell_nolock(FILE *_File);
  __extension__ __attribute__ ((__dllimport__)) int _fseeki64_nolock(FILE *_File,long long _Offset,int _Origin);
  __extension__ __attribute__ ((__dllimport__)) long long _ftelli64_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) size_t _fwrite_nolock(const void * __restrict__ _DstBuf,size_t _Size,size_t _Count,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int _ungetc_nolock(int _Ch,FILE *_File);





  char * tempnam(const char *_Directory,const char *_FilePrefix) ;
  int fcloseall(void) ;
  FILE * fdopen(int _FileHandle,const char *_Format) ;
  int fgetchar(void) ;
  int fileno(FILE *_File) ;
  int flushall(void) ;
  int fputchar(int _Ch) ;
  int getw(FILE *_File) ;
  int putw(int _Ch,FILE *_File) ;
  int rmtmp(void) ;



}


#pragma pack(pop)


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\sec_api/stdio_s.h" 1 3








# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 1 3
# 9 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\sec_api/stdio_s.h" 2 3
# 509 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 2 3


# 1 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw_print_pop.h" 1 3
# 511 "D:/vivado/xilinx/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 2 3
# 8 "./param.h" 2
# 1 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h" 1
# 54 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h"
# 1 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_common.h" 1
# 57 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_common.h"
# 1 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_decl.h" 1
# 100 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_decl.h"
enum ap_q_mode {
  AP_RND,
  AP_RND_ZERO,
  AP_RND_MIN_INF,
  AP_RND_INF,
  AP_RND_CONV,
  AP_TRN,
  AP_TRN_ZERO,
};
# 122 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_decl.h"
enum ap_o_mode {
  AP_SAT,
  AP_SAT_ZERO,
  AP_SAT_SYM,
  AP_WRAP,
  AP_WRAP_SM,
};
# 179 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_decl.h"
template <int _AP_W, bool _AP_S>
struct ap_int_base;

template <int _AP_W>
struct ap_int;

template <int _AP_W>
struct ap_uint;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

template <int _AP_W, int _AP_I, bool _AP_S = true, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed_base;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;


enum BaseMode { AP_BIN = 2, AP_OCT = 8, AP_DEC = 10, AP_HEX = 16 };
# 233 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_decl.h"
typedef signed long long ap_slong;
typedef unsigned long long ap_ulong;


enum {
  _AP_SIZE_char = 8,
  _AP_SIZE_short = sizeof(short) * 8,
  _AP_SIZE_int = sizeof(int) * 8,
  _AP_SIZE_long = sizeof(long) * 8,
  _AP_SIZE_ap_slong = sizeof(ap_slong) * 8
};
# 58 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_common.h" 2
# 157 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_common.h"
enum { CHAR_IS_SIGNED = (char)-1 < 0 };


namespace _ap_type {
template <typename _Tp>
struct is_signed {
  static const bool value = _Tp(-1) < _Tp(1);
};

template <typename _Tp>
struct is_integral {
  static const bool value = false;
};





template <> struct is_integral<bool> { static const bool value = true; };
template <> struct is_integral<char> { static const bool value = true; };
template <> struct is_integral<signed char> { static const bool value = true; };
template <> struct is_integral<unsigned char> { static const bool value = true; };
template <> struct is_integral<short> { static const bool value = true; };
template <> struct is_integral<unsigned short> { static const bool value = true; };
template <> struct is_integral<int> { static const bool value = true; };
template <> struct is_integral<unsigned int> { static const bool value = true; };
template <> struct is_integral<long> { static const bool value = true; };
template <> struct is_integral<unsigned long> { static const bool value = true; };
template <> struct is_integral<ap_slong> { static const bool value = true; };
template <> struct is_integral<ap_ulong> { static const bool value = true; };


template <bool, typename _Tp = void>
struct enable_if {};

template <typename _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const<_Tp const> {
  typedef _Tp type;
};
}
# 220 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_common.h"
template <int _AP_N, bool _AP_S>
struct ssdm_int;
# 238 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_common.h"
# 1 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot/etc/autopilot_dt.def" 1


template <> struct ssdm_int<1 + 1024 * 0, true> { int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<2 + 1024 * 0, true> { int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<2 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<3 + 1024 * 0, true> { int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<3 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<4 + 1024 * 0, true> { int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<4 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<5 + 1024 * 0, true> { int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<5 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<6 + 1024 * 0, true> { int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<6 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<7 + 1024 * 0, true> { int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<7 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<8 + 1024 * 0, true> { int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<8 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<9 + 1024 * 0, true> { int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<9 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<10 + 1024 * 0, true> { int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<10 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<11 + 1024 * 0, true> { int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<11 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<12 + 1024 * 0, true> { int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<12 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<13 + 1024 * 0, true> { int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<13 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<14 + 1024 * 0, true> { int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<14 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<15 + 1024 * 0, true> { int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<15 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<16 + 1024 * 0, true> { int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<16 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<17 + 1024 * 0, true> { int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<17 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<18 + 1024 * 0, true> { int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<18 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<19 + 1024 * 0, true> { int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<19 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<20 + 1024 * 0, true> { int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<20 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<21 + 1024 * 0, true> { int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<21 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<22 + 1024 * 0, true> { int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<22 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<23 + 1024 * 0, true> { int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<23 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<24 + 1024 * 0, true> { int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<24 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<25 + 1024 * 0, true> { int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<25 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<26 + 1024 * 0, true> { int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<26 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<27 + 1024 * 0, true> { int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<27 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<28 + 1024 * 0, true> { int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<28 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<29 + 1024 * 0, true> { int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<29 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<30 + 1024 * 0, true> { int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<30 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<31 + 1024 * 0, true> { int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<31 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<32 + 1024 * 0, true> { int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<32 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<33 + 1024 * 0, true> { int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<33 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<34 + 1024 * 0, true> { int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<34 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<35 + 1024 * 0, true> { int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<35 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<36 + 1024 * 0, true> { int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<36 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<37 + 1024 * 0, true> { int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<37 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<38 + 1024 * 0, true> { int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<38 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<39 + 1024 * 0, true> { int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<39 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<40 + 1024 * 0, true> { int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<40 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<41 + 1024 * 0, true> { int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<41 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<42 + 1024 * 0, true> { int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<42 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<43 + 1024 * 0, true> { int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<43 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<44 + 1024 * 0, true> { int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<44 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<45 + 1024 * 0, true> { int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<45 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<46 + 1024 * 0, true> { int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<46 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<47 + 1024 * 0, true> { int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<47 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<48 + 1024 * 0, true> { int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<48 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<49 + 1024 * 0, true> { int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<49 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<50 + 1024 * 0, true> { int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<50 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<51 + 1024 * 0, true> { int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<51 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<52 + 1024 * 0, true> { int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<52 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<53 + 1024 * 0, true> { int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<53 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<54 + 1024 * 0, true> { int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<54 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<55 + 1024 * 0, true> { int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<55 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<56 + 1024 * 0, true> { int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<56 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<57 + 1024 * 0, true> { int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<57 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<58 + 1024 * 0, true> { int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<58 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<59 + 1024 * 0, true> { int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<59 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<60 + 1024 * 0, true> { int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<60 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<61 + 1024 * 0, true> { int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<61 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<62 + 1024 * 0, true> { int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<62 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<63 + 1024 * 0, true> { int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<63 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, false>(){}; };


template <> struct ssdm_int<64 + 1024 * 0, true> { int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<64 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, false>(){}; };




template <> struct ssdm_int<65 + 1024 * 0, true> { int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<65 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<66 + 1024 * 0, true> { int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<66 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<67 + 1024 * 0, true> { int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<67 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<68 + 1024 * 0, true> { int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<68 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<69 + 1024 * 0, true> { int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<69 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<70 + 1024 * 0, true> { int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<70 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<71 + 1024 * 0, true> { int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<71 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<72 + 1024 * 0, true> { int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<72 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<73 + 1024 * 0, true> { int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<73 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<74 + 1024 * 0, true> { int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<74 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<75 + 1024 * 0, true> { int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<75 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<76 + 1024 * 0, true> { int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<76 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<77 + 1024 * 0, true> { int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<77 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<78 + 1024 * 0, true> { int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<78 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<79 + 1024 * 0, true> { int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<79 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<80 + 1024 * 0, true> { int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<80 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<81 + 1024 * 0, true> { int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<81 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<82 + 1024 * 0, true> { int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<82 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<83 + 1024 * 0, true> { int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<83 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<84 + 1024 * 0, true> { int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<84 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<85 + 1024 * 0, true> { int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<85 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<86 + 1024 * 0, true> { int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<86 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<87 + 1024 * 0, true> { int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<87 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<88 + 1024 * 0, true> { int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<88 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<89 + 1024 * 0, true> { int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<89 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<90 + 1024 * 0, true> { int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<90 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<91 + 1024 * 0, true> { int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<91 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<92 + 1024 * 0, true> { int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<92 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<93 + 1024 * 0, true> { int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<93 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<94 + 1024 * 0, true> { int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<94 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<95 + 1024 * 0, true> { int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<95 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<96 + 1024 * 0, true> { int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<96 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<97 + 1024 * 0, true> { int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<97 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<98 + 1024 * 0, true> { int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<98 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<99 + 1024 * 0, true> { int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<99 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<100 + 1024 * 0, true> { int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<100 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<101 + 1024 * 0, true> { int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<101 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<102 + 1024 * 0, true> { int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<102 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<103 + 1024 * 0, true> { int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<103 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<104 + 1024 * 0, true> { int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<104 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<105 + 1024 * 0, true> { int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<105 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<106 + 1024 * 0, true> { int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<106 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<107 + 1024 * 0, true> { int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<107 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<108 + 1024 * 0, true> { int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<108 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<109 + 1024 * 0, true> { int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<109 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<110 + 1024 * 0, true> { int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<110 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<111 + 1024 * 0, true> { int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<111 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<112 + 1024 * 0, true> { int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<112 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<113 + 1024 * 0, true> { int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<113 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<114 + 1024 * 0, true> { int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<114 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<115 + 1024 * 0, true> { int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<115 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<116 + 1024 * 0, true> { int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<116 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<117 + 1024 * 0, true> { int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<117 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<118 + 1024 * 0, true> { int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<118 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<119 + 1024 * 0, true> { int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<119 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<120 + 1024 * 0, true> { int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<120 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<121 + 1024 * 0, true> { int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<121 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<122 + 1024 * 0, true> { int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<122 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<123 + 1024 * 0, true> { int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<123 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<124 + 1024 * 0, true> { int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<124 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<125 + 1024 * 0, true> { int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<125 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<126 + 1024 * 0, true> { int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<126 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<127 + 1024 * 0, true> { int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<127 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<128 + 1024 * 0, true> { int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<128 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, false>(){}; };






template <> struct ssdm_int<129 + 1024 * 0, true> { int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<129 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<130 + 1024 * 0, true> { int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<130 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<131 + 1024 * 0, true> { int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<131 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<132 + 1024 * 0, true> { int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<132 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<133 + 1024 * 0, true> { int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<133 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<134 + 1024 * 0, true> { int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<134 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<135 + 1024 * 0, true> { int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<135 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<136 + 1024 * 0, true> { int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<136 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<137 + 1024 * 0, true> { int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<137 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<138 + 1024 * 0, true> { int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<138 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<139 + 1024 * 0, true> { int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<139 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<140 + 1024 * 0, true> { int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<140 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<141 + 1024 * 0, true> { int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<141 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<142 + 1024 * 0, true> { int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<142 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<143 + 1024 * 0, true> { int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<143 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<144 + 1024 * 0, true> { int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<144 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<145 + 1024 * 0, true> { int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<145 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<146 + 1024 * 0, true> { int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<146 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<147 + 1024 * 0, true> { int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<147 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<148 + 1024 * 0, true> { int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<148 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<149 + 1024 * 0, true> { int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<149 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<150 + 1024 * 0, true> { int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<150 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<151 + 1024 * 0, true> { int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<151 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<152 + 1024 * 0, true> { int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<152 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<153 + 1024 * 0, true> { int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<153 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<154 + 1024 * 0, true> { int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<154 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<155 + 1024 * 0, true> { int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<155 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<156 + 1024 * 0, true> { int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<156 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<157 + 1024 * 0, true> { int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<157 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<158 + 1024 * 0, true> { int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<158 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<159 + 1024 * 0, true> { int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<159 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<160 + 1024 * 0, true> { int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<160 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<161 + 1024 * 0, true> { int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<161 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<162 + 1024 * 0, true> { int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<162 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<163 + 1024 * 0, true> { int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<163 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<164 + 1024 * 0, true> { int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<164 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<165 + 1024 * 0, true> { int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<165 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<166 + 1024 * 0, true> { int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<166 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<167 + 1024 * 0, true> { int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<167 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<168 + 1024 * 0, true> { int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<168 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<169 + 1024 * 0, true> { int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<169 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<170 + 1024 * 0, true> { int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<170 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<171 + 1024 * 0, true> { int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<171 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<172 + 1024 * 0, true> { int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<172 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<173 + 1024 * 0, true> { int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<173 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<174 + 1024 * 0, true> { int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<174 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<175 + 1024 * 0, true> { int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<175 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<176 + 1024 * 0, true> { int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<176 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<177 + 1024 * 0, true> { int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<177 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<178 + 1024 * 0, true> { int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<178 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<179 + 1024 * 0, true> { int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<179 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<180 + 1024 * 0, true> { int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<180 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<181 + 1024 * 0, true> { int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<181 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<182 + 1024 * 0, true> { int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<182 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<183 + 1024 * 0, true> { int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<183 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<184 + 1024 * 0, true> { int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<184 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<185 + 1024 * 0, true> { int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<185 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<186 + 1024 * 0, true> { int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<186 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<187 + 1024 * 0, true> { int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<187 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<188 + 1024 * 0, true> { int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<188 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<189 + 1024 * 0, true> { int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<189 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<190 + 1024 * 0, true> { int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<190 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<191 + 1024 * 0, true> { int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<191 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<192 + 1024 * 0, true> { int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<192 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<193 + 1024 * 0, true> { int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<193 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<194 + 1024 * 0, true> { int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<194 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<195 + 1024 * 0, true> { int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<195 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<196 + 1024 * 0, true> { int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<196 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<197 + 1024 * 0, true> { int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<197 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<198 + 1024 * 0, true> { int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<198 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<199 + 1024 * 0, true> { int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<199 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<200 + 1024 * 0, true> { int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<200 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<201 + 1024 * 0, true> { int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<201 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<202 + 1024 * 0, true> { int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<202 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<203 + 1024 * 0, true> { int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<203 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<204 + 1024 * 0, true> { int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<204 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<205 + 1024 * 0, true> { int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<205 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<206 + 1024 * 0, true> { int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<206 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<207 + 1024 * 0, true> { int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<207 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<208 + 1024 * 0, true> { int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<208 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<209 + 1024 * 0, true> { int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<209 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<210 + 1024 * 0, true> { int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<210 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<211 + 1024 * 0, true> { int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<211 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<212 + 1024 * 0, true> { int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<212 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<213 + 1024 * 0, true> { int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<213 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<214 + 1024 * 0, true> { int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<214 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<215 + 1024 * 0, true> { int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<215 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<216 + 1024 * 0, true> { int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<216 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<217 + 1024 * 0, true> { int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<217 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<218 + 1024 * 0, true> { int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<218 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<219 + 1024 * 0, true> { int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<219 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<220 + 1024 * 0, true> { int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<220 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<221 + 1024 * 0, true> { int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<221 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<222 + 1024 * 0, true> { int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<222 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<223 + 1024 * 0, true> { int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<223 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<224 + 1024 * 0, true> { int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<224 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<225 + 1024 * 0, true> { int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<225 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<226 + 1024 * 0, true> { int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<226 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<227 + 1024 * 0, true> { int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<227 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<228 + 1024 * 0, true> { int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<228 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<229 + 1024 * 0, true> { int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<229 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<230 + 1024 * 0, true> { int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<230 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<231 + 1024 * 0, true> { int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<231 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<232 + 1024 * 0, true> { int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<232 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<233 + 1024 * 0, true> { int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<233 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<234 + 1024 * 0, true> { int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<234 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<235 + 1024 * 0, true> { int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<235 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<236 + 1024 * 0, true> { int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<236 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<237 + 1024 * 0, true> { int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<237 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<238 + 1024 * 0, true> { int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<238 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<239 + 1024 * 0, true> { int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<239 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<240 + 1024 * 0, true> { int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<240 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<241 + 1024 * 0, true> { int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<241 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<242 + 1024 * 0, true> { int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<242 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<243 + 1024 * 0, true> { int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<243 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<244 + 1024 * 0, true> { int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<244 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<245 + 1024 * 0, true> { int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<245 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<246 + 1024 * 0, true> { int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<246 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<247 + 1024 * 0, true> { int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<247 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<248 + 1024 * 0, true> { int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<248 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<249 + 1024 * 0, true> { int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<249 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<250 + 1024 * 0, true> { int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<250 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<251 + 1024 * 0, true> { int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<251 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<252 + 1024 * 0, true> { int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<252 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<253 + 1024 * 0, true> { int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<253 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<254 + 1024 * 0, true> { int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<254 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<255 + 1024 * 0, true> { int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<255 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<256 + 1024 * 0, true> { int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<256 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<257 + 1024 * 0, true> { int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<257 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<258 + 1024 * 0, true> { int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<258 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<259 + 1024 * 0, true> { int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<259 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<260 + 1024 * 0, true> { int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<260 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<261 + 1024 * 0, true> { int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<261 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<262 + 1024 * 0, true> { int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<262 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<263 + 1024 * 0, true> { int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<263 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<264 + 1024 * 0, true> { int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<264 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<265 + 1024 * 0, true> { int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<265 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<266 + 1024 * 0, true> { int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<266 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<267 + 1024 * 0, true> { int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<267 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<268 + 1024 * 0, true> { int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<268 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<269 + 1024 * 0, true> { int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<269 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<270 + 1024 * 0, true> { int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<270 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<271 + 1024 * 0, true> { int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<271 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<272 + 1024 * 0, true> { int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<272 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<273 + 1024 * 0, true> { int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<273 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<274 + 1024 * 0, true> { int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<274 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<275 + 1024 * 0, true> { int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<275 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<276 + 1024 * 0, true> { int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<276 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<277 + 1024 * 0, true> { int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<277 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<278 + 1024 * 0, true> { int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<278 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<279 + 1024 * 0, true> { int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<279 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<280 + 1024 * 0, true> { int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<280 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<281 + 1024 * 0, true> { int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<281 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<282 + 1024 * 0, true> { int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<282 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<283 + 1024 * 0, true> { int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<283 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<284 + 1024 * 0, true> { int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<284 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<285 + 1024 * 0, true> { int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<285 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<286 + 1024 * 0, true> { int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<286 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<287 + 1024 * 0, true> { int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<287 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<288 + 1024 * 0, true> { int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<288 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<289 + 1024 * 0, true> { int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<289 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<290 + 1024 * 0, true> { int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<290 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<291 + 1024 * 0, true> { int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<291 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<292 + 1024 * 0, true> { int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<292 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<293 + 1024 * 0, true> { int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<293 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<294 + 1024 * 0, true> { int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<294 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<295 + 1024 * 0, true> { int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<295 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<296 + 1024 * 0, true> { int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<296 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<297 + 1024 * 0, true> { int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<297 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<298 + 1024 * 0, true> { int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<298 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<299 + 1024 * 0, true> { int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<299 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<300 + 1024 * 0, true> { int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<300 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<301 + 1024 * 0, true> { int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<301 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<302 + 1024 * 0, true> { int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<302 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<303 + 1024 * 0, true> { int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<303 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<304 + 1024 * 0, true> { int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<304 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<305 + 1024 * 0, true> { int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<305 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<306 + 1024 * 0, true> { int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<306 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<307 + 1024 * 0, true> { int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<307 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<308 + 1024 * 0, true> { int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<308 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<309 + 1024 * 0, true> { int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<309 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<310 + 1024 * 0, true> { int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<310 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<311 + 1024 * 0, true> { int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<311 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<312 + 1024 * 0, true> { int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<312 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<313 + 1024 * 0, true> { int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<313 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<314 + 1024 * 0, true> { int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<314 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<315 + 1024 * 0, true> { int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<315 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<316 + 1024 * 0, true> { int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<316 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<317 + 1024 * 0, true> { int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<317 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<318 + 1024 * 0, true> { int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<318 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<319 + 1024 * 0, true> { int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<319 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<320 + 1024 * 0, true> { int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<320 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<321 + 1024 * 0, true> { int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<321 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<322 + 1024 * 0, true> { int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<322 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<323 + 1024 * 0, true> { int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<323 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<324 + 1024 * 0, true> { int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<324 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<325 + 1024 * 0, true> { int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<325 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<326 + 1024 * 0, true> { int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<326 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<327 + 1024 * 0, true> { int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<327 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<328 + 1024 * 0, true> { int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<328 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<329 + 1024 * 0, true> { int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<329 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<330 + 1024 * 0, true> { int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<330 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<331 + 1024 * 0, true> { int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<331 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<332 + 1024 * 0, true> { int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<332 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<333 + 1024 * 0, true> { int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<333 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<334 + 1024 * 0, true> { int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<334 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<335 + 1024 * 0, true> { int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<335 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<336 + 1024 * 0, true> { int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<336 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<337 + 1024 * 0, true> { int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<337 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<338 + 1024 * 0, true> { int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<338 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<339 + 1024 * 0, true> { int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<339 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<340 + 1024 * 0, true> { int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<340 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<341 + 1024 * 0, true> { int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<341 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<342 + 1024 * 0, true> { int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<342 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<343 + 1024 * 0, true> { int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<343 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<344 + 1024 * 0, true> { int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<344 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<345 + 1024 * 0, true> { int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<345 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<346 + 1024 * 0, true> { int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<346 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<347 + 1024 * 0, true> { int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<347 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<348 + 1024 * 0, true> { int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<348 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<349 + 1024 * 0, true> { int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<349 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<350 + 1024 * 0, true> { int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<350 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<351 + 1024 * 0, true> { int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<351 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<352 + 1024 * 0, true> { int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<352 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<353 + 1024 * 0, true> { int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<353 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<354 + 1024 * 0, true> { int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<354 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<355 + 1024 * 0, true> { int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<355 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<356 + 1024 * 0, true> { int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<356 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<357 + 1024 * 0, true> { int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<357 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<358 + 1024 * 0, true> { int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<358 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<359 + 1024 * 0, true> { int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<359 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<360 + 1024 * 0, true> { int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<360 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<361 + 1024 * 0, true> { int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<361 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<362 + 1024 * 0, true> { int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<362 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<363 + 1024 * 0, true> { int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<363 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<364 + 1024 * 0, true> { int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<364 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<365 + 1024 * 0, true> { int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<365 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<366 + 1024 * 0, true> { int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<366 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<367 + 1024 * 0, true> { int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<367 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<368 + 1024 * 0, true> { int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<368 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<369 + 1024 * 0, true> { int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<369 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<370 + 1024 * 0, true> { int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<370 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<371 + 1024 * 0, true> { int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<371 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<372 + 1024 * 0, true> { int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<372 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<373 + 1024 * 0, true> { int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<373 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<374 + 1024 * 0, true> { int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<374 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<375 + 1024 * 0, true> { int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<375 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<376 + 1024 * 0, true> { int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<376 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<377 + 1024 * 0, true> { int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<377 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<378 + 1024 * 0, true> { int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<378 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<379 + 1024 * 0, true> { int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<379 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<380 + 1024 * 0, true> { int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<380 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<381 + 1024 * 0, true> { int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<381 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<382 + 1024 * 0, true> { int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<382 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<383 + 1024 * 0, true> { int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<383 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<384 + 1024 * 0, true> { int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<384 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<385 + 1024 * 0, true> { int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<385 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<386 + 1024 * 0, true> { int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<386 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<387 + 1024 * 0, true> { int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<387 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<388 + 1024 * 0, true> { int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<388 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<389 + 1024 * 0, true> { int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<389 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<390 + 1024 * 0, true> { int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<390 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<391 + 1024 * 0, true> { int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<391 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<392 + 1024 * 0, true> { int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<392 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<393 + 1024 * 0, true> { int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<393 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<394 + 1024 * 0, true> { int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<394 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<395 + 1024 * 0, true> { int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<395 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<396 + 1024 * 0, true> { int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<396 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<397 + 1024 * 0, true> { int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<397 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<398 + 1024 * 0, true> { int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<398 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<399 + 1024 * 0, true> { int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<399 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<400 + 1024 * 0, true> { int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<400 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<401 + 1024 * 0, true> { int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<401 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<402 + 1024 * 0, true> { int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<402 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<403 + 1024 * 0, true> { int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<403 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<404 + 1024 * 0, true> { int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<404 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<405 + 1024 * 0, true> { int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<405 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<406 + 1024 * 0, true> { int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<406 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<407 + 1024 * 0, true> { int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<407 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<408 + 1024 * 0, true> { int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<408 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<409 + 1024 * 0, true> { int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<409 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<410 + 1024 * 0, true> { int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<410 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<411 + 1024 * 0, true> { int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<411 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<412 + 1024 * 0, true> { int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<412 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<413 + 1024 * 0, true> { int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<413 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<414 + 1024 * 0, true> { int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<414 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<415 + 1024 * 0, true> { int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<415 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<416 + 1024 * 0, true> { int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<416 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<417 + 1024 * 0, true> { int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<417 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<418 + 1024 * 0, true> { int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<418 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<419 + 1024 * 0, true> { int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<419 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<420 + 1024 * 0, true> { int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<420 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<421 + 1024 * 0, true> { int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<421 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<422 + 1024 * 0, true> { int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<422 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<423 + 1024 * 0, true> { int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<423 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<424 + 1024 * 0, true> { int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<424 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<425 + 1024 * 0, true> { int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<425 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<426 + 1024 * 0, true> { int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<426 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<427 + 1024 * 0, true> { int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<427 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<428 + 1024 * 0, true> { int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<428 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<429 + 1024 * 0, true> { int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<429 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<430 + 1024 * 0, true> { int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<430 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<431 + 1024 * 0, true> { int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<431 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<432 + 1024 * 0, true> { int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<432 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<433 + 1024 * 0, true> { int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<433 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<434 + 1024 * 0, true> { int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<434 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<435 + 1024 * 0, true> { int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<435 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<436 + 1024 * 0, true> { int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<436 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<437 + 1024 * 0, true> { int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<437 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<438 + 1024 * 0, true> { int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<438 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<439 + 1024 * 0, true> { int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<439 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<440 + 1024 * 0, true> { int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<440 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<441 + 1024 * 0, true> { int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<441 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<442 + 1024 * 0, true> { int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<442 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<443 + 1024 * 0, true> { int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<443 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<444 + 1024 * 0, true> { int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<444 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<445 + 1024 * 0, true> { int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<445 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<446 + 1024 * 0, true> { int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<446 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<447 + 1024 * 0, true> { int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<447 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<448 + 1024 * 0, true> { int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<448 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<449 + 1024 * 0, true> { int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<449 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<450 + 1024 * 0, true> { int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<450 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<451 + 1024 * 0, true> { int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<451 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<452 + 1024 * 0, true> { int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<452 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<453 + 1024 * 0, true> { int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<453 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<454 + 1024 * 0, true> { int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<454 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<455 + 1024 * 0, true> { int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<455 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<456 + 1024 * 0, true> { int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<456 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<457 + 1024 * 0, true> { int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<457 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<458 + 1024 * 0, true> { int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<458 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<459 + 1024 * 0, true> { int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<459 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<460 + 1024 * 0, true> { int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<460 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<461 + 1024 * 0, true> { int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<461 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<462 + 1024 * 0, true> { int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<462 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<463 + 1024 * 0, true> { int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<463 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<464 + 1024 * 0, true> { int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<464 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<465 + 1024 * 0, true> { int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<465 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<466 + 1024 * 0, true> { int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<466 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<467 + 1024 * 0, true> { int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<467 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<468 + 1024 * 0, true> { int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<468 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<469 + 1024 * 0, true> { int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<469 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<470 + 1024 * 0, true> { int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<470 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<471 + 1024 * 0, true> { int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<471 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<472 + 1024 * 0, true> { int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<472 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<473 + 1024 * 0, true> { int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<473 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<474 + 1024 * 0, true> { int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<474 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<475 + 1024 * 0, true> { int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<475 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<476 + 1024 * 0, true> { int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<476 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<477 + 1024 * 0, true> { int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<477 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<478 + 1024 * 0, true> { int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<478 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<479 + 1024 * 0, true> { int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<479 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<480 + 1024 * 0, true> { int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<480 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<481 + 1024 * 0, true> { int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<481 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<482 + 1024 * 0, true> { int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<482 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<483 + 1024 * 0, true> { int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<483 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<484 + 1024 * 0, true> { int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<484 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<485 + 1024 * 0, true> { int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<485 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<486 + 1024 * 0, true> { int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<486 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<487 + 1024 * 0, true> { int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<487 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<488 + 1024 * 0, true> { int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<488 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<489 + 1024 * 0, true> { int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<489 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<490 + 1024 * 0, true> { int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<490 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<491 + 1024 * 0, true> { int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<491 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<492 + 1024 * 0, true> { int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<492 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<493 + 1024 * 0, true> { int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<493 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<494 + 1024 * 0, true> { int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<494 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<495 + 1024 * 0, true> { int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<495 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<496 + 1024 * 0, true> { int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<496 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<497 + 1024 * 0, true> { int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<497 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<498 + 1024 * 0, true> { int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<498 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<499 + 1024 * 0, true> { int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<499 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<500 + 1024 * 0, true> { int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<500 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<501 + 1024 * 0, true> { int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<501 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<502 + 1024 * 0, true> { int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<502 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<503 + 1024 * 0, true> { int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<503 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<504 + 1024 * 0, true> { int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<504 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<505 + 1024 * 0, true> { int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<505 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<506 + 1024 * 0, true> { int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<506 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<507 + 1024 * 0, true> { int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<507 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<508 + 1024 * 0, true> { int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<508 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<509 + 1024 * 0, true> { int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<509 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<510 + 1024 * 0, true> { int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<510 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<511 + 1024 * 0, true> { int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<511 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<512 + 1024 * 0, true> { int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<512 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<513 + 1024 * 0, true> { int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<513 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<514 + 1024 * 0, true> { int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<514 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<515 + 1024 * 0, true> { int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<515 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<516 + 1024 * 0, true> { int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<516 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<517 + 1024 * 0, true> { int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<517 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<518 + 1024 * 0, true> { int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<518 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<519 + 1024 * 0, true> { int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<519 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<520 + 1024 * 0, true> { int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<520 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<521 + 1024 * 0, true> { int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<521 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<522 + 1024 * 0, true> { int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<522 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<523 + 1024 * 0, true> { int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<523 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<524 + 1024 * 0, true> { int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<524 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<525 + 1024 * 0, true> { int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<525 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<526 + 1024 * 0, true> { int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<526 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<527 + 1024 * 0, true> { int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<527 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<528 + 1024 * 0, true> { int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<528 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<529 + 1024 * 0, true> { int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<529 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<530 + 1024 * 0, true> { int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<530 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<531 + 1024 * 0, true> { int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<531 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<532 + 1024 * 0, true> { int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<532 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<533 + 1024 * 0, true> { int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<533 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<534 + 1024 * 0, true> { int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<534 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<535 + 1024 * 0, true> { int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<535 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<536 + 1024 * 0, true> { int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<536 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<537 + 1024 * 0, true> { int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<537 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<538 + 1024 * 0, true> { int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<538 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<539 + 1024 * 0, true> { int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<539 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<540 + 1024 * 0, true> { int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<540 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<541 + 1024 * 0, true> { int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<541 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<542 + 1024 * 0, true> { int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<542 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<543 + 1024 * 0, true> { int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<543 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<544 + 1024 * 0, true> { int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<544 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<545 + 1024 * 0, true> { int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<545 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<546 + 1024 * 0, true> { int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<546 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<547 + 1024 * 0, true> { int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<547 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<548 + 1024 * 0, true> { int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<548 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<549 + 1024 * 0, true> { int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<549 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<550 + 1024 * 0, true> { int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<550 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<551 + 1024 * 0, true> { int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<551 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<552 + 1024 * 0, true> { int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<552 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<553 + 1024 * 0, true> { int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<553 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<554 + 1024 * 0, true> { int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<554 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<555 + 1024 * 0, true> { int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<555 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<556 + 1024 * 0, true> { int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<556 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<557 + 1024 * 0, true> { int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<557 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<558 + 1024 * 0, true> { int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<558 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<559 + 1024 * 0, true> { int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<559 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<560 + 1024 * 0, true> { int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<560 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<561 + 1024 * 0, true> { int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<561 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<562 + 1024 * 0, true> { int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<562 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<563 + 1024 * 0, true> { int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<563 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<564 + 1024 * 0, true> { int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<564 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<565 + 1024 * 0, true> { int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<565 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<566 + 1024 * 0, true> { int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<566 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<567 + 1024 * 0, true> { int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<567 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<568 + 1024 * 0, true> { int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<568 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<569 + 1024 * 0, true> { int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<569 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<570 + 1024 * 0, true> { int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<570 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<571 + 1024 * 0, true> { int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<571 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<572 + 1024 * 0, true> { int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<572 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<573 + 1024 * 0, true> { int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<573 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<574 + 1024 * 0, true> { int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<574 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<575 + 1024 * 0, true> { int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<575 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<576 + 1024 * 0, true> { int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<576 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<577 + 1024 * 0, true> { int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<577 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<578 + 1024 * 0, true> { int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<578 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<579 + 1024 * 0, true> { int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<579 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<580 + 1024 * 0, true> { int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<580 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<581 + 1024 * 0, true> { int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<581 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<582 + 1024 * 0, true> { int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<582 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<583 + 1024 * 0, true> { int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<583 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<584 + 1024 * 0, true> { int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<584 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<585 + 1024 * 0, true> { int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<585 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<586 + 1024 * 0, true> { int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<586 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<587 + 1024 * 0, true> { int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<587 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<588 + 1024 * 0, true> { int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<588 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<589 + 1024 * 0, true> { int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<589 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<590 + 1024 * 0, true> { int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<590 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<591 + 1024 * 0, true> { int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<591 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<592 + 1024 * 0, true> { int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<592 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<593 + 1024 * 0, true> { int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<593 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<594 + 1024 * 0, true> { int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<594 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<595 + 1024 * 0, true> { int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<595 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<596 + 1024 * 0, true> { int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<596 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<597 + 1024 * 0, true> { int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<597 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<598 + 1024 * 0, true> { int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<598 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<599 + 1024 * 0, true> { int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<599 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<600 + 1024 * 0, true> { int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<600 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<601 + 1024 * 0, true> { int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<601 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<602 + 1024 * 0, true> { int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<602 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<603 + 1024 * 0, true> { int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<603 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<604 + 1024 * 0, true> { int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<604 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<605 + 1024 * 0, true> { int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<605 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<606 + 1024 * 0, true> { int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<606 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<607 + 1024 * 0, true> { int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<607 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<608 + 1024 * 0, true> { int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<608 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<609 + 1024 * 0, true> { int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<609 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<610 + 1024 * 0, true> { int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<610 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<611 + 1024 * 0, true> { int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<611 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<612 + 1024 * 0, true> { int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<612 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<613 + 1024 * 0, true> { int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<613 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<614 + 1024 * 0, true> { int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<614 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<615 + 1024 * 0, true> { int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<615 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<616 + 1024 * 0, true> { int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<616 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<617 + 1024 * 0, true> { int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<617 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<618 + 1024 * 0, true> { int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<618 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<619 + 1024 * 0, true> { int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<619 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<620 + 1024 * 0, true> { int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<620 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<621 + 1024 * 0, true> { int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<621 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<622 + 1024 * 0, true> { int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<622 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<623 + 1024 * 0, true> { int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<623 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<624 + 1024 * 0, true> { int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<624 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<625 + 1024 * 0, true> { int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<625 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<626 + 1024 * 0, true> { int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<626 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<627 + 1024 * 0, true> { int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<627 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<628 + 1024 * 0, true> { int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<628 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<629 + 1024 * 0, true> { int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<629 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<630 + 1024 * 0, true> { int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<630 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<631 + 1024 * 0, true> { int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<631 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<632 + 1024 * 0, true> { int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<632 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<633 + 1024 * 0, true> { int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<633 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<634 + 1024 * 0, true> { int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<634 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<635 + 1024 * 0, true> { int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<635 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<636 + 1024 * 0, true> { int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<636 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<637 + 1024 * 0, true> { int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<637 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<638 + 1024 * 0, true> { int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<638 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<639 + 1024 * 0, true> { int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<639 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<640 + 1024 * 0, true> { int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<640 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<641 + 1024 * 0, true> { int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<641 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<642 + 1024 * 0, true> { int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<642 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<643 + 1024 * 0, true> { int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<643 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<644 + 1024 * 0, true> { int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<644 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<645 + 1024 * 0, true> { int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<645 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<646 + 1024 * 0, true> { int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<646 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<647 + 1024 * 0, true> { int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<647 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<648 + 1024 * 0, true> { int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<648 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<649 + 1024 * 0, true> { int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<649 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<650 + 1024 * 0, true> { int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<650 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<651 + 1024 * 0, true> { int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<651 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<652 + 1024 * 0, true> { int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<652 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<653 + 1024 * 0, true> { int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<653 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<654 + 1024 * 0, true> { int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<654 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<655 + 1024 * 0, true> { int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<655 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<656 + 1024 * 0, true> { int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<656 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<657 + 1024 * 0, true> { int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<657 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<658 + 1024 * 0, true> { int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<658 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<659 + 1024 * 0, true> { int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<659 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<660 + 1024 * 0, true> { int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<660 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<661 + 1024 * 0, true> { int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<661 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<662 + 1024 * 0, true> { int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<662 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<663 + 1024 * 0, true> { int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<663 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<664 + 1024 * 0, true> { int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<664 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<665 + 1024 * 0, true> { int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<665 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<666 + 1024 * 0, true> { int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<666 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<667 + 1024 * 0, true> { int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<667 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<668 + 1024 * 0, true> { int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<668 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<669 + 1024 * 0, true> { int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<669 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<670 + 1024 * 0, true> { int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<670 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<671 + 1024 * 0, true> { int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<671 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<672 + 1024 * 0, true> { int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<672 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<673 + 1024 * 0, true> { int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<673 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<674 + 1024 * 0, true> { int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<674 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<675 + 1024 * 0, true> { int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<675 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<676 + 1024 * 0, true> { int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<676 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<677 + 1024 * 0, true> { int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<677 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<678 + 1024 * 0, true> { int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<678 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<679 + 1024 * 0, true> { int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<679 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<680 + 1024 * 0, true> { int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<680 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<681 + 1024 * 0, true> { int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<681 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<682 + 1024 * 0, true> { int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<682 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<683 + 1024 * 0, true> { int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<683 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<684 + 1024 * 0, true> { int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<684 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<685 + 1024 * 0, true> { int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<685 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<686 + 1024 * 0, true> { int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<686 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<687 + 1024 * 0, true> { int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<687 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<688 + 1024 * 0, true> { int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<688 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<689 + 1024 * 0, true> { int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<689 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<690 + 1024 * 0, true> { int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<690 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<691 + 1024 * 0, true> { int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<691 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<692 + 1024 * 0, true> { int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<692 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<693 + 1024 * 0, true> { int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<693 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<694 + 1024 * 0, true> { int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<694 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<695 + 1024 * 0, true> { int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<695 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<696 + 1024 * 0, true> { int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<696 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<697 + 1024 * 0, true> { int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<697 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<698 + 1024 * 0, true> { int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<698 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<699 + 1024 * 0, true> { int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<699 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<700 + 1024 * 0, true> { int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<700 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<701 + 1024 * 0, true> { int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<701 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<702 + 1024 * 0, true> { int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<702 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<703 + 1024 * 0, true> { int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<703 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<704 + 1024 * 0, true> { int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<704 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<705 + 1024 * 0, true> { int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<705 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<706 + 1024 * 0, true> { int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<706 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<707 + 1024 * 0, true> { int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<707 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<708 + 1024 * 0, true> { int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<708 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<709 + 1024 * 0, true> { int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<709 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<710 + 1024 * 0, true> { int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<710 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<711 + 1024 * 0, true> { int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<711 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<712 + 1024 * 0, true> { int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<712 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<713 + 1024 * 0, true> { int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<713 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<714 + 1024 * 0, true> { int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<714 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<715 + 1024 * 0, true> { int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<715 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<716 + 1024 * 0, true> { int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<716 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<717 + 1024 * 0, true> { int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<717 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<718 + 1024 * 0, true> { int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<718 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<719 + 1024 * 0, true> { int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<719 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<720 + 1024 * 0, true> { int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<720 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<721 + 1024 * 0, true> { int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<721 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<722 + 1024 * 0, true> { int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<722 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<723 + 1024 * 0, true> { int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<723 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<724 + 1024 * 0, true> { int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<724 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<725 + 1024 * 0, true> { int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<725 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<726 + 1024 * 0, true> { int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<726 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<727 + 1024 * 0, true> { int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<727 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<728 + 1024 * 0, true> { int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<728 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<729 + 1024 * 0, true> { int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<729 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<730 + 1024 * 0, true> { int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<730 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<731 + 1024 * 0, true> { int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<731 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<732 + 1024 * 0, true> { int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<732 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<733 + 1024 * 0, true> { int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<733 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<734 + 1024 * 0, true> { int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<734 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<735 + 1024 * 0, true> { int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<735 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<736 + 1024 * 0, true> { int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<736 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<737 + 1024 * 0, true> { int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<737 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<738 + 1024 * 0, true> { int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<738 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<739 + 1024 * 0, true> { int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<739 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<740 + 1024 * 0, true> { int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<740 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<741 + 1024 * 0, true> { int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<741 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<742 + 1024 * 0, true> { int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<742 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<743 + 1024 * 0, true> { int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<743 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<744 + 1024 * 0, true> { int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<744 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<745 + 1024 * 0, true> { int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<745 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<746 + 1024 * 0, true> { int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<746 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<747 + 1024 * 0, true> { int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<747 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<748 + 1024 * 0, true> { int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<748 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<749 + 1024 * 0, true> { int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<749 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<750 + 1024 * 0, true> { int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<750 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<751 + 1024 * 0, true> { int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<751 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<752 + 1024 * 0, true> { int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<752 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<753 + 1024 * 0, true> { int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<753 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<754 + 1024 * 0, true> { int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<754 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<755 + 1024 * 0, true> { int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<755 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<756 + 1024 * 0, true> { int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<756 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<757 + 1024 * 0, true> { int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<757 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<758 + 1024 * 0, true> { int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<758 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<759 + 1024 * 0, true> { int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<759 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<760 + 1024 * 0, true> { int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<760 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<761 + 1024 * 0, true> { int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<761 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<762 + 1024 * 0, true> { int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<762 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<763 + 1024 * 0, true> { int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<763 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<764 + 1024 * 0, true> { int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<764 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<765 + 1024 * 0, true> { int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<765 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<766 + 1024 * 0, true> { int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<766 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<767 + 1024 * 0, true> { int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<767 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<768 + 1024 * 0, true> { int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<768 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<769 + 1024 * 0, true> { int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<769 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<770 + 1024 * 0, true> { int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<770 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<771 + 1024 * 0, true> { int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<771 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<772 + 1024 * 0, true> { int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<772 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<773 + 1024 * 0, true> { int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<773 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<774 + 1024 * 0, true> { int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<774 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<775 + 1024 * 0, true> { int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<775 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<776 + 1024 * 0, true> { int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<776 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<777 + 1024 * 0, true> { int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<777 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<778 + 1024 * 0, true> { int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<778 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<779 + 1024 * 0, true> { int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<779 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<780 + 1024 * 0, true> { int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<780 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<781 + 1024 * 0, true> { int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<781 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<782 + 1024 * 0, true> { int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<782 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<783 + 1024 * 0, true> { int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<783 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<784 + 1024 * 0, true> { int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<784 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<785 + 1024 * 0, true> { int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<785 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<786 + 1024 * 0, true> { int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<786 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<787 + 1024 * 0, true> { int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<787 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<788 + 1024 * 0, true> { int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<788 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<789 + 1024 * 0, true> { int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<789 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<790 + 1024 * 0, true> { int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<790 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<791 + 1024 * 0, true> { int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<791 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<792 + 1024 * 0, true> { int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<792 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<793 + 1024 * 0, true> { int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<793 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<794 + 1024 * 0, true> { int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<794 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<795 + 1024 * 0, true> { int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<795 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<796 + 1024 * 0, true> { int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<796 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<797 + 1024 * 0, true> { int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<797 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<798 + 1024 * 0, true> { int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<798 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<799 + 1024 * 0, true> { int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<799 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<800 + 1024 * 0, true> { int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<800 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<801 + 1024 * 0, true> { int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<801 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<802 + 1024 * 0, true> { int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<802 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<803 + 1024 * 0, true> { int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<803 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<804 + 1024 * 0, true> { int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<804 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<805 + 1024 * 0, true> { int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<805 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<806 + 1024 * 0, true> { int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<806 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<807 + 1024 * 0, true> { int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<807 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<808 + 1024 * 0, true> { int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<808 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<809 + 1024 * 0, true> { int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<809 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<810 + 1024 * 0, true> { int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<810 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<811 + 1024 * 0, true> { int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<811 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<812 + 1024 * 0, true> { int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<812 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<813 + 1024 * 0, true> { int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<813 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<814 + 1024 * 0, true> { int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<814 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<815 + 1024 * 0, true> { int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<815 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<816 + 1024 * 0, true> { int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<816 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<817 + 1024 * 0, true> { int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<817 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<818 + 1024 * 0, true> { int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<818 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<819 + 1024 * 0, true> { int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<819 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<820 + 1024 * 0, true> { int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<820 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<821 + 1024 * 0, true> { int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<821 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<822 + 1024 * 0, true> { int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<822 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<823 + 1024 * 0, true> { int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<823 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<824 + 1024 * 0, true> { int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<824 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<825 + 1024 * 0, true> { int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<825 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<826 + 1024 * 0, true> { int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<826 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<827 + 1024 * 0, true> { int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<827 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<828 + 1024 * 0, true> { int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<828 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<829 + 1024 * 0, true> { int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<829 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<830 + 1024 * 0, true> { int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<830 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<831 + 1024 * 0, true> { int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<831 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<832 + 1024 * 0, true> { int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<832 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<833 + 1024 * 0, true> { int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<833 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<834 + 1024 * 0, true> { int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<834 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<835 + 1024 * 0, true> { int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<835 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<836 + 1024 * 0, true> { int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<836 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<837 + 1024 * 0, true> { int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<837 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<838 + 1024 * 0, true> { int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<838 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<839 + 1024 * 0, true> { int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<839 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<840 + 1024 * 0, true> { int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<840 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<841 + 1024 * 0, true> { int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<841 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<842 + 1024 * 0, true> { int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<842 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<843 + 1024 * 0, true> { int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<843 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<844 + 1024 * 0, true> { int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<844 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<845 + 1024 * 0, true> { int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<845 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<846 + 1024 * 0, true> { int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<846 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<847 + 1024 * 0, true> { int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<847 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<848 + 1024 * 0, true> { int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<848 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<849 + 1024 * 0, true> { int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<849 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<850 + 1024 * 0, true> { int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<850 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<851 + 1024 * 0, true> { int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<851 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<852 + 1024 * 0, true> { int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<852 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<853 + 1024 * 0, true> { int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<853 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<854 + 1024 * 0, true> { int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<854 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<855 + 1024 * 0, true> { int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<855 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<856 + 1024 * 0, true> { int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<856 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<857 + 1024 * 0, true> { int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<857 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<858 + 1024 * 0, true> { int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<858 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<859 + 1024 * 0, true> { int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<859 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<860 + 1024 * 0, true> { int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<860 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<861 + 1024 * 0, true> { int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<861 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<862 + 1024 * 0, true> { int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<862 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<863 + 1024 * 0, true> { int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<863 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<864 + 1024 * 0, true> { int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<864 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<865 + 1024 * 0, true> { int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<865 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<866 + 1024 * 0, true> { int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<866 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<867 + 1024 * 0, true> { int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<867 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<868 + 1024 * 0, true> { int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<868 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<869 + 1024 * 0, true> { int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<869 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<870 + 1024 * 0, true> { int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<870 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<871 + 1024 * 0, true> { int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<871 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<872 + 1024 * 0, true> { int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<872 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<873 + 1024 * 0, true> { int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<873 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<874 + 1024 * 0, true> { int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<874 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<875 + 1024 * 0, true> { int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<875 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<876 + 1024 * 0, true> { int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<876 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<877 + 1024 * 0, true> { int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<877 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<878 + 1024 * 0, true> { int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<878 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<879 + 1024 * 0, true> { int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<879 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<880 + 1024 * 0, true> { int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<880 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<881 + 1024 * 0, true> { int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<881 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<882 + 1024 * 0, true> { int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<882 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<883 + 1024 * 0, true> { int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<883 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<884 + 1024 * 0, true> { int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<884 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<885 + 1024 * 0, true> { int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<885 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<886 + 1024 * 0, true> { int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<886 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<887 + 1024 * 0, true> { int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<887 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<888 + 1024 * 0, true> { int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<888 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<889 + 1024 * 0, true> { int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<889 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<890 + 1024 * 0, true> { int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<890 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<891 + 1024 * 0, true> { int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<891 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<892 + 1024 * 0, true> { int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<892 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<893 + 1024 * 0, true> { int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<893 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<894 + 1024 * 0, true> { int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<894 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<895 + 1024 * 0, true> { int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<895 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<896 + 1024 * 0, true> { int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<896 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<897 + 1024 * 0, true> { int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<897 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<898 + 1024 * 0, true> { int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<898 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<899 + 1024 * 0, true> { int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<899 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<900 + 1024 * 0, true> { int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<900 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<901 + 1024 * 0, true> { int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<901 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<902 + 1024 * 0, true> { int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<902 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<903 + 1024 * 0, true> { int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<903 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<904 + 1024 * 0, true> { int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<904 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<905 + 1024 * 0, true> { int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<905 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<906 + 1024 * 0, true> { int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<906 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<907 + 1024 * 0, true> { int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<907 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<908 + 1024 * 0, true> { int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<908 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<909 + 1024 * 0, true> { int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<909 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<910 + 1024 * 0, true> { int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<910 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<911 + 1024 * 0, true> { int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<911 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<912 + 1024 * 0, true> { int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<912 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<913 + 1024 * 0, true> { int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<913 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<914 + 1024 * 0, true> { int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<914 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<915 + 1024 * 0, true> { int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<915 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<916 + 1024 * 0, true> { int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<916 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<917 + 1024 * 0, true> { int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<917 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<918 + 1024 * 0, true> { int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<918 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<919 + 1024 * 0, true> { int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<919 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<920 + 1024 * 0, true> { int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<920 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<921 + 1024 * 0, true> { int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<921 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<922 + 1024 * 0, true> { int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<922 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<923 + 1024 * 0, true> { int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<923 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<924 + 1024 * 0, true> { int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<924 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<925 + 1024 * 0, true> { int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<925 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<926 + 1024 * 0, true> { int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<926 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<927 + 1024 * 0, true> { int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<927 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<928 + 1024 * 0, true> { int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<928 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<929 + 1024 * 0, true> { int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<929 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<930 + 1024 * 0, true> { int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<930 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<931 + 1024 * 0, true> { int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<931 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<932 + 1024 * 0, true> { int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<932 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<933 + 1024 * 0, true> { int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<933 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<934 + 1024 * 0, true> { int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<934 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<935 + 1024 * 0, true> { int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<935 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<936 + 1024 * 0, true> { int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<936 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<937 + 1024 * 0, true> { int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<937 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<938 + 1024 * 0, true> { int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<938 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<939 + 1024 * 0, true> { int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<939 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<940 + 1024 * 0, true> { int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<940 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<941 + 1024 * 0, true> { int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<941 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<942 + 1024 * 0, true> { int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<942 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<943 + 1024 * 0, true> { int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<943 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<944 + 1024 * 0, true> { int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<944 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<945 + 1024 * 0, true> { int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<945 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<946 + 1024 * 0, true> { int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<946 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<947 + 1024 * 0, true> { int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<947 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<948 + 1024 * 0, true> { int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<948 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<949 + 1024 * 0, true> { int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<949 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<950 + 1024 * 0, true> { int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<950 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<951 + 1024 * 0, true> { int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<951 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<952 + 1024 * 0, true> { int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<952 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<953 + 1024 * 0, true> { int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<953 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<954 + 1024 * 0, true> { int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<954 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<955 + 1024 * 0, true> { int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<955 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<956 + 1024 * 0, true> { int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<956 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<957 + 1024 * 0, true> { int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<957 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<958 + 1024 * 0, true> { int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<958 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<959 + 1024 * 0, true> { int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<959 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<960 + 1024 * 0, true> { int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<960 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<961 + 1024 * 0, true> { int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<961 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<962 + 1024 * 0, true> { int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<962 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<963 + 1024 * 0, true> { int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<963 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<964 + 1024 * 0, true> { int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<964 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<965 + 1024 * 0, true> { int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<965 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<966 + 1024 * 0, true> { int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<966 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<967 + 1024 * 0, true> { int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<967 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<968 + 1024 * 0, true> { int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<968 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<969 + 1024 * 0, true> { int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<969 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<970 + 1024 * 0, true> { int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<970 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<971 + 1024 * 0, true> { int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<971 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<972 + 1024 * 0, true> { int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<972 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<973 + 1024 * 0, true> { int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<973 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<974 + 1024 * 0, true> { int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<974 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<975 + 1024 * 0, true> { int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<975 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<976 + 1024 * 0, true> { int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<976 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<977 + 1024 * 0, true> { int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<977 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<978 + 1024 * 0, true> { int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<978 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<979 + 1024 * 0, true> { int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<979 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<980 + 1024 * 0, true> { int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<980 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<981 + 1024 * 0, true> { int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<981 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<982 + 1024 * 0, true> { int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<982 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<983 + 1024 * 0, true> { int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<983 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<984 + 1024 * 0, true> { int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<984 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<985 + 1024 * 0, true> { int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<985 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<986 + 1024 * 0, true> { int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<986 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<987 + 1024 * 0, true> { int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<987 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<988 + 1024 * 0, true> { int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<988 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<989 + 1024 * 0, true> { int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<989 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<990 + 1024 * 0, true> { int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<990 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<991 + 1024 * 0, true> { int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<991 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<992 + 1024 * 0, true> { int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<992 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<993 + 1024 * 0, true> { int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<993 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<994 + 1024 * 0, true> { int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<994 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<995 + 1024 * 0, true> { int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<995 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<996 + 1024 * 0, true> { int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<996 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<997 + 1024 * 0, true> { int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<997 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<998 + 1024 * 0, true> { int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<998 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<999 + 1024 * 0, true> { int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<999 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1000 + 1024 * 0, true> { int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1000 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1001 + 1024 * 0, true> { int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1001 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1002 + 1024 * 0, true> { int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1002 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1003 + 1024 * 0, true> { int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1003 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1004 + 1024 * 0, true> { int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1004 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1005 + 1024 * 0, true> { int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1005 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1006 + 1024 * 0, true> { int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1006 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1007 + 1024 * 0, true> { int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1007 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1008 + 1024 * 0, true> { int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1008 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1009 + 1024 * 0, true> { int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1009 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1010 + 1024 * 0, true> { int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1010 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1011 + 1024 * 0, true> { int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1011 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1012 + 1024 * 0, true> { int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1012 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1013 + 1024 * 0, true> { int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1013 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1014 + 1024 * 0, true> { int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1014 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1015 + 1024 * 0, true> { int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1015 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1016 + 1024 * 0, true> { int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1016 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1017 + 1024 * 0, true> { int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1017 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1018 + 1024 * 0, true> { int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1018 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1019 + 1024 * 0, true> { int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1019 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1020 + 1024 * 0, true> { int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1020 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1021 + 1024 * 0, true> { int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1021 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1022 + 1024 * 0, true> { int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1022 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1023 + 1024 * 0, true> { int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1023 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1024 + 1024 * 0, true> { int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1024 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, false>(){}; };
# 239 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_common.h" 2
# 562 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_common.h"
# 1 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot/etc/autopilot_ssdm_bits.h" 1
# 563 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_common.h" 2

extern "C" void _ssdm_string2bits(...);
# 574 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_common.h"
static inline unsigned char guess_radix(const char* s) {
  unsigned char rd = 10;
  const char* p = s;

  if (p[0] == '-' || p[0] == '+') ++p;

  if (p[0] == '0') {
    if (p[1] == 'b' || p[1] == 'B') {
      rd = 2;
    } else if (p[1] == 'o' || p[1] == 'O') {
      rd = 8;
    } else if (p[1] == 'x' || p[1] == 'X') {
      rd = 16;
    } else if (p[1] == 'd' || p[1] == 'D') {
      rd = 10;
    }
  }
  return rd;
}







typedef __fp16 half;
# 691 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_common.h"
inline __attribute__((always_inline)) ap_ulong doubleToRawBits(double pf) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned int floatToRawBits(float pf) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned short halfToRawBits(half pf) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__D = pf;
  return LD.__L;



}


inline __attribute__((always_inline)) double rawBitsToDouble(ap_ulong pi) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) float rawBitsToFloat(unsigned long pi) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) half rawBitsToHalf(unsigned short pi) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__L = pi;
  return LD.__D;






}
# 55 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h" 2
# 1 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h" 1
# 62 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
# 1 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int.h" 1
# 55 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int.h"
# 1 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h" 1
# 80 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_N, bool _AP_S>
struct retval;


template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};

template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};


template <>
struct retval<1, true> {
  typedef signed char Type;
};

template <>
struct retval<1, false> {
  typedef unsigned char Type;
};


template <>
struct retval<2, true> {
  typedef short Type;
};

template <>
struct retval<2, false> {
  typedef unsigned short Type;
};


template <>
struct retval<3, true> {
  typedef long Type;
};

template <>
struct retval<3, false> {
  typedef unsigned long Type;
};

template <>
struct retval<4, true> {
  typedef long Type;
};

template <>
struct retval<4, false> {
  typedef unsigned long Type;
};




template <int _AP_W2, bool _AP_S2>
struct _ap_int_factory;
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,true> { typedef ap_int<_AP_W2> type; };
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,false> { typedef ap_uint<_AP_W2> type; };

template <int _AP_W, bool _AP_S>
struct ap_int_base : public ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;







  typedef typename retval<(((_AP_W + 7) / 8) > (8) ? ((_AP_W + 7) / 8) : (8)), _AP_S>::Type RetType;

  static const int width = _AP_W;

  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };


    typedef ap_int_base<mult_w, mult_s> mult_base;
    typedef ap_int_base<plus_w, plus_s> plus_base;
    typedef ap_int_base<minus_w, minus_s> minus_base;
    typedef ap_int_base<logic_w, logic_s> logic_base;
    typedef ap_int_base<div_w, div_s> div_base;
    typedef ap_int_base<mod_w, mod_s> mod_base;
    typedef ap_int_base<_AP_W, _AP_S> arg1_base;

    typedef typename _ap_int_factory<mult_w, mult_s>::type mult;
    typedef typename _ap_int_factory<plus_w, plus_s>::type plus;
    typedef typename _ap_int_factory<minus_w, minus_s>::type minus;
    typedef typename _ap_int_factory<logic_w, logic_s>::type logic;
    typedef typename _ap_int_factory<div_w, div_s>::type div;
    typedef typename _ap_int_factory<mod_w, mod_s>::type mod;
    typedef typename _ap_int_factory<_AP_W, _AP_S>::type arg1;
    typedef bool reduce;
  };





  inline __attribute__((always_inline)) ap_int_base() {





  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }
# 237 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const bool op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const signed char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_slong op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_ulong op) { Base::V = op; }




  inline __attribute__((always_inline)) ap_int_base(half op) {
    ap_int_base<_AP_W, _AP_S> t((float)op);
    Base::V = t.V;
  }


  inline __attribute__((always_inline)) ap_int_base(float op) {
    const int BITS = 23 + 8 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = floatToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<8 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 23, BITS - 2); __Result__; });
    exp = exp - ((1L << (8 - 1L)) - 1L);

    ap_int_base<23 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 23 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23); __Result__; });


    if ((reg.V & 0x7ffffffful) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 23 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 23 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  inline __attribute__((always_inline)) ap_int_base(double op) {
    const int BITS = 52 + 11 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = doubleToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<11 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, BITS - 2); __Result__; });
    exp = exp - ((1L << (11 - 1L)) - 1L);

    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });


    if ((reg.V & 0x7fffffffffffffffull) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 52 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 52 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_range_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = (ref.get()).V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_bit_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>::_AP_WR,
                      false>
        tmp = ref.get();
    Base::V = tmp.V;
  }
# 391 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_int_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = (val.get()).V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = val.operator bool();
  }

  inline __attribute__((always_inline)) ap_int_base read() volatile {

    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }

  inline __attribute__((always_inline)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {

    Base::V = op2.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const volatile ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }
# 482 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base& operator=(bool op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(signed char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_ulong op) { Base::V = op; return *this; }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool)op2;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool)op;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }





  inline __attribute__((always_inline)) operator RetType() const { return (RetType)(Base::V); }




  inline __attribute__((always_inline)) bool to_bool() const { return (bool)(Base::V); }
  inline __attribute__((always_inline)) char to_char() const { return (char)(Base::V); }
  inline __attribute__((always_inline)) signed char to_schar() const { return (signed char)(Base::V); }
  inline __attribute__((always_inline)) unsigned char to_uchar() const { return (unsigned char)(Base::V); }
  inline __attribute__((always_inline)) short to_short() const { return (short)(Base::V); }
  inline __attribute__((always_inline)) unsigned short to_ushort() const { return (unsigned short)(Base::V); }
  inline __attribute__((always_inline)) int to_int() const { return (int)(Base::V); }
  inline __attribute__((always_inline)) unsigned to_uint() const { return (unsigned)(Base::V); }
  inline __attribute__((always_inline)) long to_long() const { return (long)(Base::V); }
  inline __attribute__((always_inline)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
  inline __attribute__((always_inline)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) float to_float() const { return (float)(Base::V); }
  inline __attribute__((always_inline)) double to_double() const { return (double)(Base::V); }
# 586 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) int length() const volatile { return _AP_W; }


  inline __attribute__((always_inline)) bool iszero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool sign() const {
    if (_AP_S &&
        ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) void clear(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void invert(int i) {
                                                           ;
    bool val = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    if (val)
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }

  inline __attribute__((always_inline)) bool test(int i) const {
                                                           ;
    return ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) ap_int_base& get() { return *this; }


  inline __attribute__((always_inline)) void set(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void set(int i, bool v) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) ap_int_base& lrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << n;
    typeof(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& rrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << (_AP_W - n);
    typeof(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& reverse() {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) void set_bit(int i, bool v) {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) bool get_bit(int i) const {
    return (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) void b_not() { Base::V = ~Base::V; }
# 699 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator *=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V *= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator +=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V += op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator -=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V -= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator /=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V /= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator %=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V %= op2.V; return *this; }
# 717 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator &=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V &= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator |=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V |= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator ^=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) ap_int_base& operator++() {
    operator+=((ap_int_base<1, false>)1);
    return *this;
  }
  inline __attribute__((always_inline)) ap_int_base& operator--() {
    operator-=((ap_int_base<1, false>)1);
    return *this;
  }




  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1, false>)1);
    return t;
  }
  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator--(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1, false>)1);
    return t;
  }




  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator+() const { return *this; }


  inline __attribute__((always_inline)) typename RType<1, false>::minus operator-() const {
    return ap_int_base<1, false>(0) - *this;
  }




  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }





  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator~() const {
    ap_int_base<_AP_W, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>(sh);
    } else
      return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V << op2.to_uint();
    return r;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<(sh);
    }
    return operator>>(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V >> op2.to_uint();
    return r;
  }
# 828 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>=(sh);
    } else
      return operator<<=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V <<= op2.to_uint();
    return *this;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<=(sh);
    }
    return operator>>=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V >>= op2.to_uint();
    return *this;
  }
# 877 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V == op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return !(Base::V == op2.V);
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V < op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V >= op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V > op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V <= op2.V;
  }




  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }
# 986 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool operator[](int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator[](const ap_int_base<_AP_W2, _AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool bit(int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool bit(const ap_int_base<_AP_W2, _AP_S2>& index) const {
    return bit(index.to_int());
  }
# 1053 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {

    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1UL), x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      ap_int_base<64, false> x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctzll(t.V);
    } else {
      enum { __N = (_AP_W + 63) / 64 };
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - i * 64 - 64, _AP_W - i * 64 - 1); __Result__; });
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t.V != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        enum { REST = (_AP_W - 1) % 64 };
        ap_int_base<64, false> x;
        x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, REST); __Result__; });
        t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 63 - REST, 63); __Result__; });
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this), a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator&(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator|(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator^(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }





  inline __attribute__((always_inline)) bool and_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nand_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool or_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nor_reduce() const { return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); })); }
  inline __attribute__((always_inline)) bool xor_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool xnor_reduce() const {
    return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }
# 1293 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2, bool sign = _AP_S) const {
    return 0;
  }

};
# 1352 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base ret; ret.V = lhs.V * rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base ret; ret.V = lhs.V + rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base ret; ret.V = lhs.V - rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V & rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V | rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V ^ rhs.V; return ret; }
# 1371 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: div_base ret; ret.V = op.V / op2.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mod_base ret; ret.V = op.V % op2.V; return ret; }
# 1399 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 - i_op; }
# 1427 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1461 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op * ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op + ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op - ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op / ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op % ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op & ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op | ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op ^ ap_int_base<1, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op * ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op + ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op - ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op / ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op % ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op & ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op | ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op ^ ap_int_base<8, CHAR_IS_SIGNED>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op * ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op + ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op - ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op / ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op % ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op & ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op | ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op ^ ap_int_base<8, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op * ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op + ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op - ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op / ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op % ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op & ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op | ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op ^ ap_int_base<8, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op * ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op + ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op - ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op / ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op % ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op & ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op | ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op ^ ap_int_base<_AP_SIZE_short, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op * ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op + ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op - ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op / ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op % ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op & ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op | ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op ^ ap_int_base<_AP_SIZE_short, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op * ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op + ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op - ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op / ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op % ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op & ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op | ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op ^ ap_int_base<_AP_SIZE_int, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op * ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op + ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op - ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op / ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op % ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op & ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op | ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op ^ ap_int_base<_AP_SIZE_int, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op * ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op + ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op - ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op / ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op % ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op & ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op | ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op ^ ap_int_base<_AP_SIZE_long, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op * ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op + ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op - ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op / ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op % ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op & ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op | ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op ^ ap_int_base<_AP_SIZE_long, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, false>(i_op); }
# 1500 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 1524 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
# 1555 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op += ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op -= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op *= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op /= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op %= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op &= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op |= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op ^= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >>= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <<= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op += ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op -= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op *= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op /= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op %= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op &= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op |= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op ^= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >>= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <<= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op += ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op -= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op *= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op /= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op %= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op &= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op |= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op ^= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >>= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <<= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op += ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op -= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op *= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op /= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op %= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op &= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op |= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op ^= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >>= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <<= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op += ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op -= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op *= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op /= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op %= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op &= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op |= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op ^= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >>= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <<= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op += ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op -= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op *= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op /= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op %= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op &= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op |= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op ^= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >>= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <<= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op += ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op -= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op *= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op /= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op %= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op &= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op |= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op ^= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >>= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <<= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op += ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op -= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op *= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op /= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op %= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op &= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op |= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op ^= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >>= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <<= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op += ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op -= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op *= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op /= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op %= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op &= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op |= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op ^= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >>= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <<= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op += ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op -= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op *= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op /= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op %= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op &= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op |= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op ^= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >>= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <<= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1592 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1629 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; }
# 1659 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<_AP_W2, false>(op2); }
# 1690 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator +=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator -=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator *=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator /=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator %=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator >>=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator <<=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1722 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator &=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator |=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator ^=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1741 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_int_base<_AP_W2, false>()); }
# 1768 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) + op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) - op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) * op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) / op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) % op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) & op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) | op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) ^ op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >> op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) << op2; }
# 1799 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator +=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator -=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator *=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator /=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator %=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator >>=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator <<=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1831 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator &=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator |=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator ^=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1850 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 == ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) == op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 != ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) != op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 > ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) > op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >= op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 < ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) < op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) <= op2; }
# 1958 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 == op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() == op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 != op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() != op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 > op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() > op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 >= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() >= op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 < op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() < op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 <= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() <= op2; }
# 56 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int.h" 2
# 1 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h" 1
# 73 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum {
    _AP_WR = _AP_W1 + _AP_W2,
  };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline __attribute__((always_inline)) ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& ref)
      : mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline __attribute__((always_inline)) ap_concat_ref(_AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) {}

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> Part1;
    Part1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(Part1);
    ap_int_base<_AP_W2, false> Part2;
    Part2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(Part2);
    return *this;
  }
# 116 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_concat_ref& operator=(bool val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(signed char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_slong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_ulong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(half val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(float val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(double val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }





  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }
  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((const ap_int_base<_AP_W3, false>)(val));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&
          val) {
    return operator=(val.to_ap_int_base());
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((ap_ulong)(bool)(val));
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_WR, false>() const { return get(); }

  inline __attribute__((always_inline)) operator ap_ulong() const { return get().to_uint64(); }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                       ap_range_ref<_AP_W3, _AP_S3> >
  operator,(const ap_range_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_range_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_range_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(volatile ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const volatile ap_int_base<_AP_W3, _AP_S3> &a2) {

    ap_int_base<_AP_W3, _AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(op));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator,(const ap_bit_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_bit_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                       ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >
  operator,(const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                         ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >(
        *this, const_cast<ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_WR, ap_concat_ref, _AP_W3,
      af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator,(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, _AP_W3,
        af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<
            af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, 1,
                    af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
      operator,(const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>
                    &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, 1,
        af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(
            a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator&(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() & a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator|(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() | a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator^(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() ^ a2;
  }
# 304 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_int_base<_AP_WR, false> get() const {
    ap_int_base<_AP_WR, false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W2, false> v2(mbv2);
    ap_int_base<_AP_W1, false> v1(mbv1);
    tmpVal.V = ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v2.V) __Repl2__ = v2.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, W_ref2 - 1); __Result__; });
    tmpVal.V =
        ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v1.V) __Repl2__ = v1.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    return tmpVal;
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> tmpVal1;
    tmpVal1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(tmpVal2);
  }

  inline __attribute__((always_inline)) int length() const { return mbv1.length() + mbv2.length(); }
};




template <int _AP_W, bool _AP_S>
struct ap_range_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:
  inline __attribute__((always_inline)) ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline __attribute__((always_inline)) ap_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) ap_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }
# 385 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_range_ref& operator=(bool val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(signed char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_slong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_ulong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(half val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(float val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(double val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    return operator=(val.to_ap_int_base());
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W, _AP_S> >
  operator,(ap_int_base<_AP_W, _AP_S>& a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W,
                         ap_int_base<_AP_W, _AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_range_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop < hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop <= hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<=(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

_ssdm_Unroll(0,0,0, "");

 ret &= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

_ssdm_Unroll(0,0,0, "");

 ret |= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

_ssdm_Unroll(0,0,0, "");

 ret ^= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }
# 733 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char radix = 2) const {
    return 0;
  }

};
# 772 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S>
struct ap_bit_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int d_index;

 public:

  inline __attribute__((always_inline)) ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline __attribute__((always_inline)) ap_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) ap_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}

  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
  inline __attribute__((always_inline)) bool to_bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
# 810 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(bool val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(signed char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_slong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_ulong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
# 832 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(half val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(float val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(double val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(val.V != 0));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_int_base<_AP_W2, false>)val);
  }



  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, ap_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        1, ap_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) bool get() { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    operator=(val);
  }

  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 1030 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }






template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1089 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::div operator /(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::div operator /(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::div operator /(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
# 1112 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
# 1140 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())+( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())-( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())*( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())/( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())%( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())&( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())|( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())^( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())>>( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())<<( rhs.operator ap_int_base<_AP_W2, false>()); }
# 1189 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::plus operator +( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::minus operator -( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mult operator *( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::div operator /( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mod operator %( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator &( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator |( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator ^( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator >>( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator <<( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
# 1336 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op2); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op1); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 1360 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }

template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
# 57 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int.h" 2




template <int _AP_W>
struct ap_int : ap_int_base<_AP_W, true> {
  typedef ap_int_base<_AP_W, true> Base;

  inline __attribute__((always_inline)) ap_int() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }
# 95 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_int(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_ulong val) { Base::V = val; }

  ap_int(double val) : Base(val) {}
  ap_int(float val) : Base(val) {}
  ap_int(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_int(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_int(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_int& operator=(const ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_int& operator=(const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_int<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_int<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};




template <int _AP_W>
struct ap_uint : ap_int_base<_AP_W, false> {
  typedef ap_int_base<_AP_W, false> Base;

  inline __attribute__((always_inline)) ap_uint() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }
# 236 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_uint(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_ulong val) { Base::V = val; }

  ap_uint(double val) : Base(val) {}
  ap_uint(float val) : Base(val) {}
  ap_uint(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_uint(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_uint(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_uint& operator=(const ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_uint& operator=(const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_uint<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_uint<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};
# 359 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int.h"
# 1 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_special.h" 1
# 61 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_special.h"
template <int _AP_W>
class complex<ap_int<_AP_W> > {
 public:
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}





  _Tp& real() { return _M_real; }
  const _Tp& real() const { return _M_real; }
  _Tp& imag() { return _M_imag; }
  const _Tp& imag() const { return _M_imag; }


  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 222 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int_special.h"
template <int _AP_W>
inline bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 360 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_int.h" 2
# 63 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h" 2
# 133 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W2, int _AP_I2, bool _AP_S2>
struct _ap_fixed_factory;
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, true> {
  typedef ap_fixed<_AP_W2, _AP_I2> type;
};
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, false> {
  typedef ap_ufixed<_AP_W2, _AP_I2> type;
};
# 154 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct ap_fixed_base : ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;
  static const int width = _AP_W;
  static const int iwidth = _AP_I;
  static const ap_q_mode qmode = _AP_Q;
  static const ap_o_mode omode = _AP_O;


  template <int _AP_W2, int _AP_I2, bool _AP_S2>
  struct RType {
    enum {
      _AP_F = _AP_W - _AP_I,
      F2 = _AP_W2 - _AP_I2,
      mult_w = _AP_W + _AP_W2,
      mult_i = _AP_I + _AP_I2,
      mult_s = _AP_S || _AP_S2,
      plus_w = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
               1 + ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      plus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1 +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      minus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,

      div_w = _AP_S2 + _AP_W + ((F2) > (0) ? (F2) : (0)),



      div_i = _AP_S2 + _AP_I + F2,
      div_s = _AP_S || _AP_S2,
      logic_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      logic_i = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };

    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> lhs;
    typedef ap_fixed_base<_AP_W2, _AP_I2, _AP_S2> rhs;

    typedef ap_fixed_base<mult_w, mult_i, mult_s> mult_base;
    typedef ap_fixed_base<plus_w, plus_i, plus_s> plus_base;
    typedef ap_fixed_base<minus_w, minus_i, minus_s> minus_base;
    typedef ap_fixed_base<logic_w, logic_i, logic_s> logic_base;
    typedef ap_fixed_base<div_w, div_i, div_s> div_base;
    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1_base;

    typedef typename _ap_fixed_factory<mult_w, mult_i, mult_s>::type mult;
    typedef typename _ap_fixed_factory<plus_w, plus_i, plus_s>::type plus;
    typedef typename _ap_fixed_factory<minus_w, minus_i, minus_s>::type minus;
    typedef typename _ap_fixed_factory<logic_w, logic_i, logic_s>::type logic;
    typedef typename _ap_fixed_factory<div_w, div_i, div_s>::type div;
    typedef typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type arg1;
  };

 private:
# 333 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) void report() {}




  inline __attribute__((always_inline)) void overflow_adjust(bool underflow, bool overflow, bool lD,
                              bool sign) {
    if (!underflow && !overflow) return;
    if (_AP_O == AP_WRAP) {
      if (_AP_N == 0) return;
      if (_AP_S) {


        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        if (_AP_N > 1) {

          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
      } else {

        ap_int_base<_AP_W, false> mask(-1);
        Base::V =
            ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 1); __Result__; });
      }
    } else if (_AP_O == AP_SAT_ZERO) {
      Base::V = 0;
    } else if (_AP_O == AP_WRAP_SM && _AP_S) {
      bool Ro = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      if (_AP_N == 0) {
        if (lD != Ro) {
          Base::V = ~Base::V;
          Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(lD) __Repl2__ = !!lD; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        }
      } else {
        if (_AP_N == 1 && sign != Ro) {
          Base::V = ~Base::V;
        } else if (_AP_N > 1) {
          bool lNo = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - _AP_N); __Result__; });
          if (lNo == sign) Base::V = ~Base::V;
          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
      }
    } else {
      if (_AP_S) {
        if (overflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          Base::V = ~Base::V;
        } else if (underflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          if (_AP_O == AP_SAT_SYM) Base::V |= 1;
        }
      } else {
        if (overflow)
          Base::V = ~(ap_int_base<_AP_W, false>(0).V);
        else if (underflow)
          Base::V = 0;
      }
    }
  }

  inline __attribute__((always_inline)) bool quantization_adjust(bool qb, bool r, bool s) {
    bool carry = (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    if (_AP_Q == AP_TRN) return false;
    if (_AP_Q == AP_RND_ZERO)
      qb &= s || r;
    else if (_AP_Q == AP_RND_MIN_INF)
      qb &= r;
    else if (_AP_Q == AP_RND_INF)
      qb &= !s || r;
    else if (_AP_Q == AP_RND_CONV)
      qb &= ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 0); __Result__; }) || r;
    else if (_AP_Q == AP_TRN_ZERO)
      qb = s && (qb || r);
    Base::V += qb;
    return carry && (!(bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }));
  }


 public:



  inline __attribute__((always_inline)) ap_fixed_base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }
# 477 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_fixed_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    *this = ((bool)op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
    *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (bool(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }
# 535 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const bool x) { ap_fixed_base<(1), (1), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const char x) { ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const signed char x) { ap_fixed_base<(8), (8), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned char x) { ap_fixed_base<(8), (8), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_slong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_ulong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)> tmp; tmp.V = x; *this = tmp; }







          ap_fixed_base(double d) {
    ap_int_base<64, false> ireg;
    ireg.V = doubleToRawBits(d);
    bool isneg = ({ typeof(ireg.V) __Val2__ = ireg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 63); __Result__; });

    ap_int_base<11 + 1, true> exp;
    ap_int_base<11, false> exp_tmp;
    exp_tmp.V =
        ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 52 + 11 - 1); __Result__; });
    exp = exp_tmp - ((1L << (11 - 1L)) - 1L);
    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));

    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });
    if (isneg) man = -man;
    if ((ireg.V & 0x7fffffffffffffffLL) == 0) {
      Base::V = 0;
    } else {
      int _AP_W2 = 52 + 2, _AP_I2 = exp.V + 2, _AP_F = _AP_W - _AP_I,
          F2 = _AP_W2 - _AP_I2;
      bool _AP_S2 = true,
           QUAN_INC = F2 > _AP_F &&
                      !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));
      bool carry = false;

      unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
      if (F2 == _AP_F)
        Base::V = man.V;
      else if (F2 > _AP_F) {
        if (sh_amt < 52 + 2)
          Base::V = man.V >> sh_amt;
        else {
          Base::V = isneg ? -1 : 0;
        }
        if ((_AP_Q != AP_TRN) && !((_AP_Q == AP_TRN_ZERO) && !_AP_S2)) {
          bool qb = (F2 - _AP_F > _AP_W2) ? isneg : (bool)({ typeof(man.V) __Val2__ = man.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

          bool r =
              (F2 > _AP_F + 1)
                  ? ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, (F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1)); __Result__; }) != 0


                  : false;
          carry = quantization_adjust(qb, r, isneg);
        }
      } else {
        Base::V = man.V;
        if (sh_amt < _AP_W)
          Base::V = Base::V << sh_amt;
        else
          Base::V = 0;
      }

      if ((_AP_O != AP_WRAP || _AP_N != 0) &&
          ((!_AP_S && _AP_S2) ||
           _AP_I - _AP_S <
               _AP_I2 - _AP_S2 +
                   (QUAN_INC ||
                    (_AP_S2 && (_AP_O == AP_SAT_SYM))))) {
        bool deleted_zeros = _AP_S2 ? true : !carry, deleted_ones = true;
        bool neg_src = isneg;
        bool lD = false;
        int pos1 = F2 - _AP_F + _AP_W;
        int pos2 = F2 - _AP_F + _AP_W + 1;
        bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
        if (pos1 < _AP_W2 && pos1 >= 0)

          lD = (man.V >> pos1) & 1;
        if (pos1 < _AP_W2) {
          bool Range1_all_ones = true;
          bool Range1_all_zeros = true;
          bool Range2_all_ones = true;
          ap_int_base<52 + 2, false> Range2;
          ap_int_base<52 + 2, false> all_ones(-1);

          if (pos2 >= 0 && pos2 < _AP_W2) {


            Range2.V = man.V;
            Range2.V >>= pos2;
            Range2_all_ones = Range2 == (all_ones >> pos2);
          } else if (pos2 < 0)
            Range2_all_ones = false;
          if (pos1 >= 0 && pos2 < _AP_W2) {
            Range1_all_ones = Range2_all_ones && lD;
            Range1_all_zeros = !Range2.V && !lD;
          } else if (pos2 == _AP_W2) {
            Range1_all_ones = lD;
            Range1_all_zeros = !lD;
          } else if (pos1 < 0) {
            Range1_all_zeros = !man.V;
            Range1_all_ones = false;
          }

          deleted_zeros =
              deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
          deleted_ones =
              carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
          neg_src = isneg && !(carry && Range1_all_ones);
        } else
          neg_src = isneg && newsignbit;
        bool neg_trg = _AP_S && newsignbit;
        bool overflow = (neg_trg || !deleted_zeros) && !isneg;
        bool underflow = (!neg_trg || !deleted_ones) && neg_src;
        if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
          underflow |=
              neg_src &&
              (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                         : true);
        overflow_adjust(underflow, overflow, lD, neg_src);
      }
    }
    report();
  }


  inline __attribute__((always_inline)) ap_fixed_base(float d) { *this = ap_fixed_base(double(d)); }


  inline __attribute__((always_inline)) ap_fixed_base(half d) { *this = ap_fixed_base(double(d)); }
# 688 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {

    const int _AP_F = _AP_W - _AP_I;
    const int F2 = _AP_W2 - _AP_I2;
    const int QUAN_INC =
          F2 > _AP_F && !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));

    if (!op) Base::V = 0;
    bool carry = false;
    bool signbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    bool isneg = signbit && _AP_S2;
    if (F2 == _AP_F)
      Base::V = op.V;
    else if (F2 > _AP_F) {
      unsigned int sh_amt = F2 - _AP_F;

      if (sh_amt < _AP_W2) {
        Base::V = op.V >> sh_amt;
      } else {
        Base::V = isneg ? -1 : 0;
      }
      if (_AP_Q != AP_TRN && !(_AP_Q == AP_TRN_ZERO && !_AP_S2)) {
        bool qbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

        bool qb = (F2 - _AP_F > _AP_W2) ? _AP_S2 && signbit : qbit;
        enum { hi = ((F2 - _AP_F - 2) < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1) };

        bool r = (F2 > _AP_F + 1) ? (({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, hi); __Result__; }) != 0) : false;
        carry = quantization_adjust(qb, r, isneg);
      }
    } else {
      unsigned sh_amt = _AP_F - F2;

      if (sh_amt < _AP_W) {
        if (_AP_W > _AP_W2) {

          Base::V = op.V;
          Base::V <<= sh_amt;
        } else {

          Base::V = op.V << sh_amt;
        }
      } else {
        Base::V = 0;
      }
    }

    if ((_AP_O != AP_WRAP || _AP_N != 0) &&
        ((!_AP_S && _AP_S2) ||
         _AP_I - _AP_S <
             _AP_I2 - _AP_S2 +
                 (QUAN_INC || (_AP_S2 && _AP_O == AP_SAT_SYM)))) {
      bool deleted_zeros = _AP_S2 ? true : !carry;
      bool deleted_ones = true;
      bool neg_src = isneg;
      bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      enum { pos1 = F2 - _AP_F + _AP_W, pos2 = F2 - _AP_F + _AP_W + 1 };
      bool lD = (pos1 < _AP_W2 && pos1 >= 0) ? ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), pos1); __Result__; })
                                             : false;
      if (pos1 < _AP_W2) {
        bool Range1_all_ones = true;
        bool Range1_all_zeros = true;
        bool Range2_all_ones = true;
        ap_int_base<_AP_W2, false> all_ones(-1);

        if (pos2 < _AP_W2 && pos2 >= 0) {
          ap_int_base<_AP_W2, false> Range2;
          Range2.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos2, _AP_W2 - 1); __Result__; });
          Range2_all_ones = Range2 == (all_ones >> pos2);
        } else if (pos2 < 0) {
          Range2_all_ones = false;
        }

        if (pos1 >= 0 && pos2 < _AP_W2) {
          ap_int_base<_AP_W2, false> Range1;
          Range1.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, _AP_W2 - 1); __Result__; });
          Range1_all_ones = Range1 == (all_ones >> pos1);
          Range1_all_zeros = !Range1.V;
        } else if (pos2 == _AP_W2) {
          Range1_all_ones = lD;
          Range1_all_zeros = !lD;
        } else if (pos1 < 0) {
          Range1_all_zeros = !op.V;
          Range1_all_ones = false;
        }

        deleted_zeros =
            deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
        deleted_ones =
            carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
        neg_src = isneg && !(carry && Range1_all_ones);
      } else
        neg_src = isneg && newsignbit;
      bool neg_trg = _AP_S && newsignbit;
      bool overflow = (neg_trg || !deleted_zeros) && !isneg;
      bool underflow = (!neg_trg || !deleted_ones) && neg_src;
      if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
        underflow |=
            neg_src &&
            (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                       : true);

      overflow_adjust(underflow, overflow, lD, neg_src);
    }
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(const_cast<const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& setBits(ap_ulong bv) {

    Base::V = bv;
    return *this;
  }


  static inline __attribute__((always_inline)) ap_fixed_base bitsToFixed(ap_ulong bv) {

    ap_fixed_base t;

    t.V = bv;



    return t;
  }





  inline __attribute__((always_inline)) ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> to_ap_int_base(
      bool Cnative = true) const {
    ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> ret;
    if (_AP_I == 0) {
      ret.V = 0;
    } else if (_AP_I > 0 && _AP_I <= _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_I, _AP_W - 1); __Result__; });
    } else if (_AP_I > _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 1); __Result__; });
      ret.V <<= (_AP_I - _AP_W);
    }
# 848 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
    if (Cnative && _AP_I < _AP_W) {

      if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }) && (_AP_I < _AP_W) &&
          (({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_I < 0 ? _AP_W - 1 : _AP_W - _AP_I - 1); __Result__; }) != 0))

        ++ret;
    } else {

    }
    return ret;
  };

 public:
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) operator ap_int_base<_AP_W2, _AP_S2>() const {
    return ap_int_base<_AP_W2, _AP_S2>(to_ap_int_base());
  }


  inline __attribute__((always_inline)) char to_char() const { return to_ap_int_base().to_char(); }

  inline __attribute__((always_inline)) int to_int() const { return to_ap_int_base().to_int(); }

  inline __attribute__((always_inline)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }

  inline __attribute__((always_inline)) ap_slong to_int64() const { return to_ap_int_base().to_int64(); }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return to_ap_int_base().to_uint64(); }



  inline __attribute__((always_inline)) double to_double() const {




    enum { BITS = 52 + 11 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (11 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 52;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    ap_ulong m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (ap_ulong)(tmp.V >> (lsb_index - 1))
                           : (ap_ulong)(tmp.V << (1 - lsb_index));
    } else {
      m = (ap_ulong)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;


    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 52 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52 + 11 - 1); __Result__; });


    return rawBitsToDouble(m);
  }



  inline __attribute__((always_inline)) float to_float() const {




    enum { BITS = 23 + 8 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (8 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 23;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned long m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned long)(tmp.V >> (lsb_index - 1))
                           : (unsigned long)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned long)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 23 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23 + 8 - 1); __Result__; });

    return rawBitsToFloat(m);
  }



  inline __attribute__((always_inline)) half to_half() const {




    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (5 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 10 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 10, 10 + 5 - 1); __Result__; });

    return rawBitsToHalf(m);
  }


  inline __attribute__((always_inline)) operator long double() const { return (long double)to_double(); }

  inline __attribute__((always_inline)) operator double() const { return to_double(); }

  inline __attribute__((always_inline)) operator float() const { return to_float(); }

  inline __attribute__((always_inline)) operator half() const { return to_half(); }

  inline __attribute__((always_inline)) operator bool() const { return (bool)Base::V != 0; }

  inline __attribute__((always_inline)) operator char() const { return (char)to_int(); }

  inline __attribute__((always_inline)) operator signed char() const { return (signed char)to_int(); }

  inline __attribute__((always_inline)) operator unsigned char() const { return (unsigned char)to_uint(); }

  inline __attribute__((always_inline)) operator short() const { return (short)to_int(); }

  inline __attribute__((always_inline)) operator unsigned short() const { return (unsigned short)to_uint(); }

  inline __attribute__((always_inline)) operator int() const { return to_int(); }

  inline __attribute__((always_inline)) operator unsigned int() const { return to_uint(); }



  inline __attribute__((always_inline)) operator long() const { return (long)to_int64(); }

  inline __attribute__((always_inline)) operator unsigned long() const { return (unsigned long)to_uint64(); }






  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }

  inline __attribute__((always_inline)) operator ap_slong() const { return to_int64(); }

  inline __attribute__((always_inline)) int length() const { return _AP_W; };
# 1074 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {


    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctzll(t.V);
    } else {
      enum {__N = (_AP_W + 63) / 64};
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.range(0, 63) = this->range(_AP_W - i * 64 - 64, _AP_W - i * 64 - 1);
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        t.range(63 - (_AP_W - 1) % 64, 63) = this->range(0, (_AP_W - 1) % 64);
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::mult operator*(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::mult_base r, t;
    r.V = Base::V;
    t.V = op2.V;
    r.V *= op2.V;
    return r;
  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::div operator/(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::div_base r;
# 1144 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
        ap_fixed_base<_AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)),_AP_I, _AP_S> t(*this);



        r.V = t.V / op2.V;
# 1177 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
    return r;
  }
# 1192 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: plus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V + rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: minus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V - rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V & rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V | rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V ^ rhs.V; return ret; }
# 1210 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator *=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator *(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator /=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator /(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator +=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator +(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator -=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator -(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator &=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator &(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator |=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator |(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator ^=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator ^(op2); return *this; }





  inline __attribute__((always_inline)) ap_fixed_base& operator++() {
    operator+=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator--() {
    operator-=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator++(int) {
    ap_fixed_base r(*this);
    operator++();
    return r;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator--(int) {
    ap_fixed_base r(*this);
    operator--();
    return r;
  }



  inline __attribute__((always_inline)) ap_fixed_base operator+() { return *this; }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W + 1, _AP_I + 1, true> operator-() const {
    ap_fixed_base<_AP_W + 1, _AP_I + 1, true> r(*this);
    r.V = -r.V;
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> getNeg() {
    ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> r(*this);
    r.V = -r.V;
    return r;
  }



  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }




  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S> operator~() const {
    ap_fixed_base<_AP_W, _AP_I, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift() const {
    ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }

  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift() const {
    ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }





  inline __attribute__((always_inline)) ap_fixed_base operator<<(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V << sh;
# 1328 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V >> sh;
# 1350 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
    return r;
  }


  inline __attribute__((always_inline)) ap_fixed_base operator<<(int sh) const {
    ap_fixed_base r;
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator>>(ush);
    } else {
      return operator<<(ush);
    }
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(int sh) const {
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator<<(ush);
    } else {
      return operator>>(ush);
    }
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, true>& op2) const {


    int sh = op2.to_int();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    int sh = op2.to_int();
    return operator>>(sh);
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator>>(sh);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator<<(op2.to_ap_int_base());
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator>>(op2.to_ap_int_base());
  }





  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const int sh) {
    *this = operator<<(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const unsigned int sh) {
    *this = operator<<(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const int sh) {
    *this = operator>>(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const unsigned int sh) {
    *this = operator>>(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }
# 1494 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V > op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V < op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V >= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V <= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator ==(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V == op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator !=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V != op2.V; return false; }





  inline __attribute__((always_inline)) bool operator >(double d) const { return to_double() > d; }
  inline __attribute__((always_inline)) bool operator <(double d) const { return to_double() < d; }
  inline __attribute__((always_inline)) bool operator >=(double d) const { return to_double() >= d; }
  inline __attribute__((always_inline)) bool operator <=(double d) const { return to_double() <= d; }
  inline __attribute__((always_inline)) bool operator ==(double d) const { return to_double() == d; }
  inline __attribute__((always_inline)) bool operator !=(double d) const { return to_double() != d; }


  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool operator[](unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool bit(unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> get_bit(
      const ap_int_base<_AP_W2, true>& index) {
    (static_cast<void>(0));

    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        this, index.to_int() + _AP_W - _AP_I);
  }

  inline __attribute__((always_inline)) bool get_bit(int index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index + _AP_W - _AP_I); __Result__; });

  }
# 1580 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) bool get_bit(const ap_int_base<_AP_W2, true>& index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index.to_int() + _AP_W - _AP_I); __Result__; });

  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(int Hi,
                                                                      int Lo) {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      int Hi, int Lo) const {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        const_cast<ap_fixed_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }

  inline __attribute__((always_inline)) bool is_neg() const {
    if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; })) return true;
    return false;
  }

  inline __attribute__((always_inline)) int wl() const { return _AP_W; }

  inline __attribute__((always_inline)) int iwl() const { return _AP_I; }

  inline __attribute__((always_inline)) ap_q_mode q_mode() const { return _AP_Q; }

  inline __attribute__((always_inline)) ap_o_mode o_mode() const { return _AP_O; }

  inline __attribute__((always_inline)) int n_bits() const { return _AP_N; }
# 1763 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) char* to_string(unsigned char radix = 2, bool sign = _AP_S) const {
    return 0;
  }

};

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_not(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
  ret.V = ~op.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_and(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V & op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_or(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V | op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_xor(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V ^ op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void neg(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
  ap_fixed_base<_AP_W2 + !_AP_S2, _AP_I2 + !_AP_S2, true, _AP_Q2, _AP_O2,
                _AP_N2>
      t;
  t.V = -op.V;
  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void lshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F2 = _AP_W2 - _AP_I2,
    _AP_I3 = ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)),
    _AP_W3 = _AP_I3 + F2,
  };

  ap_fixed_base<_AP_W3, _AP_I3, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  t.V <<= i;

  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void rshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F = _AP_W - _AP_I,
    F2 = _AP_W2 - _AP_I2,
    F3 = ((F) > (F2) ? (F) : (F2)),
    _AP_W3 = _AP_I2 + F3,
    sh = F - F2,
  };

  ap_fixed_base<_AP_W3, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  if (sh >= 0)
    t.V <<= (int) sh;
  t.V >>= i;

  ret = t;
}
# 2213 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ==(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator !=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }
# 2301 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::plus operator +( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::minus operator -( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::mult operator *( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::div operator /( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator &( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator |( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator ^( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator +=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator +=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator -=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator -=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator *=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator *=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator /=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator /=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator &=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator &=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator |=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator |=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator ^=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator ^=(op.to_ap_int_base()); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ==(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ==(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator !=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <=(op); }




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator==(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator==(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator!=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator!=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>=(op1);
}
# 56 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h" 2
# 1 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_ref.h" 1
# 70 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int d_index;

 public:
  inline __attribute__((always_inline)) af_bit_ref(
      const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {






  }

  inline __attribute__((always_inline)) af_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) af_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}


  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }



  inline __attribute__((always_inline)) af_bit_ref& operator=(bool val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
    return *this;
  }



  inline __attribute__((always_inline)) af_bit_ref& operator=(const af_bit_ref& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=(val != 0);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=(ap_int_base<_AP_W2 + _AP_W3, false>(val));
  }




  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(*this,
                                                                        op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, af_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        1, af_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() != op.get();
  }


  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 257 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:

  inline __attribute__((always_inline)) af_range_ref(
      const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}




  inline __attribute__((always_inline)) af_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {
# 287 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_ref.h"
  }

  inline __attribute__((always_inline)) af_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {
# 299 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_ref.h"
  }
# 311 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_ref.h"
  inline __attribute__((always_inline)) af_range_ref& operator=(const bool val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_slong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_ulong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const half val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const float val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const double val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }



  inline __attribute__((always_inline)) af_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }



  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) af_range_ref& operator=(const af_range_ref& val) {
    ap_int_base<_AP_W, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    const ap_int_base<_AP_W2 + _AP_W3, false> tmp(val);
    return operator=(tmp);
  }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator<(op2));
  }





  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, op);
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                    af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  inline __attribute__((always_inline)) operator ap_ulong() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret.to_uint64();
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> to_ap_int_base() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }


  inline __attribute__((always_inline)) char to_char() const {
    return (char)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }
# 633 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2) const {
    return 0;
  }

};
# 696 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
# 742 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<1, false>(op); }
# 57 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h" 2





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_fixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                      _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                               _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 111 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 145 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}





  inline __attribute__((always_inline)) ap_fixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_fixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_fixed(const char* s, signed char rd) : Base(s, rd) {}






  inline __attribute__((always_inline)) ap_fixed& operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_fixed& operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }
};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_ufixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                       _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                                _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 276 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 307 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}




  inline __attribute__((always_inline)) ap_ufixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_ufixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_ufixed(const char* s, signed char rd) : Base(s, rd) {}


  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O,
                                                 _AP_N>& op) volatile {
    Base::V = op.V;
  }
};
# 398 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h"
# 1 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_special.h" 1
# 61 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}





  _Tp& real() { return _M_real; }
  const _Tp& real() const { return _M_real; }
  _Tp& imag() { return _M_imag; }
  const _Tp& imag() const { return _M_imag; }


  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 221 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 399 "D:/vivado/xilinx/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h" 2
# 9 "./param.h" 2


typedef ap_fixed<16,6> f_16;
typedef float f_32;
using namespace std;

void conv1(f_32 input[1024], f_16 Kw_1[6][5][5], f_16 Kb_1[6], f_16 out[28][28][6]);
void pool1(f_16 in[28][28][6], f_16 out[14][14][6]);
void conv2(f_16 in[14][14][6], f_16 Kw_2[16][6][5][5], f_16 Kb_2[16], f_16 out[10][10][16]);
void pool2(f_16 in[10][10][16], f_16 out[5][5][16]);
void conv3(f_16 in[5][5][16], f_16 Kw_3[120][16][5][5], f_16 Kb_3[120], f_16 out[1][1][120]);
void reshape(f_16 in[1][1][120], f_16 out[120]);
void fc1(f_16 in[120], f_16 fc1_w[84][120], f_16 fc1_b[84],f_16 out[84]);
void fc2(f_16 in[84], f_16 fc2_w[10][84], f_16 fc2_b[10], f_16 out[10]);
void softmax(f_16 in[10], f_32 out[10]);
void lenet(f_32 input[1024], f_32 Cout[10]);
# 2 "lenet.cpp" 2


void lenet(f_32 input[1024], f_32 Cout[10])
{_ssdm_SpecArrayDimSize(input, 1024);_ssdm_SpecArrayDimSize(Cout, 10);
_ssdm_op_SpecInterface(Cout, "bram", 0, 0, "", 0, 0, "", "", "", 0, 0, 0, 0, "", "");
# 5 "lenet.cpp"

_ssdm_op_SpecInterface(input, "bram", 0, 0, "", 0, 0, "", "", "", 0, 0, 0, 0, "", "");
# 5 "lenet.cpp"

_ssdm_op_SpecInterface(0, "s_axilite", 0, 0, "", 0, 0, "Crtl", "", "", 0, 0, 0, 0, "", "");
# 5 "lenet.cpp"


 static f_16 C1_out[28][28][6];
 static f_16 P1_out[14][14][6];
 static f_16 C2_out[10][10][16];
 static f_16 P2_out[5][5][16];
 static f_16 C3_out[1][1][120];
 static f_16 Re_out[120];
 static f_16 FC1_out[84];
 static f_16 FC2_out[10];

 static f_16 K1_W[6][5][5] = {

# 1 "./c1_w.h" 1
-0.1683349609375,
0.1483154296875,
0.180419921875,
0.1512451171875,
0.1973876953125,
0.1839599609375,
0.0166168212890625,
0.290771484375,
0.2296142578125,
-0.12078857421875,
0.200927734375,
0.397705078125,
0.21923828125,
-0.0821533203125,
-0.320068359375,
0.215576171875,
0.473388671875,
0.390869140625,
-0.03466796875,
-0.072509765625,
0.267822265625,
0.408935546875,
0.38134765625,
-0.01224517822265625,
0.0985107421875,
-0.04669189453125,
-0.2373046875,
-0.298583984375,
-0.121826171875,
-0.04351806640625,
-0.1895751953125,
-0.306884765625,
0.0212249755859375,
-0.317138671875,
-0.2017822265625,
-0.0421142578125,
-0.107666015625,
-0.055145263671875,
-0.2371826171875,
-0.2391357421875,
0.264892578125,
-0.1097412109375,
-0.20166015625,
-0.0816650390625,
-0.167724609375,
0.3798828125,
0.034088134765625,
0.1275634765625,
-0.061492919921875,
-0.0819091796875,
0.01070404052734375,
-0.3037109375,
0.0875244140625,
0.229736328125,
0.2470703125,
-0.16796875,
-0.364013671875,
-0.10638427734375,
0.2529296875,
0.224853515625,
-0.315673828125,
-0.057769775390625,
-0.10406494140625,
0.3681640625,
0.0894775390625,
0.2044677734375,
-0.1063232421875,
0.349365234375,
0.173828125,
0.0712890625,
0.0994873046875,
0.2110595703125,
-0.02484130859375,
0.38623046875,
0.254638671875,
0.0928955078125,
0.2325439453125,
-0.05938720703125,
-0.35888671875,
-0.1312255859375,
0.1959228515625,
0.318359375,
-0.151611328125,
-0.197265625,
-0.471923828125,
0.1492919921875,
0.21826171875,
-0.095458984375,
-0.2073974609375,
-0.042877197265625,
0.44140625,
0.26220703125,
-0.0501708984375,
-0.06915283203125,
-0.07928466796875,
0.2861328125,
0.462646484375,
0.1461181640625,
0.310791015625,
0.233642578125,
-0.10528564453125,
-0.0687255859375,
-0.1409912109375,
-0.01236724853515625,
-0.1824951171875,
-0.0865478515625,
-0.1697998046875,
-0.1112060546875,
0.058074951171875,
-0.26611328125,
-0.06390380859375,
-0.1741943359375,
-0.23681640625,
0.093505859375,
-0.10125732421875,
-0.07196044921875,
-0.2086181640625,
-0.00213623046875,
-0.092041015625,
-0.153564453125,
-0.054168701171875,
0.018218994140625,
-0.2000732421875,
-0.05682373046875,
-0.229736328125,
0.33447265625,
0.0283355712890625,
0.004047393798828125,
-0.302978515625,
-0.294189453125,
0.12939453125,
0.39111328125,
0.007556915283203125,
0.1083984375,
-0.042266845703125,
0.1026611328125,
0.328369140625,
0.10791015625,
-0.00384521484375,
-0.0968017578125,
0.267578125,
0.50927734375,
0.2237548828125,
0.055389404296875,
0.039794921875,
0.2027587890625,
0.380615234375,
0.398193359375,
0.265869140625,
0.3828125
# 18 "lenet.cpp" 2
 };
 static f_16 K1_B[6] = {

# 1 "./c1_b.h" 1
0.405517578125,
0.3046875,
0.39453125,
0.37109375,
0.134521484375,
0.1619873046875
# 21 "lenet.cpp" 2
 };
 static f_16 K2_W[16][6][5][5] = {

# 1 "./c2_w.h" 1
0.058074951171875,
-0.0712890625,
-0.08441162109375,
-0.10589599609375,
0.0033969879150390625,
0.1334228515625,
0.11065673828125,
-0.035614013671875,
-0.1556396484375,
-0.11578369140625,
0.01453399658203125,
0.118896484375,
0.06427001953125,
-0.056243896484375,
-0.13720703125,
-0.010345458984375,
-0.06890869140625,
0.0440673828125,
0.0173797607421875,
0.06036376953125,
-0.06439208984375,
0.0157928466796875,
0.024810791015625,
0.024627685546875,
0.10174560546875,
0.07794189453125,
0.10064697265625,
0.07574462890625,
0.0487060546875,
-0.10662841796875,
-0.0300750732421875,
0.109130859375,
0.044464111328125,
0.083740234375,
-0.0077362060546875,
0.02117919921875,
0.055328369140625,
0.060882568359375,
0.1837158203125,
0.088134765625,
-0.0726318359375,
-0.049163818359375,
-0.014739990234375,
0.1329345703125,
0.1533203125,
0.099609375,
0.070556640625,
-0.07867431640625,
0.0204010009765625,
0.04656982421875,
-0.13134765625,
-0.0869140625,
0.049102783203125,
0.039764404296875,
-0.054290771484375,
-0.08319091796875,
-0.07342529296875,
-0.04644775390625,
-0.0235137939453125,
-0.0030078887939453125,
-0.062286376953125,
-0.00925445556640625,
-0.13427734375,
-0.06195068359375,
0.04541015625,
0.109130859375,
0.050079345703125,
0.041656494140625,
-0.05902099609375,
0.0202178955078125,
0.0826416015625,
0.033355712890625,
0.0029621124267578125,
-0.005970001220703125,
0.01375579833984375,
0.10040283203125,
0.06658935546875,
-0.12890625,
-0.1636962890625,
-0.019683837890625,
0.16162109375,
0.0850830078125,
0.061676025390625,
-0.1318359375,
-0.0394287109375,
0.019439697265625,
0.2015380859375,
0.2255859375,
0.091064453125,
-0.13330078125,
0.00809478759765625,
0.08599853515625,
0.1934814453125,
0.2186279296875,
0.07049560546875,
0.033050537109375,
-0.061279296875,
0.0251617431640625,
0.025970458984375,
0.11395263671875,
0.094482421875,
-0.037109375,
-0.01453399658203125,
0.06671142578125,
-0.01617431640625,
0.034912109375,
-0.0489501953125,
0.077880859375,
0.04754638671875,
-0.05133056640625,
-0.0810546875,
0.0002522468566894531,
0.0019121170043945312,
0.033538818359375,
-0.0145721435546875,
-0.04315185546875,
-0.059051513671875,
2.1219253540039062e-05,
0.03399658203125,
-0.032501220703125,
-0.003353118896484375,
-0.06060791015625,
0.026031494140625,
0.06890869140625,
-0.054595947265625,
0.0340576171875,
-0.00518035888671875,
-0.193115234375,
-0.1217041015625,
0.07806396484375,
0.1181640625,
0.0440673828125,
-0.006465911865234375,
-0.19140625,
-0.1217041015625,
0.012237548828125,
0.210205078125,
0.1578369140625,
-0.09857177734375,
-0.10382080078125,
-0.09136962890625,
0.07476806640625,
0.18896484375,
0.14599609375,
0.026336669921875,
-0.11370849609375,
-0.10528564453125,
0.06719970703125,
0.165771484375,
-0.005687713623046875,
0.0308990478515625,
0.0081939697265625,
0.12109375,
0.09722900390625,
0.034637451171875,
0.12030029296875,
0.10931396484375,
0.132080078125,
0.036712646484375,
0.05767822265625,
0.0589599609375,
-0.0125579833984375,
-0.05438232421875,
0.028778076171875,
0.0899658203125,
-0.0675048828125,
-0.0257110595703125,
-0.1634521484375,
-0.1083984375,
0.0093841552734375,
-0.006816864013671875,
-0.1309814453125,
-0.027557373046875,
-0.00856781005859375,
-0.058868408203125,
0.0105133056640625,
0.044097900390625,
0.06988525390625,
0.17431640625,
0.1517333984375,
0.019439697265625,
0.0237579345703125,
-0.07763671875,
-0.018829345703125,
0.100341796875,
0.007640838623046875,
-0.10565185546875,
-0.10015869140625,
-0.061370849609375,
-0.00787353515625,
-0.0021076202392578125,
0.097412109375,
0.07623291015625,
-0.0380859375,
-0.07281494140625,
0.140380859375,
0.060638427734375,
0.0743408203125,
0.09259033203125,
-0.0202484130859375,
0.0135498046875,
0.1544189453125,
0.11895751953125,
-0.03411865234375,
0.05194091796875,
0.1365966796875,
0.0941162109375,
0.0254058837890625,
0.0178680419921875,
0.032806396484375,
0.024169921875,
-0.07904052734375,
0.0198211669921875,
0.01280975341796875,
0.1319580078125,
-0.1092529296875,
-0.06219482421875,
-0.104736328125,
0.08697509765625,
0.0391845703125,
-0.05828857421875,
-0.09014892578125,
-0.03955078125,
-0.050384521484375,
0.07666015625,
0.09674072265625,
0.1337890625,
0.16357421875,
0.0294189453125,
0.067138671875,
0.084228515625,
0.10931396484375,
0.080810546875,
0.08709716796875,
0.09442138671875,
-0.041168212890625,
-0.09259033203125,
0.036163330078125,
0.0004508495330810547,
0.005054473876953125,
-0.11029052734375,
-0.1337890625,
-0.1351318359375,
-0.212158203125,
-0.07763671875,
-0.07012939453125,
0.0187530517578125,
-0.0270843505859375,
-0.04119873046875,
-0.09466552734375,
-0.004283905029296875,
0.067626953125,
0.0577392578125,
-0.060089111328125,
-0.0101470947265625,
-0.03399658203125,
-0.046966552734375,
-0.12451171875,
-0.061798095703125,
-0.05450439453125,
-0.07958984375,
-0.06011962890625,
-0.027679443359375,
0.0233917236328125,
-0.102783203125,
0.0472412109375,
0.0287933349609375,
0.072509765625,
-0.03814697265625,
-0.019287109375,
0.11322021484375,
0.07110595703125,
0.033203125,
0.07220458984375,
0.07147216796875,
0.0214996337890625,
0.0831298828125,
0.09698486328125,
0.06640625,
0.050994873046875,
0.170654296875,
0.1993408203125,
0.1815185546875,
0.0596923828125,
0.17529296875,
0.037445068359375,
-0.023529052734375,
-0.01433563232421875,
0.06866455078125,
0.047088623046875,
-0.047576904296875,
-0.1265869140625,
-0.09918212890625,
-0.0994873046875,
-0.11419677734375,
-0.00687408447265625,
-0.0880126953125,
-0.0030841827392578125,
-0.060455322265625,
-0.0877685546875,
-0.1455078125,
-0.130859375,
-0.11859130859375,
-0.03668212890625,
0.0992431640625,
-0.0206756591796875,
-0.0008935928344726562,
0.16162109375,
0.1995849609375,
0.1689453125,
0.014373779296875,
0.1932373046875,
0.19091796875,
0.12213134765625,
-0.035400390625,
0.157470703125,
0.18701171875,
-0.047027587890625,
-0.12200927734375,
0.01885986328125,
-0.041107177734375,
0.025421142578125,
0.04571533203125,
-0.064697265625,
0.0227203369140625,
0.10003662109375,
0.020843505859375,
-0.042449951171875,
0.0394287109375,
-0.0631103515625,
0.0570068359375,
-0.052581787109375,
-0.08209228515625,
-0.00016641616821289062,
0.094970703125,
-0.051971435546875,
-0.06536865234375,
-0.1636962890625,
-0.07989501953125,
0.05816650390625,
-0.0672607421875,
-0.1558837890625,
-0.1141357421875,
0.0860595703125,
0.040130615234375,
-0.0215606689453125,
0.007228851318359375,
0.08038330078125,
0.072265625,
0.045684814453125,
-0.02740478515625,
0.0217132568359375,
0.0384521484375,
0.08251953125,
0.043060302734375,
0.0025787353515625,
0.1168212890625,
0.169921875,
0.09503173828125,
-0.047210693359375,
0.09295654296875,
0.0885009765625,
0.0753173828125,
-0.11431884765625,
-0.03466796875,
0.05120849609375,
-0.0391845703125,
-0.10760498046875,
0.051544189453125,
-0.033294677734375,
-0.0660400390625,
-0.004871368408203125,
0.003376007080078125,
0.0118255615234375,
-0.0144500732421875,
0.0099639892578125,
-0.001628875732421875,
-0.0323486328125,
-0.07513427734375,
0.0697021484375,
0.02001953125,
0.10040283203125,
0.066650390625,
0.09454345703125,
0.1259765625,
-0.0182647705078125,
-0.00794219970703125,
0.08056640625,
-0.03350830078125,
0.056427001953125,
-0.012451171875,
0.0985107421875,
-0.009033203125,
-0.0443115234375,
-0.08563232421875,
0.08465576171875,
0.1368408203125,
-0.026885986328125,
0.03662109375,
-0.0182952880859375,
-0.031646728515625,
-0.026763916015625,
0.09552001953125,
0.011260986328125,
-0.033050537109375,
-0.05462646484375,
0.034698486328125,
-0.055389404296875,
-0.095947265625,
0.02447509765625,
-0.09259033203125,
-0.1021728515625,
-0.0241241455078125,
-0.007694244384765625,
-0.0679931640625,
-0.08819580078125,
0.049102783203125,
0.05426025390625,
0.074951171875,
0.00390625,
-0.00826263427734375,
0.03778076171875,
-0.05841064453125,
0.0036296844482421875,
-0.043426513671875,
-0.12451171875,
0.00800323486328125,
0.00820159912109375,
0.0036773681640625,
0.12646484375,
-0.059814453125,
-0.022613525390625,
0.134521484375,
0.07586669921875,
0.01433563232421875,
0.0748291015625,
0.021209716796875,
-0.00450897216796875,
-0.047332763671875,
-0.08050537109375,
0.0360107421875,
0.051483154296875,
-0.0626220703125,
-0.03326416015625,
-0.022003173828125,
0.00856781005859375,
-0.0023860931396484375,
0.077880859375,
0.021636962890625,
0.0052642822265625,
-0.09881591796875,
0.08721923828125,
0.03985595703125,
0.101318359375,
-0.052581787109375,
-0.08648681640625,
0.0141448974609375,
0.13427734375,
0.12176513671875,
0.0063934326171875,
-0.004924774169921875,
-0.0199737548828125,
-0.04608154296875,
0.1221923828125,
0.015655517578125,
-0.12359619140625,
-0.12249755859375,
0.03271484375,
0.0114288330078125,
0.034271240234375,
-0.1314697265625,
-0.0323486328125,
-0.004947662353515625,
0.032318115234375,
0.0968017578125,
-0.08642578125,
0.06005859375,
0.0088348388671875,
-0.007904052734375,
0.046173095703125,
-0.0018548965454101562,
-0.01374053955078125,
0.0399169921875,
-0.054168701171875,
0.050567626953125,
-0.06951904296875,
0.056915283203125,
-0.0287933349609375,
-0.0382080078125,
-0.049407958984375,
0.08953857421875,
-0.0069427490234375,
-0.09259033203125,
0.003955841064453125,
-0.0112152099609375,
-0.01800537109375,
-0.01468658447265625,
-0.0831298828125,
0.01641845703125,
-0.11627197265625,
-0.03656005859375,
0.0810546875,
-0.005474090576171875,
-0.0004439353942871094,
-0.03216552734375,
0.0906982421875,
-0.000728607177734375,
-0.00968170166015625,
0.05743408203125,
-0.0193023681640625,
-0.078857421875,
0.0287628173828125,
0.06768798828125,
-0.11871337890625,
0.01284027099609375,
-0.1055908203125,
-0.004673004150390625,
0.1041259765625,
-0.0665283203125,
0.026824951171875,
-0.11572265625,
0.0892333984375,
0.1346435546875,
0.05865478515625,
0.04461669921875,
-0.1090087890625,
0.0985107421875,
0.054840087890625,
0.06683349609375,
0.0239715576171875,
-0.027008056640625,
-0.052764892578125,
0.05706787109375,
0.2044677734375,
0.105224609375,
0.0152587890625,
-0.0433349609375,
0.0992431640625,
0.2054443359375,
0.068115234375,
-0.09912109375,
-0.1689453125,
-0.06402587890625,
0.1793212890625,
0.09051513671875,
-0.0672607421875,
-0.06817626953125,
-0.047637939453125,
0.1142578125,
0.09295654296875,
-0.0736083984375,
-0.0816650390625,
0.0014638900756835938,
-0.040802001953125,
-0.048614501953125,
-0.0634765625,
0.0289306640625,
-0.06494140625,
-0.071044921875,
0.01168060302734375,
-0.0173797607421875,
-0.0609130859375,
-0.0181884765625,
-0.09295654296875,
-0.075439453125,
0.034912109375,
0.021453857421875,
-0.02227783203125,
-0.0787353515625,
0.03515625,
0.11492919921875,
0.068115234375,
-0.08245849609375,
0.024932861328125,
0.030303955078125,
-0.02227783203125,
0.08447265625,
0.054595947265625,
0.07208251953125,
0.06103515625,
0.02783203125,
-0.0249786376953125,
0.10723876953125,
0.1297607421875,
0.10784912109375,
-0.049041748046875,
0.01666259765625,
0.044189453125,
0.1685791015625,
0.095703125,
-0.0061798095703125,
-0.17138671875,
0.08880615234375,
0.12396240234375,
0.1240234375,
-0.07891845703125,
-0.1549072265625,
-0.1053466796875,
0.1417236328125,
0.1392822265625,
-0.07012939453125,
0.004795074462890625,
-0.1536865234375,
-0.1005859375,
-0.1483154296875,
-0.08856201171875,
-0.0655517578125,
-0.0029048919677734375,
-0.09613037109375,
-0.1002197265625,
0.038848876953125,
-0.0026836395263671875,
-0.0008034706115722656,
0.09552001953125,
-0.0059356689453125,
0.114013671875,
0.058868408203125,
-0.00580596923828125,
0.09173583984375,
0.005146026611328125,
-0.008636474609375,
0.1002197265625,
0.049591064453125,
0.06671142578125,
-0.017791748046875,
0.034637451171875,
0.1458740234375,
0.1334228515625,
0.1295166015625,
0.1114501953125,
0.154541015625,
0.0965576171875,
0.14794921875,
0.06634521484375,
0.01334381103515625,
0.05352783203125,
0.1270751953125,
0.024200439453125,
0.126220703125,
0.1519775390625,
-0.0269317626953125,
0.0877685546875,
0.049224853515625,
0.0753173828125,
0.09173583984375,
-0.04254150390625,
-0.0482177734375,
-0.0112152099609375,
0.0477294921875,
0.0172882080078125,
-0.07745361328125,
-0.10614013671875,
-0.01354217529296875,
-0.0238189697265625,
-0.134765625,
0.0035686492919921875,
0.04010009765625,
-0.0238494873046875,
0.0036602020263671875,
0.0125732421875,
-0.056060791015625,
-0.01263427734375,
-0.049713134765625,
0.039642333984375,
0.019134521484375,
-0.002437591552734375,
0.00533294677734375,
0.0980224609375,
0.0301513671875,
0.04998779296875,
0.017974853515625,
0.06695556640625,
-0.02392578125,
-0.0596923828125,
0.0357666015625,
-0.028533935546875,
-0.03851318359375,
-0.1162109375,
-0.083984375,
-0.0950927734375,
0.0310211181640625,
0.058441162109375,
0.11334228515625,
-0.06866455078125,
0.023345947265625,
-0.031829833984375,
0.031402587890625,
0.06463623046875,
0.10528564453125,
0.07513427734375,
-0.05291748046875,
0.0859375,
0.152587890625,
0.1273193359375,
0.01233673095703125,
-0.0167083740234375,
0.0516357421875,
-0.0455322265625,
-0.056304931640625,
0.010528564453125,
-0.0211639404296875,
-0.00872802734375,
0.047454833984375,
0.015594482421875,
0.07965087890625,
0.0245513916015625,
0.0020847320556640625,
0.1123046875,
0.126708984375,
0.059539794921875,
0.056396484375,
-0.0487060546875,
0.02947998046875,
0.10443115234375,
-0.01397705078125,
-0.0914306640625,
0.022308349609375,
0.035064697265625,
0.07427978515625,
-0.031951904296875,
-0.05609130859375,
0.05767822265625,
0.05413818359375,
-0.0217742919921875,
-0.0094451904296875,
0.055023193359375,
0.0239715576171875,
-0.1314697265625,
-0.0849609375,
-0.041595458984375,
0.0027980804443359375,
-0.06158447265625,
-0.064697265625,
0.015380859375,
-0.0535888671875,
0.029388427734375,
0.132080078125,
0.09906005859375,
0.1416015625,
0.095703125,
0.1318359375,
0.1380615234375,
0.06060791015625,
0.0007486343383789062,
0.1474609375,
-0.026031494140625,
0.034759521484375,
-0.0147552490234375,
-0.047119140625,
0.06463623046875,
-0.06842041015625,
-0.10894775390625,
-0.06622314453125,
0.11981201171875,
0.1641845703125,
-0.12481689453125,
-0.123046875,
0.14404296875,
0.151123046875,
0.0467529296875,
-0.11688232421875,
-0.0119476318359375,
0.159423828125,
0.1361083984375,
-0.0711669921875,
-0.060882568359375,
0.131591796875,
0.1580810546875,
-0.01824951171875,
-0.09100341796875,
0.059967041015625,
0.032684326171875,
-0.04632568359375,
0.0145111083984375,
-0.02972412109375,
-0.126708984375,
-0.07916259765625,
-0.06988525390625,
-0.10064697265625,
-0.11187744140625,
0.01215362548828125,
-0.0867919921875,
-0.03338623046875,
-0.105712890625,
-0.046783447265625,
-0.08294677734375,
-0.139892578125,
-0.12347412109375,
-0.034637451171875,
-0.0823974609375,
-0.06964111328125,
-0.00330352783203125,
0.0062408447265625,
0.0289764404296875,
-0.01549530029296875,
-0.07568359375,
-0.063720703125,
0.006435394287109375,
-0.03228759765625,
0.015380859375,
-0.1077880859375,
0.0007767677307128906,
0.034515380859375,
0.1026611328125,
0.08984375,
-0.1253662109375,
0.013946533203125,
0.08935546875,
0.00949859619140625,
-0.09765625,
-0.009552001953125,
0.1324462890625,
0.034759521484375,
-0.08245849609375,
-0.10491943359375,
0.01395416259765625,
0.1187744140625,
0.01324462890625,
-0.11553955078125,
0.00908660888671875,
0.07635498046875,
0.016143798828125,
-0.0023956298828125,
-0.0457763671875,
-0.07489013671875,
-0.0594482421875,
-0.15966796875,
-0.1546630859375,
0.002117156982421875,
0.11004638671875,
-0.1195068359375,
-0.1861572265625,
-0.1556396484375,
0.072509765625,
0.06329345703125,
-0.10955810546875,
-0.06805419921875,
-0.0753173828125,
0.046661376953125,
0.055419921875,
-0.035003662109375,
-0.10595703125,
0.1087646484375,
0.14453125,
0.0274810791015625,
-0.032562255859375,
0.08258056640625,
0.054443359375,
-0.001598358154296875,
0.058074951171875,
-0.0026454925537109375,
-0.0263214111328125,
-0.12457275390625,
-0.05743408203125,
0.007335662841796875,
-0.047393798828125,
-0.058135986328125,
-0.095703125,
-0.11358642578125,
-0.03759765625,
0.0634765625,
-0.08642578125,
0.035980224609375,
0.0323486328125,
0.038116455078125,
0.0096435546875,
0.04864501953125,
0.04364013671875,
0.00540924072265625,
0.05731201171875,
-0.0112152099609375,
-0.0914306640625,
-0.0721435546875,
-0.004611968994140625,
-0.0811767578125,
0.04290771484375,
0.007564544677734375,
-0.0677490234375,
0.043121337890625,
0.1639404296875,
-0.058319091796875,
-0.054443359375,
0.04315185546875,
0.080078125,
0.06787109375,
-0.1195068359375,
-0.048370361328125,
0.08380126953125,
0.1396484375,
0.06634521484375,
-0.01480865478515625,
-0.07745361328125,
0.06494140625,
0.04522705078125,
0.06756591796875,
0.0009446144104003906,
0.0989990234375,
-0.01155853271484375,
0.050384521484375,
-0.06103515625,
-0.07537841796875,
0.0253753662109375,
0.023529052734375,
-0.004413604736328125,
0.08673095703125,
-0.0841064453125,
0.1094970703125,
0.0689697265625,
-0.043670654296875,
-0.088623046875,
0.0556640625,
0.07940673828125,
0.0592041015625,
-0.1370849609375,
-0.10107421875,
-0.0161285400390625,
0.126708984375,
-0.0211029052734375,
-0.060943603515625,
-0.076171875,
0.11724853515625,
0.04571533203125,
-0.0657958984375,
0.00884246826171875,
-0.072265625,
-0.0204620361328125,
0.01094818115234375,
-0.057952880859375,
-0.0199737548828125,
-0.05621337890625,
-0.06903076171875,
-0.07958984375,
-0.069091796875,
-0.07342529296875,
-0.04193115234375,
-0.09429931640625,
-0.131103515625,
-0.10101318359375,
-0.0704345703125,
-0.01171112060546875,
-0.07440185546875,
-0.1236572265625,
-0.0167694091796875,
-0.0443115234375,
0.00429534912109375,
-0.08587646484375,
-0.06915283203125,
-0.004558563232421875,
-0.06719970703125,
-0.0628662109375,
0.032928466796875,
0.126953125,
0.0291595458984375,
-0.0723876953125,
-0.11163330078125,
0.0675048828125,
0.1326904296875,
0.04486083984375,
-0.1353759765625,
-0.01611328125,
0.1083984375,
0.1358642578125,
-0.137939453125,
0.01265716552734375,
0.0185546875,
0.1827392578125,
-0.00292205810546875,
-0.042572021484375,
-0.0298004150390625,
-0.07684326171875,
0.068115234375,
-0.09222412109375,
0.0311279296875,
-0.023284912109375,
-0.032073974609375,
-0.0219268798828125,
0.0416259765625,
0.0006527900695800781,
-0.01045989990234375,
-0.031005859375,
-0.09075927734375,
0.007045745849609375,
0.11663818359375,
0.0406494140625,
-0.05560302734375,
-0.0565185546875,
0.094970703125,
0.110595703125,
-0.032867431640625,
-0.06842041015625,
-0.1053466796875,
0.1322021484375,
0.146484375,
-0.08734130859375,
-0.101806640625,
0.06683349609375,
0.1263427734375,
0.003780364990234375,
-0.001323699951171875,
-0.0225982666015625,
0.041168212890625,
-0.0997314453125,
-0.0140533447265625,
0.0149993896484375,
0.021392822265625,
-0.04205322265625,
-0.04925537109375,
-5.3763389587402344e-05,
0.005863189697265625,
-0.06793212890625,
0.0587158203125,
-0.10528564453125,
-0.03887939453125,
-0.0204010009765625,
-0.0426025390625,
0.0540771484375,
-0.06378173828125,
0.06304931640625,
0.07452392578125,
0.029052734375,
-0.08441162109375,
0.054595947265625,
-0.083984375,
0.035491943359375,
-0.0300140380859375,
-0.04803466796875,
0.0200042724609375,
-0.004398345947265625,
0.040130615234375,
-0.0203857421875,
-0.0687255859375,
0.048919677734375,
0.0887451171875,
0.051513671875,
-0.10302734375,
-0.08306884765625,
0.0992431640625,
0.130126953125,
-0.1322021484375,
-0.1263427734375,
0.025726318359375,
0.1007080078125,
-0.01549530029296875,
-0.07232666015625,
-0.004467010498046875,
0.06170654296875,
0.0487060546875,
0.045745849609375,
-0.0509033203125,
8.225440979003906e-05,
0.06573486328125,
-0.054595947265625,
-0.075927734375,
-0.0162353515625,
0.0867919921875,
0.048126220703125,
-0.1285400390625,
0.04052734375,
0.11029052734375,
-0.032073974609375,
-0.0755615234375,
0.09649658203125,
0.0706787109375,
0.12469482421875,
0.08404541015625,
-0.0245513916015625,
0.153564453125,
0.02899169921875,
0.043792724609375,
0.06976318359375,
0.0679931640625,
0.007843017578125,
-0.01202392578125,
0.02099609375,
0.0223846435546875,
0.06640625,
-0.04736328125,
0.0163116455078125,
0.007534027099609375,
0.044769287109375,
-0.047027587890625,
0.01354217529296875,
-0.0305328369140625,
0.054168701171875,
-0.067138671875,
0.0184173583984375,
-0.09088134765625,
-0.09112548828125,
0.051300048828125,
-0.005222320556640625,
-0.09954833984375,
-0.037445068359375,
-0.055084228515625,
0.031158447265625,
0.071044921875,
-0.042724609375,
-0.06787109375,
0.0111846923828125,
-0.025238037109375,
0.10308837890625,
-0.05242919921875,
-0.06048583984375,
0.07421875,
-0.051605224609375,
-0.03973388671875,
-0.1217041015625,
-0.025909423828125,
0.009979248046875,
0.0179290771484375,
0.0694580078125,
0.0799560546875,
0.0199432373046875,
0.1270751953125,
0.09783935546875,
-0.07696533203125,
0.00437164306640625,
0.012908935546875,
-0.0250244140625,
-0.042144775390625,
-0.0022335052490234375,
0.10888671875,
0.04547119140625,
0.0005884170532226562,
-0.0013170242309570312,
-0.001068115234375,
0.0718994140625,
0.0650634765625,
-0.10321044921875,
-0.0108642578125,
0.12103271484375,
-0.010711669921875,
0.0460205078125,
-0.0298309326171875,
-0.00794219970703125,
0.00827789306640625,
0.085693359375,
0.004703521728515625,
0.06854248046875,
0.08538818359375,
0.0909423828125,
0.012451171875,
0.0682373046875,
0.09649658203125,
0.012908935546875,
-0.055023193359375,
0.061309814453125,
0.048553466796875,
-0.0032520294189453125,
0.0243988037109375,
0.07373046875,
-0.0256805419921875,
-2.3126602172851562e-05,
-0.0237274169921875,
0.0838623046875,
0.08282470703125,
-0.0093841552734375,
-0.07232666015625,
0.06048583984375,
0.07244873046875,
0.04473876953125,
0.036590576171875,
0.038177490234375,
-0.06353759765625,
-0.07379150390625,
-0.039337158203125,
0.0249176025390625,
-0.09259033203125,
-0.060791015625,
-0.049102783203125,
0.028839111328125,
-0.06439208984375,
0.0188751220703125,
-0.0557861328125,
0.0234832763671875,
0.04144287109375,
-0.0204925537109375,
-0.0823974609375,
-0.09625244140625,
0.08892822265625,
0.0362548828125,
0.0290069580078125,
-0.06463623046875,
-0.03314208984375,
0.1083984375,
0.1285400390625,
-0.021331787109375,
0.045654296875,
0.037506103515625,
0.006900787353515625,
0.036590576171875,
0.0160980224609375,
0.015899658203125,
-0.045806884765625,
-0.04827880859375,
-0.04815673828125,
0.04559326171875,
0.08160400390625,
0.10601806640625,
-0.01483154296875,
0.0833740234375,
0.05938720703125,
0.138427734375,
0.03729248046875,
-0.1676025390625,
-0.172607421875,
0.09466552734375,
0.1337890625,
-0.07806396484375,
-0.2015380859375,
0.003299713134765625,
0.1424560546875,
0.1639404296875,
-0.1077880859375,
-0.16796875,
0.003643035888671875,
0.11669921875,
0.043670654296875,
-0.2041015625,
0.01374053955078125,
0.09228515625,
0.056915283203125,
-0.033477783203125,
0.0045166015625,
-0.026214599609375,
0.0721435546875,
0.023529052734375,
0.09112548828125,
0.02264404296875,
0.0297088623046875,
-0.07354736328125,
-0.09503173828125,
0.063232421875,
0.07330322265625,
-0.0193939208984375,
-0.03125,
-0.004451751708984375,
-0.05242919921875,
0.03887939453125,
0.0911865234375,
0.037811279296875,
0.02618408203125,
0.08856201171875,
0.02203369140625,
-0.0241546630859375,
-0.09063720703125,
0.03656005859375,
0.033447265625,
0.0239410400390625,
0.05609130859375,
0.050506591796875,
9.870529174804688e-05,
0.0210723876953125,
-0.06817626953125,
-0.07470703125,
0.05804443359375,
0.08447265625,
-0.032623291015625,
-0.201171875,
0.053253173828125,
0.053375244140625,
0.167236328125,
-0.156005859375,
-0.12017822265625,
0.1148681640625,
0.04522705078125,
0.07452392578125,
-0.1507568359375,
-0.0295257568359375,
0.02203369140625,
0.0276031494140625,
0.038726806640625,
-0.0218505859375,
-0.030548095703125,
0.10101318359375,
0.1103515625,
-0.103271484375,
0.059356689453125,
0.06939697265625,
-0.059661865234375,
-0.092529296875,
-0.12176513671875,
0.168212890625,
-0.002490997314453125,
-0.187744140625,
-0.08428955078125,
0.07080078125,
0.114990234375,
-0.0218048095703125,
-0.188232421875,
0.053955078125,
0.061553955078125,
0.0701904296875,
-0.1160888671875,
-0.0682373046875,
0.0870361328125,
0.0302581787109375,
0.078857421875,
-0.04730224609375,
-0.08203125,
0.08795166015625,
0.030548095703125,
-0.042266845703125,
-0.03143310546875,
0.00365447998046875,
0.057403564453125,
-0.04150390625,
-0.0009412765502929688,
0.1256103515625,
0.117919921875,
0.02435302734375,
-0.03363037109375,
-0.019317626953125,
0.1024169921875,
0.00464630126953125,
-0.01139068603515625,
-0.04962158203125,
0.07977294921875,
0.05517578125,
0.08514404296875,
-0.01313018798828125,
-0.032257080078125,
0.009521484375,
0.069091796875,
-0.059173583984375,
-0.022308349609375,
0.040802001953125,
0.13525390625,
-0.01654052734375,
-0.022491455078125,
-0.1884765625,
0.043914794921875,
0.1324462890625,
0.05718994140625,
-0.10260009765625,
-0.10772705078125,
-0.01306915283203125,
0.140380859375,
-0.103271484375,
-0.1448974609375,
-0.072998046875,
0.049835205078125,
0.061614990234375,
-0.051971435546875,
-0.1573486328125,
-0.06536865234375,
0.061126708984375,
0.07916259765625,
-0.0299224853515625,
-0.01148223876953125,
0.0386962890625,
0.01451873779296875,
-0.032928466796875,
-0.1336669921875,
0.1455078125,
0.11767578125,
0.0452880859375,
-0.109130859375,
-0.09991455078125,
0.189208984375,
0.04998779296875,
0.0019893646240234375,
-0.0853271484375,
-0.0124053955078125,
0.14013671875,
-0.032989501953125,
-0.037750244140625,
-0.01560211181640625,
-0.01476287841796875,
0.043426513671875,
-0.05908203125,
0.01033782958984375,
0.019317626953125,
0.07470703125,
-0.0379638671875,
-0.0033550262451171875,
0.007781982421875,
0.06402587890625,
-0.043853759765625,
-0.1241455078125,
-0.08551025390625,
0.05120849609375,
0.08404541015625,
-0.0292816162109375,
-0.0811767578125,
0.0194854736328125,
0.0577392578125,
0.06488037109375,
0.0174713134765625,
0.0271759033203125,
0.039154052734375,
0.047760009765625,
0.05780029296875,
0.020965576171875,
0.0255279541015625,
0.016204833984375,
0.041656494140625,
-0.0352783203125,
0.0928955078125,
0.03680419921875,
-0.004016876220703125,
-0.05352783203125,
-0.11358642578125,
0.11376953125,
0.06658935546875,
-0.0270843505859375,
-0.11431884765625,
-0.037750244140625,
0.07049560546875,
0.04119873046875,
-0.09967041015625,
0.01346588134765625,
-0.016876220703125,
0.1011962890625,
-0.007289886474609375,
-0.0357666015625,
-0.07452392578125,
-0.0408935546875,
0.1514892578125,
0.0210723876953125,
-0.0021228790283203125,
-0.071533203125,
-0.047454833984375,
0.0117950439453125,
-0.005962371826171875,
-0.0072479248046875,
0.00205230712890625,
-0.03277587890625,
-0.149658203125,
-0.0679931640625,
0.101806640625,
0.1285400390625,
0.037811279296875,
-0.2218017578125,
0.05938720703125,
0.1802978515625,
0.007556915283203125,
-0.0277862548828125,
-0.08673095703125,
0.01509857177734375,
0.195068359375,
0.0479736328125,
-0.06024169921875,
-0.09466552734375,
0.043701171875,
0.0955810546875,
-0.03375244140625,
0.00971221923828125,
-0.036285400390625,
0.12408447265625,
-0.06072998046875,
-0.038299560546875,
0.085693359375,
-0.036590576171875,
-0.0138397216796875,
-0.007617950439453125,
0.06976318359375,
0.06500244140625,
-0.076416015625,
0.0302734375,
0.01253509521484375,
0.064208984375,
0.001766204833984375,
0.08843994140625,
-0.060516357421875,
0.01248931884765625,
-0.007297515869140625,
0.07489013671875,
-0.055084228515625,
0.063232421875,
0.058746337890625,
0.09100341796875,
-0.03302001953125,
0.03125,
0.0217132568359375,
-0.08526611328125,
-0.0009474754333496094,
-0.1011962890625,
-0.12890625,
0.00771331787109375,
0.17333984375,
0.161865234375,
0.00714874267578125,
-0.10284423828125,
-0.00841522216796875,
0.024688720703125,
0.1368408203125,
-0.0292510986328125,
-0.108154296875,
0.004673004150390625,
0.1324462890625,
0.1219482421875,
-0.017578125,
-0.10284423828125,
0.018585205078125,
0.06475830078125,
0.1063232421875,
-0.040771484375,
-0.005096435546875,
0.11102294921875,
-0.0740966796875,
0.035614013671875,
-0.0124359130859375,
-0.0134735107421875,
-0.08221435546875,
-0.032318115234375,
-0.03070068359375,
0.07623291015625,
0.09368896484375,
0.0266265869140625,
0.044219970703125,
0.04962158203125,
0.0875244140625,
0.11395263671875,
0.049224853515625,
0.083984375,
-0.0634765625,
-0.01197052001953125,
0.104736328125,
0.0938720703125,
0.0860595703125,
-0.051422119140625,
-0.05364990234375,
0.047271728515625,
0.025146484375,
0.043212890625,
0.061676025390625,
0.07537841796875,
0.00980377197265625,
0.058380126953125,
0.019317626953125,
0.09906005859375,
0.00958251953125,
0.053619384765625,
0.024017333984375,
-0.061279296875,
0.06591796875,
-0.0249176025390625,
-0.036376953125,
-0.01114654541015625,
0.026824951171875,
-0.005100250244140625,
-0.006473541259765625,
0.053863525390625,
-0.002429962158203125,
-0.0154571533203125,
-0.041229248046875,
-0.04949951171875,
0.018463134765625,
0.0399169921875,
0.02545166015625,
0.0733642578125,
0.0281982421875,
-0.046905517578125,
-0.045379638671875,
-0.07080078125,
0.035858154296875,
0.0738525390625,
-0.01898193359375,
0.041656494140625,
-0.0138092041015625,
-0.041168212890625,
0.0478515625,
-0.060638427734375,
0.055816650390625,
0.00923919677734375,
0.01290130615234375,
0.053009033203125,
0.0826416015625,
0.06512451171875,
0.08740234375,
-0.042327880859375,
0.0284576416015625,
-0.099365234375,
-0.038177490234375,
0.05010986328125,
0.01256561279296875,
-0.06646728515625,
0.08489990234375,
0.025482177734375,
0.07318115234375,
-0.06463623046875,
-0.0081939697265625,
0.1209716796875,
0.14111328125,
0.09912109375,
-0.0148468017578125,
0.0950927734375,
0.0802001953125,
0.141845703125,
0.1365966796875,
0.0299835205078125,
0.0501708984375,
0.1297607421875,
0.1300048828125,
0.0231781005859375,
0.0102081298828125,
0.06610107421875,
-0.004302978515625,
-0.05816650390625,
-0.00954437255859375,
0.017852783203125,
0.09759521484375,
0.0010662078857421875,
0.0838623046875,
0.025787353515625,
-0.0137481689453125,
-0.0382080078125,
0.07208251953125,
0.07073974609375,
0.022674560546875,
-0.00608062744140625,
-0.04534912109375,
-0.037017822265625,
-0.0806884765625,
0.0007996559143066406,
0.0109100341796875,
-0.054718017578125,
-0.041656494140625,
-0.09210205078125,
-0.09454345703125,
-0.050872802734375,
-0.044342041015625,
-0.04351806640625,
0.000637054443359375,
0.0142059326171875,
0.04705810546875,
0.003398895263671875,
-0.076416015625,
0.0121612548828125,
0.01255035400390625,
0.03277587890625,
0.0650634765625,
0.09515380859375,
0.0911865234375,
0.006282806396484375,
-0.076904296875,
0.0753173828125,
0.090087890625,
0.0914306640625,
0.020416259765625,
-0.01074981689453125,
0.084228515625,
0.06610107421875,
0.05517578125,
-0.027069091796875,
-0.0203094482421875,
-0.045074462890625,
0.07720947265625,
0.1007080078125,
-0.041900634765625,
-0.004512786865234375,
0.044586181640625,
-0.0548095703125,
-0.055267333984375,
0.0214996337890625,
0.00734710693359375,
-0.038116455078125,
-0.08673095703125,
-0.08056640625,
-0.068603515625,
0.1312255859375,
0.1259765625,
-0.1160888671875,
-0.1568603515625,
0.0196380615234375,
0.1170654296875,
0.1275634765625,
-0.10797119140625,
-0.1744384765625,
-0.0302734375,
0.1107177734375,
-0.05364990234375,
-0.0892333984375,
-0.1549072265625,
-0.005374908447265625,
0.0020580291748046875,
0.01152801513671875,
0.06671142578125,
0.035400390625,
0.040313720703125,
0.03643798828125,
0.05242919921875,
0.0168609619140625,
0.0254669189453125,
0.0205078125,
0.049560546875,
0.1259765625,
0.040679931640625,
-0.007678985595703125,
0.0645751953125,
0.05792236328125,
0.1180419921875,
0.1282958984375,
0.10369873046875,
0.0999755859375,
0.044158935546875,
0.006786346435546875,
0.07373046875,
0.10150146484375,
0.0239410400390625,
-0.03314208984375,
-0.10089111328125,
-0.046142578125,
0.0997314453125,
0.08135986328125,
-0.08416748046875,
-0.0552978515625,
0.022125244140625,
0.08685302734375,
0.08648681640625,
0.06622314453125,
-0.11920166015625,
-0.0570068359375,
0.0262908935546875,
0.11895751953125,
0.052886962890625,
-0.07843017578125,
-0.013092041015625,
-0.0919189453125,
-0.03887939453125,
0.061553955078125,
-0.1343994140625,
-0.10296630859375,
-0.07080078125,
0.104736328125,
0.08013916015625,
-0.1031494140625,
-0.03387451171875,
-0.0479736328125,
-0.03778076171875,
-0.00841522216796875,
-0.01348114013671875,
-0.09906005859375,
-0.016937255859375,
0.024932861328125,
0.00859832763671875,
0.006023406982421875,
-0.07952880859375,
-0.1268310546875,
-0.036163330078125,
-0.0226898193359375,
0.1309814453125,
-0.07427978515625,
-0.08807373046875,
-0.0343017578125,
0.054931640625,
-0.0193328857421875,
-0.123779296875,
-0.0133209228515625,
-0.02764892578125,
0.11273193359375,
-0.02935791015625,
0.09716796875,
0.01824951171875,
0.0810546875,
-0.019989013671875,
0.09832763671875,
0.06219482421875,
-0.032196044921875,
-0.06146240234375,
0.042327880859375,
0.1031494140625,
0.029083251953125,
-0.01300048828125,
-0.024627685546875,
0.09222412109375,
-0.017120361328125,
0.130859375,
0.039825439453125,
-0.0010662078857421875,
-0.06640625,
0.045196533203125,
0.09259033203125,
0.07470703125,
0.102783203125,
-0.007099151611328125,
0.034576416015625,
-0.04296875,
-0.039703369140625,
0.040985107421875,
0.1416015625,
-0.075439453125,
-0.09814453125,
-0.1044921875,
0.00528717041015625,
0.054107666015625,
0.05120849609375,
-0.02471923828125,
-0.09759521484375,
-0.08929443359375,
0.142822265625,
0.09661865234375,
-0.13818359375,
-0.1507568359375,
-0.00977325439453125,
0.09600830078125,
-0.00014448165893554688,
-0.10662841796875,
-0.07080078125,
-0.0814208984375,
0.07562255859375,
0.1480712890625,
0.0799560546875,
-0.038238525390625,
0.00612640380859375,
-0.0197906494140625,
0.159423828125,
0.002017974853515625,
-0.2052001953125,
-0.07000732421875,
0.056671142578125,
0.004756927490234375,
0.0019426345825195312,
-0.045928955078125,
-0.05224609375,
0.03253173828125,
0.01474761962890625,
-0.04693603515625,
-0.0177459716796875,
0.07330322265625,
-0.0760498046875,
0.0023059844970703125,
0.0155029296875,
-0.07403564453125,
-0.0194549560546875,
0.06390380859375,
-0.06365966796875,
0.05914306640625,
0.022186279296875,
0.0421142578125,
-0.07476806640625,
0.07269287109375,
0.05572509765625,
0.083984375,
-0.006740570068359375,
-0.03125,
0.067138671875,
0.032257080078125,
0.0255279541015625,
0.007843017578125,
-0.061859130859375,
-0.035919189453125,
0.063720703125,
0.07867431640625,
-0.008514404296875,
-0.04046630859375,
-0.012420654296875,
0.030364990234375,
-0.00690460205078125,
0.039886474609375,
0.11041259765625,
0.04345703125,
0.0545654296875,
-0.09930419921875,
-0.0455322265625,
0.1075439453125,
-0.013885498046875,
-0.0487060546875,
0.0042266845703125,
0.050140380859375,
0.016632080078125,
-0.08807373046875,
-0.08172607421875,
0.07720947265625,
0.0919189453125,
-0.0196533203125,
-0.08123779296875,
0.00042557716369628906,
0.10870361328125,
0.08148193359375,
0.09136962890625,
0.00719451904296875,
0.037933349609375,
-0.0294952392578125,
-0.07623291015625,
-0.06103515625,
0.102783203125,
0.050872802734375,
-0.0188751220703125,
-0.102783203125,
0.019256591796875,
0.05474853515625,
0.12261962890625,
-0.038360595703125,
-0.08642578125,
0.023193359375,
0.1866455078125,
0.1513671875,
-0.054779052734375,
-0.045562744140625,
-0.039306640625,
0.10101318359375,
-0.018585205078125,
-0.04046630859375,
0.0177001953125,
0.00405120849609375,
0.1298828125,
0.047454833984375,
-0.007465362548828125,
0.041778564453125,
0.045684814453125,
0.055908203125,
0.0304718017578125,
-0.0484619140625,
-0.037261962890625,
-0.07244873046875,
-0.055419921875,
-0.045654296875,
0.0015516281127929688,
0.074951171875,
0.036407470703125,
-0.01409912109375,
0.093017578125,
-0.050537109375,
0.00799560546875,
-0.0240631103515625,
-0.062225341796875,
-0.0266571044921875,
0.00794219970703125,
-0.051849365234375,
-0.0291748046875,
0.06890869140625,
0.0408935546875,
0.043060302734375,
0.036529541015625,
0.0130615234375,
0.035888671875,
0.04595947265625,
-0.050750732421875,
-0.1302490234375,
-0.046783447265625,
0.07708740234375,
0.018768310546875,
-0.023712158203125,
-0.00911712646484375,
0.05523681640625,
0.059234619140625,
0.014862060546875,
-0.1588134765625,
-0.04302978515625,
0.0130615234375,
0.1453857421875,
-0.026580810546875,
-0.10443115234375,
-0.012054443359375,
-0.039398193359375,
0.0667724609375,
-0.018402099609375,
0.03729248046875,
-0.027191162109375,
-0.047943115234375,
-0.068115234375,
0.0292510986328125,
-0.0877685546875,
0.049072265625,
-0.046539306640625,
0.050018310546875,
-0.0185089111328125,
-0.01104736328125,
0.013214111328125,
0.0113677978515625,
-0.0298919677734375,
-0.046722412109375,
0.0002574920654296875,
0.036865234375,
0.0791015625,
-0.02117919921875,
0.10760498046875,
0.1173095703125,
-0.031646728515625,
0.039794921875,
-0.08294677734375,
-0.12261962890625,
-0.04205322265625,
0.0972900390625,
0.08465576171875,
0.0804443359375,
-0.004886627197265625,
-0.0120391845703125,
0.0107574462890625,
-0.0322265625,
-0.08135986328125,
-0.03662109375,
-0.032073974609375,
0.031219482421875,
0.01007080078125,
-0.101318359375,
-0.07073974609375,
-0.0182037353515625,
-0.019866943359375,
0.0022640228271484375,
-0.000682830810546875,
0.0165863037109375,
-0.07861328125,
0.0198822021484375,
-0.0255889892578125,
0.060089111328125,
-0.043975830078125,
-0.039031982421875,
-0.03955078125,
0.01788330078125,
-0.0092620849609375,
-0.0264892578125,
0.0214691162109375,
0.028717041015625,
0.053680419921875,
0.058441162109375,
-0.09613037109375,
-0.09161376953125,
-0.0218048095703125,
0.05413818359375,
-0.0246429443359375,
-0.0615234375,
0.0081787109375,
0.130126953125,
-0.046600341796875,
-0.0584716796875,
0.03985595703125,
0.11676025390625,
0.002803802490234375,
-0.0977783203125,
0.0276031494140625,
-0.0576171875,
-0.04302978515625,
0.057952880859375,
-0.07110595703125,
0.027618408203125,
0.0787353515625,
0.06524658203125,
0.06951904296875,
0.035552978515625,
0.0377197265625,
0.141357421875,
0.0592041015625,
-0.055908203125,
0.08428955078125,
0.09002685546875,
0.1767578125,
0.11492919921875,
0.1441650390625,
0.131103515625,
0.166015625,
0.09014892578125,
0.06903076171875,
-0.0024623870849609375,
-0.032196044921875,
-0.0745849609375,
-0.091796875,
0.0227203369140625,
-0.040496826171875,
0.09716796875,
-0.021514892578125,
-0.04534912109375,
0.07989501953125,
0.026336669921875,
0.05023193359375,
0.0275115966796875,
-0.06658935546875,
-0.001338958740234375,
0.0250244140625,
0.0247344970703125,
-0.0250244140625,
0.046783447265625,
0.01531982421875,
0.0030345916748046875,
0.07379150390625,
0.0377197265625,
0.0235137939453125,
-0.0943603515625,
-0.057220458984375,
-0.022979736328125,
-0.021759033203125,
-0.07745361328125,
-0.058441162109375,
-0.0015773773193359375,
0.044677734375,
-0.0023441314697265625,
-0.0377197265625,
0.037567138671875,
-0.09881591796875,
-0.0096588134765625,
-0.0640869140625,
-0.016876220703125,
-0.031036376953125,
-0.09625244140625,
0.05010986328125,
0.147705078125,
0.12188720703125,
0.08837890625,
0.10418701171875,
0.02447509765625,
0.0765380859375,
0.131591796875,
0.12017822265625,
0.015380859375,
0.08984375,
-0.001354217529296875,
0.054718017578125,
-0.043609619140625,
-0.00943756103515625,
0.06781005859375,
0.05218505859375,
-0.049468994140625,
0.06732177734375,
0.11590576171875,
-0.01751708984375,
-0.0355224609375,
0.05596923828125,
0.07525634765625,
0.12890625,
-0.0009260177612304688,
0.06640625,
0.0594482421875,
0.072998046875,
0.11907958984375,
0.083740234375,
0.059234619140625,
0.040435791015625,
-0.07049560546875,
0.043731689453125,
-0.081298828125,
-0.061431884765625,
-0.06793212890625,
-0.025177001953125,
-0.027252197265625,
-0.0321044921875,
0.010711669921875,
-0.050506591796875,
0.09747314453125,
0.02301025390625,
0.0137939453125,
-0.0302886962890625,
-0.0411376953125,
-0.01059722900390625,
-0.055023193359375,
0.032440185546875,
0.005077362060546875,
-0.111328125,
-0.076416015625,
0.05126953125,
-0.028533935546875,
-0.0814208984375,
-0.05645751953125,
-0.08203125,
-0.032684326171875,
-0.0430908203125,
-0.05194091796875,
-0.004436492919921875,
0.018768310546875,
0.0203857421875,
-0.0679931640625,
0.0704345703125,
0.056060791015625,
-0.020111083984375,
0.0987548828125,
0.104248046875,
0.055999755859375,
0.00490570068359375,
0.1112060546875,
-0.0186614990234375,
0.0638427734375,
0.026641845703125,
0.0594482421875,
0.0179290771484375,
0.0020389556884765625,
0.043121337890625,
0.08453369140625,
-0.006130218505859375,
-0.01137542724609375,
0.01206207275390625,
0.01045989990234375,
0.04296875,
-0.07757568359375,
-0.046905517578125,
-0.0024871826171875,
0.057525634765625,
0.08575439453125,
0.087158203125,
0.047027587890625,
0.09088134765625,
0.042877197265625,
-0.03875732421875,
0.0655517578125,
-0.034393310546875,
0.0171661376953125,
0.0006046295166015625,
-0.037353515625,
0.093994140625,
0.1004638671875,
0.05712890625,
0.04083251953125,
-0.0271148681640625,
0.0704345703125,
0.08660888671875,
0.08526611328125,
-0.1103515625,
-0.06280517578125,
-0.051300048828125,
-0.033721923828125,
0.0250396728515625,
0.050689697265625,
0.062408447265625,
-0.05377197265625,
0.052520751953125,
-0.052459716796875,
0.049560546875,
0.0789794921875,
0.03076171875,
0.032073974609375,
0.0704345703125,
-0.0809326171875,
-0.01055908203125,
-0.01042938232421875,
-0.03424072265625,
-0.07818603515625,
-0.057342529296875,
0.03338623046875,
0.017578125,
0.052520751953125,
-0.0032482147216796875,
0.061065673828125,
0.08233642578125,
0.07916259765625,
0.0682373046875,
0.038238525390625,
-0.0821533203125,
-0.050018310546875,
-0.074951171875,
0.055267333984375,
0.10723876953125,
0.1063232421875,
0.120361328125,
0.0733642578125,
0.0391845703125,
0.03375244140625,
0.1273193359375,
0.0225982666015625,
0.0228271484375,
0.07159423828125,
0.0084228515625,
0.0716552734375,
0.03558349609375,
-0.0034999847412109375,
0.09185791015625,
-0.01061248779296875,
-0.041473388671875,
-0.0146942138671875,
-0.0814208984375,
-0.021820068359375,
0.0297698974609375,
0.05908203125,
0.0662841796875,
-0.018463134765625,
-0.09619140625,
-0.064208984375,
0.0169525146484375,
0.08428955078125,
0.06060791015625,
0.04229736328125,
0.0626220703125,
-0.0888671875,
0.06854248046875,
0.158203125,
0.1895751953125,
0.1297607421875,
-0.06494140625,
-0.08819580078125,
-0.122314453125,
0.00931549072265625,
-0.0040740966796875,
-0.166748046875,
-0.185791015625,
-0.19970703125,
-0.1650390625,
-0.06787109375,
-0.0491943359375,
0.04144287109375,
-0.049041748046875,
-0.0565185546875,
0.014129638671875,
0.05908203125,
0.0184326171875,
-0.0213165283203125,
-0.0328369140625,
-0.045562744140625,
0.0070037841796875,
-0.03985595703125,
-0.038421630859375,
0.0247039794921875,
0.1080322265625,
-0.0322265625,
0.06475830078125,
-0.0272674560546875,
-0.0845947265625,
-0.00968170166015625,
0.01264190673828125,
0.09283447265625,
0.078125,
-0.072998046875,
-0.07061767578125,
0.0155487060546875,
0.09539794921875,
0.0750732421875,
-0.033721923828125,
0.0104827880859375,
0.050689697265625,
0.05914306640625,
0.0291900634765625,
-0.006866455078125,
0.0182647705078125,
-0.086669921875,
0.028076171875,
0.09307861328125,
0.03155517578125,
0.06298828125,
-0.076416015625,
0.05023193359375,
-0.06756591796875,
-0.0225830078125,
-0.0258026123046875,
-0.10418701171875,
-0.01114654541015625,
0.072509765625,
0.03564453125,
-0.0721435546875,
0.1387939453125,
-0.0176239013671875,
-0.0182952880859375,
0.087158203125,
-0.064697265625,
0.04547119140625,
0.036224365234375,
0.191650390625,
0.0712890625,
0.0191497802734375,
-0.02325439453125,
0.006534576416015625,
0.10540771484375,
0.11883544921875,
0.196044921875,
-0.1014404296875,
0.007015228271484375,
0.0135345458984375,
0.0611572265625,
0.10552978515625,
-0.07049560546875,
-0.1732177734375,
-0.03753662109375,
-0.15283203125,
-0.07122802734375,
-0.0178680419921875,
-0.07244873046875,
-0.00536346435546875,
0.0350341796875,
0.02996826171875,
0.0728759765625,
-0.08416748046875,
-0.0821533203125,
-0.08917236328125,
0.02923583984375,
-0.08056640625,
-0.0076141357421875,
-0.0237274169921875,
-0.131103515625,
-0.06439208984375,
0.06573486328125,
0.031585693359375,
-0.0265045166015625,
0.0243988037109375,
0.046600341796875,
0.07244873046875,
0.08331298828125,
-0.006061553955078125,
-0.01415252685546875,
-0.00838470458984375,
0.11248779296875,
0.014801025390625,
0.06134033203125,
0.027130126953125,
0.0103302001953125,
0.1422119140625,
0.060546875,
0.115966796875,
0.1510009765625,
0.07757568359375,
-0.0031185150146484375,
0.08343505859375,
0.0787353515625,
0.1177978515625,
0.149658203125,
-0.087158203125,
-0.11688232421875,
0.007640838623046875,
0.152587890625,
0.10968017578125,
-0.047698974609375,
-0.1273193359375,
-0.053741455078125,
0.0298004150390625,
0.05841064453125
# 24 "lenet.cpp" 2
 };
 static f_16 K2_B[16] = {

# 1 "./c2_b.h" 1
0.0245361328125,
0.005458831787109375,
0.031768798828125,
0.028717041015625,
0.08795166015625,
0.038818359375,
-0.07659912109375,
0.01419830322265625,
-0.028289794921875,
-0.02789306640625,
0.083251953125,
0.012237548828125,
-0.023834228515625,
0.023345947265625,
0.048065185546875,
0.1048583984375
# 27 "lenet.cpp" 2
 };
 static f_16 K3_W[120][16][5][5] = {

# 1 "./c3_w.h" 1
0.00798797607421875,
0.023529052734375,
0.05560302734375,
0.027587890625,
-0.033599853515625,
0.0182952880859375,
-0.00445556640625,
0.021484375,
0.04852294921875,
-0.0023040771484375,
0.021392822265625,
-0.0289154052734375,
0.039947509765625,
0.00980377197265625,
0.039031982421875,
-0.003009796142578125,
0.0216217041015625,
-0.008819580078125,
0.0312347412109375,
0.01044464111328125,
-0.00946807861328125,
-0.0219879150390625,
0.034393310546875,
0.01251220703125,
0.00588226318359375,
-0.0261688232421875,
4.64320182800293e-05,
-0.006603240966796875,
-0.061676025390625,
0.051025390625,
0.057037353515625,
-0.0313720703125,
-0.032623291015625,
0.006175994873046875,
0.02288818359375,
0.00921630859375,
-0.01192474365234375,
0.01297760009765625,
-0.016143798828125,
0.0245208740234375,
-0.057373046875,
-0.0189056396484375,
0.00917816162109375,
0.06756591796875,
0.03582763671875,
0.007266998291015625,
0.0394287109375,
-0.01259613037109375,
0.041961669921875,
0.0797119140625,
0.01824951171875,
-0.039947509765625,
-0.050445556640625,
-0.044342041015625,
-0.0367431640625,
-0.041839599609375,
-0.051666259765625,
-0.01239013671875,
-0.0153045654296875,
0.01053619384765625,
0.009613037109375,
0.0458984375,
0.0026645660400390625,
0.04290771484375,
0.0285186767578125,
0.044921875,
0.0026035308837890625,
-0.0130767822265625,
0.0533447265625,
-0.0201416015625,
-0.0277862548828125,
-0.01470947265625,
-0.0157012939453125,
0.031097412109375,
-0.041748046875,
0.029571533203125,
-0.045013427734375,
-0.00461578369140625,
0.00830078125,
-0.057037353515625,
-0.0139923095703125,
-0.03070068359375,
-0.03497314453125,
0.0025787353515625,
-0.0255584716796875,
0.01200103759765625,
-0.0582275390625,
0.01515960693359375,
-0.018310546875,
0.020538330078125,
-0.002044677734375,
0.04168701171875,
0.00548553466796875,
-0.005062103271484375,
-0.02410888671875,
0.0278167724609375,
0.0223236083984375,
0.054351806640625,
0.025360107421875,
-0.0697021484375,
-0.0124359130859375,
0.0256195068359375,
-0.0175933837890625,
-0.0008077621459960938,
0.0220184326171875,
-0.007518768310546875,
0.051361083984375,
0.0012350082397460938,
0.0198974609375,
-0.039764404296875,
-0.004192352294921875,
-0.0214691162109375,
0.0236358642578125,
-0.022613525390625,
-0.0197601318359375,
-0.00751495361328125,
-0.04815673828125,
-0.003971099853515625,
-0.01024627685546875,
-0.0204315185546875,
0.0218353271484375,
-0.0274658203125,
0.025787353515625,
-0.03411865234375,
-0.025909423828125,
-0.006153106689453125,
-0.0020656585693359375,
-0.04681396484375,
0.0699462890625,
0.02294921875,
-0.01751708984375,
-0.04229736328125,
0.017181396484375,
-0.0340576171875,
-0.047454833984375,
-0.011199951171875,
0.0044097900390625,
0.049407958984375,
0.023681640625,
0.005657196044921875,
0.0212554931640625,
0.03436279296875,
0.020233154296875,
0.0292816162109375,
-0.0360107421875,
-0.0282440185546875,
-0.044708251953125,
-0.0231170654296875,
0.0009393692016601562,
-0.0013980865478515625,
-0.037200927734375,
0.0229339599609375,
0.050811767578125,
0.01171112060546875,
0.0614013671875,
0.041595458984375,
0.006725311279296875,
0.0201263427734375,
0.03802490234375,
0.0618896484375,
0.00803375244140625,
-0.008575439453125,
-0.029388427734375,
-0.04034423828125,
0.040557861328125,
-0.030792236328125,
0.05023193359375,
0.006153106689453125,
-0.0369873046875,
-0.003627777099609375,
0.024810791015625,
-0.0533447265625,
-0.062042236328125,
-0.057037353515625,
-0.06304931640625,
-0.01324462890625,
-0.0013332366943359375,
-0.005828857421875,
-0.016815185546875,
-0.014862060546875,
0.0018396377563476562,
0.0019359588623046875,
0.031524658203125,
0.04248046875,
-0.006778717041015625,
-0.039825439453125,
-0.0060882568359375,
0.0584716796875,
0.0201873779296875,
0.05975341796875,
0.01003265380859375,
0.0206451416015625,
0.0209808349609375,
0.04498291015625,
0.00817108154296875,
-0.03729248046875,
0.0294342041015625,
0.0330810546875,
0.0266876220703125,
-0.004833221435546875,
0.0276947021484375,
0.079833984375,
0.04766845703125,
0.004917144775390625,
0.004100799560546875,
-0.01485443115234375,
0.04205322265625,
0.02618408203125,
-0.0059051513671875,
-0.0234222412109375,
0.00708770751953125,
0.036712646484375,
-0.01174163818359375,
0.042083740234375,
-0.0025177001953125,
-0.0164947509765625,
-0.005687713623046875,
0.0562744140625,
0.01316070556640625,
0.022491455078125,
-0.0379638671875,
0.00391387939453125,
-0.04205322265625,
-0.02484130859375,
-0.059234619140625,
0.00951385498046875,
0.01401519775390625,
0.07666015625,
0.100341796875,
0.039093017578125,
-0.059112548828125,
0.0189971923828125,
0.0038738250732421875,
-0.0013294219970703125,
-0.00807952880859375,
-0.04901123046875,
0.0316162109375,
-0.043670654296875,
0.0357666015625,
0.01261138916015625,
0.0206298828125,
-0.017059326171875,
0.02349853515625,
-0.040802001953125,
-0.01445770263671875,
-0.0654296875,
0.034759521484375,
0.03607177734375,
-0.07373046875,
0.0284881591796875,
0.0404052734375,
0.0030193328857421875,
-0.050750732421875,
0.01506805419921875,
-0.07049560546875,
-0.0601806640625,
-0.047760009765625,
-0.0037097930908203125,
-0.0196075439453125,
0.0537109375,
-0.061004638671875,
-0.0513916015625,
0.04010009765625,
0.021575927734375,
-0.01446533203125,
-0.01255035400390625,
0.0245208740234375,
0.03436279296875,
0.028228759765625,
0.0050201416015625,
0.0274810791015625,
-0.004848480224609375,
0.03387451171875,
0.040740966796875,
0.01715087890625,
0.0197296142578125,
0.05963134765625,
0.011566162109375,
0.0037593841552734375,
-0.0008149147033691406,
-0.054656982421875,
0.041290283203125,
0.0156097412109375,
-0.0242767333984375,
0.01104736328125,
-0.0238800048828125,
-0.0239410400390625,
-0.0295257568359375,
-0.0222930908203125,
-0.0156402587890625,
-0.017974853515625,
-0.0276641845703125,
0.00010085105895996094,
0.03448486328125,
-0.0026378631591796875,
0.0196685791015625,
0.0631103515625,
0.005126953125,
-0.050079345703125,
-0.01332855224609375,
-0.0252838134765625,
0.04412841796875,
0.0435791015625,
0.043792724609375,
-0.04461669921875,
-0.0282135009765625,
0.0007691383361816406,
-0.0166473388671875,
0.058441162109375,
0.025482177734375,
0.0098876953125,
-0.004741668701171875,
0.0167388916015625,
0.0033664703369140625,
-0.0211639404296875,
0.01007080078125,
0.025238037109375,
0.02996826171875,
-0.013702392578125,
-0.049163818359375,
0.02447509765625,
0.006420135498046875,
-0.06109619140625,
0.047119140625,
-0.04150390625,
0.045928955078125,
0.025848388671875,
-0.07757568359375,
0.0158538818359375,
-0.0073394775390625,
0.00682830810546875,
0.0236968994140625,
-0.06329345703125,
-0.017364501953125,
0.046051025390625,
-0.03265380859375,
-0.01348114013671875,
-0.002986907958984375,
0.0303192138671875,
0.03851318359375,
-0.0277862548828125,
-0.022369384765625,
0.04876708984375,
-0.031341552734375,
-0.0284271240234375,
-0.0181121826171875,
-0.0203094482421875,
-0.043853759765625,
-0.005268096923828125,
-0.042999267578125,
0.0312347412109375,
0.0092926025390625,
-0.0156707763671875,
-0.062103271484375,
0.01474761962890625,
-0.046234130859375,
0.02374267578125,
0.0305633544921875,
-0.023681640625,
0.0163726806640625,
0.0124359130859375,
-0.005046844482421875,
0.01045989990234375,
-0.04571533203125,
0.031951904296875,
0.006195068359375,
-0.0081329345703125,
-8.273124694824219e-05,
0.013946533203125,
0.0399169921875,
-0.0161895751953125,
0.04296875,
-0.0362548828125,
-0.00611114501953125,
0.05450439453125,
0.04388427734375,
0.0168609619140625,
-0.025177001953125,
0.0015316009521484375,
-0.037384033203125,
-0.0197906494140625,
-0.0046234130859375,
-0.01885986328125,
0.0308990478515625,
0.04742431640625,
0.01485443115234375,
0.00113677978515625,
-0.039276123046875,
-0.002685546875,
-0.0179901123046875,
-0.013519287109375,
0.0123291015625,
-0.00949859619140625,
0.021270751953125,
-0.032989501953125,
-0.0222625732421875,
0.02838134765625,
-0.00955963134765625,
0.01183319091796875,
-0.015960693359375,
0.06744384765625,
0.007106781005859375,
0.0472412109375,
0.047515869140625,
-0.021484375,
-0.015289306640625,
0.0259552001953125,
0.023193359375,
-0.060699462890625,
0.021759033203125,
-0.04071044921875,
0.044525146484375,
-0.03717041015625,
-0.016082763671875,
0.0256500244140625,
0.0182647705078125,
0.04876708984375,
-0.007587432861328125,
-0.0158233642578125,
0.05291748046875,
-0.05609130859375,
-0.05450439453125,
0.00228118896484375,
-0.041839599609375,
-0.045074462890625,
0.01107025146484375,
0.024810791015625,
-0.0262298583984375,
0.031402587890625,
-0.0273284912109375,
0.08062744140625,
0.0170440673828125,
0.0035190582275390625,
-0.0246734619140625,
-0.01371002197265625,
-0.0013380050659179688,
0.0121002197265625,
0.01480865478515625,
0.009124755859375,
-0.0108489990234375,
-0.03826904296875,
0.00215911865234375,
-0.04833984375,
-0.0577392578125,
0.00455474853515625,
-0.06683349609375,
0.00897216796875,
0.0212860107421875,
-0.016845703125,
-0.031463623046875,
0.0048370361328125,
-0.033233642578125,
-0.038238525390625,
0.0207061767578125,
-0.036102294921875,
0.0157928466796875,
0.0067901611328125,
0.0406494140625,
-0.0160369873046875,
0.025360107421875,
0.021240234375,
0.055999755859375,
0.01206207275390625,
-0.028656005859375,
-0.007080078125,
-0.031982421875,
0.0214691162109375,
0.00308990478515625,
0.0025119781494140625,
0.0102386474609375,
0.007068634033203125,
0.0016632080078125,
-0.047454833984375,
-0.027313232421875,
-0.0279541015625,
0.0013017654418945312,
0.03607177734375,
-0.023284912109375,
0.0229644775390625,
0.07684326171875,
-0.017242431640625,
-0.024200439453125,
0.0258941650390625,
-0.0138397216796875,
0.0171966552734375,
-0.04644775390625,
-0.038299560546875,
-0.016448974609375,
-0.0109100341796875,
-0.022003173828125,
-0.0474853515625,
0.025848388671875,
0.06353759765625,
-0.05181884765625,
-0.02899169921875,
0.001552581787109375,
0.0248870849609375,
0.08026123046875,
0.062225341796875,
0.044036865234375,
0.05828857421875,
0.0085296630859375,
-0.015594482421875,
0.0634765625,
0.0244903564453125,
0.007843017578125,
0.0185089111328125,
0.014190673828125,
0.00144195556640625,
0.01461029052734375,
-0.043701171875,
0.02252197265625,
-0.010498046875,
-0.01200103759765625,
0.0256500244140625,
0.00922393798828125,
-0.0280303955078125,
-0.0635986328125,
-0.01611328125,
0.048065185546875,
0.012969970703125,
0.00036525726318359375,
0.00260162353515625,
-0.0201568603515625,
0.0172271728515625,
-0.04473876953125,
-0.06494140625,
-0.06622314453125,
0.0188140869140625,
-0.052093505859375,
-0.026336669921875,
-0.0124053955078125,
0.0024890899658203125,
-0.01043701171875,
0.0755615234375,
0.007610321044921875,
-0.045684814453125,
0.03741455078125,
-0.0240631103515625,
0.022369384765625,
-0.034820556640625,
0.02691650390625,
0.03985595703125,
0.029541015625,
-0.0341796875,
-0.0228729248046875,
0.0421142578125,
0.0246734619140625,
-0.0238494873046875,
0.00228118896484375,
-0.0231781005859375,
-0.06402587890625,
-0.028564453125,
-0.033538818359375,
-0.005657196044921875,
0.0294952392578125,
0.038299560546875,
0.007808685302734375,
-0.0362548828125,
-0.0265960693359375,
0.03631591796875,
0.04925537109375,
0.0252227783203125,
0.04669189453125,
0.011077880859375,
0.005504608154296875,
0.045745849609375,
0.038330078125,
0.011322021484375,
-0.052215576171875,
0.01134490966796875,
0.0199432373046875,
0.044921875,
-0.0185394287109375,
-0.0056610107421875,
-0.020050048828125,
0.0051422119140625,
-0.015869140625,
0.00225830078125,
0.04473876953125,
0.033447265625,
0.01367950439453125,
0.038360595703125,
-0.00849151611328125,
0.038238525390625,
-0.0516357421875,
-0.03570556640625,
-0.0200653076171875,
0.00475311279296875,
0.042999267578125,
-0.0232696533203125,
0.02886962890625,
0.038421630859375,
0.025390625,
-0.017669677734375,
-0.001922607421875,
0.0189361572265625,
-0.00036525726318359375,
-0.0178375244140625,
0.03411865234375,
-0.017547607421875,
-0.03814697265625,
-0.0650634765625,
-0.007503509521484375,
-0.031341552734375,
-0.023162841796875,
-0.040557861328125,
0.01143646240234375,
0.056915283203125,
0.01351165771484375,
-0.00438690185546875,
0.0038814544677734375,
-0.0219573974609375,
0.0640869140625,
0.0218658447265625,
-0.037689208984375,
-0.0166015625,
0.0079345703125,
0.0233306884765625,
-0.04559326171875,
-0.0008435249328613281,
0.06732177734375,
-0.0160369873046875,
0.03125,
0.060791015625,
0.012908935546875,
-0.04052734375,
-0.062744140625,
-0.0019626617431640625,
0.0217742919921875,
0.0265655517578125,
0.035186767578125,
0.0255889892578125,
0.027313232421875,
0.06884765625,
-0.0038471221923828125,
-0.01551055908203125,
-0.00847625732421875,
0.0274505615234375,
0.040771484375,
-0.01552581787109375,
-0.054962158203125,
0.0267486572265625,
-0.0021610260009765625,
-0.045166015625,
-0.01088714599609375,
-0.0171966552734375,
0.0232696533203125,
0.056884765625,
0.035003662109375,
0.08294677734375,
-0.0122528076171875,
0.049652099609375,
-0.00010782480239868164,
0.04461669921875,
0.06365966796875,
-0.0195159912109375,
-0.0220947265625,
0.02215576171875,
0.012664794921875,
0.037445068359375,
0.0276336669921875,
0.0340576171875,
-0.00830078125,
-0.005268096923828125,
-0.051361083984375,
-0.03607177734375,
0.019439697265625,
-0.028594970703125,
-0.027618408203125,
-0.0043792724609375,
-0.02606201171875,
0.052459716796875,
0.00937652587890625,
-0.0178070068359375,
0.0294952392578125,
-0.037445068359375,
0.0247650146484375,
-0.00890350341796875,
0.023223876953125,
0.038116455078125,
0.036224365234375,
0.0259857177734375,
0.04351806640625,
-0.043304443359375,
0.04144287109375,
0.020050048828125,
0.0286865234375,
0.007549285888671875,
-0.052825927734375,
-0.0123138427734375,
0.00665283203125,
-0.0323486328125,
-0.005126953125,
-0.0026035308837890625,
0.039031982421875,
0.00562286376953125,
0.036376953125,
0.01507568359375,
0.0382080078125,
-0.0243377685546875,
-0.03375244140625,
-0.005702972412109375,
-0.011322021484375,
-0.01519775390625,
0.0263214111328125,
0.0233154296875,
-0.0177459716796875,
-0.00970458984375,
0.0582275390625,
-0.0572509765625,
0.048797607421875,
-0.0252838134765625,
-0.00829315185546875,
-0.026763916015625,
-0.0193634033203125,
-0.004119873046875,
-0.0235137939453125,
0.0294647216796875,
-0.00164794921875,
-0.01461029052734375,
0.038299560546875,
0.002902984619140625,
-0.0233001708984375,
0.058319091796875,
0.048431396484375,
0.035400390625,
0.0487060546875,
-0.0006322860717773438,
0.01087188720703125,
0.04888916015625,
0.0191497802734375,
-0.05059814453125,
0.0270233154296875,
0.038787841796875,
0.044647216796875,
0.0005955696105957031,
-0.050537109375,
0.006893157958984375,
0.0029850006103515625,
-0.05438232421875,
-0.022979736328125,
-0.050689697265625,
-0.045257568359375,
0.025543212890625,
-0.057952880859375,
-0.047149658203125,
0.030059814453125,
-0.006885528564453125,
-0.046600341796875,
0.03643798828125,
0.043212890625,
0.03076171875,
0.0030536651611328125,
0.049468994140625,
0.03271484375,
0.0311126708984375,
0.007904052734375,
0.0007653236389160156,
0.00457000732421875,
-0.0277557373046875,
-0.0390625,
-0.0059356689453125,
0.0258941650390625,
0.051544189453125,
0.03546142578125,
-0.049774169921875,
-0.0273284912109375,
0.027008056640625,
0.0264739990234375,
0.0022068023681640625,
0.0282440185546875,
-0.023223876953125,
0.00400543212890625,
-0.0185394287109375,
0.045684814453125,
0.040740966796875,
0.00287628173828125,
0.0065155029296875,
0.0277252197265625,
0.007366180419921875,
-0.0006852149963378906,
0.0777587890625,
0.05072021484375,
-0.0611572265625,
0.033172607421875,
0.041748046875,
0.02606201171875,
0.0142974853515625,
0.001232147216796875,
-0.020599365234375,
0.006977081298828125,
-0.016204833984375,
0.015228271484375,
-0.019439697265625,
-0.0166778564453125,
-0.00684356689453125,
0.0102996826171875,
0.01502227783203125,
-0.0185699462890625,
0.018463134765625,
-0.04547119140625,
-0.02325439453125,
0.04486083984375,
-0.0240936279296875,
0.05615234375,
0.0433349609375,
0.04864501953125,
0.0179595947265625,
-0.0005354881286621094,
-0.00733184814453125,
0.035980224609375,
-0.01143646240234375,
0.03997802734375,
0.021087646484375,
-0.057586669921875,
-0.039947509765625,
-0.0310516357421875,
-0.0124053955078125,
-0.009124755859375,
-0.051788330078125,
-0.0208892822265625,
-0.0077362060546875,
0.02935791015625,
-0.01507568359375,
0.047607421875,
-0.009552001953125,
-0.01505279541015625,
-0.05322265625,
-0.032745361328125,
0.0160369873046875,
-0.01120758056640625,
-0.0465087890625,
-0.06707763671875,
-0.06591796875,
0.019927978515625,
-0.0266876220703125,
0.018310546875,
-0.055694580078125,
0.016845703125,
0.0249481201171875,
0.0092315673828125,
-0.0185394287109375,
-0.0287322998046875,
-0.02581787109375,
-0.007671356201171875,
-0.004459381103515625,
-0.025238037109375,
-0.06536865234375,
-0.018096923828125,
-0.058807373046875,
0.029052734375,
-0.0097503662109375,
-0.047637939453125,
-0.02410888671875,
-0.022613525390625,
-0.039306640625,
0.018280029296875,
-0.005214691162109375,
0.044403076171875,
0.017547607421875,
0.03143310546875,
-0.0011568069458007812,
0.004474639892578125,
0.06756591796875,
-0.0191497802734375,
0.0712890625,
0.069091796875,
-0.0167388916015625,
0.035247802734375,
0.00786590576171875,
0.016845703125,
-0.0716552734375,
0.034271240234375,
-0.029266357421875,
-0.033843994140625,
0.022796630859375,
0.015869140625,
0.06280517578125,
0.039306640625,
-0.048187255859375,
0.0276336669921875,
-0.033233642578125,
-0.0305328369140625,
-0.0209808349609375,
-0.04644775390625,
0.0338134765625,
0.01245880126953125,
0.03765869140625,
0.036529541015625,
-0.03033447265625,
0.01385498046875,
0.07110595703125,
-0.0267333984375,
-0.006511688232421875,
-0.058868408203125,
0.0535888671875,
0.06658935546875,
-0.0033550262451171875,
0.05419921875,
-0.026702880859375,
-0.0188751220703125,
-0.014007568359375,
-0.04345703125,
0.00676727294921875,
0.052886962890625,
-0.04815673828125,
-0.04278564453125,
0.00724029541015625,
-0.060089111328125,
-0.0213165283203125,
0.038543701171875,
-0.047515869140625,
-0.03314208984375,
-0.04718017578125,
0.0214996337890625,
0.0034198760986328125,
-0.0244140625,
0.022186279296875,
-0.000579833984375,
0.034820556640625,
-0.06280517578125,
-0.056304931640625,
0.033111572265625,
0.0008349418640136719,
0.031707763671875,
0.0022125244140625,
0.03369140625,
0.048583984375,
0.05926513671875,
-0.006359100341796875,
0.0176544189453125,
-0.039642333984375,
-0.00916290283203125,
0.025604248046875,
0.026336669921875,
0.00897216796875,
0.00492095947265625,
0.035064697265625,
0.0654296875,
0.0587158203125,
-0.0031948089599609375,
-0.0222320556640625,
-0.0261077880859375,
0.0276031494140625,
0.0242767333984375,
0.049163818359375,
-0.01450347900390625,
-0.04296875,
-0.00937652587890625,
0.03564453125,
0.039337158203125,
0.002201080322265625,
-0.0027790069580078125,
-0.00908660888671875,
-0.02789306640625,
-0.058380126953125,
0.013275146484375,
0.04254150390625,
-0.0106048583984375,
-0.005931854248046875,
0.0283966064453125,
0.038726806640625,
-0.0260009765625,
-0.0246734619140625,
0.0450439453125,
0.06805419921875,
0.044342041015625,
0.010711669921875,
-0.041015625,
0.0191497802734375,
0.0259857177734375,
-0.0193328857421875,
-0.043060302734375,
0.016571044921875,
-0.0032444000244140625,
0.023712158203125,
0.035797119140625,
0.00847625732421875,
0.034210205078125,
0.03961181640625,
-0.024749755859375,
0.048187255859375,
0.02423095703125,
0.048095703125,
-0.0299072265625,
-0.01253509521484375,
0.048675537109375,
0.062103271484375,
0.040863037109375,
-0.0006480216979980469,
-0.022918701171875,
0.045806884765625,
-0.016204833984375,
-0.058837890625,
0.01271820068359375,
0.00348663330078125,
-0.032928466796875,
0.04833984375,
0.01068878173828125,
-0.029205322265625,
-0.0147705078125,
0.0645751953125,
0.007617950439453125,
0.0244598388671875,
0.03118896484375,
0.04180908203125,
-0.0196075439453125,
0.03564453125,
-0.00743865966796875,
-0.041717529296875,
-0.0008473396301269531,
-0.0134429931640625,
0.046630859375,
-0.017303466796875,
0.035186767578125,
0.037567138671875,
-0.01004791259765625,
-0.0426025390625,
-0.0312347412109375,
-0.0006284713745117188,
0.0347900390625,
-0.02606201171875,
-0.0124359130859375,
0.040283203125,
-0.038726806640625,
-0.0055084228515625,
-0.034271240234375,
0.04498291015625,
0.017425537109375,
-0.0172271728515625,
-0.01064300537109375,
0.031158447265625,
0.025390625,
0.0439453125,
0.01274871826171875,
0.0504150390625,
-0.0231170654296875,
0.0229034423828125,
0.0479736328125,
0.036956787109375,
0.01403045654296875,
-0.03277587890625,
-0.033935546875,
-0.043304443359375,
-0.0016374588012695312,
0.05413818359375,
-0.033294677734375,
-0.004840850830078125,
0.0266265869140625,
0.03729248046875,
0.0202789306640625,
0.005359649658203125,
0.0399169921875,
0.042205810546875,
0.002170562744140625,
0.0006895065307617188,
-0.0209197998046875,
-0.01007080078125,
0.038421630859375,
0.05322265625,
0.01241302490234375,
-0.01361846923828125,
0.0711669921875,
-0.0182647705078125,
0.006481170654296875,
-0.0122528076171875,
0.02679443359375,
0.00260162353515625,
0.01153564453125,
-0.0127410888671875,
0.01495361328125,
-0.00965118408203125,
0.004642486572265625,
-0.0142974853515625,
-0.003265380859375,
-0.05010986328125,
0.038543701171875,
0.031463623046875,
0.046234130859375,
-0.034210205078125,
-0.033966064453125,
-0.01444244384765625,
-0.049530029296875,
-0.036468505859375,
0.016143798828125,
-0.061431884765625,
-0.0533447265625,
-0.0411376953125,
-0.04180908203125,
0.008941650390625,
0.0193328857421875,
0.04742431640625,
0.031982421875,
0.03802490234375,
0.0287017822265625,
0.0164794921875,
0.01898193359375,
0.06744384765625,
0.039154052734375,
0.05596923828125,
0.039947509765625,
0.031951904296875,
0.005496978759765625,
0.058685302734375,
-0.0200958251953125,
-0.040771484375,
-0.021514892578125,
0.052581787109375,
0.034210205078125,
-0.03509521484375,
0.036468505859375,
-0.036956787109375,
0.05401611328125,
0.03662109375,
0.04815673828125,
0.04730224609375,
-0.00148773193359375,
0.051055908203125,
0.00945281982421875,
-0.0256805419921875,
8.678436279296875e-05,
-0.025634765625,
-0.00925445556640625,
-0.0367431640625,
0.0006070137023925781,
-0.016082763671875,
-0.033782958984375,
-0.0121307373046875,
0.0211639404296875,
0.0253143310546875,
0.0220184326171875,
0.035797119140625,
0.0341796875,
0.0245208740234375,
-0.02325439453125,
0.011505126953125,
-0.022857666015625,
0.0296783447265625,
0.01995849609375,
-0.026824951171875,
0.0037555694580078125,
0.04913330078125,
0.04364013671875,
0.005035400390625,
0.040313720703125,
0.00203704833984375,
0.0172271728515625,
-0.01503753662109375,
0.00986480712890625,
0.0044708251953125,
0.042144775390625,
-8.52346420288086e-06,
0.028717041015625,
0.007068634033203125,
-0.027008056640625,
0.0406494140625,
-0.030517578125,
0.0196533203125,
0.01025390625,
0.0034618377685546875,
0.0526123046875,
0.027008056640625,
0.02252197265625,
0.059783935546875,
-0.04058837890625,
0.05072021484375,
0.0240631103515625,
0.0297698974609375,
-0.004764556884765625,
-0.03265380859375,
-0.00397491455078125,
-0.0076751708984375,
-0.00931549072265625,
-0.005340576171875,
-0.01090240478515625,
-0.004703521728515625,
0.0207061767578125,
0.002719879150390625,
0.022247314453125,
0.0004546642303466797,
-0.01190948486328125,
-0.006313323974609375,
0.0230865478515625,
-0.062255859375,
0.01342010498046875,
0.04937744140625,
0.03173828125,
0.0477294921875,
-0.03216552734375,
0.02593994140625,
-1.4543533325195312e-05,
0.01261138916015625,
0.039642333984375,
-0.0123291015625,
-0.039276123046875,
-0.0279693603515625,
-0.0275421142578125,
-0.00939178466796875,
-0.03936767578125,
-0.050018310546875,
-0.00418853759765625,
-0.016143798828125,
0.034698486328125,
0.043975830078125,
-0.00917816162109375,
0.042236328125,
-0.006183624267578125,
0.0091705322265625,
-0.0217742919921875,
0.0538330078125,
0.08099365234375,
-0.040557861328125,
-0.0516357421875,
0.045623779296875,
-0.0211334228515625,
0.00852203369140625,
0.006618499755859375,
0.06292724609375,
0.06207275390625,
0.0516357421875,
0.010162353515625,
-0.059295654296875,
0.0029201507568359375,
-0.018707275390625,
-0.0289306640625,
0.02166748046875,
-0.02325439453125,
0.003391265869140625,
0.01128387451171875,
-0.0201873779296875,
-0.035919189453125,
-0.027252197265625,
0.007354736328125,
-0.0419921875,
-0.010986328125,
0.045501708984375,
-0.058990478515625,
-0.01568603515625,
-0.044036865234375,
0.001331329345703125,
-0.01113128662109375,
0.019134521484375,
-0.0276336669921875,
-0.03143310546875,
-0.01282501220703125,
0.0221710205078125,
0.0185699462890625,
0.0177459716796875,
0.025390625,
0.01183319091796875,
-0.01233673095703125,
0.0156402587890625,
-0.0258331298828125,
-0.0203094482421875,
0.04974365234375,
0.04473876953125,
0.017913818359375,
-0.034698486328125,
0.006198883056640625,
0.00786590576171875,
-0.029571533203125,
-0.051361083984375,
0.0592041015625,
0.05255126953125,
0.02508544921875,
-0.0125579833984375,
0.04522705078125,
0.0399169921875,
0.024444580078125,
0.039337158203125,
0.005336761474609375,
-0.041656494140625,
0.0228118896484375,
-0.01641845703125,
0.0093994140625,
-0.036956787109375,
0.0208892822265625,
-0.0029239654541015625,
0.0302276611328125,
0.006732940673828125,
0.0155487060546875,
0.0540771484375,
0.044036865234375,
0.0196685791015625,
-0.036773681640625,
0.0039520263671875,
0.0645751953125,
0.016937255859375,
0.00554656982421875,
0.045379638671875,
-0.044464111328125,
0.01953125,
0.053314208984375,
0.060546875,
-0.017669677734375,
-0.01282501220703125,
0.007099151611328125,
0.041473388671875,
0.08380126953125,
0.031494140625,
0.0292510986328125,
-0.06695556640625,
-0.03753662109375,
0.03021240234375,
0.0194549560546875,
-0.03424072265625,
0.0171966552734375,
0.01462554931640625,
-0.0223236083984375,
0.040618896484375,
0.00012093782424926758,
0.01163482666015625,
-0.054107666015625,
-0.057342529296875,
0.04095458984375,
-0.041046142578125,
-0.036956787109375,
-0.0352783203125,
0.033935546875,
0.0101470947265625,
0.0521240234375,
-0.02056884765625,
0.003795623779296875,
0.0537109375,
0.027252197265625,
-0.01169586181640625,
-0.01210784912109375,
-0.0202178955078125,
0.017669677734375,
-0.0003077983856201172,
-0.02325439453125,
-0.036468505859375,
0.0208740234375,
0.045166015625,
0.054595947265625,
-0.017059326171875,
0.00919342041015625,
-0.005863189697265625,
-0.016845703125,
-0.01178741455078125,
-0.0214385986328125,
0.0104217529296875,
-0.01123809814453125,
0.002140045166015625,
0.039337158203125,
-0.06195068359375,
-0.016204833984375,
0.04254150390625,
0.02978515625,
-0.042205810546875,
0.01026153564453125,
-0.0146636962890625,
0.0112762451171875,
-0.007137298583984375,
-0.0011072158813476562,
-0.0154571533203125,
0.00913238525390625,
0.033447265625,
0.07574462890625,
-0.05224609375,
0.00144195556640625,
-0.054962158203125,
0.03875732421875,
-0.0301666259765625,
0.0208892822265625,
-0.0096893310546875,
-0.0199127197265625,
-0.0005202293395996094,
0.03704833984375,
0.046142578125,
-0.020233154296875,
0.033782958984375,
-0.003879547119140625,
0.0147247314453125,
0.04833984375,
-0.0262908935546875,
0.01294708251953125,
0.038970947265625,
0.036285400390625,
0.03143310546875,
0.0035381317138671875,
-0.039794921875,
-0.033538818359375,
-0.0012636184692382812,
-0.00591278076171875,
-0.051055908203125,
0.04150390625,
-0.0276031494140625,
0.02239990234375,
-0.01088714599609375,
-0.0006313323974609375,
0.01282501220703125,
0.0308074951171875,
-0.00012117624282836914,
-0.003795623779296875,
-0.0257110595703125,
-0.01751708984375,
-0.00909423828125,
0.058837890625,
0.0205841064453125,
-0.06298828125,
-0.0045013427734375,
0.032958984375,
0.054534912109375,
0.0014123916625976562,
-0.047760009765625,
-0.0211181640625,
-0.0012111663818359375,
0.022674560546875,
0.037078857421875,
-0.050872802734375,
-0.054656982421875,
-0.031463623046875,
-0.01494598388671875,
-0.0013971328735351562,
-0.0139312744140625,
-0.0146942138671875,
-0.0194854736328125,
0.032867431640625,
-0.011077880859375,
0.0513916015625,
-0.07586669921875,
-0.0241546630859375,
0.020050048828125,
-0.055084228515625,
0.01107025146484375,
0.0212249755859375,
0.0266265869140625,
-0.0308837890625,
0.0209503173828125,
-0.03448486328125,
-0.0219268798828125,
0.05810546875,
0.031982421875,
0.0322265625,
-0.0579833984375,
0.005214691162109375,
0.006999969482421875,
-0.0281219482421875,
-0.0394287109375,
0.0223236083984375,
-0.04071044921875,
-0.0278778076171875,
-0.04095458984375,
0.022247314453125,
-0.01430511474609375,
0.0267791748046875,
-0.020599365234375,
0.04248046875,
-0.0115509033203125,
0.04681396484375,
0.05072021484375,
-0.023284912109375,
0.0020656585693359375,
0.037139892578125,
-0.006053924560546875,
0.0257720947265625,
0.06842041015625,
0.036407470703125,
-0.00826263427734375,
-0.007228851318359375,
0.05877685546875,
0.052337646484375,
0.000701904296875,
0.0093231201171875,
-0.037811279296875,
-0.0165863037109375,
-0.0216522216796875,
-0.0469970703125,
-0.01067352294921875,
0.01044464111328125,
-0.001117706298828125,
-0.008026123046875,
0.036712646484375,
-0.054107666015625,
-0.0004973411560058594,
-0.040313720703125,
-0.002300262451171875,
0.04473876953125,
-0.04296875,
0.028167724609375,
-0.053741455078125,
0.0020694732666015625,
-0.013458251953125,
-0.0003178119659423828,
0.025848388671875,
-0.034515380859375,
-0.03546142578125,
-0.010955810546875,
-0.03118896484375,
0.037322998046875,
-0.0143890380859375,
-0.008331298828125,
0.0022068023681640625,
-0.04168701171875,
0.0309295654296875,
-0.01016998291015625,
0.0667724609375,
0.019134521484375,
-0.0143585205078125,
0.00905609130859375,
0.03509521484375,
-0.0390625,
-0.01404571533203125,
-0.01776123046875,
-0.01126861572265625,
-0.0176239013671875,
-0.03955078125,
0.0538330078125,
0.00946044921875,
0.0029087066650390625,
0.033599853515625,
0.06219482421875,
0.0277099609375,
-0.057830810546875,
0.004596710205078125,
0.0270233154296875,
-0.013671875,
0.0286865234375,
0.034210205078125,
-0.01319122314453125,
-0.0228271484375,
0.032318115234375,
-0.007335662841796875,
-0.043121337890625,
0.045623779296875,
0.01522064208984375,
0.0257110595703125,
0.02008056640625,
-0.024139404296875,
0.048797607421875,
0.0187225341796875,
-0.01690673828125,
0.0082855224609375,
-0.0364990234375,
0.0270233154296875,
-0.03131103515625,
-0.0217437744140625,
0.0012731552124023438,
0.024322509765625,
0.045623779296875,
-0.02783203125,
-0.0008077621459960938,
-0.0106658935546875,
-0.0222625732421875,
0.021026611328125,
0.035675048828125,
0.0245819091796875,
0.059814453125,
-0.005046844482421875,
0.038818359375,
-0.0005273818969726562,
0.07940673828125,
-0.0019702911376953125,
-0.00020682811737060547,
0.039398193359375,
-0.005275726318359375,
-0.01087188720703125,
0.0408935546875,
0.01654052734375,
0.0034046173095703125,
0.05535888671875,
0.06414794921875,
-0.0230712890625,
0.035003662109375,
0.034515380859375,
-0.0291900634765625,
-0.022186279296875,
-0.049560546875,
-0.04876708984375,
0.017730712890625,
-0.055267333984375,
0.02325439453125,
0.0477294921875,
-0.0135040283203125,
-0.0012884140014648438,
0.0291748046875,
0.0161285400390625,
7.063150405883789e-05,
0.04937744140625,
0.0220489501953125,
-0.01044464111328125,
-0.003963470458984375,
-0.039306640625,
0.058929443359375,
0.04339599609375,
0.036590576171875,
-0.052215576171875,
0.0115203857421875,
0.0272369384765625,
0.01142120361328125,
0.0297698974609375,
-0.06890869140625,
-0.03594970703125,
0.039581298828125,
-0.0179595947265625,
0.01480865478515625,
-0.0173797607421875,
0.03436279296875,
0.01812744140625,
-0.057342529296875,
-0.043121337890625,
-0.036834716796875,
0.03240966796875,
-0.0081787109375,
-0.0271148681640625,
0.0294952392578125,
-0.01445770263671875,
-0.0287017822265625,
0.047210693359375,
-0.0010509490966796875,
0.0190582275390625,
0.0107269287109375,
0.0394287109375,
-0.0009918212890625,
-0.018798828125,
0.0309600830078125,
0.0009298324584960938,
0.0008792877197265625,
0.031280517578125,
-0.03631591796875,
0.0246734619140625,
-0.05181884765625,
-9.5367431640625e-05,
-0.0311126708984375,
-0.05889892578125,
-0.0139923095703125,
0.0285186767578125,
0.08489990234375,
-0.05560302734375,
0.0290679931640625,
0.003936767578125,
0.00839996337890625,
0.0550537109375,
0.00301361083984375,
0.0020656585693359375,
-0.0300140380859375,
-0.00975799560546875,
-0.03497314453125,
-0.049774169921875,
-0.07293701171875,
-0.0299835205078125,
0.03948974609375,
0.00930023193359375,
0.0311279296875,
-0.0173492431640625,
-0.0251617431640625,
-0.060943603515625,
0.0242767333984375,
0.041168212890625,
-0.05181884765625,
-0.0095062255859375,
-0.004825592041015625,
0.0015468597412109375,
-0.025421142578125,
0.018707275390625,
0.01357269287109375,
0.0293121337890625,
-0.04498291015625,
-0.0491943359375,
0.0055389404296875,
-0.056121826171875,
0.04766845703125,
-0.00299072265625,
0.0330810546875,
-0.05657958984375,
0.03851318359375,
0.037506103515625,
0.0094757080078125,
0.0303497314453125,
-0.01336669921875,
0.0033969879150390625,
-0.024993896484375,
-0.042694091796875,
0.007663726806640625,
-0.0201263427734375,
0.001312255859375,
-0.00782012939453125,
-0.0251007080078125,
-0.03924560546875,
0.0279693603515625,
0.01983642578125,
0.0367431640625,
0.0364990234375,
-0.023284912109375,
0.0531005859375,
0.01047515869140625,
0.021453857421875,
0.00476837158203125,
-0.01242828369140625,
0.0162811279296875,
-0.049713134765625,
-0.00827789306640625,
-0.0160064697265625,
-0.039154052734375,
0.01531219482421875,
0.01187896728515625,
-0.04693603515625,
0.005764007568359375,
0.01824951171875,
0.044952392578125,
0.03948974609375,
-0.04010009765625,
-0.005970001220703125,
0.015655517578125,
0.0264129638671875,
0.0138397216796875,
0.0287628173828125,
0.0272369384765625,
0.014678955078125,
0.048248291015625,
0.044769287109375,
0.00426483154296875,
0.0640869140625,
-0.034637451171875,
-0.0031528472900390625,
0.0244903564453125,
-0.032958984375,
-0.00214385986328125,
-0.042327880859375,
-0.06756591796875,
0.00473785400390625,
0.0382080078125,
-0.037811279296875,
0.050048828125,
0.078125,
-0.0273590087890625,
0.035797119140625,
-0.07257080078125,
-0.024749755859375,
-0.00836944580078125,
-0.039276123046875,
-0.005451202392578125,
-0.0965576171875,
-0.0318603515625,
-0.012420654296875,
-0.032867431640625,
-0.043182373046875,
0.035797119140625,
0.01152801513671875,
0.050628662109375,
-0.0023784637451171875,
-0.031646728515625,
0.0047760009765625,
0.034881591796875,
0.058380126953125,
0.0102691650390625,
0.004673004150390625,
-0.039276123046875,
0.037353515625,
-0.00716400146484375,
0.0271148681640625,
-0.039764404296875,
-0.0267791748046875,
0.031829833984375,
0.0418701171875,
-0.002044677734375,
-0.059722900390625,
-0.06884765625,
-0.01311492919921875,
0.01093292236328125,
-0.02069091796875,
-0.006381988525390625,
-0.0282440185546875,
-0.01055908203125,
0.02825927734375,
0.020538330078125,
-0.0059356689453125,
-0.0292205810546875,
0.02386474609375,
-0.0172576904296875,
0.0204010009765625,
0.042877197265625,
0.023529052734375,
0.029083251953125,
0.01381683349609375,
0.0273895263671875,
-0.007442474365234375,
-0.0030231475830078125,
-0.05999755859375,
0.005245208740234375,
-0.036376953125,
-0.022186279296875,
0.01971435546875,
-0.043853759765625,
0.0296173095703125,
-0.01427459716796875,
0.032196044921875,
-0.019775390625,
0.03350830078125,
-0.0073394775390625,
0.04949951171875,
-0.001773834228515625,
-0.0183868408203125,
-0.019195556640625,
0.054229736328125,
0.0098114013671875,
0.03375244140625,
-0.01861572265625,
0.061859130859375,
0.01396942138671875,
0.053985595703125,
-0.050048828125,
0.01239013671875,
0.053375244140625,
0.048858642578125,
0.044921875,
-0.0775146484375,
0.01506805419921875,
0.040771484375,
-0.0154571533203125,
0.0469970703125,
-0.052520751953125,
0.023468017578125,
-0.048980712890625,
0.0009627342224121094,
0.0443115234375,
-0.029541015625,
0.055999755859375,
0.005092620849609375,
0.05712890625,
0.033843994140625,
-0.0185394287109375,
-0.01410675048828125,
0.0469970703125,
-0.0163116455078125,
0.005748748779296875,
0.0272369384765625,
-0.049713134765625,
-0.0189208984375,
0.01213836669921875,
0.06292724609375,
0.0106201171875,
-0.035491943359375,
-0.00792694091796875,
0.0184783935546875,
0.0750732421875,
-0.0107574462890625,
-0.04229736328125,
0.033599853515625,
0.03167724609375,
0.01739501953125,
-0.0256195068359375,
0.0268402099609375,
-0.00484466552734375,
0.038604736328125,
-0.0162200927734375,
0.020477294921875,
0.0291900634765625,
-0.040618896484375,
0.0506591796875,
0.029144287109375,
0.00885009765625,
0.01206207275390625,
-0.0272064208984375,
0.0235137939453125,
0.0479736328125,
-0.0183258056640625,
-0.003299713134765625,
0.058868408203125,
0.0477294921875,
-0.0008091926574707031,
0.032623291015625,
-0.008209228515625,
-0.035980224609375,
0.040557861328125,
-0.0275115966796875,
0.041900634765625,
-0.01091766357421875,
-0.0419921875,
0.0115814208984375,
0.050506591796875,
-0.01800537109375,
-0.047027587890625,
0.045196533203125,
0.0049896240234375,
0.0160064697265625,
-0.065185546875,
0.0015325546264648438,
-0.011260986328125,
0.003673553466796875,
-0.00411224365234375,
0.019927978515625,
-0.037384033203125,
0.044403076171875,
-0.0160980224609375,
0.01934814453125,
-0.02783203125,
0.037200927734375,
-0.0312042236328125,
0.04022216796875,
-0.01666259765625,
-0.0182037353515625,
-0.037139892578125,
-0.0287628173828125,
0.03350830078125,
-0.036529541015625,
0.0311126708984375,
-0.02166748046875,
0.0019102096557617188,
0.04620361328125,
0.044158935546875,
-0.0002281665802001953,
0.0157928466796875,
-0.01007843017578125,
0.0780029296875,
-0.0157623291015625,
0.0288543701171875,
-0.00583648681640625,
0.0111236572265625,
-0.0090484619140625,
0.0014925003051757812,
-0.037017822265625,
-0.04986572265625,
0.02105712890625,
-0.0002543926239013672,
-0.004787445068359375,
0.03790283203125,
0.01482391357421875,
0.006580352783203125,
0.0487060546875,
0.0266876220703125,
0.0093536376953125,
0.0232696533203125,
-0.025421142578125,
0.035430908203125,
-0.030242919921875,
0.007198333740234375,
-0.023284912109375,
0.0163116455078125,
-0.006603240966796875,
-0.0421142578125,
-0.00023698806762695312,
0.05010986328125,
0.001041412353515625,
-0.043548583984375,
0.036224365234375,
0.0178680419921875,
-0.01459503173828125,
0.016143798828125,
-0.003917694091796875,
0.032135009765625,
-0.042633056640625,
0.019317626953125,
-0.005542755126953125,
0.020782470703125,
-0.0132293701171875,
-0.00675201416015625,
-0.052001953125,
-0.0020618438720703125,
0.00966644287109375,
-0.007450103759765625,
0.0185699462890625,
0.04766845703125,
0.01441192626953125,
-0.01226806640625,
-0.050140380859375,
0.0179290771484375,
-0.0148162841796875,
0.0207366943359375,
0.034912109375,
-0.00783538818359375,
0.0195770263671875,
-0.034393310546875,
0.0313720703125,
-0.016326904296875,
-0.018829345703125,
-0.0191650390625,
0.01316070556640625,
-0.034912109375,
0.025360107421875,
-0.0030670166015625,
0.035491943359375,
-0.0494384765625,
-0.0308990478515625,
-0.0140228271484375,
0.0012149810791015625,
-0.03326416015625,
0.0160980224609375,
0.0238189697265625,
0.0252685546875,
-0.03826904296875,
0.048980712890625,
0.037567138671875,
-0.036346435546875,
-0.045867919921875,
-0.0229339599609375,
-0.0130767822265625,
0.0213165283203125,
0.024200439453125,
-0.044830322265625,
0.0235137939453125,
-0.031707763671875,
0.031280517578125,
0.04852294921875,
0.01012420654296875,
-0.007099151611328125,
-0.02557373046875,
-0.04449462890625,
-0.0229949951171875,
-0.0745849609375,
0.0208282470703125,
-0.040496826171875,
0.040252685546875,
0.039794921875,
0.00716400146484375,
0.00855255126953125,
0.023406982421875,
0.0091094970703125,
0.056640625,
-0.04156494140625,
0.054107666015625,
0.045318603515625,
0.0494384765625,
-0.0055084228515625,
-0.00090789794921875,
-0.03564453125,
0.04766845703125,
0.0289154052734375,
-0.0240936279296875,
-0.020416259765625,
0.021148681640625,
0.018157958984375,
0.02362060546875,
-0.040130615234375,
-0.02569580078125,
0.0201263427734375,
0.00862884521484375,
0.0599365234375,
0.0183563232421875,
-0.0088653564453125,
0.0089569091796875,
-0.04290771484375,
0.0113372802734375,
0.001888275146484375,
-0.00554656982421875,
-0.0016078948974609375,
0.058929443359375,
-0.0211944580078125,
0.025543212890625,
-0.056060791015625,
0.06927490234375,
-0.01361846923828125,
0.00506591796875,
-0.03375244140625,
0.038238525390625,
-0.032440185546875,
0.013641357421875,
0.01641845703125,
-0.01418304443359375,
-0.0125579833984375,
-0.0031375885009765625,
0.0025310516357421875,
-0.01763916015625,
0.00719451904296875,
0.00197601318359375,
0.041351318359375,
0.07745361328125,
-0.0196075439453125,
0.0206146240234375,
0.028839111328125,
0.07147216796875,
0.057586669921875,
-0.021392822265625,
-0.04119873046875,
0.029388427734375,
0.0234375,
0.049468994140625,
-0.0038204193115234375,
-0.0330810546875,
-0.036041259765625,
0.0293426513671875,
0.034912109375,
0.007366180419921875,
-0.041015625,
0.045745849609375,
0.03778076171875,
-0.08648681640625,
-0.04095458984375,
0.044769287109375,
0.04901123046875,
0.037109375,
-0.016387939453125,
-0.037689208984375,
-0.002605438232421875,
0.006839752197265625,
0.02288818359375,
0.01207733154296875,
0.076416015625,
0.02777099609375,
-0.00862884521484375,
-0.0262298583984375,
0.020355224609375,
0.00832366943359375,
-0.0023708343505859375,
0.039581298828125,
0.0279388427734375,
-0.042022705078125,
0.0069122314453125,
-0.034088134765625,
0.038299560546875,
-0.010467529296875,
0.0068359375,
-0.0005435943603515625,
0.01384735107421875,
0.02899169921875,
0.0447998046875,
0.0232391357421875,
0.025848388671875,
0.025390625,
0.011322021484375,
0.01313018798828125,
0.04559326171875,
0.03839111328125,
-0.017333984375,
-0.0170135498046875,
0.0191497802734375,
0.049407958984375,
0.05224609375,
0.00011849403381347656,
-0.011077880859375,
-0.028076171875,
0.0592041015625,
-0.0460205078125,
-0.0036678314208984375,
0.0430908203125,
-0.018829345703125,
0.012908935546875,
-0.004302978515625,
0.0548095703125,
-0.032928466796875,
-0.0253753662109375,
-0.03778076171875,
-0.0947265625,
-0.01390838623046875,
0.0567626953125,
0.0860595703125,
-0.0633544921875,
-0.00585174560546875,
5.40614128112793e-05,
0.034820556640625,
-0.04150390625,
-0.00212860107421875,
0.049957275390625,
-0.005062103271484375,
0.012176513671875,
-0.020721435546875,
-0.002696990966796875,
-0.0030117034912109375,
0.054107666015625,
-0.00675201416015625,
0.014007568359375,
0.0200958251953125,
-0.057159423828125,
-0.040863037109375,
-0.0303497314453125,
0.032806396484375,
-0.02020263671875,
-0.044891357421875,
-0.0053253173828125,
0.018310546875,
-0.031005859375,
-0.00885009765625,
0.00743865966796875,
0.03399658203125,
0.01010894775390625,
-0.022918701171875,
-0.045989990234375,
-0.02801513671875,
-0.0197601318359375,
-0.06829833984375,
-0.080078125,
0.038848876953125,
0.049224853515625,
-0.035125732421875,
-0.0255279541015625,
0.0159912109375,
0.0352783203125,
-0.0196533203125,
-0.03204345703125,
-0.033782958984375,
0.0418701171875,
-0.02398681640625,
-0.03619384765625,
-0.010009765625,
0.01480865478515625,
0.0247039794921875,
0.0167083740234375,
-0.027618408203125,
-0.040679931640625,
0.015106201171875,
-0.040985107421875,
0.040985107421875,
0.0277099609375,
0.032867431640625,
0.05303955078125,
0.0295867919921875,
-0.0006046295166015625,
-0.03692626953125,
-0.024505615234375,
0.0599365234375,
-0.032928466796875,
0.0090179443359375,
0.0308380126953125,
-0.00858306884765625,
-0.0206756591796875,
0.0192108154296875,
0.0191497802734375,
-0.015838623046875,
-0.01535797119140625,
0.021820068359375,
0.024139404296875,
0.00351715087890625,
-0.04425048828125,
0.0175018310546875,
-0.006145477294921875,
-0.015472412109375,
-0.03802490234375,
0.025299072265625,
0.039764404296875,
-0.0261383056640625,
-0.06524658203125,
-0.060638427734375,
-0.00786590576171875,
-0.00980377197265625,
-0.0178985595703125,
0.0255584716796875,
0.0303497314453125,
-0.026123046875,
0.00814056396484375,
0.03839111328125,
-0.047027587890625,
-0.03497314453125,
-0.04052734375,
-0.026824951171875,
0.0170135498046875,
0.032196044921875,
-0.04638671875,
-0.039154052734375,
0.035308837890625,
0.0013246536254882812,
-0.03326416015625,
0.0204925537109375,
-0.04742431640625,
-0.036041259765625,
-0.0196075439453125,
-0.0033416748046875,
-0.035552978515625,
0.0037555694580078125,
0.0170745849609375,
0.00905609130859375,
0.06256103515625,
-0.034820556640625,
-0.0218353271484375,
0.03387451171875,
0.034210205078125,
0.065673828125,
-0.031890869140625,
0.0077056884765625,
0.01366424560546875,
0.058929443359375,
0.09063720703125,
0.06463623046875,
0.071533203125,
0.022705078125,
-0.01236724853515625,
-0.0157470703125,
0.0176849365234375,
0.0268402099609375,
-0.00844573974609375,
0.0155792236328125,
-0.0080718994140625,
0.036895751953125,
0.018280029296875,
0.018096923828125,
0.01161956787109375,
-0.04205322265625,
-0.08148193359375,
-0.037109375,
-0.015869140625,
0.01175689697265625,
-0.036346435546875,
-0.04815673828125,
0.01971435546875,
0.01397705078125,
0.051910400390625,
0.042144775390625,
0.06298828125,
0.018524169921875,
-0.01050567626953125,
0.0513916015625,
0.00460052490234375,
-0.015960693359375,
0.0146331787109375,
0.055450439453125,
0.01351165771484375,
-0.03546142578125,
-0.008636474609375,
-0.05572509765625,
0.032257080078125,
0.02996826171875,
-0.0190277099609375,
0.04351806640625,
-0.01549530029296875,
-0.005084991455078125,
-0.010528564453125,
-0.031005859375,
-0.0184783935546875,
0.016387939453125,
-0.02398681640625,
-0.028076171875,
0.00223541259765625,
-0.0296630859375,
0.003993988037109375,
0.01117706298828125,
-0.005084991455078125,
0.02899169921875,
-0.0154876708984375,
0.0123443603515625,
0.02984619140625,
0.0003154277801513672,
0.0022449493408203125,
0.048583984375,
0.03387451171875,
-0.0007615089416503906,
0.0022563934326171875,
-0.0347900390625,
0.0191802978515625,
0.04376220703125,
-0.03515625,
0.0100860595703125,
-0.00435638427734375,
0.051788330078125,
-0.037384033203125,
-0.034820556640625,
0.0106964111328125,
0.0022487640380859375,
0.003742218017578125,
-0.05267333984375,
0.025970458984375,
0.0277862548828125,
0.002780914306640625,
-0.0501708984375,
0.006801605224609375,
0.04150390625,
0.0030498504638671875,
0.048980712890625,
-0.012298583984375,
-0.0234222412109375,
0.02081298828125,
-0.0200042724609375,
0.024749755859375,
-0.04327392578125,
-0.02032470703125,
-0.0517578125,
0.05804443359375,
0.035552978515625,
0.031982421875,
-0.0094757080078125,
0.0032901763916015625,
0.016082763671875,
0.033447265625,
-0.0193939208984375,
-0.023895263671875,
-0.0217742919921875,
0.0150299072265625,
0.036407470703125,
-0.0288848876953125,
-0.03094482421875,
0.03765869140625,
-0.00876617431640625,
-0.00833892822265625,
-0.0013332366943359375,
-0.03558349609375,
0.0202178955078125,
0.0216064453125,
-0.0304412841796875,
-0.03717041015625,
0.01445770263671875,
0.0106658935546875,
-0.0443115234375,
-0.01715087890625,
0.0203094482421875,
0.005863189697265625,
0.024444580078125,
-0.01206207275390625,
0.030853271484375,
0.024383544921875,
-0.0222320556640625,
0.0004820823669433594,
-0.005054473876953125,
0.06500244140625,
0.00882720947265625,
-0.03216552734375,
0.0419921875,
0.0347900390625,
-0.0120086669921875,
-0.0217437744140625,
-0.045684814453125,
0.0266876220703125,
-0.074951171875,
0.045013427734375,
0.0194549560546875,
-0.004734039306640625,
-0.01678466796875,
0.0810546875,
0.001850128173828125,
-0.0193328857421875,
0.04351806640625,
-0.0010194778442382812,
0.04254150390625,
0.059295654296875,
-0.00193023681640625,
0.017822265625,
0.015869140625,
-0.056549072265625,
-0.03839111328125,
-0.0213470458984375,
0.0266265869140625,
-0.02484130859375,
0.04376220703125,
0.0188140869140625,
-0.0028820037841796875,
0.028045654296875,
-0.05072021484375,
-0.0255889892578125,
0.01181793212890625,
-0.0212554931640625,
0.04931640625,
-0.05859375,
-0.0302276611328125,
-0.00896453857421875,
-0.01009368896484375,
0.04705810546875,
0.0024280548095703125,
-0.0284423828125,
-0.03466796875,
-0.0305938720703125,
-0.005207061767578125,
-0.00031113624572753906,
-0.05706787109375,
-0.00829315185546875,
-0.01666259765625,
-0.022979736328125,
0.01436614990234375,
-0.0022678375244140625,
0.0209197998046875,
0.02459716796875,
-0.0625,
-0.037933349609375,
-0.0217437744140625,
-0.0007686614990234375,
0.04632568359375,
-0.0189361572265625,
-0.03643798828125,
-0.0274658203125,
-0.0343017578125,
0.039764404296875,
0.0246124267578125,
0.037628173828125,
0.0008807182312011719,
0.0059051513671875,
-0.050323486328125,
0.01200103759765625,
-0.01355743408203125,
-0.035614013671875,
0.0214080810546875,
-0.0172882080078125,
0.00318145751953125,
-0.051025390625,
-0.03033447265625,
0.0278167724609375,
-0.011383056640625,
-0.047088623046875,
0.0161590576171875,
0.03399658203125,
-0.01220703125,
0.00518798828125,
0.025787353515625,
0.011627197265625,
0.0106353759765625,
0.017791748046875,
0.0285797119140625,
0.0003120899200439453,
0.0251007080078125,
0.06439208984375,
0.0300445556640625,
-0.022857666015625,
0.048065185546875,
-0.004787445068359375,
0.01197052001953125,
-0.037109375,
0.053924560546875,
-0.01062774658203125,
-0.046295166015625,
0.0045013427734375,
0.0291595458984375,
-0.0049285888671875,
-0.0501708984375,
0.0175933837890625,
0.0166473388671875,
-0.0017004013061523438,
-0.00440216064453125,
0.03497314453125,
0.0215606689453125,
0.0389404296875,
-0.033447265625,
0.0115203857421875,
0.06622314453125,
-0.03192138671875,
0.0208892822265625,
0.013336181640625,
-0.052398681640625,
0.035888671875,
-0.061431884765625,
-0.06024169921875,
0.03765869140625,
-0.0083160400390625,
0.006633758544921875,
0.02130126953125,
-0.01369476318359375,
-0.03265380859375,
-0.03668212890625,
-0.016510009765625,
0.006755828857421875,
0.0595703125,
-0.02313232421875,
-0.01497650146484375,
-0.0049285888671875,
0.079833984375,
0.03289794921875,
0.0183868408203125,
0.015899658203125,
-0.05670166015625,
0.03582763671875,
-0.0031452178955078125,
-0.0180816650390625,
0.040069580078125,
0.053955078125,
0.049774169921875,
-0.01551055908203125,
0.03826904296875,
0.0355224609375,
-0.0036563873291015625,
-0.0275115966796875,
0.042510986328125,
0.0218963623046875,
-0.0400390625,
-0.005619049072265625,
0.031524658203125,
0.003620147705078125,
0.0377197265625,
-0.044647216796875,
-0.0292816162109375,
-0.033477783203125,
0.0002605915069580078,
-0.044525146484375,
0.034881591796875,
-0.007205963134765625,
0.0227813720703125,
-0.017822265625,
0.036346435546875,
-0.0484619140625,
0.036956787109375,
0.054168701171875,
0.00341796875,
0.01236724853515625,
0.02764892578125,
0.0089111328125,
-0.00360870361328125,
0.01727294921875,
0.036041259765625,
-0.02880859375,
-0.0296783447265625,
0.01551055908203125,
-0.00013875961303710938,
0.019561767578125,
-0.01313018798828125,
-0.017059326171875,
0.0347900390625,
-0.02081298828125,
0.046112060546875,
0.005367279052734375,
0.037628173828125,
0.04754638671875,
0.0306854248046875,
0.06842041015625,
-0.0227203369140625,
-0.006359100341796875,
0.046478271484375,
0.0203704833984375,
-0.009490966796875,
-0.03900146484375,
0.034942626953125,
-0.04852294921875,
0.00621795654296875,
0.0143280029296875,
-0.021148681640625,
-0.04595947265625,
-0.0164642333984375,
0.006160736083984375,
0.05438232421875,
-0.00774383544921875,
-0.050872802734375,
0.00907135009765625,
0.0253448486328125,
0.03424072265625,
-0.007175445556640625,
0.0236358642578125,
0.01093292236328125,
-0.004909515380859375,
-0.0341796875,
0.0181121826171875,
0.045745849609375,
-0.029296875,
0.010284423828125,
0.0031280517578125,
0.039520263671875,
0.037353515625,
-0.00843048095703125,
-0.00450897216796875,
0.0163116455078125,
-0.02288818359375,
-0.03466796875,
-0.0247344970703125,
0.0168914794921875,
-0.025848388671875,
-0.0280303955078125,
-0.00739288330078125,
0.038909912109375,
0.034210205078125,
-0.017974853515625,
-0.05804443359375,
-0.00019252300262451172,
0.029327392578125,
0.011444091796875,
0.0120086669921875,
-0.01323699951171875,
-0.0062103271484375,
0.0087738037109375,
-0.0117340087890625,
0.046478271484375,
-0.0213165283203125,
-0.027740478515625,
0.046051025390625,
0.056365966796875,
-0.0667724609375,
-0.0029754638671875,
-0.014312744140625,
-0.025634765625,
0.0243988037109375,
0.037872314453125,
-0.0311126708984375,
-0.01416015625,
0.0195465087890625,
0.06500244140625,
-0.0014753341674804688,
0.0516357421875,
-0.0275115966796875,
0.0031414031982421875,
0.0596923828125,
0.0287017822265625,
0.01027679443359375,
0.056884765625,
0.038360595703125,
-0.0220794677734375,
-0.018890380859375,
0.0574951171875,
0.0193328857421875,
0.03717041015625,
0.050933837890625,
-0.01102447509765625,
-0.04266357421875,
-0.025726318359375,
0.0137176513671875,
0.00333404541015625,
0.018463134765625,
-0.042449951171875,
-0.0057220458984375,
0.042510986328125,
0.0158538818359375,
0.042510986328125,
0.01558685302734375,
0.028411865234375,
-0.046722412109375,
-0.0452880859375,
0.0210723876953125,
0.05364990234375,
-0.01477813720703125,
-0.0235443115234375,
0.02435302734375,
-0.01445770263671875,
-0.05157470703125,
-0.05267333984375,
0.002124786376953125,
-0.0016698837280273438,
0.037872314453125,
-0.0303497314453125,
0.0253753662109375,
0.03961181640625,
-0.0186767578125,
0.04571533203125,
0.01519012451171875,
0.053680419921875,
0.0090179443359375,
0.03033447265625,
0.052703857421875,
-0.037506103515625,
0.01885986328125,
-0.00970458984375,
0.0340576171875,
0.042694091796875,
-0.01265716552734375,
-0.0263519287109375,
-0.02996826171875,
0.01995849609375,
0.00464630126953125,
0.0011959075927734375,
-0.00478363037109375,
-0.0072021484375,
0.049407958984375,
0.032501220703125,
0.03466796875,
0.041046142578125,
-0.02899169921875,
0.00783538818359375,
-0.0157623291015625,
-0.01837158203125,
0.0162200927734375,
0.03533935546875,
0.062744140625,
0.048309326171875,
-0.033355712890625,
0.04315185546875,
0.049896240234375,
0.037261962890625,
-0.0411376953125,
0.06268310546875,
0.0119781494140625,
-0.043121337890625,
0.0031642913818359375,
0.0003638267517089844,
-0.040435791015625,
-0.0372314453125,
-0.035400390625,
-0.03399658203125,
0.02569580078125,
-0.015472412109375,
-0.053863525390625,
-0.0340576171875,
-0.0297698974609375,
-0.0548095703125,
-0.013153076171875,
0.029815673828125,
-0.0030803680419921875,
0.022552490234375,
0.036865234375,
-0.020965576171875,
0.031768798828125,
0.02423095703125,
0.04107666015625,
-0.01027679443359375,
-0.0222320556640625,
0.051513671875,
0.01360321044921875,
-0.02392578125,
-0.047149658203125,
0.04449462890625,
0.046600341796875,
0.01457977294921875,
-0.0154571533203125,
0.040740966796875,
-0.032073974609375,
0.0253753662109375,
0.01450347900390625,
-0.004779815673828125,
0.0379638671875,
0.028594970703125,
0.0197601318359375,
0.011993408203125,
-0.032623291015625,
0.037353515625,
0.0311279296875,
0.0106658935546875,
-0.02642822265625,
-0.05340576171875,
0.01548004150390625,
0.003772735595703125,
0.040496826171875,
0.0178985595703125,
0.0172576904296875,
-0.01108551025390625,
0.034820556640625,
-0.0185089111328125,
-0.0092010498046875,
0.06304931640625,
0.0257720947265625,
-0.004573822021484375,
-0.03045654296875,
0.063720703125,
0.0458984375,
0.01526641845703125,
0.014923095703125,
0.01456451416015625,
-0.0068359375,
0.047760009765625,
-0.0266571044921875,
-0.0350341796875,
-0.0291900634765625,
0.0290069580078125,
0.0237274169921875,
0.002544403076171875,
0.002246856689453125,
0.0239715576171875,
0.0109405517578125,
0.005977630615234375,
0.0012903213500976562,
0.01428985595703125,
-0.03466796875,
-0.005767822265625,
0.0272979736328125,
-0.03460693359375,
0.029266357421875,
-0.01568603515625,
0.0229034423828125,
0.0088043212890625,
0.03216552734375,
-0.03216552734375,
0.015655517578125,
0.048187255859375,
0.006500244140625,
-0.034393310546875,
-0.032470703125,
-0.04583740234375,
0.043243408203125,
-0.00579833984375,
0.0274658203125,
-0.007503509521484375,
-0.019775390625,
-0.036895751953125,
0.05908203125,
-0.002437591552734375,
0.0361328125,
-0.0144805908203125,
0.00652313232421875,
0.00333404541015625,
-0.01169586181640625,
0.0263671875,
0.022857666015625,
-0.0190887451171875,
-0.04351806640625,
-0.0237884521484375,
-0.005191802978515625,
0.00988006591796875,
0.01995849609375,
0.00568389892578125,
0.044158935546875,
-0.04241943359375,
0.0207672119140625,
0.02978515625,
0.006500244140625,
-0.03985595703125,
0.039794921875,
0.0423583984375,
-0.05401611328125,
0.05743408203125,
-0.0367431640625,
-0.045135498046875,
0.0264434814453125,
0.0516357421875,
0.042755126953125,
-0.03460693359375,
-0.034576416015625,
0.004730224609375,
0.0457763671875,
0.01383209228515625,
0.0212249755859375,
0.041778564453125,
-0.03363037109375,
0.01242828369140625,
0.033538818359375,
-0.01324462890625,
0.051727294921875,
0.021759033203125,
0.0223236083984375,
0.01015472412109375,
0.04620361328125,
0.03668212890625,
-0.034027099609375,
-0.0018215179443359375,
-0.02862548828125,
-0.0278778076171875,
-0.0183868408203125,
0.00247955322265625,
0.04388427734375,
0.0055084228515625,
-0.00525665283203125,
-0.01058197021484375,
0.034271240234375,
-0.04193115234375,
-0.01849365234375,
0.0025577545166015625,
0.01537322998046875,
0.0301055908203125,
-0.0213165283203125,
0.0213165283203125,
0.048858642578125,
-0.0472412109375,
-0.0155487060546875,
0.049163818359375,
-0.01153564453125,
0.00467681884765625,
-0.000766754150390625,
0.028900146484375,
0.06951904296875,
0.017578125,
0.027618408203125,
-0.0242156982421875,
0.05450439453125,
-0.03948974609375,
0.04779052734375,
0.03179931640625,
-0.0230712890625,
0.0309906005859375,
-0.022674560546875,
-0.0236053466796875,
-0.026611328125,
0.000659942626953125,
-0.005725860595703125,
-0.050811767578125,
-0.0621337890625,
-0.004459381103515625,
-0.0089263916015625,
0.04351806640625,
-0.049713134765625,
0.006351470947265625,
-0.060028076171875,
0.029449462890625,
-0.029541015625,
-0.049560546875,
0.00762176513671875,
-0.005695343017578125,
0.04571533203125,
0.0662841796875,
-0.014007568359375,
0.0024242401123046875,
-0.0276031494140625,
-0.0121917724609375,
0.035003662109375,
0.01398468017578125,
0.0307464599609375,
-0.0648193359375,
0.040924072265625,
0.0029582977294921875,
0.0032558441162109375,
-0.009368896484375,
0.02313232421875,
0.007717132568359375,
0.0204925537109375,
0.0333251953125,
-0.022674560546875,
0.0003800392150878906,
0.02789306640625,
-0.0164642333984375,
-0.0528564453125,
-0.0004334449768066406,
-0.0340576171875,
0.035247802734375,
-0.007213592529296875,
0.030029296875,
-0.0118255615234375,
0.0423583984375,
0.05767822265625,
-0.01348876953125,
0.048065185546875,
0.0380859375,
-0.043975830078125,
-0.00908660888671875,
0.040618896484375,
-0.05145263671875,
-0.0056915283203125,
0.034515380859375,
0.0535888671875,
-0.0095367431640625,
-0.0141143798828125,
-0.047943115234375,
-0.017913818359375,
0.056854248046875,
0.046966552734375,
-0.01247406005859375,
-0.0188446044921875,
-0.0040740966796875,
-0.030364990234375,
0.052459716796875,
0.042724609375,
0.023529052734375,
0.00537872314453125,
0.017303466796875,
0.035797119140625,
0.030975341796875,
-0.0009188652038574219,
0.0002887248992919922,
0.063232421875,
0.0157318115234375,
0.018402099609375,
-0.0511474609375,
-0.00505828857421875,
0.07904052734375,
-0.01605224609375,
-0.044219970703125,
-0.0325927734375,
0.034698486328125,
-0.0341796875,
0.03741455078125,
0.0169830322265625,
-0.03533935546875,
0.0133514404296875,
-0.004199981689453125,
0.0263214111328125,
-0.0244140625,
0.0008802413940429688,
0.0175018310546875,
0.03167724609375,
0.00884246826171875,
0.0125885009765625,
-0.0177764892578125,
0.015777587890625,
0.01348876953125,
-0.00661468505859375,
-0.037567138671875,
-0.0053253173828125,
-0.01372528076171875,
0.054168701171875,
-0.00293731689453125,
-0.041778564453125,
0.0257720947265625,
-0.0009775161743164062,
0.0233001708984375,
0.029296875,
-0.0411376953125,
-0.049652099609375,
-0.030731201171875,
-0.0082550048828125,
-0.026275634765625,
-0.01279449462890625,
-0.0176544189453125,
-0.00748443603515625,
0.05035400390625,
-0.046661376953125,
0.039642333984375,
0.02862548828125,
0.0205841064453125,
0.031585693359375,
-0.007648468017578125,
-0.021453857421875,
0.01239013671875,
-0.0318603515625,
0.0172576904296875,
-0.0400390625,
0.031707763671875,
0.039764404296875,
-0.0343017578125,
-0.021331787109375,
-0.0180511474609375,
-0.031768798828125,
-0.0090179443359375,
0.033843994140625,
-0.021453857421875,
0.052337646484375,
-0.017364501953125,
-0.0521240234375,
0.0217742919921875,
0.04180908203125,
0.005359649658203125,
-0.036651611328125,
0.033416748046875,
0.00655364990234375,
-0.027191162109375,
0.0579833984375,
-0.027587890625,
-0.0562744140625,
0.00292205810546875,
-0.03472900390625,
-0.01235198974609375,
0.0201873779296875,
-0.039947509765625,
-0.031280517578125,
-0.0416259765625,
-0.0499267578125,
-0.0255126953125,
-0.042877197265625,
-0.016326904296875,
-0.042266845703125,
-0.036376953125,
0.005649566650390625,
0.023651123046875,
-0.01422119140625,
0.039306640625,
-0.00450897216796875,
-0.0109710693359375,
0.03759765625,
-0.009521484375,
-0.0250396728515625,
-0.01467132568359375,
0.03765869140625,
0.00943756103515625,
0.01474761962890625,
0.06390380859375,
0.021759033203125,
-0.00196075439453125,
0.0282745361328125,
0.0169830322265625,
0.0118560791015625,
0.048370361328125,
0.0184478759765625,
-0.0362548828125,
-0.0335693359375,
-0.037811279296875,
-0.034332275390625,
0.0174713134765625,
-0.04083251953125,
0.043487548828125,
0.0225372314453125,
0.070556640625,
0.02142333984375,
0.04925537109375,
-0.0004086494445800781,
0.032257080078125,
0.0094757080078125,
0.055450439453125,
-0.03741455078125,
0.0311737060546875,
-0.04290771484375,
0.012725830078125,
-0.020294189453125,
0.0489501953125,
0.0274505615234375,
0.036468505859375,
-0.04058837890625,
0.01548004150390625,
0.01015472412109375,
-0.01275634765625,
0.044158935546875,
0.017913818359375,
-0.005870819091796875,
-0.0579833984375,
-0.057769775390625,
0.018280029296875,
-0.0323486328125,
0.0179443359375,
0.01007843017578125,
-0.0238800048828125,
-0.023040771484375,
0.035858154296875,
0.0176849365234375,
0.0258941650390625,
0.046478271484375,
-0.0167694091796875,
-0.055145263671875,
0.00939178466796875,
0.0251312255859375,
-0.00394439697265625,
0.04522705078125,
-0.01177978515625,
-0.0127105712890625,
0.00838470458984375,
0.034027099609375,
0.060150146484375,
0.006336212158203125,
0.032470703125,
-0.0139007568359375,
-0.028900146484375,
0.00501251220703125,
-0.0290679931640625,
0.0218963623046875,
-0.004047393798828125,
-0.002498626708984375,
-0.03350830078125,
-0.007053375244140625,
0.03961181640625,
0.05718994140625,
-0.0031147003173828125,
0.024261474609375,
-0.05804443359375,
0.034515380859375,
0.051971435546875,
0.01064300537109375,
-0.0301513671875,
0.034576416015625,
0.02691650390625,
0.0195159912109375,
0.0447998046875,
0.03533935546875,
-0.042755126953125,
-0.00994110107421875,
-0.00266265869140625,
-0.027435302734375,
-0.007175445556640625,
0.041748046875,
0.00710296630859375,
-0.01568603515625,
-0.0058746337890625,
-0.0377197265625,
0.041656494140625,
0.04949951171875,
0.04449462890625,
0.0426025390625,
0.01056671142578125,
0.007068634033203125,
-0.0311431884765625,
0.00418853759765625,
-0.049468994140625,
0.042144775390625,
-0.0280914306640625,
-0.04107666015625,
0.043182373046875,
0.033050537109375,
-0.03619384765625,
0.0235137939453125,
-0.023162841796875,
-0.0416259765625,
0.01352691650390625,
0.037445068359375,
-0.02606201171875,
0.0031681060791015625,
-0.04107666015625,
0.017242431640625,
0.0274200439453125,
-0.044677734375,
-0.0004494190216064453,
-0.026092529296875,
-0.0168914794921875,
-0.02667236328125,
-0.049346923828125,
-0.0325927734375,
0.01203155517578125,
0.04571533203125,
-0.03228759765625,
0.04522705078125,
0.007160186767578125,
0.0013837814331054688,
0.0117645263671875,
0.0108184814453125,
-0.0020236968994140625,
0.0151824951171875,
0.0107269287109375,
-0.009002685546875,
0.0143280029296875,
0.029327392578125,
0.02313232421875,
0.003047943115234375,
0.0276947021484375,
-0.0031452178955078125,
-0.0230255126953125,
-0.0119171142578125,
-0.0153656005859375,
-0.019073486328125,
0.007122039794921875,
-0.023406982421875,
-0.028961181640625,
-0.04168701171875,
0.0494384765625,
0.0261688232421875,
0.038330078125,
-0.0242462158203125,
-0.044769287109375,
0.0034809112548828125,
-0.047088623046875,
-0.0345458984375,
-0.0197906494140625,
-0.044677734375,
-0.0270538330078125,
0.0124969482421875,
0.035980224609375,
-0.02874755859375,
-0.008941650390625,
0.047149658203125,
0.04901123046875,
-0.0467529296875,
-0.008270263671875,
-0.0009531974792480469,
-0.0289306640625,
0.03631591796875,
-0.0010623931884765625,
-0.0027828216552734375,
-0.0260009765625,
0.047088623046875,
0.0025882720947265625,
-0.0024356842041015625,
0.046844482421875,
-0.03668212890625,
-0.0311126708984375,
-0.0137176513671875,
0.033172607421875,
0.032562255859375,
0.0357666015625,
-0.0435791015625,
-0.03253173828125,
-0.01177215576171875,
-0.0003521442413330078,
-0.035430908203125,
-0.046417236328125,
0.0011081695556640625,
-0.01258087158203125,
0.049713134765625,
-0.0230865478515625,
0.036102294921875,
-0.0377197265625,
-0.02978515625,
0.0020465850830078125,
0.002605438232421875,
0.04888916015625,
-0.044281005859375,
-0.043121337890625,
-0.045196533203125,
-0.01224517822265625,
0.04168701171875,
-0.018768310546875,
0.026336669921875,
0.045379638671875,
0.03497314453125,
-0.0172119140625,
-0.0321044921875,
0.035552978515625,
-0.03515625,
0.0167388916015625,
-0.004871368408203125,
-0.038482666015625,
0.025787353515625,
-0.01490020751953125,
-0.029022216796875,
-0.03594970703125,
0.02252197265625,
-0.0009050369262695312,
0.036529541015625,
0.04058837890625,
0.0316162109375,
-0.044830322265625,
0.0167999267578125,
-0.0241241455078125,
0.01419830322265625,
0.01153564453125,
-0.04541015625,
-0.04486083984375,
-0.004131317138671875,
0.002227783203125,
0.03338623046875,
-0.0078125,
-0.0012884140014648438,
0.004489898681640625,
-0.0209808349609375,
0.0285491943359375,
-0.036163330078125,
-0.04193115234375,
-0.039459228515625,
0.003986358642578125,
0.045074462890625,
-0.032196044921875,
-0.039794921875,
0.025482177734375,
-0.04571533203125,
-0.045135498046875,
0.0367431640625,
0.036346435546875,
-0.0494384765625,
-0.0244140625,
-0.03125,
-0.01255035400390625,
0.01041412353515625,
-0.012298583984375,
0.0269317626953125,
0.0290374755859375,
-0.0035190582275390625,
0.014801025390625,
0.01033782958984375,
-0.00919342041015625,
0.039093017578125,
0.025421142578125,
-0.024505615234375,
0.033660888671875,
0.004055023193359375,
0.00649261474609375,
-0.01898193359375,
-0.034698486328125,
0.04541015625,
-0.0042877197265625,
-0.01137542724609375,
0.039642333984375,
0.005870819091796875,
0.0311431884765625,
0.024444580078125,
0.0211029052734375,
0.004215240478515625,
0.02203369140625,
0.01055908203125,
-0.01346588134765625,
0.0318603515625,
-0.00933074951171875,
-0.02978515625,
0.039306640625,
-0.0288543701171875,
0.017669677734375,
0.014495849609375,
-0.030975341796875,
0.01290130615234375,
0.0190277099609375,
-0.004405975341796875,
-0.01145172119140625,
-0.01125335693359375,
0.035614013671875,
0.003078460693359375,
0.0046844482421875,
0.027313232421875,
-0.0100860595703125,
-0.03277587890625,
-0.0377197265625,
0.0293121337890625,
0.047088623046875,
-0.009613037109375,
-0.037811279296875,
-0.01482391357421875,
0.0083160400390625,
-0.037109375,
-0.0255584716796875,
-0.00605010986328125,
0.010498046875,
0.01629638671875,
0.0498046875,
-0.0277099609375,
0.0211944580078125,
0.002437591552734375,
-0.0149993896484375,
0.0062713623046875,
-0.0124359130859375,
0.0034313201904296875,
-0.0225677490234375,
-0.01151275634765625,
-0.03497314453125,
0.0252532958984375,
0.0384521484375,
0.03741455078125,
0.011383056640625,
-0.04705810546875,
0.0259552001953125,
-0.023712158203125,
-0.020111083984375,
0.03717041015625,
0.043609619140625,
-0.0126800537109375,
-0.039642333984375,
0.020416259765625,
0.00537872314453125,
0.0231781005859375,
-0.0115966796875,
-0.0101165771484375,
-0.005535125732421875,
0.0352783203125,
-0.036651611328125,
-0.04888916015625,
0.006572723388671875,
-0.0261383056640625,
-0.00048065185546875,
-0.049560546875,
0.004215240478515625,
0.0206146240234375,
0.0087890625,
0.005741119384765625,
-0.0245361328125,
-0.033203125,
0.025634765625,
-0.0416259765625,
-0.01372528076171875,
-0.043548583984375,
-0.03521728515625,
-0.031097412109375,
-0.02685546875,
-0.0267486572265625,
0.0159454345703125,
0.0012722015380859375,
-0.0266876220703125,
0.009796142578125,
-0.016845703125,
0.020599365234375,
0.044921875,
0.0078582763671875,
-0.001956939697265625,
-0.038116455078125,
-0.0171356201171875,
-0.0222930908203125,
-0.0153961181640625,
0.00916290283203125,
-0.01190185546875,
-0.007213592529296875,
-0.016998291015625,
-0.02117919921875,
-0.0035247802734375,
0.00485992431640625,
-0.031829833984375,
-0.00637054443359375,
-0.0038089752197265625,
-0.04412841796875,
0.01611328125,
-0.0223846435546875,
-0.0174102783203125,
0.0260162353515625,
-0.00370025634765625,
-0.049957275390625,
0.038116455078125,
-0.0177154541015625,
0.026123046875,
-0.042327880859375,
-0.002986907958984375,
-0.0207977294921875,
0.04931640625,
-0.0007243156433105469,
0.027801513671875,
-0.04022216796875,
0.007602691650390625,
0.029022216796875,
0.0151519775390625,
0.020721435546875,
-0.03314208984375,
0.04351806640625,
-0.03948974609375,
-0.007843017578125,
0.019561767578125,
0.0024261474609375,
-0.0216827392578125,
-0.02484130859375,
-0.0221405029296875,
-0.0234222412109375,
-0.01483917236328125,
-0.0143280029296875,
-0.0018320083618164062,
0.016204833984375,
-0.04937744140625,
-0.046234130859375,
-0.0311431884765625,
-0.049591064453125,
0.037872314453125,
-0.0194549560546875,
0.025360107421875,
-0.046722412109375,
-0.0255584716796875,
-0.0178375244140625,
-0.0166015625,
0.004413604736328125,
0.007732391357421875,
-0.00949859619140625,
0.0154571533203125,
0.0100250244140625,
-0.0100555419921875,
-0.004817962646484375,
-0.037933349609375,
0.004421234130859375,
-0.0231170654296875,
0.03466796875,
-0.040283203125,
-0.027679443359375,
0.023284912109375,
-0.033050537109375,
0.026519775390625,
0.0270538330078125,
-0.00383758544921875,
-0.036590576171875,
-0.028533935546875,
-0.04241943359375,
-0.042938232421875,
-0.01537322998046875,
0.027801513671875,
-0.0248565673828125,
0.0259552001953125,
-0.006755828857421875,
-0.034942626953125,
-0.0408935546875,
-0.0168914794921875,
-0.0274505615234375,
0.0343017578125,
-0.04840087890625,
0.01947021484375,
-0.044677734375,
-0.009552001953125,
-0.0207672119140625,
0.00799560546875,
-0.015869140625,
0.005474090576171875,
-0.019195556640625,
0.03375244140625,
0.0035247802734375,
0.0001710653305053711,
0.01003265380859375,
-0.00969696044921875,
-0.0095672607421875,
-0.028564453125,
0.0467529296875,
0.037872314453125,
0.02886962890625,
0.0242767333984375,
0.02569580078125,
0.0259246826171875,
-0.0543212890625,
-0.05902099609375,
0.0208282470703125,
-0.0081939697265625,
-0.0457763671875,
0.0543212890625,
-0.001895904541015625,
-0.007709503173828125,
-0.0212860107421875,
0.0091552734375,
0.039703369140625,
0.02630615234375,
0.04150390625,
0.015716552734375,
0.035980224609375,
-0.0098114013671875,
-0.03118896484375,
0.017120361328125,
0.0865478515625,
-0.038177490234375,
0.08013916015625,
0.03399658203125,
0.01898193359375,
-6.842613220214844e-05,
-0.0306549072265625,
0.019439697265625,
-0.05804443359375,
0.014495849609375,
0.010955810546875,
-0.0229339599609375,
-0.05157470703125,
0.0145111083984375,
-0.0119476318359375,
0.0155792236328125,
0.037689208984375,
0.061920166015625,
-0.0005741119384765625,
0.005977630615234375,
0.006542205810546875,
-0.01160430908203125,
-0.00849151611328125,
-0.029632568359375,
-0.046051025390625,
-0.0233154296875,
0.042083740234375,
-0.02130126953125,
0.0020694732666015625,
0.030517578125,
-0.0192718505859375,
0.047027587890625,
-0.0172119140625,
0.0149383544921875,
0.0264739990234375,
0.03057861328125,
0.019622802734375,
-0.009307861328125,
-0.01328277587890625,
0.032440185546875,
0.002105712890625,
-0.005290985107421875,
-0.0002206563949584961,
-0.052520751953125,
-0.02587890625,
0.0230712890625,
0.035003662109375,
0.0273895263671875,
-0.022125244140625,
0.0182647705078125,
-0.029632568359375,
-0.04217529296875,
-0.053466796875,
-0.027679443359375,
-0.00258636474609375,
0.057037353515625,
-0.014404296875,
0.03759765625,
0.06634521484375,
0.0186920166015625,
-0.019317626953125,
-0.0176239013671875,
-0.0178985595703125,
-0.0239410400390625,
-0.00868988037109375,
-0.079345703125,
-0.051666259765625,
-0.0221099853515625,
0.01006317138671875,
0.040252685546875,
-0.00942230224609375,
-0.01111602783203125,
-0.0006661415100097656,
-0.01189422607421875,
0.05914306640625,
0.043670654296875,
0.01531219482421875,
0.0316162109375,
0.01450347900390625,
-0.00580596923828125,
-0.0274505615234375,
0.03594970703125,
-0.049285888671875,
0.01116180419921875,
0.009368896484375,
-0.00815582275390625,
-0.00931549072265625,
-0.03045654296875,
-0.019927978515625,
0.01247406005859375,
-0.054779052734375,
0.0086669921875,
-0.0037994384765625,
-0.058074951171875,
-0.0350341796875,
-0.04693603515625,
-0.014373779296875,
-0.046722412109375,
0.01038360595703125,
-0.0255584716796875,
0.0538330078125,
-0.00527191162109375,
0.04193115234375,
0.0164794921875,
0.043548583984375,
0.0265350341796875,
0.037841796875,
0.02386474609375,
0.0836181640625,
-0.0005612373352050781,
0.05718994140625,
0.0546875,
-0.005252838134765625,
-0.0347900390625,
-0.01983642578125,
0.037567138671875,
-0.03302001953125,
-0.0450439453125,
-0.0215301513671875,
0.0213775634765625,
-0.059967041015625,
0.061248779296875,
0.035430908203125,
0.0196075439453125,
0.027740478515625,
-0.06280517578125,
-0.00266265869140625,
0.0226287841796875,
0.0450439453125,
-0.031341552734375,
0.0162200927734375,
-0.02569580078125,
-0.00962066650390625,
0.031219482421875,
0.030029296875,
-0.02313232421875,
-0.04486083984375,
-0.0191650390625,
-0.01105499267578125,
-0.0154876708984375,
0.06549072265625,
0.045745849609375,
-0.0244293212890625,
0.00829315185546875,
0.0255584716796875,
-0.02508544921875,
0.056243896484375,
0.0247344970703125,
0.03277587890625,
-0.024200439453125,
0.00873565673828125,
-0.009185791015625,
0.0258636474609375,
0.01512908935546875,
0.047454833984375,
0.057373046875,
0.016265869140625,
-0.03857421875,
0.0284576416015625,
-0.0261993408203125,
-0.0396728515625,
0.03216552734375,
0.0014858245849609375,
0.02142333984375,
0.0160064697265625,
0.0089111328125,
-0.004665374755859375,
0.021942138671875,
-0.04608154296875,
-0.00994110107421875,
-0.0216217041015625,
-0.05487060546875,
-0.033111572265625,
-0.0323486328125,
-0.04339599609375,
-0.00926971435546875,
0.0054931640625,
-0.04620361328125,
-0.006565093994140625,
0.04644775390625,
-0.031494140625,
-0.00884246826171875,
0.051483154296875,
0.072509765625,
0.01146697998046875,
-0.0165252685546875,
-0.01110076904296875,
0.03887939453125,
-0.05438232421875,
-0.031707763671875,
0.01245880126953125,
-0.017120361328125,
0.0182647705078125,
-0.05792236328125,
-0.048187255859375,
-0.0196533203125,
0.01004791259765625,
0.03228759765625,
0.0219879150390625,
0.015167236328125,
-0.00409698486328125,
0.004730224609375,
0.006023406982421875,
0.00902557373046875,
-0.048919677734375,
-0.0011034011840820312,
0.0029697418212890625,
-0.0185546875,
-0.01192474365234375,
0.047088623046875,
0.0030155181884765625,
0.040740966796875,
0.05364990234375,
0.020416259765625,
0.0299072265625,
-0.01110076904296875,
0.0218658447265625,
0.03472900390625,
-0.04852294921875,
0.0254364013671875,
-0.0489501953125,
0.0270233154296875,
-0.03118896484375,
0.0170745849609375,
-0.037445068359375,
-0.0325927734375,
0.0178985595703125,
0.0081024169921875,
-0.0166473388671875,
-0.0075531005859375,
0.0350341796875,
-0.054290771484375,
-0.02703857421875,
0.0174560546875,
0.045623779296875,
-0.0004475116729736328,
0.0134124755859375,
-0.02581787109375,
0.048004150390625,
-0.0266876220703125,
0.035125732421875,
-0.0236358642578125,
0.0159149169921875,
0.0015153884887695312,
0.0180511474609375,
-0.00262451171875,
-0.0457763671875,
-0.04833984375,
0.03271484375,
0.033111572265625,
0.01528167724609375,
0.01580810546875,
0.026275634765625,
0.0271759033203125,
-0.00031948089599609375,
0.01528167724609375,
-0.01153564453125,
-0.0106658935546875,
-0.018524169921875,
-0.0172119140625,
0.0006146430969238281,
0.038604736328125,
0.04730224609375,
-0.045562744140625,
0.0030879974365234375,
0.031402587890625,
0.025360107421875,
0.05517578125,
-0.033966064453125,
-0.006786346435546875,
-0.017578125,
-0.0012035369873046875,
-0.026214599609375,
-0.03802490234375,
-0.00640869140625,
0.057373046875,
0.00653839111328125,
-0.03887939453125,
0.034881591796875,
-0.0255584716796875,
0.00927734375,
0.0298004150390625,
-0.016143798828125,
0.01282501220703125,
-0.029815673828125,
0.04644775390625,
-0.01438140869140625,
-0.024322509765625,
0.00019073486328125,
-0.0130615234375,
0.0333251953125,
0.04571533203125,
-0.0222015380859375,
-0.042144775390625,
0.01316070556640625,
-0.0296478271484375,
0.0218658447265625,
0.0028553009033203125,
-0.047210693359375,
0.032318115234375,
-0.02154541015625,
0.040191650390625,
0.07330322265625,
0.003711700439453125,
0.03582763671875,
0.0307464599609375,
0.00655364990234375,
-0.00769805908203125,
-0.037445068359375,
-0.0224761962890625,
-0.0066680908203125,
-0.0236053466796875,
-0.0062255859375,
0.02825927734375,
0.05426025390625,
-0.00514984130859375,
0.010223388671875,
-0.061065673828125,
-0.002048492431640625,
-0.028839111328125,
0.0164031982421875,
-0.04364013671875,
-0.06561279296875,
-0.0411376953125,
0.0330810546875,
-0.024566650390625,
0.0377197265625,
-0.003765106201171875,
0.0452880859375,
0.0038242340087890625,
0.00916290283203125,
-0.004138946533203125,
0.04852294921875,
-0.0006227493286132812,
0.0413818359375,
-0.004726409912109375,
0.03448486328125,
-0.0026760101318359375,
-0.0325927734375,
0.0064239501953125,
-0.040496826171875,
-0.0203094482421875,
0.0517578125,
0.041229248046875,
-0.0362548828125,
-0.039825439453125,
0.011138916015625,
0.0014019012451171875,
-0.053619384765625,
-0.03387451171875,
0.035369873046875,
-0.046661376953125,
-0.0048675537109375,
0.0081787109375,
-0.0235443115234375,
0.07037353515625,
0.042022705078125,
-0.01470947265625,
0.0248870849609375,
0.006587982177734375,
-0.0574951171875,
0.0021686553955078125,
-0.0215606689453125,
0.02777099609375,
0.004627227783203125,
-0.07611083984375,
-0.04486083984375,
0.0235748291015625,
0.053253173828125,
0.06304931640625,
0.00853729248046875,
0.005870819091796875,
-0.005893707275390625,
-0.03192138671875,
0.016632080078125,
-0.06378173828125,
0.050140380859375,
-0.014923095703125,
0.01702880859375,
-0.028533935546875,
-0.006069183349609375,
0.021942138671875,
0.031341552734375,
-0.07354736328125,
-0.040924072265625,
-0.0288238525390625,
-0.029937744140625,
0.03045654296875,
0.034698486328125,
0.07122802734375,
0.0540771484375,
0.052337646484375,
-0.0035343170166015625,
0.0007109642028808594,
0.03863525390625,
0.05059814453125,
-0.027740478515625,
0.008453369140625,
-0.0106048583984375,
0.016937255859375,
0.01499176025390625,
0.0277862548828125,
-0.00627899169921875,
-0.003749847412109375,
-0.027435302734375,
-0.034149169921875,
-0.01010894775390625,
-0.0269927978515625,
0.027008056640625,
0.08343505859375,
0.054107666015625,
0.0288543701171875,
0.00391387939453125,
-0.0140228271484375,
0.0219573974609375,
0.056549072265625,
-0.0016040802001953125,
0.0170745849609375,
-0.038482666015625,
0.031585693359375,
0.02655029296875,
-0.0113067626953125,
-0.006870269775390625,
0.0160675048828125,
0.061309814453125,
-0.049560546875,
0.029144287109375,
-0.03759765625,
0.0113372802734375,
0.03424072265625,
0.0310821533203125,
0.032196044921875,
-0.0169677734375,
-0.03985595703125,
0.0060272216796875,
0.052703857421875,
0.04412841796875,
0.0271148681640625,
-0.044677734375,
0.0100860595703125,
-0.0364990234375,
-0.014862060546875,
0.004673004150390625,
-0.0389404296875,
0.01483154296875,
-0.0595703125,
0.014007568359375,
0.0236663818359375,
-0.0174102783203125,
0.04412841796875,
-0.04345703125,
-0.058929443359375,
0.00742340087890625,
0.007747650146484375,
0.0235443115234375,
0.04437255859375,
0.0195770263671875,
-0.014678955078125,
-0.05047607421875,
-0.06109619140625,
-0.11407470703125,
-0.03594970703125,
0.018096923828125,
0.035003662109375,
-0.039703369140625,
0.001880645751953125,
0.032135009765625,
0.01995849609375,
-0.030364990234375,
0.0015916824340820312,
0.04791259765625,
0.037384033203125,
0.0311737060546875,
0.0279388427734375,
0.01491546630859375,
-0.01296234130859375,
0.0181121826171875,
-0.020263671875,
-0.006473541259765625,
0.02978515625,
-0.036529541015625,
0.0225677490234375,
0.007293701171875,
-0.0029087066650390625,
0.005474090576171875,
-0.00899505615234375,
0.03741455078125,
0.034027099609375,
0.051849365234375,
0.0560302734375,
0.0236053466796875,
-0.033477783203125,
0.026824951171875,
0.037933349609375,
0.01690673828125,
-0.00927734375,
0.033477783203125,
-0.026214599609375,
0.04498291015625,
0.027679443359375,
-0.0010213851928710938,
-0.009979248046875,
-0.03814697265625,
-0.01476287841796875,
0.03009033203125,
-0.0225830078125,
0.0014190673828125,
0.059967041015625,
0.0022220611572265625,
0.0426025390625,
-0.068603515625,
0.0404052734375,
0.019378662109375,
0.005260467529296875,
-0.0235748291015625,
-0.038238525390625,
0.007488250732421875,
0.00872039794921875,
0.003696441650390625,
0.04339599609375,
-0.09619140625,
-0.0167694091796875,
0.01105499267578125,
0.02056884765625,
-0.00199127197265625,
0.003192901611328125,
-0.0159912109375,
0.0093841552734375,
0.031829833984375,
-0.003955841064453125,
-0.0204620361328125,
-0.006977081298828125,
0.03302001953125,
-0.028167724609375,
0.02813720703125,
-0.0207977294921875,
0.01849365234375,
-0.004596710205078125,
-0.05389404296875,
0.009613037109375,
0.0156402587890625,
0.02606201171875,
0.045623779296875,
-0.052032470703125,
-0.02862548828125,
-0.0234832763671875,
-0.0093536376953125,
-0.0005474090576171875,
-0.018280029296875,
0.0209197998046875,
0.041168212890625,
0.01346588134765625,
-0.07012939453125,
-0.06524658203125,
0.0205230712890625,
0.0189056396484375,
-0.0251617431640625,
-0.03204345703125,
-0.036712646484375,
0.05364990234375,
0.0399169921875,
-0.032867431640625,
-0.0482177734375,
0.0099334716796875,
0.020751953125,
-0.02996826171875,
-0.0224151611328125,
0.007537841796875,
-0.0197906494140625,
-0.00658416748046875,
-0.034820556640625,
-0.01922607421875,
-0.033966064453125,
-0.027496337890625,
-0.033203125,
0.034027099609375,
-0.05975341796875,
-0.004787445068359375,
0.051971435546875,
0.03131103515625,
0.03765869140625,
0.03790283203125,
0.024139404296875,
0.027313232421875,
-0.007198333740234375,
-0.04083251953125,
-0.0238189697265625,
0.0225372314453125,
-0.050811767578125,
-0.055328369140625,
-0.0152740478515625,
0.032196044921875,
0.0128631591796875,
-0.0292510986328125,
-0.03143310546875,
-0.0210723876953125,
0.0111083984375,
-0.0028839111328125,
0.0280303955078125,
-0.048309326171875,
-0.03289794921875,
-0.0009646415710449219,
-0.0496826171875,
-0.058502197265625,
-0.032958984375,
-0.005107879638671875,
0.009033203125,
-0.035125732421875,
0.06915283203125,
0.013519287109375,
0.0271759033203125,
0.01021575927734375,
-0.0252532958984375,
0.04412841796875,
-0.052825927734375,
-0.01149749755859375,
0.03594970703125,
0.020965576171875,
0.07073974609375,
-0.06878662109375,
-0.00296783447265625,
0.037689208984375,
0.005718231201171875,
0.01348114013671875,
-0.07568359375,
0.0305938720703125,
-0.06500244140625,
0.03509521484375,
-0.060699462890625,
0.01494598388671875,
0.02850341796875,
0.0274505615234375,
0.016754150390625,
0.0169219970703125,
0.0239715576171875,
0.057342529296875,
0.0308074951171875,
0.0450439453125,
0.006664276123046875,
-0.043060302734375,
-0.0212554931640625,
0.03851318359375,
-0.0017528533935546875,
0.00928497314453125,
0.0552978515625,
-0.016632080078125,
-0.020355224609375,
0.0292816162109375,
0.061798095703125,
-0.00860595703125,
-0.0199432373046875,
0.0208282470703125,
0.0189056396484375,
0.05072021484375,
0.053924560546875,
-0.01953125,
-0.0163726806640625,
0.0194549560546875,
-0.053314208984375,
-0.0802001953125,
0.01338958740234375,
0.00888824462890625,
0.023193359375,
-0.03411865234375,
0.01483917236328125,
-0.034759521484375,
0.035430908203125,
0.0038318634033203125,
-0.0294952392578125,
-0.011993408203125,
0.0042877197265625,
-0.040191650390625,
-0.028594970703125,
-0.023712158203125,
-0.0167083740234375,
-0.0253753662109375,
-0.00598907470703125,
-0.02606201171875,
-0.0061492919921875,
0.0174407958984375,
-0.0038928985595703125,
0.047637939453125,
0.055877685546875,
-0.000743865966796875,
0.007801055908203125,
0.0310821533203125,
0.0170135498046875,
-0.0088043212890625,
-0.045806884765625,
0.002056121826171875,
0.006534576416015625,
-0.0120391845703125,
0.038116455078125,
-0.0293731689453125,
0.033966064453125,
0.019317626953125,
0.0457763671875,
-0.0269317626953125,
-0.03826904296875,
-0.036102294921875,
-0.02166748046875,
0.0131072998046875,
0.0255584716796875,
-0.02337646484375,
-0.0008254051208496094,
0.024383544921875,
0.01593017578125,
0.033599853515625,
0.003635406494140625,
-0.0219879150390625,
-0.023834228515625,
0.00955963134765625,
0.0312347412109375,
0.03155517578125,
-0.0095977783203125,
0.015594482421875,
0.0031681060791015625,
-0.0016546249389648438,
-0.03692626953125,
0.01023101806640625,
-0.049346923828125,
0.01611328125,
0.034515380859375,
0.050018310546875,
-0.01213836669921875,
0.0219573974609375,
-0.0262298583984375,
-0.01515960693359375,
0.0098724365234375,
0.0438232421875,
-0.006298065185546875,
0.0287933349609375,
0.0132293701171875,
0.00899505615234375,
7.349252700805664e-05,
-0.007633209228515625,
-0.039093017578125,
-0.0216217041015625,
0.0079498291015625,
0.03033447265625,
-0.02197265625,
-0.058685302734375,
0.0177154541015625,
-0.039398193359375,
0.04937744140625,
-0.03948974609375,
-0.01071929931640625,
0.033721923828125,
-0.005374908447265625,
-0.03387451171875,
-0.0051422119140625,
0.006587982177734375,
0.0499267578125,
0.021636962890625,
0.0728759765625,
-0.00901031494140625,
0.01067352294921875,
0.00287628173828125,
0.0252838134765625,
-0.00861358642578125,
0.01480865478515625,
-0.052886962890625,
-0.028533935546875,
-0.0273284912109375,
-0.0131683349609375,
0.028289794921875,
-0.0018014907836914062,
0.00940704345703125,
-0.0027637481689453125,
-0.004730224609375,
-0.00714874267578125,
-0.0306396484375,
-0.02886962890625,
-0.02178955078125,
-0.034942626953125,
-0.0133056640625,
-0.0269775390625,
0.0264739990234375,
0.035369873046875,
-0.0022106170654296875,
0.0047607421875,
-0.0098876953125,
-0.0079193115234375,
-0.006519317626953125,
-0.0216827392578125,
-0.04541015625,
0.0125732421875,
0.058135986328125,
0.058197021484375,
-0.03936767578125,
0.0081939697265625,
0.011810302734375,
0.10009765625,
0.031341552734375,
-0.0194549560546875,
-0.05621337890625,
-0.07147216796875,
0.016021728515625,
0.01256561279296875,
-0.07275390625,
-0.0306243896484375,
-0.005580902099609375,
-0.070068359375,
0.0062255859375,
0.0233154296875,
-0.030242919921875,
-0.005615234375,
0.028564453125,
-0.053497314453125,
-0.0268096923828125,
-0.006622314453125,
0.010650634765625,
0.05535888671875,
-0.025726318359375,
-0.01259613037109375,
-0.0191650390625,
-0.00446319580078125,
-0.01343536376953125,
-0.051300048828125,
-0.057952880859375,
0.0202178955078125,
0.03167724609375,
0.0087432861328125,
-0.005977630615234375,
-0.00638580322265625,
-0.05718994140625,
0.00550079345703125,
0.006473541259765625,
-0.020538330078125,
-0.043487548828125,
-0.063720703125,
-0.035400390625,
-0.02520751953125,
0.027008056640625,
0.01276397705078125,
0.0305328369140625,
-0.0289459228515625,
-0.05523681640625,
0.0149993896484375,
-0.0589599609375,
-0.032073974609375,
-0.058685302734375,
0.005245208740234375,
-0.060699462890625,
0.0283203125,
0.031036376953125,
0.004497528076171875,
0.0275115966796875,
0.0096282958984375,
0.01444244384765625,
0.017791748046875,
-0.021484375,
-0.00380706787109375,
0.002986907958984375,
-0.057342529296875,
-0.0283966064453125,
0.02593994140625,
0.06634521484375,
-0.0218963623046875,
-0.00731658935546875,
0.054534912109375,
0.0172271728515625,
0.07183837890625,
0.0223388671875,
0.056365966796875,
0.041351318359375,
0.0094757080078125,
-0.0137786865234375,
0.031829833984375,
-0.01026153564453125,
-0.0216217041015625,
-0.0230560302734375,
-0.020538330078125,
-0.011505126953125,
0.00011646747589111328,
-0.01305389404296875,
0.0027790069580078125,
0.04364013671875,
0.033538818359375,
0.03857421875,
0.08197021484375,
0.02703857421875,
-0.00466156005859375,
0.02276611328125,
-0.0171966552734375,
-0.03765869140625,
0.00917816162109375,
0.04669189453125,
-0.026336669921875,
-0.05023193359375,
0.031585693359375,
-0.039886474609375,
-0.0273590087890625,
-0.0263519287109375,
-0.0447998046875,
0.0139923095703125,
0.01300811767578125,
-0.00688934326171875,
0.0396728515625,
0.0173187255859375,
0.01470947265625,
0.0238037109375,
-0.0643310546875,
-0.046661376953125,
0.03192138671875,
0.055999755859375,
0.0175018310546875,
0.027191162109375,
0.01403045654296875,
0.016082763671875,
-0.0303802490234375,
0.01343536376953125,
0.0183258056640625,
0.0174407958984375,
-0.046051025390625,
0.068603515625,
-0.0026988983154296875,
0.0260772705078125,
0.018707275390625,
-0.027496337890625,
0.099609375,
0.0106353759765625,
-0.017608642578125,
0.01554107666015625,
0.021484375,
-0.03851318359375,
0.086181640625,
0.054443359375,
-0.037628173828125,
-0.00933074951171875,
0.0023746490478515625,
0.0279388427734375,
-0.01116943359375,
0.0472412109375,
0.01006317138671875,
0.052764892578125,
0.0037479400634765625,
0.033782958984375,
0.0185699462890625,
-0.0263671875,
0.035369873046875,
0.0173492431640625,
-0.007091522216796875,
0.005702972412109375,
-0.0239105224609375,
0.00675201416015625,
-0.0249786376953125,
0.011993408203125,
-0.0208740234375,
0.02093505859375,
0.0265045166015625,
-0.0142364501953125,
0.08770751953125,
0.0161285400390625,
0.0139923095703125,
-0.0180206298828125,
0.05426025390625,
0.0240936279296875,
0.028778076171875,
0.0273895263671875,
-0.00991058349609375,
0.0321044921875,
-0.0094451904296875,
0.0225982666015625,
0.00835418701171875,
0.03350830078125,
-0.041778564453125,
0.0016736984252929688,
0.039031982421875,
0.03228759765625,
0.007595062255859375,
0.022613525390625,
0.04278564453125,
0.044677734375,
-0.016937255859375,
-0.051910400390625,
-0.0034618377685546875,
0.03387451171875,
-0.018035888671875,
0.003932952880859375,
-0.03216552734375,
0.019775390625,
0.01381683349609375,
-0.00754547119140625,
-0.0455322265625,
-0.03192138671875,
-0.004833221435546875,
-0.0477294921875,
-0.0440673828125,
-0.01160430908203125,
-0.040130615234375,
-0.04022216796875,
-0.0194854736328125,
-0.0138397216796875,
-0.0167236328125,
0.0504150390625,
0.019775390625,
0.0181732177734375,
-0.0301666259765625,
-0.024078369140625,
0.017059326171875,
0.045806884765625,
0.0018529891967773438,
0.0567626953125,
0.06390380859375,
-0.03729248046875,
-0.03265380859375,
0.032196044921875,
0.042572021484375,
-0.052337646484375,
-0.0264129638671875,
-0.00365447998046875,
0.0384521484375,
0.072509765625,
0.00931549072265625,
-0.00682830810546875,
0.00521087646484375,
0.004425048828125,
0.0322265625,
0.057342529296875,
-0.0064239501953125,
0.003692626953125,
0.0173187255859375,
0.0166778564453125,
0.0036563873291015625,
-0.043060302734375,
-0.0011768341064453125,
0.0182037353515625,
0.0066070556640625,
0.015838623046875,
0.006893157958984375,
0.052001953125,
0.033843994140625,
0.0299530029296875,
-0.006256103515625,
0.0411376953125,
0.031646728515625,
-0.01259613037109375,
0.0123443603515625,
0.047271728515625,
0.0010366439819335938,
-0.0115966796875,
0.037750244140625,
0.01526641845703125,
0.061309814453125,
-0.0309906005859375,
-0.0131378173828125,
-0.055450439453125,
-0.0174407958984375,
-0.0362548828125,
-0.01453399658203125,
-0.042327880859375,
0.016204833984375,
-0.01309967041015625,
0.0030612945556640625,
-0.0219573974609375,
0.0195770263671875,
0.0167236328125,
0.01242828369140625,
-0.0290985107421875,
0.04779052734375,
-0.01316070556640625,
0.0050811767578125,
-0.0016889572143554688,
-0.054351806640625,
0.006130218505859375,
0.03802490234375,
0.01230621337890625,
0.01314544677734375,
-0.03179931640625,
-0.0193634033203125,
-0.0010175704956054688,
-0.0236663818359375,
-0.035552978515625,
0.022125244140625,
0.0280609130859375,
-0.029693603515625,
0.0179901123046875,
-0.0230255126953125,
0.0082550048828125,
0.01104736328125,
0.0308380126953125,
0.031097412109375,
0.039459228515625,
0.038055419921875,
0.0172882080078125,
0.04681396484375,
0.0201568603515625,
-0.02288818359375,
-0.01366424560546875,
-0.024200439453125,
-0.0003216266632080078,
-0.0394287109375,
0.01910400390625,
-0.01068115234375,
-0.0279083251953125,
-0.037506103515625,
-0.0213165283203125,
-0.0499267578125,
0.03338623046875,
-0.0003979206085205078,
-0.00921630859375,
-0.01361083984375,
-0.024169921875,
-0.0157318115234375,
0.0187835693359375,
0.02484130859375,
-0.00196075439453125,
0.0080718994140625,
0.041595458984375,
-0.043701171875,
0.004795074462890625,
0.04486083984375,
-0.039947509765625,
-0.018829345703125,
-0.0170745849609375,
-0.01151275634765625,
-0.0016183853149414062,
0.0284271240234375,
-0.0007610321044921875,
0.01227569580078125,
-0.0210723876953125,
-0.032989501953125,
-0.038604736328125,
-0.038818359375,
-0.001605987548828125,
-0.004940032958984375,
-0.0053558349609375,
0.00010293722152709961,
-0.03228759765625,
-0.042938232421875,
0.038665771484375,
0.05322265625,
-0.06597900390625,
-0.0498046875,
0.03204345703125,
0.05279541015625,
0.04876708984375,
-0.04449462890625,
0.06597900390625,
-0.032745361328125,
0.052581787109375,
-0.034454345703125,
-0.0014781951904296875,
-0.0015382766723632812,
0.059326171875,
0.0322265625,
-0.0165557861328125,
0.0281982421875,
-0.0276031494140625,
-0.0235595703125,
0.0419921875,
-0.06488037109375,
0.03564453125,
-0.004695892333984375,
0.01192474365234375,
-0.010162353515625,
0.058868408203125,
-0.04736328125,
0.031341552734375,
0.053314208984375,
0.0246734619140625,
-0.0211334228515625,
0.0438232421875,
0.01430511474609375,
-0.01373291015625,
-0.023406982421875,
0.0119781494140625,
-0.037139892578125,
-0.02496337890625,
0.0240631103515625,
-0.023284912109375,
-0.048431396484375,
0.0179443359375,
0.0445556640625,
-0.037506103515625,
0.00875091552734375,
0.056488037109375,
0.04278564453125,
0.051300048828125,
0.0059814453125,
0.0506591796875,
0.05029296875,
-0.032501220703125,
0.04345703125,
-0.04046630859375,
-0.050689697265625,
1.6391277313232422e-05,
0.054534912109375,
-0.0220794677734375,
-0.0269622802734375,
-0.00749969482421875,
0.0106658935546875,
0.04449462890625,
0.060516357421875,
-0.00516510009765625,
0.036651611328125,
0.0018739700317382812,
-0.042388916015625,
0.050384521484375,
0.03570556640625,
0.028594970703125,
0.03546142578125,
0.038726806640625,
-0.0252838134765625,
0.055633544921875,
0.03399658203125,
-0.04302978515625,
0.019256591796875,
-0.0085906982421875,
-0.05120849609375,
-0.008636474609375,
-0.03997802734375,
0.0169677734375,
-0.060028076171875,
0.0007867813110351562,
-0.023895263671875,
-0.0306549072265625,
0.0207061767578125,
-0.0279388427734375,
0.005512237548828125,
-0.058563232421875,
0.033538818359375,
0.02001953125,
-0.033172607421875,
-0.043853759765625,
-0.00225830078125,
-0.02825927734375,
-0.033233642578125,
0.0399169921875,
0.001705169677734375,
0.038299560546875,
0.0165863037109375,
-0.0245208740234375,
-0.007419586181640625,
-0.016143798828125,
-0.03973388671875,
-0.0096435546875,
-0.00537872314453125,
-0.003345489501953125,
0.0036792755126953125,
-0.031890869140625,
0.0247802734375,
0.0186920166015625,
-0.0300140380859375,
0.047271728515625,
-0.00400543212890625,
0.01715087890625,
-0.052459716796875,
0.04754638671875,
-0.052642822265625,
0.037109375,
0.024566650390625,
0.038238525390625,
0.0081329345703125,
-0.0310211181640625,
0.0157928466796875,
0.0140533447265625,
0.047882080078125,
-0.04730224609375,
0.0052490234375,
0.042144775390625,
0.0284881591796875,
0.045562744140625,
0.011749267578125,
0.01171112060546875,
0.0217132568359375,
-0.021697998046875,
0.0187835693359375,
-0.0130157470703125,
0.0297088623046875,
0.01788330078125,
0.01003265380859375,
0.033538818359375,
0.0155792236328125,
0.0318603515625,
0.025390625,
0.0068817138671875,
-0.00200653076171875,
-0.0147247314453125,
-0.00753021240234375,
0.0263214111328125,
0.039825439453125,
-0.0221405029296875,
-0.0246734619140625,
-0.02691650390625,
0.0380859375,
-0.00262451171875,
0.05523681640625,
0.0125274658203125,
-0.0081787109375,
-0.0435791015625,
-0.04632568359375,
-0.0302581787109375,
-0.040496826171875,
0.0026416778564453125,
0.0269927978515625,
0.046661376953125,
-0.0413818359375,
0.00026345252990722656,
0.00858306884765625,
-0.03155517578125,
0.061309814453125,
0.0328369140625,
-0.0217132568359375,
0.0007801055908203125,
0.01690673828125,
0.0014791488647460938,
-0.039093017578125,
0.0146942138671875,
-0.0269622802734375,
0.002811431884765625,
0.0498046875,
0.044891357421875,
-0.004512786865234375,
0.028076171875,
0.004100799560546875,
0.0056915283203125,
-0.0340576171875,
-0.0208282470703125,
-0.01274871826171875,
-0.03369140625,
0.0013265609741210938,
-0.01446533203125,
-0.00745391845703125,
0.0272216796875,
-0.0357666015625,
0.04656982421875,
-0.004795074462890625,
0.03448486328125,
0.017059326171875,
-0.032623291015625,
0.006961822509765625,
0.0246124267578125,
0.0269012451171875,
0.0323486328125,
-0.0167694091796875,
0.043426513671875,
0.0260162353515625,
0.0134429931640625,
-0.00156402587890625,
-0.02313232421875,
0.04022216796875,
-0.03594970703125,
-0.0258026123046875,
0.00917816162109375,
0.0290985107421875,
0.0009298324584960938,
0.053466796875,
0.05450439453125,
0.022613525390625,
-0.0325927734375,
0.058441162109375,
-0.032501220703125,
-0.00403594970703125,
0.035308837890625,
0.0159149169921875,
-0.006305694580078125,
-0.035980224609375,
-0.0243377685546875,
-0.002010345458984375,
-0.025421142578125,
0.049407958984375,
-0.039276123046875,
0.0211944580078125,
0.045440673828125,
-0.013458251953125,
-0.04571533203125,
0.0034027099609375,
-0.00376129150390625,
-0.033172607421875,
-0.0084228515625,
-0.0193328857421875,
-0.036834716796875,
-0.0200347900390625,
0.035888671875,
0.01270294189453125,
0.0244140625,
0.031768798828125,
-0.0296783447265625,
-0.03680419921875,
0.0029163360595703125,
-0.04620361328125,
-0.006259918212890625,
0.007083892822265625,
0.031341552734375,
-0.024871826171875,
-0.036102294921875,
-0.03240966796875,
-0.00710296630859375,
0.006927490234375,
0.03802490234375,
0.0401611328125,
0.01097869873046875,
0.034332275390625,
-0.030975341796875,
-0.034088134765625,
0.03826904296875,
0.06280517578125,
-0.046142578125,
-0.02032470703125,
0.0194091796875,
-0.0305938720703125,
-0.0010585784912109375,
-0.031768798828125,
0.036865234375,
0.036468505859375,
-0.0199127197265625,
0.046875,
-0.00434112548828125,
-0.0113372802734375,
0.05084228515625,
-0.01434326171875,
0.01030731201171875,
0.0017871856689453125,
0.008544921875,
0.00299072265625,
-0.0413818359375,
-0.036376953125,
0.003971099853515625,
0.0171661376953125,
-0.004108428955078125,
0.01297760009765625,
-0.0278472900390625,
0.06097412109375,
0.04766845703125,
-0.0174713134765625,
0.0255584716796875,
-0.00884246826171875,
-0.01419830322265625,
0.01776123046875,
0.029052734375,
-0.008544921875,
0.00542449951171875,
-0.04302978515625,
0.0113677978515625,
-0.033203125,
-0.0009102821350097656,
-0.0380859375,
-0.047393798828125,
-0.045074462890625,
0.0283660888671875,
-0.048858642578125,
-0.01898193359375,
0.00568389892578125,
0.0111541748046875,
0.008575439453125,
0.04888916015625,
0.02947998046875,
0.0111846923828125,
0.033203125,
0.02557373046875,
0.0247802734375,
-0.044036865234375,
-0.04095458984375,
0.0299224853515625,
0.00292205810546875,
-0.01366424560546875,
-0.0022525787353515625,
0.04913330078125,
0.0114898681640625,
-0.01934814453125,
0.0021514892578125,
0.041717529296875,
-0.039459228515625,
-0.021636962890625,
0.0252532958984375,
-0.04107666015625,
0.0012569427490234375,
0.0281219482421875,
0.0205535888671875,
-0.032196044921875,
0.043212890625,
0.02325439453125,
0.04644775390625,
0.045745849609375,
0.049468994140625,
-0.04364013671875,
-0.038787841796875,
0.0255584716796875,
-0.003353118896484375,
-0.0034008026123046875,
-0.04852294921875,
0.056121826171875,
0.00836181640625,
-0.019012451171875,
-0.0112457275390625,
-0.01073455810546875,
0.052490234375,
-0.034210205078125,
0.017333984375,
0.019775390625,
-0.0208740234375,
0.0033550262451171875,
0.029296875,
0.00824737548828125,
-0.040802001953125,
0.0268707275390625,
-0.015625,
-0.04437255859375,
0.011810302734375,
-0.051788330078125,
0.044891357421875,
-0.0042877197265625,
0.041412353515625,
-0.00031828880310058594,
-0.01021575927734375,
-0.013763427734375,
-0.046875,
0.01306915283203125,
0.0086669921875,
0.02435302734375,
-0.0203704833984375,
-0.039031982421875,
0.0020961761474609375,
-0.01953125,
-0.02099609375,
0.03277587890625,
-0.04864501953125,
0.0262603759765625,
0.036773681640625,
-0.01123809814453125,
0.0037689208984375,
-0.0171051025390625,
-0.0210418701171875,
-0.0005283355712890625,
-0.01369476318359375,
-0.0186309814453125,
-0.01238250732421875,
0.02081298828125,
-0.04052734375,
-0.01253509521484375,
0.038330078125,
-0.0501708984375,
-0.007190704345703125,
-0.0061798095703125,
0.045166015625,
0.04931640625,
0.0237274169921875,
-0.0328369140625,
-0.046905517578125,
-0.048797607421875,
-0.017425537109375,
0.004302978515625,
0.001125335693359375,
0.0078125,
-0.01019287109375,
-0.050506591796875,
-0.0313720703125,
0.0347900390625,
0.03271484375,
-0.0433349609375,
0.032379150390625,
-0.0081939697265625,
0.041900634765625,
0.03924560546875,
0.04168701171875,
-0.0115814208984375,
0.004451751708984375,
-0.02197265625,
0.054962158203125,
0.02850341796875,
0.0252532958984375,
-0.034698486328125,
-0.03973388671875,
-0.052459716796875,
0.00850677490234375,
-0.017120361328125,
-0.0273590087890625,
-0.0047607421875,
-0.038604736328125,
-0.0159149169921875,
-0.049163818359375,
-0.045379638671875,
0.04547119140625,
-0.05096435546875,
0.03173828125,
-0.0163726806640625,
-0.017669677734375,
0.00952911376953125,
-0.021942138671875,
-0.0628662109375,
-0.09381103515625,
0.029693603515625,
-0.0285797119140625,
0.07366943359375,
-0.03765869140625,
0.02032470703125,
0.0611572265625,
-0.0252227783203125,
-0.0004425048828125,
-0.0033588409423828125,
0.014556884765625,
0.015625,
0.016204833984375,
0.02850341796875,
0.01922607421875,
-0.011322021484375,
-0.0186767578125,
-0.034393310546875,
0.02349853515625,
0.053497314453125,
0.0185546875,
-0.050750732421875,
0.0263519287109375,
0.01983642578125,
-0.0282745361328125,
0.0281524658203125,
0.0401611328125,
-0.0210418701171875,
-0.0066070556640625,
-0.03326416015625,
0.0273590087890625,
-0.012054443359375,
-0.00666046142578125,
0.046722412109375,
0.030487060546875,
0.00197601318359375,
-0.0203704833984375,
0.0241546630859375,
-0.013580322265625,
-0.00989532470703125,
0.00298309326171875,
-0.046600341796875,
0.00638580322265625,
0.01235198974609375,
-0.0091552734375,
-0.00353240966796875,
-0.00847625732421875,
-0.01983642578125,
-0.038909912109375,
0.052001953125,
0.013214111328125,
0.0703125,
0.024383544921875,
-0.053863525390625,
0.044952392578125,
0.06884765625,
-0.0268096923828125,
0.0212554931640625,
0.0019311904907226562,
-0.06805419921875,
-0.019439697265625,
0.006664276123046875,
0.004901885986328125,
-0.0084381103515625,
-0.0531005859375,
0.0130462646484375,
0.04010009765625,
0.017791748046875,
-0.02557373046875,
0.039215087890625,
-0.030670166015625,
0.051849365234375,
-0.0302734375,
-0.0172576904296875,
-0.045623779296875,
-0.051422119140625,
-0.0017299652099609375,
0.04278564453125,
0.037689208984375,
-0.0024623870849609375,
0.039886474609375,
0.055206298828125,
-0.004673004150390625,
0.09539794921875,
0.05517578125,
0.04498291015625,
0.0175628662109375,
0.0130767822265625,
0.026519775390625,
-0.027618408203125,
-0.0157012939453125,
-0.01416778564453125,
-0.0009565353393554688,
-0.0241546630859375,
-0.031524658203125,
0.03509521484375,
0.019683837890625,
-0.044891357421875,
-0.0009403228759765625,
-0.0118255615234375,
0.03839111328125,
0.0241546630859375,
0.0168609619140625,
-0.01241302490234375,
-0.0064849853515625,
-0.0638427734375,
-0.0104217529296875,
0.024688720703125,
-0.024444580078125,
-0.054229736328125,
-0.034027099609375,
-0.0255584716796875,
-0.044647216796875,
0.005290985107421875,
-0.035858154296875,
-0.03167724609375,
0.0396728515625,
-0.04241943359375,
-0.0308074951171875,
0.046295166015625,
-0.01326751708984375,
-0.039947509765625,
0.0223846435546875,
0.0305938720703125,
0.038787841796875,
0.0235137939453125,
-0.017059326171875,
-0.0791015625,
-0.07196044921875,
0.047637939453125,
-0.0035419464111328125,
-0.004383087158203125,
0.03887939453125,
-0.043975830078125,
0.010345458984375,
0.0266876220703125,
0.00675201416015625,
0.042449951171875,
0.052947998046875,
-0.038482666015625,
-0.00855255126953125,
-0.0277252197265625,
-0.0228271484375,
0.007564544677734375,
0.045623779296875,
0.025848388671875,
0.0130615234375,
0.0292205810546875,
0.03460693359375,
-0.0012102127075195312,
0.0202789306640625,
-0.065185546875,
-0.06561279296875,
-0.051361083984375,
0.038360595703125,
0.0384521484375,
-0.0165557861328125,
-0.036376953125,
-0.0247955322265625,
-0.0204620361328125,
0.023681640625,
0.052703857421875,
0.004360198974609375,
-0.0350341796875,
-0.001972198486328125,
0.0263519287109375,
0.05499267578125,
0.03179931640625,
-0.018280029296875,
-0.006305694580078125,
-0.0134735107421875,
-0.007160186767578125,
-0.005489349365234375,
0.02496337890625,
0.041259765625,
-0.0057525634765625,
-0.00673675537109375,
0.06494140625,
-0.0430908203125,
0.0333251953125,
-0.049530029296875,
-0.009490966796875,
-0.0389404296875,
0.0192108154296875,
-0.025848388671875,
-0.0283966064453125,
-0.03717041015625,
-0.042633056640625,
0.058502197265625,
0.04681396484375,
0.0460205078125,
0.02313232421875,
0.0413818359375,
-0.00485992431640625,
0.0472412109375,
0.0021190643310546875,
0.055084228515625,
0.01519012451171875,
0.0212860107421875,
0.01047515869140625,
-0.08587646484375,
-0.045928955078125,
-0.0640869140625,
-0.03228759765625,
-0.01088714599609375,
0.00011241436004638672,
-0.047698974609375,
-0.049560546875,
-0.010528564453125,
0.0526123046875,
-0.004116058349609375,
0.046539306640625,
-0.00258636474609375,
0.05914306640625,
0.03057861328125,
-0.049224853515625,
-0.012603759765625,
0.019439697265625,
-0.000827789306640625,
0.04339599609375,
-0.042816162109375,
-0.024993896484375,
0.014404296875,
-0.032257080078125,
0.01934814453125,
-0.07623291015625,
-0.06866455078125,
-0.033477783203125,
-0.07366943359375,
0.0172119140625,
0.03424072265625,
-0.023468017578125,
-0.0102081298828125,
0.0017299652099609375,
-0.00582122802734375,
-0.0019855499267578125,
0.0294342041015625,
-0.032440185546875,
0.062103271484375,
-0.002643585205078125,
0.00867462158203125,
0.0025463104248046875,
0.0030803680419921875,
-0.034423828125,
-0.01226806640625,
-0.00989532470703125,
-0.007190704345703125,
0.052947998046875,
0.045257568359375,
0.009552001953125,
0.00896453857421875,
-0.005252838134765625,
0.05572509765625,
0.0173492431640625,
0.033843994140625,
-0.03790283203125,
0.060821533203125,
0.03350830078125,
-0.0169525146484375,
0.04840087890625,
-0.0189971923828125,
-0.031158447265625,
0.035980224609375,
0.06781005859375,
-0.00800323486328125,
-0.0241241455078125,
-0.031036376953125,
0.0162506103515625,
-0.03662109375,
0.038665771484375,
-0.0188446044921875,
0.029083251953125,
-0.053314208984375,
0.017730712890625,
-0.00860595703125,
0.013397216796875,
-0.06591796875,
0.01220703125,
0.00991058349609375,
0.007190704345703125,
-0.005123138427734375,
0.023712158203125,
0.023773193359375,
0.066650390625,
0.0421142578125,
0.015411376953125,
0.03338623046875,
-0.006229400634765625,
0.012664794921875,
-0.004375457763671875,
0.00746917724609375,
0.016876220703125,
0.0537109375,
-0.0245819091796875,
0.06781005859375,
-0.020477294921875,
0.013885498046875,
0.0239410400390625,
-0.004306793212890625,
-0.004825592041015625,
-0.084716796875,
-0.0552978515625,
-0.0151519775390625,
-0.0293426513671875,
0.0088653564453125,
0.018798828125,
0.0055389404296875,
-0.0025234222412109375,
-0.0270843505859375,
0.0257720947265625,
0.0150299072265625,
0.050872802734375,
0.0116119384765625,
0.02545166015625,
-0.012786865234375,
-0.02899169921875,
-0.0001596212387084961,
0.0293121337890625,
-0.01422882080078125,
-0.0021572113037109375,
0.00998687744140625,
-0.0078125,
0.0171661376953125,
-0.0009522438049316406,
0.035614013671875,
-0.0173797607421875,
0.004787445068359375,
0.04986572265625,
-0.0323486328125,
-0.0011911392211914062,
0.055877685546875,
0.0229034423828125,
0.0142669677734375,
0.0474853515625,
-0.0278472900390625,
0.028564453125,
0.020660400390625,
-0.0155181884765625,
-0.0012521743774414062,
-0.0160675048828125,
0.0284271240234375,
0.01727294921875,
0.0101165771484375,
-0.0518798828125,
-0.019805908203125,
-0.0091552734375,
0.042327880859375,
0.0294342041015625,
0.012176513671875,
0.056365966796875,
0.037506103515625,
-0.01552581787109375,
-0.036651611328125,
-0.0257415771484375,
0.0312347412109375,
-0.0081787109375,
-0.0467529296875,
0.006748199462890625,
-0.01446533203125,
0.016876220703125,
-0.05194091796875,
0.00302886962890625,
-0.01497650146484375,
0.054046630859375,
0.04058837890625,
0.0440673828125,
0.036895751953125,
0.0211334228515625,
-0.041656494140625,
0.039703369140625,
0.0267486572265625,
0.0258331298828125,
-0.0256500244140625,
0.01226043701171875,
0.00653076171875,
-0.0214996337890625,
0.04205322265625,
-0.01654052734375,
0.01044464111328125,
0.036285400390625,
0.016265869140625,
0.005340576171875,
0.0006618499755859375,
0.035797119140625,
0.048309326171875,
0.049346923828125,
-0.0145111083984375,
0.0269317626953125,
-0.046600341796875,
-0.03399658203125,
-0.0217437744140625,
-0.034881591796875,
-0.0418701171875,
0.027496337890625,
-0.038970947265625,
-0.0038089752197265625,
-0.03570556640625,
-0.027740478515625,
0.032806396484375,
-0.03973388671875,
-0.0208282470703125,
-0.0235443115234375,
0.0105438232421875,
0.032684326171875,
0.0056610107421875,
-0.05474853515625,
-0.03216552734375,
-0.0546875,
0.031951904296875,
-0.041656494140625,
-0.0303802490234375,
-0.04949951171875,
0.00885772705078125,
-0.0063934326171875,
0.048553466796875,
0.062744140625,
-0.03826904296875,
-0.07537841796875,
0.00937652587890625,
0.05352783203125,
0.00608062744140625,
-0.08050537109375,
0.01222991943359375,
-0.04290771484375,
-0.060546875,
-0.0174102783203125,
0.0291900634765625,
6.61611557006836e-05,
0.0021152496337890625,
-0.00647735595703125,
-0.042999267578125,
-0.037353515625,
0.0019092559814453125,
0.0185089111328125,
0.0158233642578125,
-0.04864501953125,
-0.057159423828125,
0.03448486328125,
-0.01143646240234375,
0.00676727294921875,
-0.0131072998046875,
-0.005420684814453125,
0.0159149169921875,
0.03741455078125,
-0.051849365234375,
-0.035369873046875,
-0.0277252197265625,
-0.05328369140625,
-0.0111541748046875,
-0.03265380859375,
0.00635528564453125,
0.026763916015625,
0.059539794921875,
-0.059356689453125,
0.036163330078125,
0.0293731689453125,
0.007335662841796875,
0.00829315185546875,
-0.0177001953125,
0.00489044189453125,
-0.041717529296875,
-0.019500732421875,
0.04498291015625,
0.028564453125,
0.010650634765625,
-0.018768310546875,
-0.0109710693359375,
0.0030498504638671875,
-0.04254150390625,
-0.01507568359375,
0.028289794921875,
0.01267242431640625,
-0.00937652587890625,
-0.0289154052734375,
0.0217437744140625,
0.0148773193359375,
0.00506591796875,
0.057525634765625,
0.08795166015625,
0.00036334991455078125,
0.0263519287109375,
0.007572174072265625,
-0.031036376953125,
0.020233154296875,
0.0418701171875,
0.059112548828125,
-0.0343017578125,
0.041351318359375,
-0.024810791015625,
0.02862548828125,
0.004749298095703125,
0.00991058349609375,
0.023193359375,
-0.041351318359375,
-0.0034351348876953125,
-0.038665771484375,
-0.044677734375,
-0.0146331787109375,
0.005550384521484375,
-0.0231781005859375,
-0.05126953125,
0.01171112060546875,
0.0218048095703125,
-0.006946563720703125,
-0.02459716796875,
-0.028656005859375,
0.04400634765625,
-0.031890869140625,
0.01212310791015625,
0.0285186767578125,
0.00389862060546875,
-0.0124969482421875,
-0.02423095703125,
0.037506103515625,
-0.0137176513671875,
0.0072021484375,
-0.006343841552734375,
0.00036835670471191406,
0.0018091201782226562,
0.07171630859375,
0.01215362548828125,
0.0121002197265625,
-0.06256103515625,
0.0120086669921875,
0.014678955078125,
-0.06915283203125,
0.04693603515625,
-0.04486083984375,
-0.0161590576171875,
-0.035247802734375,
0.0230560302734375,
-0.007244110107421875,
0.0006699562072753906,
0.02886962890625,
0.07373046875,
0.0731201171875,
-0.035400390625,
-0.049713134765625,
0.035003662109375,
0.048248291015625,
-0.0103302001953125,
0.0167236328125,
-0.0053253173828125,
0.037567138671875,
0.002292633056640625,
-0.03369140625,
0.0557861328125,
-0.00823974609375,
-0.0062713623046875,
0.032196044921875,
-0.0645751953125,
-0.04827880859375,
-0.044677734375,
-0.07855224609375,
-0.0250244140625,
-0.022369384765625,
-0.01415252685546875,
-0.05328369140625,
-0.04693603515625,
0.04937744140625,
0.072265625,
-0.00760650634765625,
0.03863525390625,
0.045562744140625,
0.021209716796875,
-0.0307769775390625,
-0.00823974609375,
-0.01551055908203125,
-0.0026111602783203125,
-0.04290771484375,
-0.0198211669921875,
0.03240966796875,
0.038848876953125,
-0.01300048828125,
-0.023101806640625,
-0.024658203125,
0.02392578125,
0.0292816162109375,
0.02685546875,
0.0086669921875,
0.0264892578125,
0.027435302734375,
0.022735595703125,
0.05224609375,
-0.0012950897216796875,
-0.0037746429443359375,
0.00919342041015625,
0.0258636474609375,
0.03387451171875,
-0.01212310791015625,
-0.007404327392578125,
-0.049285888671875,
-0.001743316650390625,
-0.00968170166015625,
0.035552978515625,
-0.03082275390625,
0.007801055908203125,
-0.050140380859375,
-0.03753662109375,
0.032623291015625,
-0.04437255859375,
-0.057220458984375,
-0.06927490234375,
-0.03704833984375,
0.0164031982421875,
-0.0201416015625,
-0.0126190185546875,
0.035064697265625,
-0.043701171875,
-0.0171051025390625,
0.01506805419921875,
0.052490234375,
0.047271728515625,
0.01499176025390625,
-0.00348663330078125,
-0.006687164306640625,
-0.0113372802734375,
0.05645751953125,
0.027069091796875,
-0.0006422996520996094,
-0.0576171875,
0.068603515625,
0.07427978515625,
-0.00890350341796875,
-0.0169525146484375,
-0.021026611328125,
-0.06689453125,
-0.01189422607421875,
-0.037567138671875,
-0.026458740234375,
0.0164337158203125,
-0.07879638671875,
-0.0772705078125,
0.031280517578125,
0.023223876953125,
0.06182861328125,
-0.01544952392578125,
-0.0023517608642578125,
0.01806640625,
-0.0103912353515625,
0.002838134765625,
-0.01381683349609375,
0.06353759765625,
0.0621337890625,
-0.0145263671875,
0.01336669921875,
-0.0178070068359375,
0.0189666748046875,
-0.0204925537109375,
0.0021877288818359375,
-0.04718017578125,
0.038299560546875,
-0.01403045654296875,
0.068115234375,
0.02069091796875,
0.0309600830078125,
0.045196533203125,
0.001049041748046875,
0.0237579345703125,
0.049591064453125,
0.048431396484375,
0.006439208984375,
0.025787353515625,
0.035736083984375,
-0.011383056640625,
0.0308380126953125,
-0.01331329345703125,
-0.0112762451171875,
-0.052001953125,
-0.033294677734375,
-0.00603485107421875,
0.0112152099609375,
-0.013671875,
0.0015811920166015625,
-0.0103607177734375,
0.037109375,
-0.056427001953125,
-0.03204345703125,
-0.0162353515625,
0.037017822265625,
-0.0296783447265625,
-0.028411865234375,
0.05157470703125,
0.0028553009033203125,
0.0298919677734375,
-0.032196044921875,
0.03125,
-0.002010345458984375,
0.0653076171875,
0.06689453125,
-0.04010009765625,
-0.025177001953125,
0.00830841064453125,
-0.053466796875,
-0.0046844482421875,
-0.004856109619140625,
-0.007747650146484375,
0.037841796875,
-0.0284271240234375,
-0.01036834716796875,
-0.0182647705078125,
-0.049285888671875,
-0.040618896484375,
0.0653076171875,
-0.00812530517578125,
-0.054931640625,
-0.05352783203125,
-0.01290130615234375,
0.0286102294921875,
0.0051422119140625,
0.060302734375,
0.0189361572265625,
-0.01290130615234375,
0.031036376953125,
0.0482177734375,
0.03692626953125,
-0.01371002197265625,
0.034637451171875,
-0.012542724609375,
0.03717041015625,
-0.00872802734375,
0.002307891845703125,
0.053466796875,
0.041290283203125,
-0.0269317626953125,
-0.0137939453125,
0.0240325927734375,
0.050537109375,
-0.00498199462890625,
-0.058258056640625,
-0.0039215087890625,
-0.031951904296875,
0.0273590087890625,
-0.055633544921875,
-0.044830322265625,
0.00270843505859375,
-0.04217529296875,
0.036956787109375,
-0.0229949951171875,
0.037994384765625,
0.059326171875,
-0.004512786865234375,
-0.05078125,
-0.00928497314453125,
0.0217132568359375,
0.0160980224609375,
-0.01102447509765625,
-0.0062255859375,
0.009490966796875,
-0.057586669921875,
-0.07598876953125,
0.01206207275390625,
-0.0171966552734375,
0.0241546630859375,
-0.01305389404296875,
0.0072021484375,
-0.02471923828125,
-0.04315185546875,
0.0465087890625,
-0.0259857177734375,
-0.040069580078125,
-0.03643798828125,
0.03814697265625,
0.015869140625,
0.01971435546875,
0.0396728515625,
0.0237579345703125,
0.0240478515625,
-0.00553131103515625,
-0.036895751953125,
-0.028778076171875,
-0.015655517578125,
0.01058197021484375,
-0.06005859375,
0.004489898681640625,
-0.0667724609375,
-0.035064697265625,
0.03765869140625,
-0.0115814208984375,
0.0406494140625,
0.0069732666015625,
-0.049835205078125,
-0.027801513671875,
0.0494384765625,
0.0008792877197265625,
-0.0229644775390625,
-0.043975830078125,
-0.039093017578125,
-0.0034618377685546875,
0.01557159423828125,
0.00768280029296875,
0.053497314453125,
0.03656005859375,
-0.018768310546875,
-0.059722900390625,
0.00933837890625,
-0.006282806396484375,
-0.0533447265625,
-0.03564453125,
-0.0273895263671875,
-0.03973388671875,
-0.047119140625,
-0.046905517578125,
-0.05169677734375,
-0.032867431640625,
-0.01454925537109375,
-0.006591796875,
0.0174560546875,
-0.01324462890625,
0.03387451171875,
0.046142578125,
-0.04522705078125,
0.0291748046875,
0.00475311279296875,
-0.0172119140625,
0.042938232421875,
-0.04327392578125,
0.01335906982421875,
0.0001424551010131836,
-0.01450347900390625,
-0.013916015625,
-0.03460693359375,
-0.021270751953125,
0.0265655517578125,
0.044464111328125,
-0.043975830078125,
-0.007320404052734375,
-0.04644775390625,
-0.017547607421875,
-0.031951904296875,
0.04046630859375,
-0.007045745849609375,
0.04541015625,
-0.0126800537109375,
0.0225830078125,
-0.050201416015625,
6.794929504394531e-05,
0.0265655517578125,
-0.0181884765625,
-0.0128021240234375,
0.014739990234375,
-0.0255889892578125,
-0.047027587890625,
0.04827880859375,
-0.0282440185546875,
0.05120849609375,
0.025543212890625,
0.01001739501953125,
0.02545166015625,
-0.01165771484375,
-0.0235595703125,
-0.031829833984375,
-0.015869140625,
0.033721923828125,
-0.031219482421875,
0.0012979507446289062,
-0.0361328125,
-0.044281005859375,
0.025177001953125,
0.04461669921875,
0.032440185546875,
-0.008758544921875,
0.01348114013671875,
0.02978515625,
-0.003200531005859375,
0.033935546875,
-0.032470703125,
-0.0333251953125,
-0.0244140625,
-0.0251312255859375,
-0.01499176025390625,
0.0279083251953125,
-0.031280517578125,
-0.04608154296875,
0.0241851806640625,
0.0283355712890625,
0.019439697265625,
0.01033782958984375,
0.021026611328125,
-0.002704620361328125,
0.043914794921875,
-0.0004925727844238281,
-0.00942230224609375,
-0.033843994140625,
0.00994873046875,
0.03466796875,
0.00659942626953125,
0.0196075439453125,
0.034393310546875,
-0.039337158203125,
0.033050537109375,
-0.0022945404052734375,
-0.0299530029296875,
0.0164794921875,
0.0390625,
-0.01082611083984375,
0.024017333984375,
0.04949951171875,
-0.044708251953125,
-0.018157958984375,
0.0269012451171875,
-0.0249786376953125,
0.0308074951171875,
-0.033294677734375,
0.006320953369140625,
-0.00662994384765625,
-0.0054779052734375,
-0.01629638671875,
0.044769287109375,
-0.0042266845703125,
0.01324462890625,
-0.040191650390625,
-0.032318115234375,
0.0138092041015625,
0.01329803466796875,
-0.0287628173828125,
0.005947113037109375,
-0.01763916015625,
-0.01111602783203125,
-0.04095458984375,
-0.03314208984375,
0.0292205810546875,
-0.01107025146484375,
0.03851318359375,
-0.036285400390625,
0.040740966796875,
-0.00449371337890625,
0.0196380615234375,
0.01061248779296875,
-0.044525146484375,
0.01837158203125,
0.0379638671875,
-0.0179443359375,
0.016845703125,
0.0440673828125,
0.0516357421875,
-0.01253509521484375,
0.03460693359375,
0.017242431640625,
0.00110626220703125,
-0.00746917724609375,
-0.0229644775390625,
-0.0318603515625,
-0.022857666015625,
0.0210723876953125,
0.0167236328125,
-0.01392364501953125,
0.01641845703125,
0.017822265625,
-0.01519012451171875,
0.03369140625,
0.038787841796875,
0.0472412109375,
-0.0304412841796875,
0.00835418701171875,
0.044281005859375,
0.03253173828125,
-0.03472900390625,
-0.0299224853515625,
0.01119232177734375,
0.046173095703125,
0.051513671875,
0.0255889892578125,
0.04119873046875,
0.01222991943359375,
0.021514892578125,
0.00438690185546875,
0.0168914794921875,
0.059814453125,
-0.039947509765625,
0.0271148681640625,
-0.050750732421875,
0.0135345458984375,
0.0241546630859375,
0.01299285888671875,
0.003570556640625,
-0.0001780986785888672,
-0.03240966796875,
-0.050811767578125,
-0.032928466796875,
0.043853759765625,
0.039093017578125,
0.0160675048828125,
0.010528564453125,
-0.0301666259765625,
0.0279388427734375,
-0.0306396484375,
0.0032329559326171875,
0.011077880859375,
0.004169464111328125,
-0.034912109375,
-0.0156402587890625,
-0.01522064208984375,
-0.038238525390625,
0.039093017578125,
0.018463134765625,
-0.027313232421875,
0.0217742919921875,
0.01593017578125,
0.04241943359375,
0.033050537109375,
0.00540924072265625,
-0.04290771484375,
-0.006500244140625,
0.0055389404296875,
-0.04498291015625,
0.029205322265625,
0.01110076904296875,
-0.017547607421875,
-0.0305023193359375,
0.058990478515625,
0.0200042724609375,
-0.053741455078125,
0.0082244873046875,
0.0218353271484375,
-0.0177154541015625,
-0.0311737060546875,
-0.00867462158203125,
0.01427459716796875,
-0.0038051605224609375,
0.00908660888671875,
0.03558349609375,
-0.019561767578125,
-0.021636962890625,
0.0283966064453125,
-0.027801513671875,
-0.046478271484375,
0.045562744140625,
-0.047576904296875,
0.001922607421875,
0.01247406005859375,
-0.0198516845703125,
-0.005359649658203125,
-0.0301971435546875,
-0.0277099609375,
-0.0092315673828125,
0.034820556640625,
-0.01050567626953125,
-0.024810791015625,
0.000705718994140625,
-0.0256500244140625,
-0.02093505859375,
-0.016265869140625,
-0.031494140625,
0.041107177734375,
-0.02178955078125,
0.04425048828125,
-0.016632080078125,
-0.05572509765625,
-0.041290283203125,
-0.0516357421875,
-0.01105499267578125,
0.01122283935546875,
0.017730712890625,
0.038543701171875,
-0.044403076171875,
0.0224609375,
-0.0328369140625,
0.0025386810302734375,
-0.0114898681640625,
-0.0284423828125,
-0.024993896484375,
0.0169219970703125,
-0.006011962890625,
0.01361846923828125,
0.00464630126953125,
-0.03778076171875,
0.0400390625,
0.0241241455078125,
-0.035858154296875,
-0.002452850341796875,
0.0243072509765625,
0.01163482666015625,
-0.002063751220703125,
-0.01378631591796875,
-0.00171661376953125,
0.03167724609375,
-0.04693603515625,
0.0009279251098632812,
0.01458740234375,
0.00722503662109375,
-0.0367431640625,
-0.0306854248046875,
-0.0352783203125,
-0.0307769775390625,
0.0234222412109375,
0.036773681640625,
-0.03515625,
0.02325439453125,
0.0458984375,
0.0277862548828125,
-0.005527496337890625,
0.0161590576171875,
-0.0103302001953125,
0.01274871826171875,
-0.0214080810546875,
-0.0034503936767578125,
0.017822265625,
-0.001476287841796875,
0.042816162109375,
-0.054595947265625,
0.0345458984375,
-0.0014629364013671875,
0.0015392303466796875,
0.023193359375,
0.021484375,
-0.0123443603515625,
-0.024322509765625,
0.0180816650390625,
-0.046539306640625,
-0.0241851806640625,
0.043975830078125,
-0.01129913330078125,
0.0270233154296875,
0.0015277862548828125,
0.053619384765625,
0.0168609619140625,
0.0305633544921875,
-0.01611328125,
-0.028594970703125,
-0.0244598388671875,
-0.0197601318359375,
-0.0262298583984375,
0.0240936279296875,
0.006866455078125,
0.006649017333984375,
0.019775390625,
-0.035888671875,
0.044189453125,
-0.0418701171875,
0.04339599609375,
-0.0227203369140625,
0.029632568359375,
-0.039825439453125,
0.0159759521484375,
0.01139068603515625,
-0.01216888427734375,
-0.004817962646484375,
-0.0421142578125,
-0.033966064453125,
-0.0035247802734375,
0.0121307373046875,
0.041229248046875,
0.02532958984375,
-0.0255279541015625,
-0.02484130859375,
0.034515380859375,
-0.031158447265625,
0.0130462646484375,
-0.017333984375,
-0.0283660888671875,
-0.0134429931640625,
-0.019195556640625,
-0.0123748779296875,
-0.0330810546875,
0.0087432861328125,
0.040191650390625,
-0.0208892822265625,
-0.041778564453125,
-0.038665771484375,
-0.044677734375,
-0.040924072265625,
-0.01369476318359375,
-0.028564453125,
0.033966064453125,
0.03851318359375,
-0.02947998046875,
0.040618896484375,
0.040618896484375,
0.03692626953125,
-0.034881591796875,
-0.01499176025390625,
0.004413604736328125,
-0.034027099609375,
-0.053253173828125,
-0.0217437744140625,
0.028472900390625,
0.0240631103515625,
-0.03424072265625,
0.01187896728515625,
-0.024658203125,
-0.0085296630859375,
0.033294677734375,
-0.044036865234375,
0.00885772705078125,
-0.0408935546875,
-0.0560302734375,
0.043426513671875,
-0.029693603515625,
0.04583740234375,
0.0284576416015625,
-0.01071929931640625,
0.03192138671875,
-0.037322998046875,
0.01322174072265625,
0.00798797607421875,
0.03106689453125,
0.040313720703125,
0.0009226799011230469,
0.0006756782531738281,
0.04510498046875,
-0.048126220703125,
-0.056976318359375,
-0.060577392578125,
0.06658935546875,
0.0377197265625,
0.00902557373046875,
-0.05023193359375,
0.03863525390625,
0.054595947265625,
0.050811767578125,
-0.030792236328125,
0.0279388427734375,
-0.0408935546875,
-0.046661376953125,
0.03228759765625,
-0.06256103515625,
0.002315521240234375,
0.00811767578125,
-0.025238037109375,
-0.061279296875,
-0.004505157470703125,
-0.0085906982421875,
-0.003993988037109375,
-0.00936126708984375,
0.0183868408203125,
0.0264434814453125,
0.00945281982421875,
0.044342041015625,
0.06842041015625,
0.048797607421875,
0.06597900390625,
0.01430511474609375,
0.065185546875,
9.649991989135742e-05,
-0.0302581787109375,
0.036376953125,
-0.03778076171875,
-0.01256561279296875,
0.0223541259765625,
0.04400634765625,
0.01055145263671875,
-0.01329803466796875,
-0.0014104843139648438,
0.004253387451171875,
-0.0084686279296875,
0.01528167724609375,
-0.0256500244140625,
-0.062255859375,
-0.050750732421875,
0.0243682861328125,
-0.0182952880859375,
0.03424072265625,
0.0164337158203125,
-0.0264129638671875,
0.04644775390625,
0.0250701904296875,
0.00576019287109375,
-0.01412200927734375,
-0.0209808349609375,
-0.0286102294921875,
0.025482177734375,
0.002857208251953125,
0.00298309326171875,
-0.015625,
0.02587890625,
-0.0216522216796875,
0.008209228515625,
-0.006465911865234375,
-0.0321044921875,
0.06768798828125,
0.001953125,
-0.006404876708984375,
-0.009429931640625,
0.013275146484375,
0.041839599609375,
0.004680633544921875,
-0.01100921630859375,
-0.018157958984375,
-0.025421142578125,
-0.041748046875,
0.032684326171875,
0.044891357421875,
0.03497314453125,
-0.006153106689453125,
0.00321197509765625,
0.012939453125,
-0.01149749755859375,
0.012939453125,
-0.034698486328125,
-0.004436492919921875,
-0.001739501953125,
0.007633209228515625,
-0.004207611083984375,
-0.036468505859375,
-0.0107879638671875,
0.0496826171875,
0.01285552978515625,
-0.01180267333984375,
0.0343017578125,
0.0269622802734375,
0.04681396484375,
0.0213470458984375,
-0.02691650390625,
-0.02398681640625,
0.0296783447265625,
0.037078857421875,
0.005619049072265625,
-0.0224761962890625,
0.00576019287109375,
0.00608062744140625,
-0.0193634033203125,
-0.00954437255859375,
0.025177001953125,
0.06494140625,
-0.001239776611328125,
0.0482177734375,
0.039581298828125,
0.031707763671875,
0.03961181640625,
0.042236328125,
-0.0014495849609375,
-0.0360107421875,
0.0399169921875,
-0.035552978515625,
-0.039398193359375,
-0.068115234375,
-0.056671142578125,
-0.024566650390625,
-0.0037078857421875,
-0.01959228515625,
0.029571533203125,
0.05133056640625,
0.025543212890625,
-0.0027637481689453125,
0.00577545166015625,
-0.01459503173828125,
0.041900634765625,
-0.0063629150390625,
0.0190582275390625,
0.03472900390625,
0.06463623046875,
0.05523681640625,
0.025665283203125,
-0.0325927734375,
0.0301971435546875,
-0.005035400390625,
0.00640106201171875,
0.062042236328125,
0.0105743408203125,
0.01392364501953125,
-0.049163818359375,
0.0248260498046875,
-0.03662109375,
0.0283355712890625,
-0.011260986328125,
-0.02838134765625,
-0.035247802734375,
-0.05316162109375,
-0.00865936279296875,
0.043182373046875,
-0.00323486328125,
-0.0302734375,
-0.05938720703125,
-0.02655029296875,
-0.025421142578125,
0.006649017333984375,
0.01299285888671875,
0.029327392578125,
-0.0210723876953125,
0.0209503173828125,
0.034027099609375,
0.022705078125,
0.03094482421875,
0.017364501953125,
-0.0123291015625,
-0.006580352783203125,
-0.01543426513671875,
0.0067901611328125,
0.042266845703125,
-0.01187896728515625,
0.035186767578125,
0.0218963623046875,
-0.002483367919921875,
0.0181732177734375,
0.031982421875,
0.0170135498046875,
0.04571533203125,
0.0165252685546875,
0.046112060546875,
0.005786895751953125,
0.0435791015625,
0.00762176513671875,
-0.0189056396484375,
-0.032073974609375,
-0.0390625,
0.01873779296875,
-0.03143310546875,
-0.000728607177734375,
0.0390625,
0.005382537841796875,
-0.0831298828125,
-0.01479339599609375,
0.041839599609375,
-0.014984130859375,
-0.0751953125,
0.015960693359375,
-0.032440185546875,
-0.04443359375,
-0.054443359375,
0.044769287109375,
0.0186767578125,
0.044677734375,
0.02191162109375,
-0.0253753662109375,
0.0005249977111816406,
0.03253173828125,
0.039886474609375,
0.05401611328125,
0.01055908203125,
0.032684326171875,
0.0227203369140625,
0.0703125,
0.054107666015625,
-0.005184173583984375,
-0.022125244140625,
-0.0044403076171875,
0.00391387939453125,
-0.01611328125,
-0.005649566650390625,
-0.03594970703125,
-0.031585693359375,
0.0035686492919921875,
0.006633758544921875,
-0.002532958984375,
0.02435302734375,
0.009765625,
-0.00458526611328125,
0.039947509765625,
0.06585693359375,
-0.08294677734375,
-0.01113128662109375,
0.00867462158203125,
0.01021575927734375,
0.0555419921875,
0.01316070556640625,
0.020538330078125,
0.0362548828125,
0.034576416015625,
0.05792236328125,
0.0701904296875,
0.0180206298828125,
0.047119140625,
0.0355224609375,
-0.0011396408081054688,
-0.027984619140625,
0.019500732421875,
0.0634765625,
-0.01537322998046875,
0.039031982421875,
0.020263671875,
0.005748748779296875,
0.0775146484375,
0.0328369140625,
0.033111572265625,
-0.01666259765625,
0.04644775390625,
0.067626953125,
-0.05401611328125,
-0.045989990234375,
-0.024627685546875,
0.0416259765625,
0.037750244140625,
0.0208740234375,
0.044921875,
-0.0208282470703125,
-0.057159423828125,
-0.0546875,
-0.024444580078125,
0.057220458984375,
-0.054595947265625,
0.04071044921875,
-0.033477783203125,
-0.004856109619140625,
0.05023193359375,
-0.057220458984375,
0.053741455078125,
0.045684814453125,
-0.0105743408203125,
0.0379638671875,
-0.00229644775390625,
0.051239013671875,
0.050994873046875,
0.01447296142578125,
-0.0248260498046875,
0.021484375,
-0.017578125,
0.001041412353515625,
0.06329345703125,
0.004238128662109375,
-0.049713134765625,
0.00809478759765625,
0.02288818359375,
-0.005039215087890625,
-0.03436279296875,
0.033172607421875,
0.0208282470703125,
-0.001148223876953125,
-0.0069580078125,
-0.031585693359375,
0.053497314453125,
-0.0082550048828125,
0.05108642578125,
0.0184478759765625,
-0.042755126953125,
-0.054473876953125,
0.039703369140625,
0.022308349609375,
-0.0069122314453125,
-0.053497314453125,
-0.01404571533203125,
0.05450439453125,
0.01052093505859375,
0.03466796875,
-0.0045928955078125,
0.0188751220703125,
0.048095703125,
-0.00818634033203125,
0.02911376953125,
0.046356201171875,
-0.0127716064453125,
0.026458740234375,
-0.053192138671875,
-0.051727294921875,
-0.0214385986328125,
0.039337158203125,
-0.034027099609375,
-0.005504608154296875,
0.04510498046875,
-0.045623779296875,
-0.0322265625,
-0.0458984375,
0.01503753662109375,
-0.0099945068359375,
-0.02490234375,
-0.051422119140625,
-0.004390716552734375,
0.02490234375,
-0.02679443359375,
-0.030670166015625,
0.053070068359375,
-0.057037353515625,
-0.01067352294921875,
0.041259765625,
0.045501708984375,
-0.0011224746704101562,
-0.0487060546875,
0.01244354248046875,
0.002044677734375,
0.057220458984375,
0.031463623046875,
0.022552490234375,
0.0292510986328125,
0.032684326171875,
0.0126495361328125,
0.03448486328125,
0.040130615234375,
0.0199737548828125,
-0.055694580078125,
-0.033721923828125,
-0.049163818359375,
0.054595947265625,
0.0269927978515625,
-0.0109100341796875,
-0.00684356689453125,
0.046539306640625,
0.0017976760864257812,
-0.003513336181640625,
0.02105712890625,
0.048736572265625,
0.043182373046875,
0.0229034423828125,
0.032196044921875,
-0.024749755859375,
0.068359375,
0.0150146484375,
0.010711669921875,
0.0170135498046875,
0.0294189453125,
-0.01039886474609375,
-0.03070068359375,
-0.0416259765625,
0.02734375,
-0.0021038055419921875,
0.01983642578125,
-0.05169677734375,
-0.06011962890625,
-0.025299072265625,
-0.0616455078125,
-0.0406494140625,
0.004917144775390625,
-0.01073455810546875,
-0.0069427490234375,
-0.02154541015625,
0.011749267578125,
-0.016204833984375,
-0.0292205810546875,
0.022308349609375,
0.038787841796875,
-0.08843994140625,
-0.0697021484375,
-0.09259033203125,
-0.059906005859375,
-0.00977325439453125,
-0.03173828125,
-0.01064300537109375,
-0.09716796875,
-0.0906982421875,
-0.02606201171875,
0.017669677734375,
-0.013214111328125,
0.01313018798828125,
0.04058837890625,
-0.017333984375,
-0.03521728515625,
-0.0391845703125,
-0.06439208984375,
-0.046966552734375,
0.01288604736328125,
0.03521728515625,
0.043212890625,
-0.02392578125,
-0.060333251953125,
0.00922393798828125,
-0.0206756591796875,
-0.06689453125,
-0.018096923828125,
0.011505126953125,
-0.040771484375,
0.034454345703125,
-0.0201263427734375,
0.0096588134765625,
0.0570068359375,
0.05487060546875,
0.00579071044921875,
-0.03155517578125,
-0.0104217529296875,
0.0419921875,
-0.0295562744140625,
0.0183258056640625,
0.019256591796875,
-0.00768280029296875,
-0.06536865234375,
-0.0130157470703125,
-0.01422119140625,
0.006381988525390625,
-0.00013756752014160156,
-0.016815185546875,
-0.00778961181640625,
0.0174560546875,
0.04754638671875,
0.0236663818359375,
-0.061920166015625,
-0.01239013671875,
0.043365478515625,
-0.0220184326171875,
0.0133819580078125,
0.044952392578125,
0.05767822265625,
0.00615692138671875,
-0.041534423828125,
-0.0278778076171875,
-0.0738525390625,
-0.08050537109375,
-0.043548583984375,
0.01352691650390625,
-0.029998779296875,
-0.053985595703125,
-0.084228515625,
-0.040618896484375,
-0.040985107421875,
0.0135040283203125,
-0.0024852752685546875,
-0.0340576171875,
-0.006008148193359375,
0.004547119140625,
0.0242919921875,
0.061309814453125,
0.0281829833984375,
-0.0158843994140625,
0.0165557861328125,
0.02838134765625,
-0.074951171875,
-0.10137939453125,
0.0121917724609375,
0.016815185546875,
0.0626220703125,
0.00833892822265625,
-0.00678253173828125,
-0.0208282470703125,
-0.01461029052734375,
-0.01230621337890625,
0.0535888671875,
-0.004032135009765625,
-0.06640625,
-0.0299072265625,
0.01593017578125,
0.04925537109375,
0.05535888671875,
0.033233642578125,
-0.0232391357421875,
0.00235748291015625,
0.0035152435302734375,
0.029632568359375,
-0.0024776458740234375,
-0.057861328125,
0.0037517547607421875,
-0.035736083984375,
-0.06829833984375,
-0.005077362060546875,
-0.0665283203125,
-0.07781982421875,
0.00034499168395996094,
-0.0294952392578125,
-0.01227569580078125,
-0.0216064453125,
0.0231475830078125,
0.0112152099609375,
0.06878662109375,
-0.01451873779296875,
-0.004314422607421875,
0.0023746490478515625,
0.023529052734375,
0.0022029876708984375,
0.0171051025390625,
-0.005504608154296875,
0.052825927734375,
0.07672119140625,
-0.0217132568359375,
0.015655517578125,
-0.005706787109375,
0.050994873046875,
0.053466796875,
-0.059478759765625,
0.03009033203125,
0.04180908203125,
0.06610107421875,
-0.1063232421875,
-0.077392578125,
-0.006587982177734375,
0.06243896484375,
0.032501220703125,
0.0557861328125,
0.056732177734375,
0.0208587646484375,
-0.017913818359375,
0.0562744140625,
0.05352783203125,
-5.245208740234375e-06,
0.031585693359375,
0.00666046142578125,
0.0565185546875,
0.054901123046875,
0.0135650634765625,
-0.018096923828125,
0.041259765625,
-0.0120697021484375,
0.043853759765625,
-0.0003077983856201172,
-0.008056640625,
0.09625244140625,
0.055389404296875,
-0.01081085205078125,
-0.03814697265625,
0.024444580078125,
-0.032257080078125,
-0.02288818359375,
0.002655029296875,
-0.03594970703125,
0.01287841796875,
0.0279998779296875,
0.025665283203125,
0.0260467529296875,
-0.01605224609375,
-0.031219482421875,
0.059600830078125,
0.04620361328125,
0.052398681640625,
-0.004421234130859375,
-0.040924072265625,
0.0204010009765625,
0.0013723373413085938,
0.0005726814270019531,
0.006011962890625,
-0.055572509765625,
0.01224517822265625,
0.009674072265625,
-0.06451416015625,
-0.02581787109375,
0.0240020751953125,
0.0631103515625,
0.08197021484375,
0.074462890625,
0.04290771484375,
-0.019317626953125,
0.0012836456298828125,
0.052734375,
0.0035724639892578125,
0.00481414794921875,
-0.0025539398193359375,
0.017669677734375,
0.0022182464599609375,
0.0007877349853515625,
0.00119781494140625,
0.0245819091796875,
0.0325927734375,
0.04364013671875,
0.0210723876953125,
-0.028045654296875,
-0.034149169921875,
0.0679931640625,
0.08416748046875,
0.022705078125,
-0.047088623046875,
0.040435791015625,
0.083984375,
0.004810333251953125,
-0.0014562606811523438,
0.0035343170166015625,
0.0236968994140625,
0.024200439453125,
0.033416748046875,
-0.00043487548828125,
-0.0158538818359375,
-0.04034423828125,
0.0198211669921875,
-0.047393798828125,
0.00978851318359375,
0.0220184326171875,
0.0516357421875,
0.01229095458984375,
-0.01155853271484375,
0.00980377197265625,
-0.042388916015625,
0.044769287109375,
0.06121826171875,
0.036285400390625,
-0.0609130859375,
-0.0265960693359375,
-0.049468994140625,
0.036407470703125,
-0.008331298828125,
-0.029052734375,
-0.0850830078125,
0.00933837890625,
0.03387451171875,
-0.045806884765625,
0.0560302734375,
0.0122833251953125,
0.0372314453125,
0.005672454833984375,
-0.026702880859375,
0.0455322265625,
0.05218505859375,
-0.069580078125,
-0.0189208984375,
0.042724609375,
0.0643310546875,
0.033355712890625,
-0.005611419677734375,
-0.0308074951171875,
0.004024505615234375,
-0.058380126953125,
-0.0340576171875,
-0.040496826171875,
0.006465911865234375,
0.046844482421875,
0.00814056396484375,
0.0028228759765625,
0.0055694580078125,
-0.02947998046875,
0.0269775390625,
0.0501708984375,
-0.002391815185546875,
-0.0149688720703125,
-0.0179443359375,
0.01261138916015625,
-0.0309295654296875,
0.01488494873046875,
-0.01507568359375,
-0.017333984375,
0.00438690185546875,
-0.0255126953125,
-0.04779052734375,
0.0091400146484375,
-0.01396942138671875,
0.04693603515625,
-0.039398193359375,
0.016510009765625,
0.0048370361328125,
0.07916259765625,
0.08868408203125,
-0.004611968994140625,
-0.0142669677734375,
-0.0096282958984375,
0.006031036376953125,
-0.007312774658203125,
-0.007293701171875,
-0.0229949951171875,
0.024871826171875,
0.040771484375,
0.050323486328125,
-0.00800323486328125,
-0.03314208984375,
0.0289459228515625,
-0.0016946792602539062,
0.02935791015625,
-0.044891357421875,
0.037567138671875,
-0.036102294921875,
-0.04327392578125,
-0.0252685546875,
0.0587158203125,
-0.03985595703125,
0.0081939697265625,
-0.04510498046875,
-0.0037899017333984375,
0.023651123046875,
-0.04730224609375,
0.03936767578125,
-0.004917144775390625,
-0.01476287841796875,
-0.0279998779296875,
-0.005168914794921875,
-0.0310211181640625,
0.01197052001953125,
0.042999267578125,
0.01371002197265625,
0.0032062530517578125,
-0.05438232421875,
-0.05084228515625,
0.037261962890625,
0.0270538330078125,
0.03515625,
-0.042510986328125,
-0.042510986328125,
0.0009288787841796875,
-0.045440673828125,
-0.07916259765625,
0.0170745849609375,
-0.029937744140625,
-0.045135498046875,
-0.0562744140625,
-0.02557373046875,
-0.0165557861328125,
0.031402587890625,
-0.0012187957763671875,
0.0016870498657226562,
-0.0028934478759765625,
-0.030517578125,
-0.029693603515625,
-0.015777587890625,
0.00015425682067871094,
0.05255126953125,
-0.007068634033203125,
-0.0301513671875,
0.0189666748046875,
-0.0014934539794921875,
0.05816650390625,
-0.01971435546875,
-0.00917816162109375,
0.00261688232421875,
-0.07818603515625,
-0.04180908203125,
0.0673828125,
-0.0306396484375,
-0.010772705078125,
-0.0638427734375,
-0.0413818359375,
-0.046905517578125,
-0.08087158203125,
-0.06072998046875,
0.01025390625,
0.046142578125,
0.0144195556640625,
0.0117034912109375,
-0.004180908203125,
-0.0550537109375,
-0.005214691162109375,
0.01134490966796875,
0.0120697021484375,
0.0248565673828125,
0.06951904296875,
0.06768798828125,
-0.025543212890625,
-0.01250457763671875,
0.059478759765625,
-0.0033416748046875,
-0.001438140869140625,
0.0223388671875,
0.015533447265625,
-0.037811279296875,
-0.0118408203125,
-0.002208709716796875,
-0.03759765625,
0.0474853515625,
0.046234130859375,
0.0055389404296875,
-0.00914764404296875,
0.0303192138671875,
0.057952880859375,
-0.0003612041473388672,
0.034088134765625,
0.0296783447265625,
0.020904541015625,
0.0013904571533203125,
-0.053741455078125,
0.01666259765625,
0.053741455078125,
-0.004505157470703125,
-0.00469970703125,
-0.00894927978515625,
-0.037567138671875,
-0.02569580078125,
-0.033935546875,
0.043701171875,
0.00347900390625,
0.0159149169921875,
-0.01125335693359375,
0.0139007568359375,
-0.004291534423828125,
-0.0391845703125,
0.00733184814453125,
0.04718017578125,
-0.01049041748046875,
0.00335693359375,
-0.039703369140625,
0.05438232421875,
0.029541015625,
0.0458984375,
-0.0030517578125,
0.0264739990234375,
-0.0042724609375,
-0.05560302734375,
0.033721923828125,
0.00022602081298828125,
0.04010009765625,
0.0113525390625,
-0.030303955078125,
0.029998779296875,
-0.02972412109375,
-0.01222991943359375,
0.00439453125,
0.059478759765625,
-0.04693603515625,
-0.014007568359375,
0.042205810546875,
-0.0267486572265625,
0.0125885009765625,
0.0113372802734375,
-0.021484375,
-0.00710296630859375,
-0.056793212890625,
-0.0333251953125,
-0.035369873046875,
-0.05694580078125,
-0.005161285400390625,
0.033447265625,
-0.04925537109375,
0.002719879150390625,
0.050750732421875,
-0.03399658203125,
0.027435302734375,
0.05419921875,
0.0303955078125,
0.0023326873779296875,
-0.02410888671875,
-0.0255889892578125,
-0.0163421630859375,
0.0347900390625,
0.05059814453125,
0.039794921875,
0.0386962890625,
0.033172607421875,
0.05572509765625,
-0.03125,
-0.0216827392578125,
0.0234527587890625,
0.061370849609375,
-0.039886474609375,
-0.046356201171875,
-0.035308837890625,
0.049407958984375,
0.048919677734375,
0.01097869873046875,
-0.055999755859375,
-0.034759521484375,
0.0284881591796875,
0.0018377304077148438,
0.050201416015625,
0.05548095703125,
0.0210418701171875,
0.006561279296875,
-0.036773681640625,
-0.003826141357421875,
-0.052276611328125,
0.027740478515625,
0.0369873046875,
0.007770538330078125,
0.034271240234375,
0.0002415180206298828,
-0.032073974609375,
0.0160064697265625,
0.037322998046875,
-0.007701873779296875,
0.05596923828125,
0.01241302490234375,
-0.0236968994140625,
0.006664276123046875,
0.046630859375,
0.0033893585205078125,
-0.0220947265625,
-0.04510498046875,
-0.015472412109375,
0.061614990234375,
0.04205322265625,
-0.028594970703125,
0.004520416259765625,
-0.03485107421875,
-0.01690673828125,
0.0038928985595703125,
0.035797119140625,
-0.06353759765625,
-0.015777587890625,
0.0305023193359375,
-0.044036865234375,
-0.0206451416015625,
-0.035888671875,
-0.063720703125,
-0.00662994384765625,
0.0249786376953125,
-0.049835205078125,
-0.01425933837890625,
0.0007543563842773438,
0.009490966796875,
-0.053619384765625,
-0.038818359375,
0.027923583984375,
0.0204620361328125,
0.00028014183044433594,
-0.00608062744140625,
0.004764556884765625,
0.01059722900390625,
0.01593017578125,
0.03509521484375,
0.038848876953125,
0.0241851806640625,
-0.043487548828125,
-0.01189422607421875,
-0.025787353515625,
-0.043670654296875,
-0.0010137557983398438,
-0.0328369140625,
-0.053009033203125,
-0.0201873779296875,
-0.00641632080078125,
-0.03814697265625,
0.0133056640625,
0.02960205078125,
0.039276123046875,
0.028594970703125,
0.044830322265625,
0.041748046875,
-0.027587890625,
-0.015777587890625,
0.007274627685546875,
0.0313720703125,
0.043792724609375,
0.053619384765625,
0.035186767578125,
0.01496124267578125,
0.0614013671875,
-0.004878997802734375,
-0.04974365234375,
-0.0200042724609375,
0.0284423828125,
-0.0285491943359375,
-0.05047607421875,
-0.029449462890625,
0.002399444580078125,
-0.0227813720703125,
-0.0224609375,
-0.017974853515625,
-0.0262908935546875,
-0.01544189453125,
-0.03973388671875,
-0.02520751953125,
0.051055908203125,
0.036865234375,
0.036529541015625,
0.0158538818359375,
-0.04425048828125,
-0.058502197265625,
-0.032440185546875,
-0.0017528533935546875,
0.07012939453125,
0.0276947021484375,
-0.030914306640625,
0.0023097991943359375,
0.053680419921875,
0.0193939208984375,
0.040130615234375,
0.00969696044921875,
0.055267333984375,
-0.0238037109375,
-0.0022563934326171875,
-0.047210693359375,
0.0003681182861328125,
0.0433349609375,
-0.0462646484375,
0.0184783935546875,
0.00860595703125,
0.0185394287109375,
-0.0286102294921875,
0.048431396484375,
0.061553955078125,
0.047607421875,
0.01137542724609375,
-0.0246429443359375,
0.04681396484375,
0.061676025390625,
-0.0180816650390625,
-0.0673828125,
0.0174407958984375,
0.0545654296875,
0.047943115234375,
0.062744140625,
0.0237884521484375,
-0.037261962890625,
-0.00952911376953125,
-0.0124359130859375,
-0.02764892578125,
-0.01392364501953125,
0.020416259765625,
-0.05084228515625,
0.005184173583984375,
0.0005784034729003906,
0.0394287109375,
0.04632568359375,
0.033935546875,
0.0438232421875,
-0.0232086181640625,
0.04058837890625,
-0.0301513671875,
-0.006641387939453125,
0.061981201171875,
0.01059722900390625,
0.014312744140625,
0.0145111083984375,
-0.004566192626953125,
0.041168212890625,
-0.03179931640625,
0.042388916015625,
-0.039581298828125,
0.0037479400634765625,
-0.001964569091796875,
-0.02984619140625,
-0.0171051025390625,
0.036376953125,
0.00022304058074951172,
0.0071868896484375,
-0.0084381103515625,
0.0404052734375,
-0.01161956787109375,
-0.0202789306640625,
-0.0237274169921875,
-0.0187225341796875,
-0.06976318359375,
-0.0216217041015625,
-0.009979248046875,
-0.041717529296875,
-0.00431060791015625,
0.040130615234375,
0.02154541015625,
0.0193634033203125,
-0.03955078125,
-0.00450897216796875,
0.02386474609375,
0.027252197265625,
-0.0215911865234375,
0.02764892578125,
-0.0330810546875,
-0.039306640625,
0.03558349609375,
0.034881591796875,
-0.045867919921875,
-0.01284027099609375,
-0.035247802734375,
-0.045501708984375,
0.0189056396484375,
0.0067596435546875,
-0.01262664794921875,
0.050628662109375,
0.0144500732421875,
-0.0034503936767578125,
0.03363037109375,
-0.0196533203125,
0.030853271484375,
0.0460205078125,
-0.023895263671875,
-0.03765869140625,
0.0312042236328125,
0.0254364013671875,
0.0158233642578125,
-0.051544189453125,
0.0167388916015625,
-0.026397705078125,
0.00237274169921875,
0.048858642578125,
0.01959228515625,
0.0029544830322265625,
0.0328369140625,
-0.0355224609375,
0.0465087890625,
0.007274627685546875,
-0.0389404296875,
0.039764404296875,
0.01381683349609375,
0.00982666015625,
-0.0253448486328125,
-0.0089263916015625,
-0.02020263671875,
0.04339599609375,
-0.03570556640625,
0.0312042236328125,
0.0056610107421875,
-0.0192413330078125,
0.043914794921875,
0.017333984375,
0.04388427734375,
0.054229736328125,
0.035247802734375,
-0.029571533203125,
0.033050537109375,
-0.0208282470703125,
0.03240966796875,
0.01387786865234375,
6.23464584350586e-05,
0.01244354248046875,
-0.0209503173828125,
-0.024810791015625,
0.031890869140625,
0.03131103515625,
0.039764404296875,
-0.038299560546875,
0.03350830078125,
-0.01165771484375,
0.040740966796875,
0.0173492431640625,
0.026092529296875,
0.058258056640625,
-0.02935791015625,
-0.01446533203125,
0.0278167724609375,
0.0218658447265625,
0.008880615234375,
-0.0147705078125,
0.049774169921875,
0.0482177734375,
-0.01291656494140625,
-0.046630859375,
0.0109710693359375,
0.026214599609375,
-0.01531982421875,
-0.00238800048828125,
-0.03448486328125,
0.04296875,
-0.026092529296875,
0.0447998046875,
0.024810791015625,
0.036773681640625,
-0.022552490234375,
0.044708251953125,
-8.958578109741211e-05,
-0.03631591796875,
0.0095672607421875,
0.051300048828125,
-0.00536346435546875,
-0.04278564453125,
0.006740570068359375,
0.029510498046875,
-0.0080413818359375,
0.008453369140625,
-0.006923675537109375,
0.0127105712890625,
0.022186279296875,
-0.032684326171875,
0.0006999969482421875,
-0.033050537109375,
-0.02593994140625,
0.0438232421875,
0.040924072265625,
0.005767822265625,
-6.240606307983398e-05,
-0.02569580078125,
-0.0232086181640625,
0.0179595947265625,
-0.04656982421875,
-0.03765869140625,
-0.0261383056640625,
-0.0180816650390625,
-0.023468017578125,
0.0036640167236328125,
-0.0177459716796875,
-0.041168212890625,
-0.0418701171875,
-0.037872314453125,
0.03460693359375,
0.0002956390380859375,
-0.006343841552734375,
-0.048828125,
-0.013336181640625,
-0.019439697265625,
0.039459228515625,
-0.042266845703125,
-0.01323699951171875,
0.04217529296875,
-0.03326416015625,
-0.049468994140625,
-0.040557861328125,
0.005306243896484375,
-0.00792694091796875,
0.0189361572265625,
-0.006214141845703125,
0.034637451171875,
0.0137176513671875,
-0.016845703125,
-0.0109710693359375,
-0.04278564453125,
0.04736328125,
0.0118560791015625,
0.03570556640625,
-0.006420135498046875,
-0.032958984375,
-0.038116455078125,
-0.028656005859375,
-0.03125,
-0.02655029296875,
-0.01305389404296875,
-0.0027027130126953125,
-0.00870513916015625,
0.0430908203125,
-0.0474853515625,
-0.04351806640625,
0.037506103515625,
0.0036716461181640625,
0.0204010009765625,
-0.013336181640625,
-0.00873565673828125,
-0.023101806640625,
-0.0144195556640625,
-0.009674072265625,
0.0230865478515625,
-0.029327392578125,
0.004116058349609375,
-0.042694091796875,
-0.035400390625,
0.044342041015625,
-0.01641845703125,
-0.0044708251953125,
-0.005558013916015625,
-0.032470703125,
-0.034759521484375,
0.02899169921875,
0.0251617431640625,
-0.00011771917343139648,
0.004970550537109375,
-0.003093719482421875,
0.037139892578125,
-0.04150390625,
0.0277557373046875,
-0.01525115966796875,
0.0160064697265625,
-0.0173797607421875,
0.044189453125,
-0.0233154296875,
0.0112152099609375,
0.0301055908203125,
-0.045867919921875,
-0.03729248046875,
0.0404052734375,
-0.0266571044921875,
0.0308380126953125,
0.0011959075927734375,
-0.0364990234375,
0.024688720703125,
0.0292205810546875,
0.0149688720703125,
0.0458984375,
-0.047149658203125,
-0.025604248046875,
-0.0259857177734375,
-0.0245208740234375,
0.0416259765625,
0.004772186279296875,
0.0445556640625,
0.007843017578125,
0.0172119140625,
-0.0292816162109375,
-0.01245880126953125,
0.0249786376953125,
-0.005462646484375,
0.037200927734375,
-0.045928955078125,
0.0250244140625,
-0.04571533203125,
-0.006938934326171875,
-0.046844482421875,
0.02020263671875,
-0.0287017822265625,
-0.0263214111328125,
-0.025848388671875,
0.0015554428100585938,
-0.0309600830078125,
-0.041534423828125,
0.0428466796875,
-0.0400390625,
-0.0290679931640625,
0.03253173828125,
0.041900634765625,
0.015869140625,
-0.041656494140625,
-0.0248260498046875,
-0.045379638671875,
-0.043304443359375,
-0.01837158203125,
0.015411376953125,
-0.0321044921875,
-0.024017333984375,
-0.033294677734375,
0.0031147003173828125,
-0.02923583984375,
-0.0028095245361328125,
-0.01244354248046875,
-0.0286407470703125,
0.0264739990234375,
-0.041412353515625,
0.017730712890625,
-0.044677734375,
-0.043304443359375,
0.0262603759765625,
0.0168304443359375,
-0.03240966796875,
-0.041595458984375,
0.01180267333984375,
0.0200653076171875,
0.0255279541015625,
0.002391815185546875,
0.050079345703125,
-0.0496826171875,
-0.00856781005859375,
0.032928466796875,
-0.03070068359375,
0.0019445419311523438,
-0.047332763671875,
0.026458740234375,
-0.039398193359375,
0.006710052490234375,
0.006900787353515625,
0.0101318359375,
0.0018739700317382812,
0.0160064697265625,
-0.005340576171875,
-0.01641845703125,
0.031494140625,
0.037994384765625,
-0.014373779296875,
0.038726806640625,
0.01392364501953125,
-0.0207366943359375,
-0.042510986328125,
0.0278167724609375,
-0.021087646484375,
-0.034637451171875,
-0.048065185546875,
-0.0023670196533203125,
0.04449462890625,
0.0302276611328125,
0.033721923828125,
0.03955078125,
-0.0227508544921875,
-0.0262298583984375,
-0.0302581787109375,
-0.0005102157592773438,
-0.02716064453125,
0.0362548828125,
-0.0210418701171875,
0.0095977783203125,
-0.0489501953125,
0.0196533203125,
-0.040435791015625,
-0.046966552734375,
0.039276123046875,
0.037994384765625,
0.0113372802734375,
-0.0283355712890625,
0.041107177734375,
0.043670654296875,
0.0231781005859375,
-0.029693603515625,
0.045379638671875,
-0.042388916015625,
0.00567626953125,
0.007610321044921875,
0.046051025390625,
-0.041778564453125,
0.044342041015625,
0.041778564453125,
-0.045257568359375,
0.041259765625,
0.0242462158203125,
0.0084228515625,
0.035858154296875,
-0.028961181640625,
-0.0430908203125,
-0.04559326171875,
0.005168914794921875,
0.0156707763671875,
-0.0165252685546875,
-0.002162933349609375,
-0.0297698974609375,
0.0350341796875,
-0.038665771484375,
-0.04205322265625,
0.035797119140625,
0.00933074951171875,
0.01428985595703125,
-0.03155517578125,
0.00766754150390625,
-0.0489501953125,
-0.042816162109375,
-0.0246429443359375,
0.0112457275390625,
-0.030120849609375,
-0.00833892822265625,
-0.046722412109375,
0.0447998046875,
-0.01953125,
-0.0174713134765625,
-0.0035533905029296875,
-0.0073394775390625,
-0.0029811859130859375,
-0.002803802490234375,
-0.006221771240234375,
-0.023468017578125,
-0.00255584716796875,
-0.037994384765625,
0.0360107421875,
-0.0430908203125,
0.0008306503295898438,
-0.0404052734375,
-0.032989501953125,
0.032135009765625,
0.049072265625,
0.0139923095703125,
-0.03814697265625,
-0.04168701171875,
0.004299163818359375,
0.01446533203125,
0.00434112548828125,
-0.035888671875,
-0.047576904296875,
-0.0426025390625,
-0.0201416015625,
-0.00843048095703125,
0.009063720703125,
0.0010995864868164062,
-0.035614013671875,
0.01543426513671875,
-0.028411865234375,
0.042938232421875,
0.035614013671875,
-0.049652099609375,
0.01215362548828125,
-0.02484130859375,
0.0132598876953125,
-0.04718017578125,
-0.047271728515625,
-0.0261383056640625,
-0.0080108642578125,
0.00487518310546875,
0.01788330078125,
0.0093536376953125,
-0.033782958984375,
0.03839111328125,
-0.022613525390625,
0.0479736328125,
0.0295867919921875,
-0.00464630126953125,
-0.01201629638671875,
-0.0034046173095703125,
0.01812744140625,
0.020660400390625,
0.0253143310546875,
0.001445770263671875,
-0.01332855224609375,
0.02789306640625,
-0.0343017578125,
-0.03570556640625,
-0.0020656585693359375,
0.03900146484375,
0.0252838134765625,
-0.02203369140625,
0.03448486328125,
-0.0037746429443359375,
-0.021209716796875,
-0.009124755859375,
0.040618896484375,
-0.014678955078125,
0.04095458984375,
-0.01161956787109375,
-0.045135498046875,
0.01629638671875,
0.01000213623046875,
-0.026885986328125,
-0.032958984375,
0.02264404296875,
-0.0487060546875,
0.0462646484375,
0.03399658203125,
-0.008758544921875,
0.0005097389221191406,
-0.0120391845703125,
-0.0391845703125,
-0.00720977783203125,
-0.0186767578125,
-0.038482666015625,
0.0479736328125,
0.02630615234375,
-0.025787353515625,
0.004848480224609375,
0.037017822265625,
-0.001407623291015625,
0.0305023193359375,
-0.020355224609375,
-0.036865234375,
0.00921630859375,
0.01198577880859375,
0.0027790069580078125,
0.0290985107421875,
0.0004553794860839844,
0.019439697265625,
-0.049560546875,
-0.03106689453125,
0.0231170654296875,
-0.035919189453125,
0.0238037109375,
0.0297393798828125,
0.0309295654296875,
-0.027313232421875,
0.02880859375,
-0.004360198974609375,
0.016357421875,
-0.01611328125,
0.03131103515625,
0.03204345703125,
0.039154052734375,
0.018707275390625,
0.016448974609375,
-0.043609619140625,
0.00897979736328125,
-0.00872039794921875,
-0.0030612945556640625,
-0.01224517822265625,
0.0284423828125,
0.00553131103515625,
0.033599853515625,
0.04052734375,
-0.04327392578125,
-0.031097412109375,
-0.032928466796875,
0.01065826416015625,
-0.017730712890625,
-0.024078369140625,
0.047882080078125,
-0.03643798828125,
-0.04150390625,
-0.0020389556884765625,
0.032928466796875,
0.001903533935546875,
-0.0218963623046875,
0.00968170166015625,
-0.0285491943359375,
0.0038700103759765625,
0.030853271484375,
0.0391845703125,
0.0208282470703125,
-0.03228759765625,
-0.00261688232421875,
-0.041259765625,
-0.00351715087890625,
-0.04779052734375,
0.0477294921875,
0.06695556640625,
-0.0276336669921875,
-0.0540771484375,
-0.0292816162109375,
-0.01557159423828125,
0.025848388671875,
-0.00995635986328125,
-0.0290985107421875,
-0.0552978515625,
0.043426513671875,
0.05865478515625,
0.10003662109375,
0.055023193359375,
0.017822265625,
-0.0269317626953125,
0.0062255859375,
0.01374053955078125,
-0.032684326171875,
-0.054840087890625,
0.0308685302734375,
-0.060760498046875,
0.0311126708984375,
0.042022705078125,
0.048126220703125,
0.051910400390625,
-0.0194854736328125,
0.0009288787841796875,
-0.04498291015625,
-0.01486968994140625,
-0.01500701904296875,
-0.0180511474609375,
0.04296875,
-0.040618896484375,
-0.020477294921875,
0.0262298583984375,
0.0004680156707763672,
0.03887939453125,
0.0278472900390625,
0.06201171875,
-0.0151214599609375,
0.029541015625,
-0.00811767578125,
-0.00807952880859375,
0.0511474609375,
-0.027374267578125,
0.0010061264038085938,
0.04144287109375,
0.023529052734375,
0.0263824462890625,
0.056488037109375,
-0.048126220703125,
-0.0094146728515625,
0.08807373046875,
-0.027862548828125,
0.048797607421875,
0.03302001953125,
-0.03216552734375,
-0.0048370361328125,
0.06304931640625,
0.0166168212890625,
0.011260986328125,
-0.0985107421875,
0.033966064453125,
0.0240478515625,
0.00576019287109375,
-0.036346435546875,
0.00521087646484375,
0.00952911376953125,
0.035125732421875,
0.06744384765625,
0.024932861328125,
0.04278564453125,
0.00708770751953125,
0.03173828125,
-0.046356201171875,
-0.0101470947265625,
0.0268096923828125,
-0.002086639404296875,
-0.016998291015625,
-0.041107177734375,
0.026214599609375,
-0.04119873046875,
0.007049560546875,
-0.03125,
-0.0660400390625,
0.061553955078125,
-0.036773681640625,
-0.007579803466796875,
-0.040130615234375,
0.05230712890625,
0.036468505859375,
0.01605224609375,
-0.059844970703125,
0.033203125,
-0.0008254051208496094,
-0.032501220703125,
0.0233917236328125,
0.0418701171875,
-0.00655364990234375,
0.017822265625,
-0.009979248046875,
-0.040679931640625,
-0.01126861572265625,
-0.042144775390625,
0.0643310546875,
-0.0189971923828125,
-0.0345458984375,
-0.045623779296875,
0.006587982177734375,
-0.0134735107421875,
0.03131103515625,
0.017303466796875,
0.00162506103515625,
-0.03656005859375,
0.032989501953125,
0.012420654296875,
-0.0113372802734375,
0.036773681640625,
-0.0016965866088867188,
-0.0367431640625,
0.0290679931640625,
-0.05548095703125,
-0.058624267578125,
-0.0175323486328125,
-0.06646728515625,
-0.040130615234375,
-0.0160980224609375,
-0.019805908203125,
0.039093017578125,
0.07177734375,
-0.004146575927734375,
-0.0055694580078125,
0.002960205078125,
0.09478759765625,
0.04449462890625,
-0.018768310546875,
-0.04339599609375,
-0.048583984375,
-0.04248046875,
0.0382080078125,
0.05859375,
-0.000698089599609375,
0.0175018310546875,
0.033050537109375,
0.038482666015625,
0.0247039794921875,
0.0210723876953125,
-0.057342529296875,
-0.0013456344604492188,
-0.00518798828125,
0.0372314453125,
0.049041748046875,
-0.0162200927734375,
0.016448974609375,
0.00997161865234375,
0.009613037109375,
-0.0297088623046875,
0.06414794921875,
0.0085296630859375,
-0.01030731201171875,
0.0189971923828125,
-0.080810546875,
-0.0263824462890625,
-0.06103515625,
-0.037445068359375,
0.040863037109375,
-0.053375244140625,
0.0006241798400878906,
0.00942230224609375,
0.0198974609375,
0.046417236328125,
-0.00606536865234375,
0.0226898193359375,
0.02276611328125,
0.01447296142578125,
-0.059112548828125,
-0.006656646728515625,
-0.0404052734375,
0.026824951171875,
0.06329345703125,
0.00830078125,
-0.06610107421875,
-0.0189971923828125,
-0.029876708984375,
-0.00525665283203125,
-0.0269622802734375,
-0.0282135009765625,
-0.013427734375,
0.0115814208984375,
0.00447845458984375,
-0.04058837890625,
0.033843994140625,
0.0025844573974609375,
0.03466796875,
0.05206298828125,
-0.0178680419921875,
0.01532745361328125,
-0.035675048828125,
-0.10894775390625,
-0.0218658447265625,
0.005794525146484375,
-0.0045928955078125,
0.0025043487548828125,
-0.019195556640625,
-0.00273895263671875,
-0.0255279541015625,
-0.02899169921875,
0.0236968994140625,
-0.0293121337890625,
-0.045745849609375,
0.0009150505065917969,
-0.042938232421875,
-0.0357666015625,
-0.032989501953125,
-0.0037364959716796875,
0.04473876953125,
-0.0679931640625,
-0.032379150390625,
-0.0217132568359375,
0.04559326171875,
0.0074462890625,
0.036956787109375,
-0.07080078125,
-0.093017578125,
0.0230712890625,
-0.030242919921875,
-0.03973388671875,
-0.050048828125,
-0.09368896484375,
0.01308441162109375,
0.00820159912109375,
0.05426025390625,
-0.003017425537109375,
-0.02874755859375,
-0.06793212890625,
-0.045501708984375,
0.051025390625,
0.008270263671875,
-0.041259765625,
-0.0579833984375,
0.028076171875,
-0.018310546875,
-0.033660888671875,
-0.036651611328125,
-0.021392822265625,
-0.025146484375,
0.034698486328125,
0.00771331787109375,
0.033721923828125,
0.051666259765625,
-0.033935546875,
-0.0013103485107421875,
0.005962371826171875,
0.01102447509765625,
0.047149658203125,
0.043670654296875,
-0.08349609375,
-0.0022735595703125,
-0.01470184326171875,
0.050567626953125,
-0.0019378662109375,
0.01142120361328125,
-0.041259765625,
-0.046234130859375,
-0.012908935546875,
-0.034515380859375,
-0.036407470703125,
0.0199127197265625,
0.0070037841796875,
0.01812744140625,
0.044464111328125,
0.023956298828125,
-0.00826263427734375,
-0.01357269287109375,
0.0654296875,
0.0172576904296875,
-0.01259613037109375,
-0.0147552490234375,
-0.01424407958984375,
0.0261993408203125,
0.0234375,
-0.004512786865234375,
0.04656982421875,
0.0166778564453125,
0.002948760986328125,
0.01227569580078125,
0.07891845703125,
0.00580596923828125,
-0.01342010498046875,
-0.00685882568359375,
-0.00997161865234375,
0.006740570068359375,
-0.0202789306640625,
-0.040191650390625,
0.01479339599609375,
-0.01140594482421875,
-0.01116943359375,
-0.02056884765625,
-0.09271240234375,
0.032684326171875,
-0.01776123046875,
0.0103302001953125,
-0.0078277587890625,
0.0174560546875,
0.019989013671875,
-0.0024967193603515625,
0.038543701171875,
0.03704833984375,
-0.032928466796875,
-0.00018656253814697266,
-0.0168304443359375,
-0.04937744140625,
0.020599365234375,
-0.01947021484375,
0.0297088623046875,
-0.00713348388671875,
0.0133514404296875,
-0.03594970703125,
-0.0289764404296875,
0.01378631591796875,
0.0596923828125,
-0.0283050537109375,
0.0491943359375,
-0.05438232421875,
-0.01561737060546875,
-0.03802490234375,
0.0005435943603515625,
-0.024658203125,
0.01372528076171875,
-0.041351318359375,
-0.0450439453125,
0.002246856689453125,
-0.0005941390991210938,
0.01227569580078125,
-0.00385284423828125,
0.0009365081787109375,
0.01122283935546875,
-0.041412353515625,
-0.00836181640625,
-0.029296875,
-0.0118408203125,
0.03900146484375,
0.037689208984375,
-0.049652099609375,
-0.0120697021484375,
-0.047576904296875,
-0.01146697998046875,
0.0300445556640625,
0.036651611328125,
-0.034637451171875,
-0.042449951171875,
-0.0182342529296875,
0.018829345703125,
0.00981903076171875,
-0.0323486328125,
0.02313232421875,
0.0151519775390625,
0.041473388671875,
0.0543212890625,
0.05206298828125,
0.0251007080078125,
0.0133819580078125,
0.045257568359375,
0.0311431884765625,
0.037200927734375,
-0.004947662353515625,
-0.04412841796875,
-0.0438232421875,
-0.02142333984375,
0.04510498046875,
-0.028076171875,
0.018798828125,
-0.03076171875,
-0.004627227783203125,
0.0024700164794921875,
0.0106964111328125,
0.04376220703125,
0.00795745849609375,
0.036346435546875,
0.041229248046875,
0.0002560615539550781,
-0.01458740234375,
0.044158935546875,
-0.01776123046875,
-0.0289154052734375,
0.007221221923828125,
0.035980224609375,
0.0259246826171875,
0.0531005859375,
-0.036041259765625,
0.004238128662109375,
-0.0640869140625,
-0.017791748046875,
-0.021453857421875,
-0.0248260498046875,
-0.051544189453125,
0.03863525390625,
0.0308685302734375,
0.05322265625,
0.055877685546875,
-0.01296234130859375,
-0.0220794677734375,
0.044403076171875,
0.021240234375,
-0.01678466796875,
-0.015167236328125,
0.0163421630859375,
-0.02777099609375,
-0.02490234375,
0.01041412353515625,
0.040374755859375,
0.0242156982421875,
0.0199737548828125,
0.0491943359375,
-0.0013532638549804688,
-0.01078033447265625,
-0.0220184326171875,
-0.04412841796875,
0.017730712890625,
-0.040069580078125,
-0.027252197265625,
0.0269775390625,
0.03619384765625,
-0.040191650390625,
0.017333984375,
0.0233154296875,
0.0012102127075195312,
0.002269744873046875,
-0.02081298828125,
-0.05584716796875,
-0.002803802490234375,
0.01129150390625,
-0.002651214599609375,
0.045013427734375,
-0.0269012451171875,
-0.038421630859375,
-0.0096588134765625,
-0.01235198974609375,
0.051788330078125,
0.040740966796875,
0.023284912109375,
-0.059295654296875,
-0.037811279296875,
-0.011260986328125,
-0.0100860595703125,
0.018218994140625,
0.01334381103515625,
0.00821685791015625,
-0.032318115234375,
-0.04266357421875,
-0.01922607421875,
0.021575927734375,
-0.0258636474609375,
0.01690673828125,
0.00839996337890625,
-0.0021228790283203125,
-0.038055419921875,
0.043792724609375,
-0.01180267333984375,
-0.027069091796875,
0.000301361083984375,
-0.048919677734375,
0.004730224609375,
0.046051025390625,
-0.02850341796875,
-0.04754638671875,
0.036041259765625,
0.0267181396484375,
-0.0152587890625,
-0.0153045654296875,
0.0175628662109375,
-0.00485992431640625,
-0.010406494140625,
-0.01416015625,
-0.052459716796875,
0.0261993408203125,
-0.0298919677734375,
-0.02020263671875,
0.0322265625,
0.029510498046875,
0.02020263671875,
0.028350830078125,
0.038116455078125,
0.0179443359375,
0.01018524169921875,
0.03387451171875,
-0.01265716552734375,
-0.01346588134765625,
0.0181121826171875,
-0.060272216796875,
0.0107421875,
-0.052398681640625,
-0.047393798828125,
-0.043212890625,
0.030517578125,
-0.0374755859375,
-0.0380859375,
0.0187225341796875,
0.003971099853515625,
0.01015472412109375,
-0.005512237548828125,
0.04052734375,
0.024200439453125,
5.793571472167969e-05,
0.048248291015625,
0.035614013671875,
0.002803802490234375,
-0.007167816162109375,
0.0179901123046875,
-0.01366424560546875,
0.006816864013671875,
0.01537322998046875,
0.005218505859375,
0.0167694091796875,
0.007114410400390625,
0.027130126953125,
0.047698974609375,
0.017364501953125,
0.001651763916015625,
0.0382080078125,
-0.0537109375,
0.0009560585021972656,
-0.01263427734375,
-0.029449462890625,
-0.050048828125,
-0.019866943359375,
0.031951904296875,
-0.0031986236572265625,
0.0191192626953125,
-0.03436279296875,
-0.041717529296875,
-0.03271484375,
-0.0034847259521484375,
-0.0259552001953125,
-0.00542449951171875,
-0.005702972412109375,
0.01343536376953125,
0.06634521484375,
0.035980224609375,
-0.052520751953125,
-0.017333984375,
0.038848876953125,
-0.00011909008026123047,
0.0253448486328125,
-0.021453857421875,
-0.03118896484375,
-0.0418701171875,
0.043243408203125,
0.031951904296875,
-0.0268402099609375,
0.0255126953125,
-0.00632476806640625,
0.0016460418701171875,
0.073974609375,
-0.0013265609741210938,
0.034912109375,
-0.048187255859375,
0.028289794921875,
0.05548095703125,
0.034637451171875,
-0.056854248046875,
-0.038543701171875,
0.043182373046875,
0.06591796875,
0.021026611328125,
-0.06072998046875,
0.0012006759643554688,
-0.0263824462890625,
0.0180206298828125,
-0.002422332763671875,
0.006206512451171875,
0.0029811859130859375,
-0.0382080078125,
0.0055084228515625,
-0.041229248046875,
-0.0170745849609375,
-0.0322265625,
0.01158905029296875,
0.00026607513427734375,
-0.00354766845703125,
-0.001995086669921875,
-0.0288543701171875,
0.0111236572265625,
0.01068115234375,
-0.0132598876953125,
0.016937255859375,
-0.043426513671875,
-0.0325927734375,
0.0234222412109375,
-0.054718017578125,
-0.0292816162109375,
0.0011386871337890625,
-0.0214385986328125,
-0.016387939453125,
-0.0012311935424804688,
0.021881103515625,
0.04541015625,
0.021087646484375,
-0.019866943359375,
0.0020885467529296875,
-0.0380859375,
0.034881591796875,
-0.00540924072265625,
0.0618896484375,
0.07269287109375,
0.042694091796875,
-0.00969696044921875,
-0.0181121826171875,
0.007251739501953125,
0.0711669921875,
-0.05743408203125,
0.00231170654296875,
-0.00904083251953125,
0.0138397216796875,
0.0018262863159179688,
-0.0268402099609375,
-0.038330078125,
-0.0258026123046875,
-0.0050506591796875,
0.050933837890625,
-0.057037353515625,
0.0435791015625,
-0.0286407470703125,
0.0273895263671875,
0.0252838134765625,
0.02349853515625,
-0.0242767333984375,
0.041748046875,
0.031829833984375,
-0.047576904296875,
0.0338134765625,
-0.00896453857421875,
0.0188751220703125,
0.042022705078125,
-0.039093017578125,
-0.033172607421875,
0.04071044921875,
0.0163116455078125,
0.0258331298828125,
-0.0170745849609375,
0.0290069580078125,
-0.0029506683349609375,
0.055450439453125,
-0.002803802490234375,
0.0238800048828125,
0.051361083984375,
-0.03082275390625,
0.029693603515625,
0.05462646484375,
-0.05517578125,
-0.046142578125,
0.009124755859375,
0.0406494140625,
-0.022186279296875,
-0.0384521484375,
-0.048492431640625,
-0.01345062255859375,
0.01763916015625,
-0.005107879638671875,
0.0133514404296875,
-0.00785064697265625,
0.01439666748046875,
0.0014133453369140625,
-0.0232696533203125,
0.0051727294921875,
0.032257080078125,
-0.04827880859375,
-0.0245819091796875,
-0.0188140869140625,
-0.0738525390625,
-0.027008056640625,
0.02587890625,
-0.01324462890625,
0.00759124755859375,
0.051055908203125,
0.0283203125,
0.01483154296875,
0.0196380615234375,
-0.036468505859375,
-0.00921630859375,
0.033416748046875,
0.03118896484375,
-0.03533935546875,
-0.00997161865234375,
0.028594970703125,
-0.032989501953125,
0.0226898193359375,
-0.0194244384765625,
-0.048004150390625,
0.00832366943359375,
0.0033092498779296875,
-0.00849151611328125,
0.00946044921875,
0.0268402099609375,
0.052520751953125,
0.04345703125,
0.00965118408203125,
0.0194244384765625,
0.028900146484375,
-0.000614166259765625,
-0.00522613525390625,
-0.04071044921875,
0.012969970703125,
0.02288818359375,
0.007526397705078125,
-0.01605224609375,
0.0294189453125,
0.036346435546875,
-0.002033233642578125,
-0.0194091796875,
-0.039825439453125,
-0.00324249267578125,
-0.0309600830078125,
-0.0298614501953125,
0.0172119140625,
-0.032989501953125,
0.0322265625,
0.0177764892578125,
0.026153564453125,
-0.007724761962890625,
-0.07098388671875,
-0.01175689697265625,
0.049102783203125,
-0.047637939453125,
-0.039031982421875,
-0.042083740234375,
0.0052947998046875,
-0.00969696044921875,
-0.0296630859375,
0.0017080307006835938,
-0.057464599609375,
0.01415252685546875,
0.0254364013671875,
0.039520263671875,
0.025390625,
0.0008463859558105469,
-0.04974365234375,
-0.0467529296875,
0.0242919921875,
-0.037109375,
0.01331329345703125,
-0.0181732177734375,
-0.053314208984375,
0.00749969482421875,
-0.0224456787109375,
0.02435302734375,
-0.006526947021484375,
0.043731689453125,
0.01971435546875,
0.0048370361328125,
-0.0170745849609375,
-0.007595062255859375,
0.01226806640625,
0.01383209228515625,
-0.0031223297119140625,
0.026214599609375,
0.0238494873046875,
0.04736328125,
0.043365478515625,
-0.022979736328125,
0.042572021484375,
0.0013294219970703125,
-0.040191650390625,
-0.0049285888671875,
0.039520263671875,
-0.0095977783203125,
0.002780914306640625,
0.0316162109375,
-0.045379638671875,
-0.07110595703125,
-0.03082275390625,
-0.02386474609375,
0.04693603515625,
0.00897979736328125,
-0.033477783203125,
0.0157318115234375,
-0.01053619384765625,
0.050537109375,
-0.0111846923828125,
0.044586181640625,
-0.016571044921875,
0.0533447265625,
0.045135498046875,
0.049468994140625,
0.0036830902099609375,
0.0360107421875,
-0.048065185546875,
-0.035736083984375,
0.023345947265625,
-0.033203125,
0.007434844970703125,
-0.002689361572265625,
-0.01213836669921875,
-0.050567626953125,
-0.053558349609375,
0.029510498046875,
0.0278167724609375,
-0.00014770030975341797,
0.056396484375,
0.07366943359375,
-0.0159759521484375,
0.0156402587890625,
-0.02716064453125,
0.00908660888671875,
0.0257568359375,
-0.0160675048828125,
0.018402099609375,
-0.06353759765625,
0.0655517578125,
-0.0440673828125,
0.016632080078125,
0.0223541259765625,
0.04248046875,
0.0833740234375,
0.0136566162109375,
-0.042877197265625,
0.040679931640625,
0.048583984375,
-0.01091766357421875,
0.043670654296875,
0.00997161865234375,
0.048492431640625,
0.04248046875,
0.04107666015625,
-0.0304107666015625,
0.010040283203125,
0.0185699462890625,
-0.0226898193359375,
0.049072265625,
-0.02471923828125,
0.01018524169921875,
-0.0092620849609375,
-0.0193328857421875,
-0.0016336441040039062,
-0.0037937164306640625,
-0.0246429443359375,
-0.0019388198852539062,
-0.0222015380859375,
-0.047698974609375,
0.021484375,
0.0321044921875,
0.0057373046875,
-0.003810882568359375,
-0.016998291015625,
0.014892578125,
0.04437255859375,
0.0029239654541015625,
-0.0284881591796875,
-0.059234619140625,
-0.0182037353515625,
-0.05810546875,
-0.023101806640625,
0.034698486328125,
0.021820068359375,
0.038818359375,
-0.043426513671875,
0.0249481201171875,
0.058990478515625,
-0.017547607421875,
0.0158538818359375,
0.0295867919921875,
-0.0196380615234375,
-0.03912353515625,
0.052032470703125,
0.00444793701171875,
-0.0085906982421875,
0.00440216064453125,
-0.04278564453125,
0.0081024169921875,
0.042694091796875,
0.0033931732177734375,
-0.04681396484375,
0.0091400146484375,
0.023712158203125,
0.01096343994140625,
0.043701171875,
-0.038818359375,
0.019805908203125,
-0.04248046875,
-0.032684326171875,
-0.039276123046875,
-0.023284912109375,
-0.044891357421875,
-0.06610107421875,
-0.0484619140625,
-0.04461669921875,
-0.040313720703125,
0.052154541015625,
0.00119781494140625,
-0.051177978515625,
0.038604736328125,
0.006984710693359375,
0.021209716796875,
-0.0191650390625,
-0.04656982421875,
0.0130767822265625,
0.03497314453125,
0.015533447265625,
0.033660888671875,
-0.046966552734375,
0.036773681640625,
0.03204345703125,
0.034332275390625,
0.04376220703125,
-0.01203155517578125,
0.0223388671875,
0.02447509765625,
0.017730712890625,
0.01392364501953125,
-0.049102783203125,
0.038299560546875,
-0.007472991943359375,
0.048553466796875,
0.01450347900390625,
-0.025604248046875,
-0.00382232666015625,
-0.002178192138671875,
0.01849365234375,
-0.0175628662109375,
0.0247344970703125,
0.01690673828125,
0.0028285980224609375,
0.00907135009765625,
-0.0046539306640625,
0.04132080078125,
0.04852294921875,
-0.035797119140625,
-0.0029277801513671875,
-0.046478271484375,
-0.015777587890625,
0.042144775390625,
0.043182373046875,
0.055908203125,
0.0236358642578125,
-0.0021457672119140625,
0.032928466796875,
0.0523681640625,
0.058837890625,
-0.004970550537109375,
-0.0100860595703125,
0.043121337890625,
0.01218414306640625,
-0.04608154296875,
-0.0210723876953125,
-0.020263671875,
-0.023529052734375,
-0.011871337890625,
-0.0333251953125,
0.02325439453125,
0.0262451171875,
0.038848876953125,
0.0099639892578125,
-0.022552490234375,
-0.0121307373046875,
0.048614501953125,
0.01271820068359375,
0.057586669921875,
0.045074462890625,
0.00467681884765625,
0.040740966796875,
0.04180908203125,
-0.04107666015625,
-0.022491455078125,
-0.00449371337890625,
0.0151519775390625,
-0.0535888671875,
0.00968170166015625,
0.010711669921875,
-0.08795166015625,
0.01337432861328125,
-0.041900634765625,
-0.035003662109375,
0.03564453125,
-0.0248870849609375,
0.016571044921875,
-0.042327880859375,
-0.00377655029296875,
0.04693603515625,
-0.051116943359375,
0.037445068359375,
-0.0367431640625,
-0.0234375,
0.00986480712890625,
0.0202789306640625,
0.05328369140625,
-0.031280517578125,
0.0274810791015625,
0.048065185546875,
0.04681396484375,
0.0565185546875,
0.06988525390625,
-0.050811767578125,
0.00016558170318603516,
0.0038700103759765625,
0.04473876953125,
0.04608154296875,
0.00679779052734375,
0.00605010986328125,
0.05914306640625,
0.0168609619140625,
0.0574951171875,
-0.00997161865234375,
0.032745361328125,
0.0791015625,
-0.0003170967102050781,
-0.017303466796875,
-0.00238800048828125,
0.01560211181640625,
-0.010650634765625,
-0.01544189453125,
0.03778076171875,
0.04443359375,
0.037567138671875,
-0.00244140625,
-0.01532745361328125,
-0.010223388671875,
0.035858154296875,
-0.056396484375,
-0.09130859375,
0.001789093017578125,
-0.052520751953125,
-0.040252685546875,
-0.035430908203125,
0.06378173828125,
0.0195770263671875,
0.03460693359375,
0.0182037353515625,
-0.044769287109375,
-0.0021991729736328125,
0.016143798828125,
0.021392822265625,
-0.032135009765625,
0.0309906005859375,
-0.047637939453125,
-0.041961669921875,
-0.007587432861328125,
-0.0198822021484375,
-0.0197906494140625,
-0.0004227161407470703,
-0.02288818359375,
-0.0362548828125,
-0.0035076141357421875,
0.04248046875,
-0.0489501953125,
0.0005431175231933594,
-0.0244598388671875,
0.037872314453125,
-0.02166748046875,
-0.018798828125,
0.01541900634765625,
0.01189422607421875,
0.017547607421875,
-0.0487060546875,
0.01248931884765625,
0.01526641845703125,
-0.028167724609375,
0.03265380859375,
0.00079345703125,
-0.05108642578125,
-0.00542449951171875,
0.0159912109375,
0.0372314453125,
0.060821533203125,
-0.021881103515625,
-0.0031185150146484375,
0.038360595703125,
-0.041778564453125,
0.0156707763671875,
-0.037933349609375,
0.051300048828125,
0.01007080078125,
-0.0301971435546875,
-0.0171051025390625,
-0.0201568603515625,
-0.0012416839599609375,
0.05877685546875,
-0.02899169921875,
-0.0279693603515625,
0.0308074951171875,
-0.039276123046875,
0.007495880126953125,
0.0307159423828125,
-0.0010461807250976562,
-0.030029296875,
-0.0491943359375,
-0.037933349609375,
0.054168701171875,
0.055816650390625,
-0.020355224609375,
-0.014678955078125,
-0.027252197265625,
0.03350830078125,
0.02117919921875,
-0.07171630859375,
0.004425048828125,
0.015106201171875,
0.047210693359375,
0.048095703125,
0.04296875,
0.0251617431640625,
-0.040802001953125,
0.0546875,
-0.03802490234375,
0.060546875,
0.033966064453125,
0.036407470703125,
0.055389404296875,
0.0400390625,
-0.0091705322265625,
0.0243377685546875,
-0.022613525390625,
-0.011627197265625,
-0.0253143310546875,
-0.00849151611328125,
-0.0288238525390625,
-0.01898193359375,
0.035369873046875,
-0.0230712890625,
0.0173797607421875,
-0.042205810546875,
0.0496826171875,
0.040374755859375,
0.046142578125,
-0.0233917236328125,
0.0318603515625,
-0.060028076171875,
0.0413818359375,
0.0272369384765625,
-0.0247650146484375,
0.011199951171875,
-0.0137786865234375,
-0.04730224609375,
0.0131378173828125,
-0.0186767578125,
-0.0308685302734375,
0.0022258758544921875,
0.030670166015625,
0.047332763671875,
0.054443359375,
0.03765869140625,
-0.0228271484375,
0.0203857421875,
-0.015869140625,
-0.021514892578125,
-0.0283050537109375,
-0.019134521484375,
0.0259246826171875,
0.015869140625,
-0.01126861572265625,
-0.041748046875,
-0.064453125,
-0.003398895263671875,
0.016510009765625,
0.007213592529296875,
0.01922607421875,
0.022491455078125,
0.0196533203125,
0.0277862548828125,
0.0273284912109375,
-0.04827880859375,
0.04266357421875,
0.00858306884765625,
-0.0194549560546875,
0.031585693359375,
0.051177978515625,
0.058624267578125,
-0.0293121337890625,
-0.001033782958984375,
-0.051910400390625,
0.0328369140625,
0.0703125,
0.041900634765625,
0.052703857421875,
0.037628173828125,
-0.012786865234375,
0.0614013671875,
0.00989532470703125,
-0.04705810546875,
0.0207977294921875,
-0.00534820556640625,
0.03338623046875,
0.0029392242431640625,
-0.032318115234375,
0.04498291015625,
0.0244598388671875,
-0.00415802001953125,
-0.0076141357421875,
-0.021514892578125,
0.005718231201171875,
0.038360595703125,
0.00319671630859375,
0.043548583984375,
-0.0316162109375,
0.038116455078125,
0.048858642578125,
0.045928955078125,
-0.0047454833984375,
-0.002971649169921875,
-0.037689208984375,
-0.038665771484375,
0.031829833984375,
-0.0086517333984375,
0.019439697265625,
-0.03240966796875,
-0.03143310546875,
0.045654296875,
0.047119140625,
0.011474609375,
0.01332855224609375,
0.002166748046875,
-0.032135009765625,
0.0303192138671875,
0.005313873291015625,
-0.0299224853515625,
0.0380859375,
0.0303192138671875,
-0.041595458984375,
0.0372314453125,
0.039886474609375,
-0.0380859375,
-0.029571533203125,
-0.0367431640625,
0.04937744140625,
-0.01934814453125,
-0.010772705078125,
0.0452880859375,
0.0269012451171875,
0.043243408203125,
0.024261474609375,
0.0010499954223632812,
-0.0011072158813476562,
0.0128326416015625,
0.006038665771484375,
-0.0166778564453125,
0.03076171875,
-0.040802001953125,
-0.0379638671875,
-0.0239410400390625,
0.004688262939453125,
0.0279693603515625,
0.01238250732421875,
-0.034515380859375,
0.012420654296875,
-0.03033447265625,
-0.00836944580078125,
0.041595458984375,
-0.0286865234375,
0.048980712890625,
-0.0125274658203125,
0.01132965087890625,
-0.00907135009765625,
-0.039276123046875,
0.038238525390625,
-0.0001112222671508789,
0.0011730194091796875,
0.0288543701171875,
-0.0498046875,
-0.0214385986328125,
-0.039215087890625,
-0.0254669189453125,
0.0162506103515625,
0.033935546875,
0.0178680419921875,
0.0256805419921875,
-0.046539306640625,
0.04595947265625,
0.0101165771484375,
-0.025360107421875,
0.0194244384765625,
0.034149169921875,
0.049957275390625,
0.01267242431640625,
-0.0248870849609375,
0.031494140625,
-0.041778564453125,
0.0282440185546875,
0.0012054443359375,
-0.0182647705078125,
-0.0012903213500976562,
0.028533935546875,
-0.043365478515625,
-0.04522705078125,
-0.0009527206420898438,
-0.0112457275390625,
-0.027069091796875,
0.01143646240234375,
-0.019073486328125,
-0.04083251953125,
-0.05108642578125,
0.0211639404296875,
0.033599853515625,
-0.0275115966796875,
-0.0299072265625,
-0.04339599609375,
-0.01141357421875,
0.0165557861328125,
0.03289794921875,
-0.01363372802734375,
-0.04107666015625,
0.0198822021484375,
0.038330078125,
0.0167083740234375,
0.01352691650390625,
-0.044586181640625,
0.0224609375,
-0.021240234375,
-0.044677734375,
-0.013580322265625,
-0.00136566162109375,
0.0232391357421875,
-0.0220947265625,
-0.007354736328125,
0.0262298583984375,
0.046173095703125,
0.03765869140625,
-0.034088134765625,
0.0182037353515625,
0.01190948486328125,
0.0023670196533203125,
0.049560546875,
-0.0240478515625,
0.00844573974609375,
0.0249786376953125,
0.025146484375,
-0.025634765625,
-0.01055145263671875,
-0.0014886856079101562,
0.0224609375,
-0.046600341796875,
0.0017719268798828125,
-0.0281982421875,
0.0036602020263671875,
-0.04522705078125,
-0.0154266357421875,
0.016937255859375,
-0.0199127197265625,
0.023895263671875,
-0.0001506805419921875,
0.0323486328125,
-0.0255126953125,
0.0147247314453125,
0.01491546630859375,
-0.006320953369140625,
0.0287322998046875,
0.03680419921875,
-0.003452301025390625,
0.04119873046875,
0.0014448165893554688,
0.035125732421875,
0.043853759765625,
0.00890350341796875,
-0.031585693359375,
-0.0258941650390625,
-0.0012540817260742188,
-0.0188751220703125,
0.0008893013000488281,
0.00604248046875,
-0.02166748046875,
0.041717529296875,
0.0293731689453125,
-0.0112762451171875,
0.01556396484375,
0.051483154296875,
-0.0063934326171875,
0.00704193115234375,
-0.0154571533203125,
-0.027191162109375,
0.016754150390625,
0.02789306640625,
0.035369873046875,
-0.0205535888671875,
-0.0212554931640625,
0.035491943359375,
-0.022003173828125,
-0.042449951171875,
0.0305938720703125,
-0.0394287109375,
0.0465087890625,
0.0015516281127929688,
0.01153564453125,
0.0034084320068359375,
-0.049652099609375,
0.0250701904296875,
-0.040740966796875,
0.00701141357421875,
-0.033843994140625,
-0.0004611015319824219,
-0.0023651123046875,
-0.0447998046875,
-0.040679931640625,
0.03631591796875,
0.039031982421875,
-0.032989501953125,
-0.0188751220703125,
-0.011474609375,
0.0272369384765625,
-0.0237884521484375,
-0.04498291015625,
-0.04583740234375,
-0.0011806488037109375,
-0.01078033447265625,
-0.037353515625,
0.01788330078125,
0.043609619140625,
-0.0088043212890625,
-0.0139617919921875,
-0.00653076171875,
-0.04693603515625,
-0.04931640625,
-0.008941650390625,
-0.001422882080078125,
0.049591064453125,
0.010650634765625,
0.050567626953125,
0.004383087158203125,
-0.03936767578125,
0.009674072265625,
0.007175445556640625,
-0.03375244140625,
-0.008209228515625,
0.021392822265625,
-0.0439453125,
0.034759521484375,
0.0244903564453125,
-0.03228759765625,
0.041015625,
0.0023555755615234375,
-0.00786590576171875,
0.014495849609375,
0.036651611328125,
-0.043060302734375,
0.00445556640625,
-0.04595947265625,
0.0462646484375,
-0.044189453125,
-0.01320648193359375,
-0.0271453857421875,
0.04583740234375,
-0.0487060546875,
0.049224853515625,
0.014984130859375,
-0.0211639404296875,
-0.03216552734375,
-0.01351165771484375,
0.007617950439453125,
0.04132080078125,
0.00931549072265625,
-0.047698974609375,
-0.0141754150390625,
0.007213592529296875,
-0.03533935546875,
-0.02813720703125,
0.045562744140625,
0.03094482421875,
0.031768798828125,
0.0169830322265625,
-0.0115509033203125,
0.0421142578125,
-0.003490447998046875,
-0.01605224609375,
0.0231170654296875,
-0.0372314453125,
-0.049102783203125,
0.0013399124145507812,
0.0294647216796875,
0.016815185546875,
-0.01092529296875,
0.02642822265625,
0.0020732879638671875,
-0.04364013671875,
-0.0292205810546875,
0.01538848876953125,
0.0175323486328125,
0.00646209716796875,
-0.037353515625,
-0.034515380859375,
0.01739501953125,
0.036865234375,
-0.0242919921875,
-0.0295562744140625,
-0.040374755859375,
-0.0288238525390625,
0.0015363693237304688,
-0.0156402587890625,
0.0098419189453125,
-0.004425048828125,
0.0286712646484375,
0.0260162353515625,
0.050994873046875,
0.0146484375,
0.04345703125,
-0.0296478271484375,
-0.041900634765625,
-0.0175628662109375,
0.0312042236328125,
0.021759033203125,
0.0049896240234375,
0.0091552734375,
0.0242156982421875,
-0.035980224609375,
0.01004791259765625,
-0.0175933837890625,
0.0229034423828125,
-0.03253173828125,
-0.0162811279296875,
0.0386962890625,
-0.044189453125,
0.049224853515625,
0.03961181640625,
-0.00972747802734375,
-0.03729248046875,
-0.040679931640625,
0.049041748046875,
-0.02410888671875,
-0.0195770263671875,
0.044708251953125,
-0.0290374755859375,
0.00955963134765625,
-0.025146484375,
-0.02459716796875,
0.045654296875,
0.0213470458984375,
-0.031280517578125,
0.028594970703125,
-0.032745361328125,
0.036651611328125,
0.006458282470703125,
-0.0341796875,
0.037567138671875,
0.036346435546875,
0.0003075599670410156,
-0.01385498046875,
-0.035980224609375,
0.023590087890625,
0.02984619140625,
-0.022613525390625,
0.03460693359375,
-0.0316162109375,
0.0416259765625,
-0.04095458984375,
0.043426513671875,
0.0032291412353515625,
-0.032928466796875,
0.0364990234375,
-0.0171356201171875,
-0.04296875,
-0.006320953369140625,
-0.04052734375,
0.01898193359375,
-0.048675537109375,
-0.01528167724609375,
-0.05010986328125,
-0.0281219482421875,
-0.0159454345703125,
-0.031768798828125,
-0.040130615234375,
-0.0421142578125,
-0.027252197265625,
-0.046905517578125,
0.032470703125,
0.020660400390625,
0.025604248046875,
-0.01107025146484375,
0.037933349609375,
0.034454345703125,
-0.050140380859375,
0.0232696533203125,
-0.0240325927734375,
-0.010467529296875,
-0.024871826171875,
-0.04852294921875,
0.0016927719116210938,
0.0335693359375,
-0.041656494140625,
-0.032958984375,
0.018096923828125,
0.01971435546875,
-0.02105712890625,
0.023101806640625,
-0.015777587890625,
0.03253173828125,
0.045166015625,
-0.0006308555603027344,
0.01345062255859375,
-0.0357666015625,
-0.036651611328125,
0.012054443359375,
-0.00798797607421875,
0.0084686279296875,
0.039947509765625,
0.0367431640625,
0.0223388671875,
-0.03448486328125,
0.045684814453125,
0.0160369873046875,
0.0084228515625,
-0.0190582275390625,
-0.0180816650390625,
-0.0098114013671875,
-0.07086181640625,
-0.0167236328125,
-0.020965576171875,
0.0479736328125,
0.061431884765625,
-0.046051025390625,
-0.015899658203125,
0.0452880859375,
0.053375244140625,
0.084228515625,
0.0189361572265625,
0.018646240234375,
0.010772705078125,
0.033660888671875,
0.053741455078125,
0.060333251953125,
0.0129852294921875,
-0.00933837890625,
0.05181884765625,
-0.02362060546875,
0.0130615234375,
0.0665283203125,
0.0284423828125,
0.034637451171875,
0.0186920166015625,
-0.006923675537109375,
0.046051025390625,
0.0159759521484375,
0.024658203125,
-0.074462890625,
-0.03167724609375,
0.003986358642578125,
0.0133056640625,
0.082275390625,
0.035919189453125,
7.253885269165039e-05,
-0.0210723876953125,
-0.036468505859375,
0.039398193359375,
-0.00923919677734375,
-0.005859375,
0.01534271240234375,
0.0556640625,
0.00484466552734375,
-0.0119171142578125,
0.037994384765625,
0.00818634033203125,
0.0103302001953125,
0.0262298583984375,
0.036224365234375,
-0.02423095703125,
-0.0501708984375,
-0.018585205078125,
-0.0293121337890625,
0.0256500244140625,
-0.032928466796875,
-0.00997161865234375,
0.0073089599609375,
-0.033447265625,
0.04107666015625,
-0.003173828125,
0.0589599609375,
0.028594970703125,
0.03240966796875,
-0.0149383544921875,
0.0212249755859375,
-0.0218505859375,
0.0114593505859375,
0.0273590087890625,
-0.039337158203125,
-0.00652313232421875,
0.006328582763671875,
0.0033969879150390625,
-0.02081298828125,
0.04345703125,
0.0458984375,
-0.00708770751953125,
0.01548004150390625,
0.0025634765625,
-0.01702880859375,
0.0087127685546875,
-0.00942230224609375,
-0.0426025390625,
0.04449462890625,
0.060638427734375,
-0.0167083740234375,
0.00481414794921875,
-0.0433349609375,
0.0025310516357421875,
0.054718017578125,
-0.013671875,
0.06671142578125,
0.046783447265625,
-0.0031299591064453125,
0.00650787353515625,
-0.027740478515625,
0.037872314453125,
0.01480865478515625,
-0.053253173828125,
-0.0166778564453125,
0.01015472412109375,
-0.058349609375,
-0.035675048828125,
-0.0220489501953125,
-0.040130615234375,
0.0175018310546875,
0.032440185546875,
0.069091796875,
0.01360321044921875,
0.02520751953125,
0.01015472412109375,
0.035369873046875,
0.03863525390625,
-0.022857666015625,
0.0557861328125,
0.044403076171875,
0.035125732421875,
0.045989990234375,
0.01605224609375,
-0.0165863037109375,
0.056793212890625,
-5.2869319915771484e-05,
0.01090240478515625,
0.04241943359375,
0.035491943359375,
0.0595703125,
0.04656982421875,
-0.0264129638671875,
-0.004756927490234375,
-0.063232421875,
-0.048614501953125,
-0.0119781494140625,
-0.0416259765625,
-0.049835205078125,
0.0435791015625,
0.0233306884765625,
0.0019817352294921875,
-0.006153106689453125,
-0.044219970703125,
0.040679931640625,
-0.00023233890533447266,
-0.063232421875,
-0.0025005340576171875,
-0.0494384765625,
0.0218353271484375,
0.0164947509765625,
0.0523681640625,
-0.003215789794921875,
0.0194244384765625,
0.042755126953125,
-0.01605224609375,
0.004421234130859375,
0.0452880859375,
-0.0030193328857421875,
-0.044403076171875,
-0.02001953125,
0.056610107421875,
0.034393310546875,
-0.04022216796875,
0.005466461181640625,
-0.057891845703125,
-0.0306396484375,
0.0200653076171875,
0.04443359375,
0.034942626953125,
-0.0165557861328125,
-0.038360595703125,
0.00464630126953125,
-0.030120849609375,
-0.033905029296875,
-0.03192138671875,
-0.005100250244140625,
0.01309967041015625,
-0.0304412841796875,
0.011505126953125,
-0.046142578125,
-0.043121337890625,
-0.00728607177734375,
0.0491943359375,
0.0301055908203125,
-0.0236053466796875,
0.01873779296875,
-0.036285400390625,
-0.0241546630859375,
0.0234527587890625,
0.076171875,
-0.02899169921875,
-0.01049041748046875,
-0.0278167724609375,
0.023651123046875,
-0.0207366943359375,
0.0097808837890625,
-0.0306396484375,
0.0159454345703125,
-0.0095062255859375,
-0.01534271240234375,
0.04443359375,
-0.054473876953125,
0.0027179718017578125,
-0.01511383056640625,
0.029815673828125,
0.0189971923828125,
-0.0037822723388671875,
0.025848388671875,
0.0191497802734375,
0.0027599334716796875,
0.031646728515625,
-0.01055908203125,
-0.08819580078125,
0.00884246826171875,
-0.0546875,
0.0227813720703125,
-0.04876708984375,
-0.01486968994140625,
-0.0682373046875,
0.005615234375,
-0.0168609619140625,
0.04400634765625,
0.0263671875,
-0.0909423828125,
4.3392181396484375e-05,
0.01380157470703125,
-0.04022216796875,
-0.028900146484375,
0.04736328125,
-0.00583648681640625,
-0.00809478759765625,
-0.0006380081176757812,
-0.022735595703125,
0.05157470703125,
-0.0260772705078125,
-0.03826904296875,
0.00714874267578125,
-0.04107666015625,
0.01226806640625,
-0.0081787109375,
-0.05810546875,
-0.0634765625,
0.020233154296875,
-0.022247314453125,
-0.041046142578125,
0.01116180419921875,
0.005092620849609375,
-0.0010385513305664062,
0.0025959014892578125,
-0.0289459228515625,
0.022735595703125,
-0.0006833076477050781,
-0.015869140625,
0.017059326171875,
0.007122039794921875,
-0.01473236083984375,
-0.0194091796875,
-0.010406494140625,
0.04888916015625,
0.036376953125,
-0.024566650390625,
0.00518035888671875,
-0.032440185546875,
0.0118560791015625,
0.031158447265625,
0.0323486328125,
-0.00823974609375,
0.06005859375,
0.036346435546875,
0.0164337158203125,
0.0157470703125,
0.053680419921875,
0.04833984375,
0.048736572265625,
0.036041259765625,
0.043304443359375,
-0.047698974609375,
0.029937744140625,
0.006542205810546875,
-0.034271240234375,
-0.04656982421875,
-0.01313018798828125,
-0.03759765625,
-0.057525634765625,
-0.0242767333984375,
0.0045318603515625,
-0.049530029296875,
0.02069091796875,
-0.0447998046875,
-0.00290679931640625,
-0.05023193359375,
-0.06689453125,
-0.01885986328125,
0.00498199462890625,
0.01398468017578125,
0.05438232421875,
-0.0304412841796875,
0.033782958984375,
-0.044921875,
-0.04583740234375,
-0.042022705078125,
-0.0202178955078125,
0.05133056640625,
0.0161590576171875,
0.0119476318359375,
0.020294189453125,
0.044342041015625,
-0.0045928955078125,
-0.0181884765625,
0.0176544189453125,
-0.0237579345703125,
0.04052734375,
-0.0019216537475585938,
-0.02142333984375,
0.050445556640625,
0.0531005859375,
0.03143310546875,
-0.001861572265625,
-0.0183563232421875,
-0.0005764961242675781,
-0.0083160400390625,
0.01678466796875,
-0.019134521484375,
0.00684356689453125,
-0.0283660888671875,
-0.016693115234375,
0.0037937164306640625,
0.0194549560546875,
-0.0036487579345703125,
0.03497314453125,
0.009918212890625,
-0.0164031982421875,
0.037811279296875,
-0.034759521484375,
0.0157470703125,
-0.00829315185546875,
0.041900634765625,
-0.0182952880859375,
0.061859130859375,
0.03936767578125,
-0.024078369140625,
0.033935546875,
-0.033447265625,
-0.0223388671875,
-0.00588226318359375,
0.042510986328125,
0.051849365234375,
-0.03582763671875,
0.061431884765625,
0.0262451171875,
0.053070068359375,
-0.038543701171875,
0.046234130859375,
0.02655029296875,
-0.00574493408203125,
0.0513916015625,
-0.031280517578125,
-0.01302337646484375,
0.01145172119140625,
-0.0101776123046875,
-0.0321044921875,
0.0298309326171875,
0.005817413330078125,
-0.007843017578125,
-0.02325439453125,
0.0240631103515625,
0.0240631103515625,
0.05224609375,
0.0592041015625,
-0.024017333984375,
0.01495361328125,
0.009552001953125,
0.048065185546875,
-0.017303466796875,
0.0027523040771484375,
0.03594970703125,
0.040435791015625,
-0.0033092498779296875,
0.0009679794311523438,
0.044586181640625,
-0.04095458984375,
-0.019317626953125,
0.05450439453125,
0.00034117698669433594,
-0.053375244140625,
0.01299285888671875,
-0.04962158203125,
0.0134124755859375,
0.0206451416015625,
-0.038726806640625,
0.016845703125,
0.0149383544921875,
0.05938720703125,
0.033721923828125,
0.052734375,
0.009002685546875,
0.0750732421875,
0.049041748046875,
-0.0382080078125,
-0.047332763671875,
0.032012939453125,
-0.0018892288208007812,
-0.0024242401123046875,
-0.01035308837890625,
0.0220794677734375,
0.032012939453125,
0.01959228515625,
-0.0240478515625,
0.01995849609375,
-0.02520751953125,
-0.01287078857421875,
0.00960540771484375,
0.0283355712890625,
0.00836944580078125,
0.04254150390625,
-0.034515380859375,
-0.0153350830078125,
-0.0665283203125,
0.022216796875,
0.031463623046875,
0.03790283203125,
0.0287933349609375,
-0.03533935546875,
0.0022144317626953125,
0.02069091796875,
-0.0133819580078125,
0.006694793701171875,
-0.0302581787109375,
0.0280303955078125,
0.026824951171875,
0.048797607421875,
-0.006587982177734375,
0.017303466796875,
-0.0379638671875,
-0.037689208984375,
-0.05694580078125,
-0.040496826171875,
0.019622802734375,
-0.040130615234375,
-0.011077880859375,
-0.01027679443359375,
0.01361083984375,
-0.022796630859375,
-0.03515625,
-0.061431884765625,
0.015869140625,
-0.01397705078125,
-0.04022216796875,
-0.036773681640625,
0.004764556884765625,
0.01113128662109375,
-0.044830322265625,
-0.0220794677734375,
0.0400390625,
-0.043365478515625,
-0.002079010009765625,
-0.028106689453125,
-0.0149993896484375,
0.02288818359375,
0.035614013671875,
-0.0220489501953125,
-0.01160430908203125,
-0.046051025390625,
0.0274505615234375,
-0.0033817291259765625,
0.0009074211120605469,
0.03955078125,
0.0885009765625,
-0.00020635128021240234,
-0.019500732421875,
-0.04290771484375,
-0.005893707275390625,
0.0211639404296875,
-0.0023174285888671875,
0.036956787109375,
-0.02740478515625,
0.021209716796875,
0.0013189315795898438,
0.048828125,
-0.061767578125,
-0.035614013671875,
-0.0203399658203125,
0.04022216796875,
0.007083892822265625,
-0.05377197265625,
-0.0270233154296875,
-0.05389404296875,
0.0037441253662109375,
0.066162109375,
0.00907135009765625,
-0.01082611083984375,
-0.036651611328125,
0.042877197265625,
0.0168609619140625,
-0.0210723876953125,
-0.019073486328125,
0.044219970703125,
0.066162109375,
0.06890869140625,
-0.040557861328125,
0.043182373046875,
0.0014638900756835938,
0.002574920654296875,
0.0105743408203125,
-0.0186309814453125,
-0.0279083251953125,
-0.01555633544921875,
0.053466796875,
-0.042633056640625,
-0.037139892578125,
0.036956787109375,
-0.0169677734375,
0.016265869140625,
-0.0167083740234375,
0.044891357421875,
-0.040679931640625,
-0.04296875,
0.0003371238708496094,
0.0268096923828125,
-0.0251922607421875,
0.04022216796875,
0.0391845703125,
-0.0160675048828125,
0.0236358642578125,
0.06268310546875,
-0.0166778564453125,
-0.007457733154296875,
-0.018402099609375,
0.07781982421875,
0.02044677734375,
0.04705810546875,
0.00421142578125,
0.00263214111328125,
0.005992889404296875,
-0.04620361328125,
-0.03350830078125,
0.00762176513671875,
0.02252197265625,
-0.008758544921875,
0.0012788772583007812,
-0.0228271484375,
0.041717529296875,
-0.0185546875,
0.0799560546875,
0.001407623291015625,
0.016876220703125,
0.032958984375,
-0.01320648193359375,
-0.0197906494140625,
-0.0294342041015625,
0.01568603515625,
-0.03375244140625,
-0.0170745849609375,
0.033660888671875,
-0.0108795166015625,
0.0535888671875,
0.00899505615234375,
0.0310211181640625,
-0.052490234375,
-0.048980712890625,
0.036102294921875,
0.04437255859375,
0.0015974044799804688,
-3.4689903259277344e-05,
0.005519866943359375,
-0.032623291015625,
0.037933349609375,
0.028717041015625,
0.0192718505859375,
0.023040771484375,
0.0308837890625,
0.042236328125,
-0.006683349609375,
-0.0177154541015625,
-0.00850677490234375,
0.0234527587890625,
-0.01271820068359375,
-0.0162506103515625,
-0.03289794921875,
0.0012836456298828125,
0.0045166015625,
0.035888671875,
0.05169677734375,
-0.0033321380615234375,
-0.02862548828125,
0.04547119140625,
-0.02032470703125,
0.0253753662109375,
0.062225341796875,
0.06097412109375,
-8.362531661987305e-05,
0.01470184326171875,
0.055328369140625,
0.049163818359375,
-0.00893402099609375,
-0.054351806640625,
-0.0219879150390625,
-0.02325439453125,
-0.00222015380859375,
-0.00943756103515625,
-0.043975830078125,
-0.0364990234375,
-0.002033233642578125,
0.047149658203125,
0.0178985595703125,
-0.03692626953125,
-0.043670654296875,
-0.0394287109375,
-0.0301513671875,
0.0203399658203125,
-0.02667236328125,
-0.0210113525390625,
-0.004932403564453125,
-0.0290985107421875,
-0.059326171875,
0.01061248779296875,
0.012603759765625,
0.033966064453125,
0.0221710205078125,
0.0240631103515625,
0.008056640625,
-0.024444580078125,
0.06622314453125,
-0.035736083984375,
0.01511383056640625,
-0.0230560302734375,
-0.02459716796875,
0.010955810546875,
0.0106201171875,
0.01690673828125,
-0.01331329345703125,
0.035675048828125,
0.0400390625,
-0.0131683349609375,
0.016448974609375,
0.01549530029296875,
-0.0099334716796875,
0.031494140625,
0.042510986328125,
0.0169219970703125,
0.032379150390625,
-0.00986480712890625,
0.047027587890625,
-0.014892578125,
-0.040191650390625,
-0.044677734375,
0.028472900390625,
0.027557373046875,
0.0144805908203125,
0.027862548828125,
0.01039886474609375,
0.013153076171875,
0.033355712890625,
-0.01213836669921875,
-0.036651611328125,
0.04595947265625,
0.0458984375,
-0.0120086669921875,
0.0219573974609375,
0.024810791015625,
-0.0241546630859375,
-0.0426025390625,
0.0285491943359375,
0.08270263671875,
0.0244598388671875,
-0.0462646484375,
-0.0005602836608886719,
-0.0163726806640625,
0.03448486328125,
-0.021270751953125,
-0.03704833984375,
0.0435791015625,
-0.0108489990234375,
0.080810546875,
-0.00476837158203125,
-0.0024280548095703125,
-0.03271484375,
-0.039459228515625,
0.0189971923828125,
0.04388427734375,
-0.051666259765625,
-0.0538330078125,
0.059478759765625,
-0.039947509765625,
0.0264434814453125,
-0.0164031982421875,
-0.005603790283203125,
-0.043792724609375,
-0.04241943359375,
0.0007066726684570312,
-0.0106964111328125,
0.0259552001953125,
0.0016574859619140625,
0.0166473388671875,
-0.0002830028533935547,
0.0186004638671875,
0.03900146484375,
0.0244140625,
-0.0260009765625,
0.0369873046875,
-0.027587890625,
0.021270751953125,
0.05584716796875,
0.030181884765625,
-0.0146331787109375,
0.00879669189453125,
-0.0261077880859375,
-0.01320648193359375,
-0.01247406005859375,
0.036224365234375,
0.037567138671875,
0.002811431884765625,
-0.016754150390625,
0.0181121826171875,
-0.0106353759765625,
-0.03460693359375,
-0.018463134765625,
0.02508544921875,
-0.039703369140625,
0.07220458984375,
0.0306549072265625,
0.01332855224609375,
0.008331298828125,
0.05133056640625,
-0.02276611328125,
-0.01971435546875,
0.0001837015151977539,
-0.042724609375,
-0.02752685546875,
0.00469207763671875,
-0.036956787109375,
0.0246429443359375,
-0.02435302734375,
0.0103302001953125,
0.0028781890869140625,
-0.03143310546875,
-0.044647216796875,
-0.035491943359375,
0.028656005859375,
0.0325927734375,
-0.044281005859375,
-0.01056671142578125,
0.01221466064453125,
-0.01026153564453125,
0.0528564453125,
0.0333251953125,
0.00830078125,
0.0220184326171875,
0.059356689453125,
0.003093719482421875,
0.01361846923828125,
0.0006399154663085938,
0.01155853271484375,
-0.0272674560546875,
-0.00366973876953125,
-0.0064849853515625,
0.0267791748046875,
0.004306793212890625,
0.05426025390625,
0.034088134765625,
-0.0053863525390625,
0.0254669189453125,
0.027008056640625,
0.010162353515625,
0.028594970703125,
-0.005084991455078125,
0.00289154052734375,
0.002712249755859375,
0.0533447265625,
-0.0078582763671875,
0.053131103515625,
0.02630615234375,
0.02716064453125,
-0.02520751953125,
0.041778564453125,
-0.0215301513671875,
-0.0416259765625,
0.033233642578125,
0.0196380615234375,
0.003143310546875,
0.006595611572265625,
-0.0137939453125,
-0.0196533203125,
0.0038852691650390625,
-0.00893402099609375,
0.0159912109375,
0.019622802734375,
0.0210723876953125,
-0.042633056640625,
-0.003997802734375,
0.055572509765625,
0.03314208984375,
-0.0440673828125,
-0.04632568359375,
-0.00011968612670898438,
0.040069580078125,
-0.0181884765625,
0.0295257568359375,
-0.0159454345703125,
0.0005269050598144531,
-0.006847381591796875,
0.041229248046875,
-0.030609130859375,
-0.02239990234375,
0.01444244384765625,
-0.0219879150390625,
-0.0047607421875,
-0.0252838134765625,
0.044189453125,
-0.037322998046875,
-0.01004791259765625,
-0.049774169921875,
0.03790283203125,
0.029052734375,
0.0196990966796875,
0.01113128662109375,
-0.03094482421875,
-0.029022216796875,
0.0007715225219726562,
0.0455322265625,
0.0182342529296875,
0.000774383544921875,
0.0212554931640625,
-0.04583740234375,
0.01207733154296875,
0.0205230712890625,
-0.0289764404296875,
-0.046234130859375,
-0.00444793701171875,
-0.035552978515625,
0.045745849609375,
0.04168701171875,
-0.041595458984375,
0.045684814453125,
0.0279083251953125,
-0.00638580322265625,
0.0168914794921875,
0.0174407958984375,
0.041839599609375,
-0.02313232421875,
-0.045806884765625,
0.000995635986328125,
-0.044952392578125,
-0.0093994140625,
-0.0450439453125,
-0.034454345703125,
-0.0027313232421875,
0.0308837890625,
-0.0389404296875,
-0.0009927749633789062,
-0.007564544677734375,
-9.179115295410156e-05,
0.035858154296875,
-0.0222015380859375,
-0.02166748046875,
-0.04388427734375,
-0.017578125,
0.0321044921875,
0.00702667236328125,
0.0183563232421875,
-0.037567138671875,
0.04583740234375,
0.04522705078125,
0.041595458984375,
-0.0293426513671875,
0.036376953125,
0.0062103271484375,
-0.0028247833251953125,
-0.044891357421875,
0.0179595947265625,
0.01088714599609375,
-0.0241241455078125,
0.046905517578125,
0.0318603515625,
-0.00594329833984375,
-0.0450439453125,
-0.0275726318359375,
-0.0009527206420898438,
-0.036712646484375,
0.032623291015625,
-0.033477783203125,
-0.02197265625,
0.02386474609375,
-0.045745849609375,
-0.023681640625,
-0.04034423828125,
0.0200653076171875,
-0.039459228515625,
0.042022705078125,
0.0168914794921875,
-0.030853271484375,
-0.04705810546875,
-0.043182373046875,
-0.04791259765625,
0.04351806640625,
0.024871826171875,
-0.0189666748046875,
0.0018758773803710938,
0.023712158203125,
-0.0362548828125,
0.0248870849609375,
0.037506103515625,
-0.035064697265625,
0.0250396728515625,
0.04888916015625,
-0.0003070831298828125,
-0.01312255859375,
-0.00640869140625,
-0.0218048095703125,
0.033843994140625,
0.031829833984375,
0.042144775390625,
-0.03338623046875,
-0.0153350830078125,
0.00409698486328125,
0.019439697265625,
0.0201873779296875,
0.008575439453125,
-0.032196044921875,
-0.04736328125,
0.050689697265625,
0.0289459228515625,
-0.007038116455078125,
-0.049163818359375,
-0.0150909423828125,
0.02569580078125,
-0.0014696121215820312,
-0.043121337890625,
0.04547119140625,
-0.00833892822265625,
-0.01552581787109375,
-0.04681396484375,
0.0099334716796875,
0.00750732421875,
-0.0209197998046875,
-0.0022945404052734375,
-0.01364898681640625,
0.03887939453125,
-0.04461669921875,
-0.025360107421875,
-0.00030875205993652344,
-0.007411956787109375,
-0.026947021484375,
-0.04034423828125,
-0.0172271728515625,
-0.03271484375,
-0.014923095703125,
0.0213165283203125,
-0.020172119140625,
0.044158935546875,
7.802248001098633e-05,
-0.0435791015625,
0.03472900390625,
-0.0282135009765625,
0.0252227783203125,
-0.0231170654296875,
0.027923583984375,
0.0399169921875,
-0.048858642578125,
0.043060302734375,
-0.043365478515625,
0.01470947265625,
-0.0272064208984375,
-0.0487060546875,
0.006008148193359375,
0.00246429443359375,
-0.01343536376953125,
-0.01568603515625,
-0.027252197265625,
0.000579833984375,
0.031768798828125,
0.0477294921875,
-0.01155853271484375,
-0.01132965087890625,
0.0100860595703125,
0.036224365234375,
-0.0263671875,
0.031463623046875,
-0.028961181640625,
-0.0306396484375,
-0.0256195068359375,
-0.017181396484375,
-0.042205810546875,
0.038482666015625,
0.0401611328125,
0.030517578125,
0.0292205810546875,
-0.0362548828125,
0.03948974609375,
0.0008263587951660156,
-0.04669189453125,
0.01068878173828125,
0.00824737548828125,
0.02117919921875,
0.020233154296875,
-0.019317626953125,
0.021697998046875,
0.043121337890625,
-0.046539306640625,
0.01010894775390625,
-0.0177764892578125,
0.047515869140625,
-0.0343017578125,
0.044525146484375,
-0.00933074951171875,
0.025970458984375,
-0.040740966796875,
-0.0057525634765625,
-0.024383544921875,
0.0270538330078125,
-0.019256591796875,
-0.045135498046875,
-0.051025390625,
-0.0113983154296875,
0.031158447265625,
0.043609619140625,
-0.0477294921875,
-0.00495147705078125,
-0.045074462890625,
-0.035186767578125,
-0.0372314453125,
-0.041015625,
-0.039276123046875,
0.02728271484375,
-0.03277587890625,
-0.0108184814453125,
0.0243377685546875,
-0.04364013671875,
-0.020782470703125,
0.041015625,
-0.035064697265625,
0.0401611328125,
-0.0007910728454589844,
-0.01558685302734375,
0.046478271484375,
0.03643798828125,
0.036102294921875,
-0.043487548828125,
-0.0084075927734375,
0.01318359375,
0.037200927734375,
0.0276947021484375,
-0.01099395751953125,
0.02105712890625,
-0.049163818359375,
-0.04052734375,
0.043365478515625,
0.0222930908203125,
-0.0019178390502929688,
0.0013875961303710938,
-0.0207672119140625,
0.047760009765625,
0.049468994140625,
-0.0404052734375,
0.048065185546875,
0.01554107666015625,
0.0091552734375,
-0.034637451171875,
-0.046905517578125,
-0.04925537109375,
-0.01788330078125,
0.028350830078125,
-0.02239990234375,
0.0279541015625,
-0.001934051513671875,
0.0258026123046875,
-0.02716064453125,
-0.0228271484375,
-0.033294677734375,
-0.0177001953125,
-0.0223846435546875,
0.0227508544921875,
-0.003307342529296875,
0.024871826171875,
-0.005382537841796875,
0.0005640983581542969,
-0.0467529296875,
0.0099334716796875,
0.048675537109375,
-0.01380157470703125,
-0.04364013671875,
0.00766754150390625,
0.04632568359375,
-0.00536346435546875,
4.500150680541992e-05,
-0.040252685546875,
-0.040069580078125,
-0.04144287109375,
-0.0108642578125,
0.045379638671875,
0.0394287109375,
-0.0245513916015625,
-0.021240234375,
-0.0484619140625,
0.0029163360595703125,
-0.03582763671875,
0.002346038818359375,
0.042327880859375,
-0.034027099609375,
0.005374908447265625,
0.0341796875,
-0.0416259765625,
0.0350341796875,
-0.0192413330078125,
-0.01357269287109375,
0.035186767578125,
-0.021209716796875,
-0.0178070068359375,
0.037353515625,
-0.04180908203125,
0.043121337890625,
-0.0303497314453125,
0.0246429443359375,
-0.0079803466796875,
-0.0161895751953125,
0.0227203369140625,
0.0245361328125,
0.04541015625,
0.008453369140625,
-0.04339599609375,
0.01348876953125,
-0.0176849365234375,
0.025970458984375,
-0.02447509765625,
0.027435302734375,
-0.046722412109375,
0.0028438568115234375,
-0.0152587890625,
-0.0220184326171875,
-0.043212890625,
0.0390625,
0.01399993896484375,
-0.01052093505859375,
-0.02789306640625,
-0.030242919921875,
-0.0242462158203125,
-0.01479339599609375,
-0.03009033203125,
-0.046295166015625,
-0.0298919677734375,
0.033111572265625,
-0.014556884765625,
0.043792724609375,
-0.048675537109375,
0.00897216796875,
-0.037384033203125,
0.047393798828125,
-0.046173095703125,
0.0272369384765625,
-0.0361328125,
-0.044189453125,
0.030120849609375,
0.034423828125,
0.043212890625,
-0.0328369140625,
-0.007419586181640625,
0.01611328125,
-0.0345458984375,
0.032562255859375,
-0.0305023193359375,
0.0196990966796875,
0.033203125,
-0.03045654296875,
-0.047637939453125,
-0.00960540771484375,
-0.026275634765625,
0.00270843505859375,
0.046661376953125,
0.04644775390625,
-0.04534912109375,
0.03570556640625,
0.0292816162109375,
0.01326751708984375,
0.0124664306640625,
0.0291595458984375,
0.0235595703125,
0.03900146484375,
-0.0215301513671875,
-0.04541015625,
-0.032501220703125,
-0.0005512237548828125,
0.0256195068359375,
0.036102294921875,
0.02886962890625,
0.01568603515625,
0.0244140625,
0.044708251953125,
-0.02880859375,
-0.028900146484375,
-0.04296875,
-0.01380157470703125,
0.01837158203125,
-0.02349853515625,
-0.042999267578125,
0.03399658203125,
0.03118896484375,
-0.031524658203125,
0.00632476806640625,
-0.00688934326171875,
-0.0172271728515625,
0.04168701171875,
0.06427001953125,
0.050872802734375,
-0.016876220703125,
-0.0233154296875,
-0.0465087890625,
0.0565185546875,
0.00994110107421875,
0.00984954833984375,
-0.0196990966796875,
-0.015289306640625,
-0.0265655517578125,
0.0220184326171875,
0.040252685546875,
-0.07415771484375,
-0.0145721435546875,
0.0267791748046875,
-0.0210418701171875,
0.00855255126953125,
-0.0027790069580078125,
-0.022064208984375,
-0.0560302734375,
-0.07476806640625,
-0.01438140869140625,
0.0027065277099609375,
-0.0139617919921875,
0.012908935546875,
0.026519775390625,
0.0611572265625,
0.01081085205078125,
-0.04595947265625,
0.0250396728515625,
-0.0204925537109375,
-0.029815673828125,
0.01092529296875,
-0.055267333984375,
0.044403076171875,
-0.005855560302734375,
-0.007061004638671875,
-0.035003662109375,
0.008544921875,
0.043670654296875,
0.031890869140625,
-0.02520751953125,
0.04998779296875,
0.0679931640625,
-0.029205322265625,
-0.0170135498046875,
0.0033283233642578125,
0.021087646484375,
0.01096343994140625,
0.039794921875,
0.04815673828125,
0.0089874267578125,
-0.02508544921875,
-0.0262451171875,
-0.0243682861328125,
0.0079345703125,
-0.048736572265625,
-0.04693603515625,
-0.02252197265625,
0.0232696533203125,
0.0101318359375,
-0.0234527587890625,
0.0264739990234375,
0.05279541015625,
-0.015716552734375,
0.04107666015625,
-0.05499267578125,
-0.001796722412109375,
0.029998779296875,
0.01520538330078125,
0.042266845703125,
0.02581787109375,
-0.0401611328125,
0.0560302734375,
0.049713134765625,
0.020721435546875,
-0.0005049705505371094,
0.00931549072265625,
-0.032257080078125,
-0.004192352294921875,
-0.02337646484375,
-0.03887939453125,
0.043243408203125,
-0.00792694091796875,
0.025970458984375,
0.042694091796875,
0.0167694091796875,
0.04931640625,
-0.0214996337890625,
-0.046112060546875,
-0.05206298828125,
-0.03912353515625,
0.0014858245849609375,
0.0626220703125,
-0.001232147216796875,
0.002197265625,
-0.0232086181640625,
-0.0114593505859375,
0.054412841796875,
0.0218658447265625,
0.020538330078125,
-0.0174407958984375,
0.00553131103515625,
-0.041168212890625,
-0.036346435546875,
0.0050048828125,
0.01090240478515625,
-0.07061767578125,
0.0084381103515625,
0.04083251953125,
0.00426483154296875,
0.040283203125,
0.0364990234375,
-0.030181884765625,
0.0770263671875,
-0.03179931640625,
0.029205322265625,
0.036834716796875,
-0.0026264190673828125,
0.01453399658203125,
-0.031707763671875,
0.00913238525390625,
-0.0115509033203125,
0.036956787109375,
-0.05029296875,
0.0447998046875,
-0.0162506103515625,
0.009796142578125,
0.0240478515625,
-0.0177764892578125,
0.00679779052734375,
0.002960205078125,
0.034698486328125,
-0.01227569580078125,
-0.04974365234375,
0.0406494140625,
-0.023529052734375,
-0.0283355712890625,
0.04443359375,
-0.034210205078125,
0.06573486328125,
-0.06689453125,
0.01517486572265625,
0.005847930908203125,
0.042022705078125,
0.0234527587890625,
0.03173828125,
0.0191497802734375,
0.037445068359375,
0.0005249977111816406,
-0.042266845703125,
-0.001575469970703125,
0.01331329345703125,
0.014434814453125,
-0.036956787109375,
-0.0316162109375,
0.0140228271484375,
0.025299072265625,
-0.02777099609375,
-0.029296875,
0.0413818359375,
-0.0032520294189453125,
0.00974273681640625,
-0.00342559814453125,
0.04180908203125,
0.02325439453125,
-0.0135955810546875,
-0.01010894775390625,
-0.023834228515625,
0.034515380859375,
0.04095458984375,
0.065673828125,
-0.003154754638671875,
0.01456451416015625,
0.01541900634765625,
0.01708984375,
0.0165557861328125,
-0.032012939453125,
0.0266571044921875,
-0.009063720703125,
0.02069091796875,
0.0241546630859375,
-0.042572021484375,
0.0037479400634765625,
0.02276611328125,
0.022125244140625,
-0.018096923828125,
0.01340484619140625,
0.0113525390625,
0.00504302978515625,
0.03533935546875,
0.02593994140625,
-0.0175018310546875,
0.056915283203125,
0.0460205078125,
0.0189208984375,
-0.044342041015625,
-0.0240325927734375,
-0.0013685226440429688,
0.0266265869140625,
-0.03570556640625,
0.0206756591796875,
0.041961669921875,
0.053985595703125,
0.036346435546875,
0.0016794204711914062,
-0.028778076171875,
0.008026123046875,
0.06103515625,
-0.035003662109375,
-0.01837158203125,
0.035614013671875,
0.025054931640625,
-0.0450439453125,
-0.036346435546875,
-0.029296875,
0.05267333984375,
0.0306549072265625,
-0.0217742919921875,
-0.0132904052734375,
-0.0209808349609375,
0.062408447265625,
-0.01099395751953125,
-0.01023101806640625,
-0.006378173828125,
0.0128631591796875,
0.02069091796875,
0.00927734375,
0.0657958984375,
-0.05743408203125,
0.06195068359375,
0.00963592529296875,
0.0266265869140625,
0.01499176025390625,
0.004718780517578125,
-0.006771087646484375,
-0.034881591796875,
0.0260009765625,
-0.046539306640625,
-0.029632568359375,
-0.0196685791015625,
-0.013397216796875,
-0.020111083984375,
0.02862548828125,
-0.026031494140625,
-0.0084991455078125,
-0.0089569091796875,
0.005352020263671875,
0.03759765625,
-0.006134033203125,
0.056884765625,
-0.00704193115234375,
0.0548095703125,
0.062103271484375,
-0.02569580078125,
0.0285491943359375,
0.039215087890625,
-0.002666473388671875,
-0.023040771484375,
-0.004711151123046875,
-0.0299530029296875,
-0.0276947021484375,
0.039215087890625,
-0.038909912109375,
0.037628173828125,
-0.00519561767578125,
-0.053802490234375,
0.0413818359375,
-0.01166534423828125,
-0.0289459228515625,
-0.039398193359375,
0.0035858154296875,
-0.023834228515625,
0.057830810546875,
-0.0256500244140625,
0.02496337890625,
0.0024089813232421875,
-0.0267791748046875,
-0.045074462890625,
0.00537872314453125,
0.02911376953125,
-0.016845703125,
0.01495361328125,
-0.0032711029052734375,
-0.052490234375,
-0.0416259765625,
-0.050048828125,
0.037139892578125,
-0.01515960693359375,
-0.0192718505859375,
-0.005290985107421875,
-0.037811279296875,
-0.033538818359375,
-0.0174407958984375,
-0.037567138671875,
0.00977325439453125,
-0.013671875,
0.059722900390625,
-0.01165008544921875,
0.03594970703125,
-0.01082611083984375,
0.0285797119140625,
0.03106689453125,
-0.0286865234375,
0.0098419189453125,
-0.01439666748046875,
-0.036834716796875,
-0.03912353515625,
0.03948974609375,
-0.02020263671875,
-0.0012083053588867188,
0.0255126953125,
0.00963592529296875,
-0.02911376953125,
-0.059478759765625,
-0.01434326171875,
-0.028778076171875,
-0.05517578125,
0.041900634765625,
0.032958984375,
-0.0182342529296875,
0.04327392578125,
-0.05255126953125,
-0.0272064208984375,
0.04638671875,
0.04022216796875,
0.007843017578125,
0.0296173095703125,
-0.0201416015625,
-0.01080322265625,
0.00966644287109375,
-0.053466796875,
0.0413818359375,
-0.0035610198974609375,
-0.0140380859375,
0.0283355712890625,
0.0692138671875,
-0.0036334991455078125,
-8.940696716308594e-06,
0.0182342529296875,
0.045806884765625,
0.01372528076171875,
0.0106201171875,
-0.0192108154296875,
0.0014629364013671875,
-0.05670166015625,
-0.045074462890625,
-0.034820556640625,
0.046234130859375,
-0.0179290771484375,
0.054718017578125,
-0.0138702392578125,
0.0099639892578125,
0.0614013671875,
-0.0162353515625,
0.02630615234375,
-0.0025157928466796875,
-0.02081298828125,
-0.04852294921875,
-0.04254150390625,
0.047576904296875,
0.02801513671875,
-0.02728271484375,
0.003162384033203125,
0.0281982421875,
-0.039215087890625,
-0.048095703125,
0.041046142578125,
0.034271240234375,
0.0181121826171875,
-0.0235137939453125,
0.041168212890625,
-0.0297393798828125,
0.003147125244140625,
-0.01483917236328125,
0.025115966796875,
0.05096435546875,
0.040191650390625,
0.0175933837890625,
-0.006732940673828125,
0.06396484375,
0.025665283203125,
-0.01183319091796875,
-0.07012939453125,
-0.032684326171875,
0.052581787109375,
-0.023681640625,
0.03704833984375,
0.039459228515625,
-0.0309906005859375,
0.0036106109619140625,
0.004863739013671875,
0.0224609375,
-0.01194000244140625,
0.016632080078125,
-0.0626220703125,
-0.0213775634765625,
-0.00884246826171875,
0.0560302734375,
-0.04931640625,
-0.1077880859375,
-0.057037353515625,
-0.00640106201171875,
-0.008941650390625,
0.02496337890625,
0.0179901123046875,
0.05755615234375,
0.0207977294921875,
0.01457977294921875,
0.036895751953125,
0.0936279296875,
0.043365478515625,
0.0556640625,
-0.00559234619140625,
0.0634765625,
0.0172271728515625,
-0.024932861328125,
-0.0075531005859375,
0.036346435546875,
0.0303955078125,
-0.007297515869140625,
-0.048492431640625,
-0.01180267333984375,
0.0391845703125,
-0.087890625,
-0.10247802734375,
-0.10162353515625,
-0.03094482421875,
0.00469970703125,
-0.04083251953125,
-0.0178680419921875,
-0.06646728515625,
-0.08154296875,
-0.0474853515625,
0.052154541015625,
0.0457763671875,
0.0293731689453125,
0.01230621337890625,
-0.0013751983642578125,
-0.00844573974609375,
-0.021484375,
0.037689208984375,
-0.003131866455078125,
-0.0033416748046875,
0.048553466796875,
0.0322265625,
0.010162353515625,
0.007503509521484375,
0.03668212890625,
-0.005893707275390625,
-0.043609619140625,
0.0159759521484375,
0.0269012451171875,
0.06414794921875,
0.03973388671875,
-0.01416015625,
0.00835418701171875,
-0.006565093994140625,
0.015899658203125,
-0.03875732421875,
-0.0706787109375,
-0.057342529296875,
0.0654296875,
0.040313720703125,
-0.05206298828125,
-0.03179931640625,
0.042755126953125,
-0.03363037109375,
0.0300445556640625,
0.0341796875,
0.01393890380859375,
0.04620361328125,
-0.01318359375,
0.04388427734375,
-0.049652099609375,
0.04632568359375,
0.05242919921875,
-0.030731201171875,
0.004180908203125,
0.03192138671875,
-0.0018835067749023438,
0.037628173828125,
-0.03912353515625,
-0.028839111328125,
-0.00240325927734375,
0.059600830078125,
0.020538330078125,
0.06439208984375,
-0.03582763671875,
0.00742340087890625,
-0.0286712646484375,
0.0228424072265625,
0.032379150390625,
0.04217529296875,
-0.0006775856018066406,
-0.037628173828125,
0.025421142578125,
0.01119232177734375,
0.07781982421875,
-0.0694580078125,
-0.0640869140625,
-0.0609130859375,
-0.00853729248046875,
0.021148681640625,
-0.0870361328125,
-0.030914306640625,
-0.06793212890625,
-0.038116455078125,
-0.043243408203125,
-0.0202484130859375,
-0.01010894775390625,
0.02392578125,
-0.029571533203125,
-0.039031982421875,
-0.048248291015625,
0.0175018310546875,
0.0255584716796875,
-0.046539306640625,
-0.02813720703125,
0.00757598876953125,
0.0299530029296875,
0.04150390625,
0.0020294189453125,
0.00170135498046875,
0.05743408203125,
0.057586669921875,
0.01206207275390625,
0.01922607421875,
0.044097900390625,
0.06634521484375,
0.049224853515625,
0.0125579833984375,
-0.047027587890625,
-0.042449951171875,
0.0007529258728027344,
0.021820068359375,
0.0263519287109375,
-0.0091552734375,
-0.0160369873046875,
-0.01560211181640625,
-0.033660888671875,
0.025360107421875,
0.058563232421875,
0.016571044921875,
-0.033935546875,
-0.0183868408203125,
-0.01641845703125,
0.05340576171875,
-0.0154571533203125,
0.04949951171875,
0.055816650390625,
0.005954742431640625,
0.0687255859375,
0.05517578125,
0.01971435546875,
0.0222625732421875,
-0.035675048828125,
0.0458984375,
-1.329183578491211e-05,
-0.0262451171875,
0.00447845458984375,
-0.0299835205078125,
-0.0377197265625,
-0.01763916015625,
-0.038299560546875,
0.0164794921875,
-0.050933837890625,
-0.0008859634399414062,
-0.0299072265625,
0.0219573974609375,
0.01287078857421875,
0.0270538330078125,
-0.0189971923828125,
-0.037261962890625,
0.0107421875,
-0.053253173828125,
-0.031402587890625,
0.0212860107421875,
-0.0017614364624023438,
-0.0255279541015625,
0.04534912109375,
0.057525634765625,
0.066650390625,
-0.02191162109375,
-0.038909912109375,
-0.01311492919921875,
0.01290130615234375,
0.015106201171875,
0.0302886962890625,
-0.046234130859375,
0.029449462890625,
-0.0165252685546875,
-0.02130126953125,
0.03277587890625,
0.01297760009765625,
-0.052032470703125,
0.0237579345703125,
0.035797119140625,
0.047637939453125,
0.02496337890625,
0.0275726318359375,
-0.022735595703125,
0.00482177734375,
0.01206207275390625,
0.0289764404296875,
0.07861328125,
0.045166015625,
-0.0026187896728515625,
-0.0201568603515625,
-0.0162506103515625,
-0.0033893585205078125,
-0.031707763671875,
0.0278778076171875,
0.06549072265625,
0.0013828277587890625,
-0.018463134765625,
-0.0103607177734375,
-0.018524169921875,
0.054779052734375,
0.0231475830078125,
0.0246124267578125,
-0.03533935546875,
-0.00218963623046875,
-0.0389404296875,
-0.032867431640625,
0.03729248046875,
0.0177764892578125,
0.041473388671875,
-0.037567138671875,
0.038421630859375,
0.0198974609375,
0.0091094970703125,
0.033355712890625,
-0.03131103515625,
-0.00519561767578125,
0.01035308837890625,
-0.029449462890625,
-0.053070068359375,
-0.01168060302734375,
0.040679931640625,
-0.05511474609375,
0.0239715576171875,
0.03790283203125,
-0.02142333984375,
0.0025844573974609375,
0.04168701171875,
-0.02545166015625,
-0.0390625,
0.06903076171875,
-0.054290771484375,
-0.0168304443359375,
-0.039520263671875,
-0.037261962890625,
0.01235198974609375,
-0.031280517578125,
0.0165557861328125,
-0.0007524490356445312,
0.047119140625,
-0.0667724609375,
0.0227203369140625,
0.026885986328125,
-0.0190277099609375,
0.032470703125,
-0.052825927734375,
0.0567626953125,
0.0259552001953125,
-0.032379150390625,
-0.0005984306335449219,
-0.0091400146484375,
0.038055419921875,
0.008941650390625,
-0.03411865234375,
0.0220489501953125,
0.06494140625,
-0.039215087890625,
0.0300445556640625,
-0.044403076171875,
0.0063629150390625,
0.0029354095458984375,
0.03729248046875,
0.055419921875,
-0.0029296875,
-0.046600341796875,
0.0645751953125,
-0.0194244384765625,
0.00881195068359375,
-0.07623291015625,
0.038665771484375,
-0.00144195556640625,
0.0338134765625,
0.0297393798828125,
-0.037017822265625,
0.0056610107421875,
-0.045013427734375,
-0.0361328125,
0.0308990478515625,
-0.026092529296875,
-0.0140380859375,
-0.00829315185546875,
-0.0161895751953125,
-0.0020198822021484375,
-0.040557861328125,
0.043670654296875,
-0.005611419677734375,
-0.011016845703125,
-0.027740478515625,
-0.0308837890625,
-0.005260467529296875,
-0.005126953125,
-0.0300140380859375,
0.01800537109375,
0.05322265625,
-0.0237274169921875,
0.0296783447265625,
-0.006069183349609375,
0.052276611328125,
-0.048004150390625,
0.037445068359375,
0.00540924072265625,
-0.02386474609375,
0.04156494140625,
-0.0115509033203125,
0.04034423828125,
0.0187225341796875,
-0.0780029296875,
-0.03656005859375,
-0.055877685546875,
-0.0301055908203125,
0.0023746490478515625,
0.0237274169921875,
0.056243896484375,
0.014739990234375,
-0.0238800048828125,
0.0474853515625,
-0.026458740234375,
0.06689453125,
0.019927978515625,
-0.0325927734375,
-0.0030536651611328125,
-0.0014047622680664062,
0.041595458984375,
-0.04437255859375,
0.00788116455078125,
-0.0369873046875,
0.039642333984375,
0.0322265625,
-0.0433349609375,
-0.0207672119140625,
0.00563812255859375,
-0.0491943359375,
-0.01258087158203125,
-0.0494384765625,
0.0207061767578125,
-0.036346435546875,
0.022674560546875,
0.01849365234375,
0.053955078125,
0.0340576171875,
-0.005710601806640625,
-0.017181396484375,
0.0202789306640625,
0.0401611328125,
0.01390838623046875,
-0.055419921875,
0.04052734375,
0.038299560546875,
0.044036865234375,
0.01415252685546875,
0.01171112060546875,
0.038970947265625,
0.0240936279296875,
-0.00899505615234375,
-0.0136871337890625,
0.041595458984375,
-0.0809326171875,
-0.046600341796875,
-0.0872802734375,
-0.0758056640625,
-0.0283966064453125,
0.0097808837890625,
-0.0085296630859375,
-0.015899658203125,
-0.0078277587890625,
-0.01178741455078125,
0.0002865791320800781,
0.010101318359375,
0.0143280029296875,
-0.02984619140625,
-0.035675048828125,
0.0020771026611328125,
-0.0002123117446899414,
-0.027984619140625,
0.039764404296875,
-0.05096435546875,
0.032379150390625,
0.050048828125,
0.05706787109375,
0.0033206939697265625,
0.00273895263671875,
-0.0509033203125,
0.0023345947265625,
-0.0167388916015625,
-0.024444580078125,
-0.07379150390625,
0.0012760162353515625,
-0.03411865234375,
-0.03656005859375,
-0.00533294677734375,
0.0301513671875,
-0.04766845703125,
0.020233154296875,
-0.06390380859375,
-0.046875,
-0.033966064453125,
-0.02294921875,
0.058349609375,
-0.03741455078125,
-0.08428955078125,
0.0010967254638671875,
-0.04693603515625,
-0.048248291015625,
-0.0308685302734375,
-0.02838134765625,
-0.031280517578125,
-0.031951904296875,
-0.03448486328125,
-0.0032138824462890625,
0.0179443359375,
0.0202789306640625,
-0.041107177734375,
-0.0136566162109375,
-0.040771484375,
0.0018911361694335938,
0.054168701171875,
0.0094451904296875,
0.007720947265625,
0.0072784423828125,
0.00965118408203125,
-0.041107177734375,
-0.015960693359375,
0.033782958984375,
0.02410888671875,
-0.021728515625,
-0.031280517578125,
-0.0182037353515625,
0.041351318359375,
-0.028961181640625,
0.01032257080078125,
-0.01158905029296875,
-0.0310211181640625,
-0.04052734375,
0.0295257568359375,
0.048736572265625,
-0.0020046234130859375,
0.022308349609375,
0.00038170814514160156,
-0.02294921875,
-0.03912353515625,
-0.006801605224609375,
-0.00873565673828125,
-0.04669189453125,
0.0204010009765625,
0.0157623291015625,
-0.0687255859375,
-0.005336761474609375,
-0.036895751953125,
-0.024017333984375,
0.025360107421875,
-0.034881591796875,
-0.0093994140625,
-0.0267486572265625,
-0.038543701171875,
-0.0322265625,
0.06427001953125,
0.0265960693359375,
-0.032989501953125,
0.019775390625,
-0.0269317626953125,
-0.0218505859375,
0.0210418701171875,
0.02325439453125,
-0.0186920166015625,
0.01125335693359375,
0.047088623046875,
0.066650390625,
0.05413818359375,
0.055694580078125,
0.07366943359375,
0.004703521728515625,
0.0206146240234375,
-0.0109710693359375,
0.042694091796875,
0.049224853515625,
-0.018341064453125,
0.0247955322265625,
0.0057525634765625,
0.09490966796875,
0.024627685546875,
0.03936767578125,
0.043731689453125,
0.00994110107421875,
0.02618408203125,
0.019195556640625,
-0.0345458984375,
-0.07061767578125,
-0.004016876220703125,
-0.005992889404296875,
0.01084136962890625,
-0.01500701904296875,
-0.0469970703125,
-0.0408935546875,
0.0098876953125,
-0.0247039794921875,
0.05743408203125,
-0.038543701171875,
0.0177459716796875,
-0.0108795166015625,
0.038818359375,
-0.00787353515625,
0.032501220703125,
0.016693115234375,
-0.04608154296875,
-0.001728057861328125,
-0.032928466796875,
-0.0008845329284667969,
-0.0298004150390625,
0.007511138916015625,
0.0233917236328125,
0.01497650146484375,
0.0006403923034667969,
0.044952392578125,
-0.004138946533203125,
-0.0648193359375,
-0.02783203125,
0.0306854248046875,
0.0411376953125,
-0.0221710205078125,
-0.04083251953125,
0.00640869140625,
-0.01226806640625,
-0.012847900390625,
-0.0212860107421875,
0.056976318359375,
0.04443359375,
0.0254669189453125,
-0.0540771484375,
0.058074951171875,
0.0408935546875,
-0.031158447265625,
-0.0217742919921875,
0.053680419921875,
0.06671142578125,
0.031768798828125,
-0.036529541015625,
-0.011199951171875,
0.01146697998046875,
-0.016632080078125,
-0.04840087890625,
-0.08135986328125,
0.00045371055603027344,
0.057373046875,
0.034820556640625,
-0.00376129150390625,
-0.049468994140625,
0.0428466796875,
-0.0171051025390625,
-0.0209503173828125,
0.0093536376953125,
0.0093231201171875,
0.044677734375,
-0.061126708984375,
-0.02587890625,
0.051300048828125,
-0.02130126953125,
-0.04168701171875,
-0.0018167495727539062,
0.067138671875,
0.003696441650390625,
-0.0438232421875,
-0.0021915435791015625,
-0.020660400390625,
-0.0216827392578125,
-0.049652099609375,
-0.017333984375,
0.0293731689453125,
0.0186614990234375,
0.00769805908203125,
-0.07098388671875,
-0.04803466796875,
-0.0137176513671875,
-0.0262908935546875,
0.021881103515625,
0.031951904296875,
0.0111541748046875,
-0.026153564453125,
-0.018341064453125,
0.0124664306640625,
0.0338134765625,
0.056884765625,
0.038421630859375,
0.07183837890625,
0.05792236328125,
0.031585693359375,
-0.00403594970703125,
0.002872467041015625,
0.07989501953125,
0.004642486572265625,
0.035308837890625,
-0.018585205078125,
-0.0033664703369140625,
0.02069091796875,
0.0021991729736328125,
0.040771484375,
-0.0709228515625,
-0.0268096923828125,
-0.05718994140625,
-0.057830810546875,
-0.0210723876953125,
0.0012311935424804688,
-0.0259857177734375,
-0.043670654296875,
0.0216217041015625,
0.043487548828125,
-0.0178985595703125,
-0.0090484619140625,
0.044036865234375,
0.052734375,
-0.003849029541015625,
-0.01541900634765625,
0.00894927978515625,
-0.0034160614013671875,
0.04803466796875,
-0.052581787109375,
-0.055755615234375,
0.048126220703125,
0.039031982421875,
0.005146026611328125,
0.023651123046875,
-0.01297760009765625,
-0.027740478515625,
-0.0218353271484375,
-0.03179931640625,
-0.005077362060546875,
0.01529693603515625,
0.043212890625,
-0.0097503662109375,
0.08184814453125,
0.056060791015625,
0.0271759033203125,
0.011993408203125,
0.011962890625,
0.01806640625,
0.04425048828125,
-0.0538330078125,
0.00435638427734375,
0.00685882568359375,
-0.01904296875,
-0.042755126953125,
-0.0599365234375,
0.03411865234375,
0.0055999755859375,
0.0022411346435546875,
0.043212890625,
-0.032470703125,
0.0166015625,
0.042327880859375,
0.0271148681640625,
0.04901123046875,
0.056427001953125,
-0.01403045654296875,
-0.05377197265625,
0.01453399658203125,
0.036712646484375,
0.03094482421875,
0.04595947265625,
0.0214691162109375,
-0.01523590087890625,
-0.08746337890625,
-0.01364898681640625,
0.043365478515625,
-0.0328369140625,
-0.00037097930908203125,
0.003635406494140625,
0.01336669921875,
0.014739990234375,
0.0191650390625,
0.0090179443359375,
0.0058441162109375,
0.020355224609375,
0.0010328292846679688,
0.01421356201171875,
-0.04449462890625,
-0.01551055908203125,
-0.00209808349609375,
-0.04791259765625,
-0.06787109375,
0.0180511474609375,
0.07269287109375,
0.036651611328125,
0.042755126953125,
0.01032257080078125,
0.026214599609375,
0.0009274482727050781,
0.004337310791015625,
0.01617431640625,
0.02740478515625,
0.005306243896484375,
0.056884765625,
0.007595062255859375,
0.0193328857421875,
-0.0162200927734375,
0.01219940185546875,
-0.0277099609375,
-0.00214385986328125,
0.01947021484375,
0.0242767333984375,
-0.0540771484375,
0.031646728515625,
0.0418701171875,
-0.0011396408081054688,
-0.06121826171875,
-0.07464599609375,
0.040740966796875,
0.00909423828125,
0.036529541015625,
0.0204315185546875,
-0.0220489501953125,
-0.039306640625,
0.06744384765625,
0.005191802978515625,
0.0169219970703125,
0.0533447265625,
-0.005405426025390625,
0.0085601806640625,
0.038238525390625,
-0.01904296875,
0.0372314453125,
-0.034271240234375,
0.02093505859375,
0.0024814605712890625,
-0.020843505859375,
0.0199432373046875,
0.04266357421875,
0.058135986328125,
0.00984954833984375,
-0.0018558502197265625,
0.02783203125,
0.052490234375,
0.0506591796875,
0.028472900390625,
-0.0244140625,
-0.03143310546875,
-0.0338134765625,
0.024688720703125,
-0.00469207763671875,
0.0027618408203125,
0.06146240234375,
-0.05072021484375,
-0.0631103515625,
0.038909912109375,
-0.005207061767578125,
-0.041778564453125,
0.039337158203125,
-0.0308837890625,
-0.007476806640625,
0.0310516357421875,
-0.0218505859375,
0.03289794921875,
0.0239715576171875,
0.033050537109375,
0.0227203369140625,
0.05230712890625,
-0.02545166015625,
-0.03790283203125,
-0.0028820037841796875,
-0.02679443359375,
-0.008453369140625,
0.0087432861328125,
0.040252685546875,
-0.042694091796875,
-0.06915283203125,
-0.0230865478515625,
0.0279388427734375,
0.04656982421875,
0.055206298828125,
-0.0206756591796875,
-0.04852294921875,
-0.0188446044921875,
-0.051422119140625,
0.0655517578125,
0.03228759765625,
0.0221710205078125,
0.03790283203125,
-0.037384033203125,
-0.00514984130859375,
-0.0240325927734375,
-0.0170135498046875,
0.00684356689453125,
0.0635986328125,
0.00923919677734375,
-0.0224609375,
-0.0043182373046875,
-0.0343017578125,
-0.008026123046875,
-0.04449462890625,
-0.0169219970703125,
-0.056304931640625,
-0.005428314208984375,
0.01497650146484375,
0.05718994140625,
-0.03399658203125,
0.0057220458984375,
0.02386474609375,
0.004520416259765625,
0.0196380615234375,
0.05303955078125,
-0.0269927978515625,
0.05511474609375,
-0.033843994140625,
0.044708251953125,
0.057708740234375,
0.0712890625,
0.0784912109375,
-0.03302001953125,
0.041412353515625,
-0.0013980865478515625,
0.0234832763671875,
-0.0168914794921875,
0.07476806640625,
-0.01027679443359375,
-0.049285888671875,
0.0330810546875,
0.0293731689453125,
0.095458984375,
0.029052734375,
0.0077056884765625,
0.007633209228515625,
-0.01071929931640625,
-0.006084442138671875,
0.00493621826171875,
-0.0193939208984375,
-0.0190582275390625,
0.0201416015625,
-0.0183563232421875,
0.039276123046875,
-0.031646728515625,
0.0709228515625,
0.04534912109375,
-0.050079345703125,
-0.0012617111206054688,
0.05328369140625,
-0.027862548828125,
0.0303955078125,
-0.0114288330078125,
-0.02301025390625,
-0.022064208984375,
0.0189208984375,
-0.0035858154296875,
-0.0265350341796875,
-0.0021686553955078125,
0.030853271484375,
-0.017608642578125,
-0.028106689453125,
-0.034942626953125,
-0.04669189453125,
-0.03326416015625,
-0.06982421875,
0.029052734375,
-0.048095703125,
-0.04803466796875,
0.0216827392578125,
0.08160400390625,
-0.00933074951171875,
0.036590576171875,
-0.055328369140625,
-0.038330078125,
0.07659912109375,
0.033050537109375,
-0.04327392578125,
-0.040863037109375,
-0.0218048095703125,
-0.0278472900390625,
-0.019805908203125,
-0.0232391357421875,
-0.0005965232849121094,
0.0033721923828125,
-0.02423095703125,
0.02496337890625,
-0.013671875,
0.032989501953125,
-0.00662994384765625,
0.0278778076171875,
-0.0777587890625,
-0.00041103363037109375,
-0.0095672607421875,
-0.0145111083984375,
0.021453857421875,
0.00873565673828125,
-0.06341552734375,
0.0190582275390625,
-0.01424407958984375,
-0.035186767578125,
-0.0164642333984375,
0.037933349609375,
0.0255126953125,
0.0008387565612792969,
0.00788116455078125,
0.0693359375,
-0.04046630859375,
-0.0413818359375,
0.00579833984375,
-0.0299072265625,
-0.04595947265625,
0.0305938720703125,
-0.0179443359375,
0.03607177734375,
0.041168212890625,
0.0284271240234375,
0.0408935546875,
0.06182861328125,
0.045623779296875,
0.0273284912109375,
0.05120849609375,
-0.0194244384765625,
-0.027496337890625,
0.039306640625,
0.0005688667297363281,
-0.01116943359375,
-0.01262664794921875,
-0.0293121337890625,
-0.008941650390625,
0.07452392578125,
-0.0280609130859375,
-0.03985595703125,
-0.0128936767578125,
0.03436279296875,
0.052947998046875,
-0.0172271728515625,
-0.042022705078125,
-0.06951904296875,
-0.05889892578125,
0.0272979736328125,
0.0517578125,
0.01003265380859375,
-0.061279296875,
0.0025386810302734375,
0.0184326171875,
0.0282745361328125,
0.004207611083984375,
0.03485107421875,
0.03271484375,
-0.0401611328125,
-0.045745849609375,
-0.04290771484375,
0.051849365234375,
0.00479888916015625,
0.01495361328125,
-0.0174713134765625,
-0.06134033203125,
-0.033538818359375,
0.040069580078125,
-0.01256561279296875,
0.0010433197021484375,
0.04644775390625,
-0.023040771484375,
-0.07586669921875,
0.0296783447265625,
0.051422119140625,
8.177757263183594e-05,
-0.0195159912109375,
-0.09930419921875,
-0.034698486328125,
0.040313720703125,
-0.024169921875,
0.0297088623046875,
-0.041229248046875,
-0.002262115478515625,
-0.0139617919921875,
0.01366424560546875,
-0.0570068359375,
0.042755126953125,
0.0199737548828125,
-0.002044677734375,
0.02008056640625,
0.02587890625,
-0.02777099609375,
0.015289306640625,
-0.06585693359375,
-0.0228424072265625,
-0.056610107421875,
0.01323699951171875,
-0.0021572113037109375,
-0.0282745361328125,
0.0210723876953125,
-0.0249481201171875,
0.041748046875,
0.06683349609375,
0.006683349609375,
-0.005542755126953125,
-0.05126953125,
0.03582763671875,
0.019622802734375,
0.01898193359375,
-0.059234619140625,
-0.0226593017578125,
0.0192108154296875,
0.0223236083984375,
-0.035491943359375,
0.0289154052734375,
-0.023834228515625,
-0.01299285888671875,
-0.0296630859375,
-0.0275421142578125,
0.005359649658203125,
0.007389068603515625,
-0.050323486328125,
0.0271453857421875,
0.022125244140625,
-0.005313873291015625,
-0.059356689453125,
-0.004100799560546875,
-0.0711669921875,
0.0418701171875,
-0.0196075439453125,
-0.0335693359375,
0.0038013458251953125,
-0.023834228515625,
0.006378173828125,
0.0155487060546875,
-0.011474609375,
-0.0105438232421875,
0.030517578125,
0.0400390625,
0.0184478759765625,
0.0283050537109375,
0.0050811767578125,
-0.00011366605758666992,
0.0186614990234375,
-0.027862548828125,
0.000843048095703125,
-0.01213836669921875,
0.04559326171875,
0.01244354248046875,
0.00701141357421875,
-0.089599609375,
0.03302001953125,
-0.0003523826599121094,
-0.06610107421875,
0.04266357421875,
0.046630859375,
-0.05401611328125,
-0.0038852691650390625,
0.052459716796875,
0.06732177734375,
-0.056243896484375,
-0.0548095703125,
0.0157623291015625,
0.015716552734375,
-0.01160430908203125,
-0.007297515869140625,
-0.01026153564453125,
-0.0145111083984375,
-0.03631591796875,
-0.02642822265625,
0.00693511962890625,
-0.029541015625,
-0.00836181640625,
0.006702423095703125,
0.0225982666015625,
0.06787109375,
0.08087158203125,
0.058685302734375,
0.0239715576171875,
0.018463134765625,
-0.0122833251953125,
-0.0181884765625,
-0.00917816162109375,
-0.03753662109375,
-0.06396484375,
-0.0008754730224609375,
-0.038330078125,
0.0287628173828125,
0.034515380859375,
0.018341064453125,
0.01690673828125,
0.050201416015625,
0.044403076171875,
-0.0250701904296875,
0.046600341796875,
0.0301055908203125,
0.057373046875,
0.0654296875,
-0.00012922286987304688,
0.040985107421875,
0.0104217529296875,
-0.02752685546875,
-0.0509033203125,
-0.00905609130859375,
0.050537109375,
0.02099609375,
-5.0127506256103516e-05,
0.032379150390625,
-0.02825927734375,
-0.07415771484375,
0.02105712890625,
-0.018218994140625,
-0.05035400390625,
0.00440216064453125,
0.00921630859375,
-0.0189056396484375,
-0.016143798828125,
0.059326171875,
0.032958984375,
-0.0061798095703125,
0.04925537109375,
-0.04052734375,
0.06268310546875,
0.03948974609375,
0.0236053466796875,
0.01477813720703125,
-0.043243408203125,
-0.033203125,
-0.0104217529296875,
0.048614501953125,
0.045135498046875,
0.0091094970703125,
-0.03717041015625,
0.048492431640625,
0.057281494140625,
0.01849365234375,
-0.070556640625,
0.01361846923828125,
0.0206756591796875,
-0.041778564453125,
-0.034637451171875,
-0.03985595703125,
-0.049957275390625,
-0.056304931640625,
-0.08282470703125,
-0.034637451171875,
-0.05718994140625,
-0.0225982666015625,
0.0238189697265625,
0.017364501953125,
0.00870513916015625,
0.0489501953125,
0.01351165771484375,
-0.01300811767578125,
0.009765625,
0.03338623046875,
-0.0026149749755859375,
0.0601806640625,
0.0173187255859375,
0.03875732421875,
0.01314544677734375,
-0.0321044921875,
0.037841796875,
-0.053436279296875,
0.00936126708984375,
-0.057708740234375,
0.004650115966796875,
-0.05377197265625,
-0.09515380859375,
-0.031341552734375,
0.01334381103515625,
0.01438140869140625,
-0.0390625,
-0.0552978515625,
-0.05828857421875,
0.045196533203125,
0.0576171875,
0.041351318359375,
0.07177734375,
-0.002689361572265625,
-0.0245819091796875,
-0.00970458984375,
0.0151519775390625,
-0.0192718505859375,
0.022003173828125,
-0.042510986328125,
-0.0096282958984375,
-0.043365478515625,
0.05926513671875,
0.08489990234375,
-0.00849151611328125,
0.00899505615234375,
-0.0011777877807617188,
0.01129913330078125,
0.02825927734375,
0.01496124267578125,
-0.034515380859375,
0.011871337890625,
-0.0225982666015625,
-0.0526123046875,
-0.038360595703125,
-0.029998779296875,
0.017913818359375,
-0.0567626953125,
-0.000408172607421875,
0.037841796875,
0.07818603515625,
-0.0022258758544921875,
-0.009033203125,
-0.0400390625,
0.0684814453125,
-0.002826690673828125,
0.031585693359375,
0.051239013671875,
0.0556640625,
-0.01517486572265625,
-0.02215576171875,
0.020782470703125,
0.06536865234375,
0.045074462890625,
-0.005992889404296875,
-0.01922607421875,
-0.005443572998046875,
-0.03643798828125,
-0.019744873046875,
-0.041534423828125,
-0.0226898193359375,
-0.0022449493408203125,
-0.012847900390625,
0.0240020751953125,
-0.01543426513671875,
-0.056396484375,
-0.017059326171875,
0.0038299560546875,
-0.0513916015625,
0.045684814453125,
0.033599853515625,
-0.022674560546875,
0.0060577392578125,
-0.031158447265625,
0.03009033203125,
0.031890869140625,
0.01446533203125,
0.0748291015625,
-0.0288543701171875,
-0.01348114013671875,
-0.0008716583251953125,
0.07012939453125,
0.0633544921875,
0.06256103515625,
-0.0275726318359375,
-0.007080078125,
-0.021331787109375,
0.0008754730224609375,
0.0220947265625,
-0.06561279296875,
-0.035736083984375,
-0.07049560546875,
-0.0845947265625,
-0.0233612060546875,
-0.0011348724365234375,
0.007801055908203125,
-0.0171356201171875,
-0.0323486328125,
-0.01325225830078125,
-0.012542724609375,
0.046783447265625,
0.003841400146484375,
0.02716064453125,
0.0124664306640625,
0.048370361328125,
-0.03680419921875,
0.037322998046875,
0.019622802734375,
0.05096435546875,
0.029632568359375,
-0.040924072265625,
-0.0154876708984375,
-0.0297393798828125,
0.0167694091796875,
-0.023956298828125,
0.043731689453125,
0.0029659271240234375,
-0.0213165283203125,
-0.04632568359375,
-0.0181427001953125,
0.05987548828125,
0.0233001708984375,
0.034820556640625,
-0.0023632049560546875,
0.01488494873046875,
-0.0386962890625,
0.072021484375,
0.0452880859375,
-0.01279449462890625,
-0.041839599609375,
-0.04010009765625,
-0.029327392578125,
0.0504150390625,
0.043701171875,
-0.0377197265625,
-0.0498046875,
-0.0369873046875,
-0.0382080078125,
-0.0213165283203125,
0.01242828369140625,
-0.00970458984375,
0.036102294921875,
0.0088653564453125,
-0.0394287109375,
0.028411865234375,
0.0650634765625,
0.046539306640625,
0.0008716583251953125,
-0.0112152099609375,
-0.01824951171875,
-0.0007228851318359375,
0.03643798828125,
0.01207733154296875,
0.0638427734375,
-0.0012388229370117188,
-0.030426025390625,
0.0012979507446289062,
-0.019744873046875,
0.01053619384765625,
0.047119140625,
-0.0100860595703125,
-0.0160980224609375,
-0.040618896484375,
0.00013530254364013672,
-0.06597900390625,
-0.005893707275390625,
-0.07122802734375,
0.0278778076171875,
-0.05120849609375,
-0.031890869140625,
-0.022247314453125,
0.0225372314453125,
0.04571533203125,
0.038848876953125,
0.0185699462890625,
-0.044036865234375,
-0.009185791015625,
-0.0189208984375,
0.0227203369140625,
0.019439697265625,
0.007053375244140625,
-0.033447265625,
0.04302978515625,
0.0026149749755859375,
0.024200439453125,
-0.01430511474609375,
0.029754638671875,
0.035736083984375,
-0.0626220703125,
0.0304718017578125,
-0.0223388671875,
0.0120086669921875,
-0.056671142578125,
0.0171661376953125,
-0.0309295654296875,
0.01654052734375,
-0.03155517578125,
-0.0233001708984375,
-0.0216522216796875,
0.05047607421875,
0.0247344970703125,
-0.0384521484375,
0.041717529296875,
-0.034210205078125,
0.032867431640625,
0.032501220703125,
1.2874603271484375e-05,
4.351139068603516e-06,
-0.0244140625,
-0.01629638671875,
-0.0016851425170898438,
0.003173828125,
-0.0097503662109375,
-0.0253753662109375,
0.0273284912109375,
0.026458740234375,
-0.032745361328125,
0.024932861328125,
-0.036956787109375,
-0.03485107421875,
0.05133056640625,
0.015899658203125,
-0.03594970703125,
-0.00682830810546875,
-0.0028076171875,
-0.006244659423828125,
0.053009033203125,
0.0121307373046875,
-0.0144195556640625,
-0.00861358642578125,
-0.01047515869140625,
0.02655029296875,
-0.03363037109375,
-0.0333251953125,
-0.01244354248046875,
-0.01885986328125,
0.0125274658203125,
-0.032928466796875,
-0.0238800048828125,
-0.052154541015625,
-0.013092041015625,
0.004375457763671875,
0.034942626953125,
-0.045654296875,
-0.0139617919921875,
0.00806427001953125,
0.04632568359375,
-0.0032634735107421875,
0.02947998046875,
-0.00011301040649414062,
-0.004611968994140625,
-0.034149169921875,
-0.00960540771484375,
0.01474761962890625,
0.05670166015625,
0.01233673095703125,
-0.03363037109375,
-0.0732421875,
-0.020172119140625,
-0.00771331787109375,
-0.0012178421020507812,
-0.0428466796875,
0.01128387451171875,
-0.043701171875,
0.0260467529296875,
-0.0225067138671875,
0.00995635986328125,
0.024810791015625,
0.048553466796875,
-0.0242919921875,
-0.038360595703125,
-0.0215606689453125,
0.007396697998046875,
-0.03509521484375,
-0.0087738037109375,
-0.04302978515625,
0.0550537109375,
0.001377105712890625,
-0.0261383056640625,
0.04608154296875,
-0.0023212432861328125,
-0.0145111083984375,
0.03668212890625,
0.037841796875,
0.02728271484375,
-0.0277252197265625,
0.034149169921875,
0.032440185546875,
0.01267242431640625,
-0.05633544921875,
-0.034393310546875,
-0.03155517578125,
-0.072998046875,
-0.0307159423828125,
0.02117919921875,
0.06134033203125,
-0.0303955078125,
0.01470184326171875,
0.0094757080078125,
0.0005207061767578125,
0.0301971435546875,
0.038787841796875,
0.0009412765502929688,
0.006591796875,
0.033477783203125,
-0.002613067626953125,
-0.00034928321838378906,
0.00015974044799804688,
-0.034210205078125,
-0.019866943359375,
-0.07666015625,
-0.06842041015625,
-0.0031833648681640625,
-0.06463623046875,
-0.032257080078125,
0.04754638671875,
0.026763916015625,
-0.01214599609375,
0.031097412109375,
-0.031402587890625,
0.029205322265625,
0.025299072265625,
0.049407958984375,
0.051422119140625,
0.01861572265625,
-0.0269012451171875,
0.0386962890625,
-0.03070068359375,
0.039794921875,
0.01177978515625,
0.01434326171875,
0.00518798828125,
0.040679931640625,
0.0305633544921875,
0.0107879638671875,
-0.01363372802734375,
0.052581787109375,
-0.0369873046875,
0.01383209228515625,
-0.036865234375,
-0.0105133056640625,
0.007350921630859375,
-0.0261077880859375,
0.01971435546875,
0.03466796875,
-0.05987548828125,
0.01335906982421875,
0.0501708984375,
-0.002529144287109375,
0.016387939453125,
0.02166748046875,
-0.0173187255859375,
0.04998779296875,
0.03973388671875,
0.037139892578125,
-0.019683837890625,
0.0074310302734375,
-0.01446533203125,
-0.032470703125,
0.052947998046875,
0.031982421875,
-0.0168304443359375,
-0.05865478515625,
-0.041473388671875,
-0.0256195068359375,
-0.0077362060546875,
-0.0380859375,
0.02105712890625,
0.00431060791015625,
-0.00809478759765625,
0.05224609375,
-0.01137542724609375,
-0.00012421607971191406,
-0.026031494140625,
-0.047088623046875,
-0.037689208984375,
0.021636962890625,
0.058349609375,
0.043914794921875,
0.00988006591796875,
-0.0223236083984375,
0.01100921630859375,
0.03082275390625,
0.044891357421875,
-0.03131103515625,
-0.0531005859375,
0.0016326904296875,
0.0050811767578125,
-0.053497314453125,
-0.056976318359375,
0.0261993408203125,
0.0043182373046875,
-0.079345703125,
-0.08599853515625,
0.040985107421875,
-0.021270751953125,
-0.00872802734375,
-0.0175628662109375,
-0.049346923828125,
0.025390625,
0.0101318359375,
0.050933837890625,
0.026397705078125,
0.041259765625,
0.03680419921875,
0.0013780593872070312,
0.052734375,
0.0299530029296875,
0.061859130859375,
-0.016326904296875,
-0.0164642333984375,
0.010650634765625,
-0.047637939453125,
-0.0304718017578125,
0.007476806640625,
0.04443359375,
0.047210693359375,
0.0133514404296875,
0.0304412841796875,
0.0322265625,
-0.0188140869140625,
0.0133819580078125,
-0.056915283203125,
-0.044708251953125,
-0.00980377197265625,
-0.020111083984375,
-0.0030155181884765625,
0.009246826171875,
0.0102081298828125,
0.0308074951171875,
-0.00907135009765625,
-0.0232696533203125,
0.0423583984375,
0.07867431640625,
-0.027740478515625,
-0.0279998779296875,
0.0161590576171875,
-0.040771484375,
-0.0171966552734375,
0.06884765625,
0.0004515647888183594,
0.0235748291015625,
-0.0386962890625,
0.02374267578125,
-7.092952728271484e-05,
0.015472412109375,
0.02203369140625,
-0.031005859375,
0.005718231201171875,
-0.001605987548828125,
-0.0301361083984375,
0.06622314453125,
0.00514984130859375,
-0.039642333984375,
-0.007740020751953125,
-0.01163482666015625,
0.0011548995971679688,
0.0154876708984375,
0.0654296875,
-0.0269775390625,
-0.027587890625,
0.055206298828125,
0.005611419677734375,
0.060333251953125,
0.019256591796875,
-0.0986328125,
-0.060638427734375,
-0.0208587646484375,
0.062408447265625,
-0.06585693359375,
-0.054443359375,
-0.015899658203125,
0.017791748046875,
-0.01153564453125,
0.014007568359375,
0.0212554931640625,
0.005611419677734375,
-0.0216827392578125,
-0.01279449462890625,
0.01457977294921875,
-0.00792694091796875,
-0.044097900390625,
0.00437164306640625,
0.0137176513671875,
0.01099395751953125,
-0.05499267578125,
0.0289154052734375,
-0.017486572265625,
-0.007843017578125,
0.01044464111328125,
0.007503509521484375,
-0.0219879150390625,
0.0384521484375,
0.047882080078125,
-0.00652313232421875,
-0.04296875,
0.0186004638671875,
0.032379150390625,
0.045806884765625,
0.019134521484375,
-0.0113983154296875,
-0.006938934326171875,
0.05352783203125,
0.039886474609375,
0.049102783203125,
0.045196533203125,
0.07568359375,
0.0047607421875,
0.00873565673828125,
-0.0024356842041015625,
0.0005006790161132812,
-0.03875732421875,
-0.01654052734375,
-0.016632080078125,
0.00646209716796875,
0.02783203125,
-0.04974365234375,
-0.01316070556640625,
-0.05230712890625,
0.0220184326171875,
0.04937744140625,
0.045257568359375,
0.02362060546875,
-0.046051025390625,
-0.01031494140625,
-0.01131439208984375,
0.00020384788513183594,
-0.030364990234375,
-0.0124969482421875,
0.0302734375,
0.05194091796875,
-0.0078582763671875,
0.038909912109375,
-0.031524658203125,
0.005596160888671875,
-0.01007843017578125,
0.0574951171875,
-0.00713348388671875,
0.031341552734375,
0.0207366943359375,
0.012847900390625,
-0.04833984375,
-0.04998779296875,
-0.04034423828125,
0.005390167236328125,
0.0035533905029296875,
0.015777587890625,
-0.0241546630859375,
-0.027374267578125,
-0.0443115234375,
-0.04608154296875,
-0.00689697265625,
-0.013519287109375,
-0.042449951171875,
-0.039031982421875,
-0.04071044921875,
0.00188446044921875,
0.00911712646484375,
0.030181884765625,
0.0011644363403320312,
-0.095947265625,
-0.05718994140625,
-0.035736083984375,
-0.0377197265625,
0.004364013671875,
0.06646728515625,
0.0968017578125,
0.006671905517578125,
0.07598876953125,
0.0009455680847167969,
-0.01280975341796875,
0.016204833984375,
0.004058837890625,
0.00698089599609375,
-0.0053558349609375,
0.0193634033203125,
0.047698974609375,
-0.019195556640625,
-0.00820159912109375,
-0.0163116455078125,
0.0723876953125,
0.0282440185546875,
-0.005855560302734375,
-0.04327392578125,
0.0556640625,
0.04705810546875,
-0.008575439453125,
-0.04046630859375,
-0.034820556640625,
0.0357666015625,
-0.016754150390625,
0.07086181640625,
0.10296630859375,
0.06396484375,
-0.033355712890625,
0.0295257568359375,
0.01250457763671875,
0.01439666748046875,
0.0216217041015625,
-0.0006923675537109375,
-0.0281829833984375,
0.05035400390625,
0.0112457275390625,
-0.048431396484375,
0.047332763671875,
0.0477294921875,
0.0589599609375,
0.0341796875,
0.0016508102416992188,
0.03521728515625,
-0.0029239654541015625,
-0.0181732177734375,
-0.04400634765625,
0.00991058349609375,
0.0194244384765625,
-0.036285400390625,
0.0175628662109375,
-0.028350830078125,
0.0299072265625,
-0.0243377685546875,
-0.02362060546875,
-0.005828857421875,
0.02117919921875,
0.04290771484375,
0.0215301513671875,
0.0165557861328125,
-0.02117919921875,
0.0182952880859375,
0.0654296875,
-0.04339599609375,
0.056640625,
0.041046142578125,
-0.0062255859375,
0.005462646484375,
0.0196075439453125,
-0.0132293701171875,
0.00232696533203125,
-0.0029754638671875,
-0.005222320556640625,
0.039520263671875,
0.0618896484375,
0.085205078125,
0.082763671875,
0.01532745361328125,
-0.00460052490234375,
0.0689697265625,
0.046295166015625,
0.059234619140625,
-0.034423828125,
-0.031951904296875,
0.059234619140625,
0.02337646484375,
-0.00952911376953125,
-0.07342529296875,
-0.048980712890625,
0.03057861328125,
0.0287322998046875,
-0.0030155181884765625,
-0.065673828125,
0.03375244140625,
0.0287628173828125,
0.030059814453125,
-0.055389404296875,
-0.04144287109375,
0.03082275390625,
0.03662109375,
0.11248779296875,
0.099609375,
0.004566192626953125,
-0.0251617431640625,
-0.0130462646484375,
0.01512908935546875,
0.034515380859375,
0.01348876953125,
-0.04205322265625,
-0.051513671875,
-0.0022029876708984375,
0.0300445556640625,
-0.034759521484375,
0.0069122314453125,
-0.011383056640625,
0.05303955078125,
-0.0278778076171875,
-0.06427001953125,
-0.0343017578125,
0.03741455078125,
0.030853271484375,
-0.0628662109375,
-0.045654296875,
-0.005985260009765625,
-0.041900634765625,
0.035430908203125,
-0.041290283203125,
-0.015838623046875,
-0.05120849609375,
0.00809478759765625,
-0.0017576217651367188,
0.0006508827209472656,
0.04217529296875,
0.015411376953125,
-0.026641845703125,
-0.0114288330078125,
-0.01047515869140625,
0.020355224609375,
-0.046051025390625,
0.04058837890625,
0.01385498046875,
0.05828857421875,
0.052154541015625,
-0.0192413330078125,
0.0088958740234375,
-0.01094818115234375,
0.06744384765625,
-0.0274505615234375,
0.0179290771484375,
0.01507568359375,
0.07061767578125,
-0.0026988983154296875,
-0.0170745849609375,
0.002704620361328125,
0.0665283203125,
0.0037670135498046875,
-0.0648193359375,
-0.011016845703125,
-0.0202178955078125,
-0.0433349609375,
0.03277587890625,
-0.049041748046875,
-0.0126190185546875,
-0.0211944580078125,
-0.00939178466796875,
0.042205810546875,
-0.0546875,
0.0513916015625,
0.042572021484375,
0.08428955078125,
0.0306396484375,
-0.034423828125,
-0.01175689697265625,
0.0290679931640625,
0.053192138671875,
0.0487060546875,
-0.02996826171875,
-0.051513671875,
0.01325225830078125,
0.040863037109375,
0.0015277862548828125,
0.026641845703125,
0.03765869140625,
-0.0039215087890625,
-0.04998779296875,
0.04217529296875,
-0.0185394287109375,
-0.0390625,
0.0133514404296875,
-0.0260467529296875,
-0.021331787109375,
-0.0209503173828125,
-0.01309967041015625,
0.0609130859375,
0.00688934326171875,
0.03851318359375,
-0.0177764892578125,
-0.02197265625,
-0.04168701171875,
-0.04638671875,
-0.03704833984375,
-0.038055419921875,
0.01134490966796875,
-0.034942626953125,
-0.0543212890625,
-0.04766845703125,
-0.008453369140625,
0.0184326171875,
-0.005779266357421875,
-0.00656890869140625,
-0.00959014892578125,
0.0570068359375,
0.0626220703125,
-0.0081787109375,
-0.002960205078125,
-0.019622802734375,
0.035430908203125,
0.01108551025390625,
-0.033599853515625,
0.007251739501953125,
-0.01348114013671875,
0.0108642578125,
-0.027374267578125,
0.00013780593872070312,
0.0145721435546875,
-0.041534423828125,
-0.0243377685546875,
-0.051605224609375,
-0.05438232421875,
-0.0166473388671875,
0.0031585693359375,
0.015045166015625,
0.035736083984375,
0.03216552734375,
-0.00313568115234375,
0.02825927734375,
-0.01343536376953125,
0.03668212890625,
0.0491943359375,
0.054656982421875,
0.0284881591796875,
0.051483154296875,
0.028228759765625,
-0.0233001708984375,
-0.013397216796875,
0.035888671875,
0.0229949951171875,
0.04754638671875,
0.0400390625,
0.042724609375,
-0.028594970703125,
-0.034637451171875,
-0.035736083984375,
-0.036407470703125,
0.002838134765625,
-0.0447998046875,
0.0309906005859375,
0.024078369140625,
0.0238494873046875,
0.034637451171875,
-0.02398681640625,
-0.052154541015625,
0.027008056640625,
-0.032501220703125,
-0.0076141357421875,
0.031524658203125,
-0.0103912353515625,
0.0247955322265625,
-0.01068878173828125,
0.0007300376892089844,
0.0218963623046875,
0.0335693359375,
-0.005046844482421875,
0.04864501953125,
0.009063720703125,
0.04376220703125,
-0.043731689453125,
0.04400634765625,
0.0292205810546875,
-0.0006709098815917969,
0.009979248046875,
-0.005481719970703125,
-0.0198516845703125,
0.00853729248046875,
0.0125274658203125,
0.0190887451171875,
-0.043182373046875,
-0.046600341796875,
-0.0234222412109375,
-0.0031795501708984375,
-0.0005621910095214844,
0.0195770263671875,
-0.00046443939208984375,
-0.01105499267578125,
-0.04998779296875,
0.0002834796905517578,
-0.0316162109375,
0.03662109375,
0.00579071044921875,
-0.0246124267578125,
-0.0178680419921875,
0.0305328369140625,
-0.035491943359375,
0.006214141845703125,
-0.043731689453125,
-0.00853729248046875,
0.0285491943359375,
-0.04681396484375,
0.0094146728515625,
-0.021331787109375,
-0.0406494140625,
-0.00733184814453125,
-0.042755126953125,
-0.030731201171875,
-0.0153961181640625,
-0.0312347412109375,
0.0145416259765625,
0.026123046875,
0.0014619827270507812,
0.03302001953125,
-0.0062255859375,
-0.009918212890625,
0.024017333984375,
0.047882080078125,
-0.03546142578125,
-0.01250457763671875,
-0.007537841796875,
-0.03192138671875,
-0.0266571044921875,
0.003757476806640625,
0.03411865234375,
-0.0161285400390625,
0.0400390625,
-0.0006227493286132812,
-0.00460052490234375,
-0.01381683349609375,
0.01751708984375,
0.002079010009765625,
0.0267791748046875,
0.006198883056640625,
0.0450439453125,
-0.0191192626953125,
-0.0097503662109375,
0.0095672607421875,
0.049163818359375,
-0.024169921875,
0.02703857421875,
0.040374755859375,
-0.0285491943359375,
0.04608154296875,
0.0131683349609375,
0.047332763671875,
-0.02703857421875,
-0.04876708984375,
-0.0203857421875,
-0.01092529296875,
-0.04736328125,
0.031982421875,
-0.046051025390625,
-0.018829345703125,
-0.03497314453125,
-0.01497650146484375,
-0.0152130126953125,
-0.04638671875,
0.0004138946533203125,
-0.0265045166015625,
0.040069580078125,
-0.0216064453125,
0.0180816650390625,
0.00682830810546875,
0.0091094970703125,
0.04510498046875,
-0.037322998046875,
0.047027587890625,
-0.036590576171875,
-0.005645751953125,
0.007843017578125,
0.042694091796875,
-0.003185272216796875,
0.0158538818359375,
-0.033172607421875,
-0.027191162109375,
0.0206756591796875,
-0.00731658935546875,
0.04302978515625,
-0.0267486572265625,
-0.0113067626953125,
-0.04974365234375,
0.036773681640625,
0.030059814453125,
0.04840087890625,
0.0487060546875,
0.00457000732421875,
0.0250244140625,
-0.048614501953125,
0.00030612945556640625,
-0.0178070068359375,
-0.034912109375,
0.0284423828125,
0.046539306640625,
-0.0166778564453125,
0.0086822509765625,
0.034027099609375,
0.048492431640625,
-0.040863037109375,
0.0017805099487304688,
0.03717041015625,
-0.0008058547973632812,
0.0201263427734375,
0.0162506103515625,
0.0016298294067382812,
-0.03326416015625,
0.044097900390625,
0.03350830078125,
-0.03350830078125,
0.01158905029296875,
0.043060302734375,
0.0273895263671875,
0.005462646484375,
0.048095703125,
-0.037567138671875,
-0.034393310546875,
0.0227203369140625,
0.0284271240234375,
0.0328369140625,
-0.007678985595703125,
-0.031524658203125,
-0.001293182373046875,
-0.049591064453125,
-0.00795745849609375,
0.024383544921875,
-0.0022182464599609375,
0.0321044921875,
-0.005077362060546875,
-0.0036716461181640625,
-0.022705078125,
-0.0179443359375,
-0.0214691162109375,
-0.041961669921875,
0.031524658203125,
0.031219482421875,
0.048431396484375,
0.02044677734375,
0.0195465087890625,
-0.0232086181640625,
-0.01148223876953125,
0.03778076171875,
0.02935791015625,
0.024749755859375,
0.01483154296875,
-0.042877197265625,
0.00716400146484375,
-0.02716064453125,
-0.0212554931640625,
-0.035491943359375,
0.01007080078125,
0.017059326171875,
0.0303955078125,
-0.032958984375,
-0.040679931640625,
-0.0236663818359375,
0.0212249755859375,
0.01220703125,
-0.04779052734375,
-0.00685882568359375,
-0.0227508544921875,
-0.0051727294921875,
0.0189971923828125,
-0.043426513671875,
-0.035125732421875,
-0.0433349609375,
-0.035430908203125,
0.0020904541015625,
0.040252685546875,
-0.036102294921875,
0.00908660888671875,
0.045257568359375,
-0.018951416015625,
0.031524658203125,
-0.033538818359375,
0.036590576171875,
0.034637451171875,
0.00724029541015625,
-0.041259765625,
0.00994873046875,
-0.0435791015625,
-0.01088714599609375,
-0.017364501953125,
-0.041229248046875,
-0.0389404296875,
-0.042755126953125,
0.01210784912109375,
-0.0460205078125,
-0.03753662109375,
0.0260162353515625,
0.044677734375,
-0.0153350830078125,
0.0277099609375,
0.029541015625,
-0.01293182373046875,
0.0004436969757080078,
-0.0285491943359375,
0.00745391845703125,
-0.0115509033203125,
0.01885986328125,
0.0258636474609375,
-0.01366424560546875,
-0.01456451416015625,
0.03851318359375,
0.0145111083984375,
0.033111572265625,
-0.04986572265625,
-0.033905029296875,
0.018096923828125,
0.03521728515625,
-0.01824951171875,
-0.042633056640625,
-0.040252685546875,
0.0067138671875,
0.026702880859375,
0.005207061767578125,
0.032073974609375,
-0.011962890625,
-0.04339599609375,
-0.01490020751953125,
-0.04974365234375,
-0.039581298828125,
-0.00530242919921875,
0.031524658203125,
-0.040679931640625,
-0.0073699951171875,
-0.032196044921875,
0.027099609375,
0.0181427001953125,
0.0234527587890625,
-0.0214691162109375,
-0.045867919921875,
0.047454833984375,
0.01236724853515625,
-0.0406494140625,
-0.0179901123046875,
-0.0277862548828125,
-0.015899658203125,
0.038482666015625,
-0.006122589111328125,
0.004238128662109375,
-0.0022430419921875,
-0.048980712890625,
-0.0196685791015625,
-0.0139007568359375,
-0.01161956787109375,
0.034149169921875,
-0.0208892822265625,
-0.008697509765625,
0.0093994140625,
-0.0233001708984375,
0.0197296142578125,
-0.047515869140625,
0.035552978515625,
-0.0253448486328125,
0.02020263671875,
-0.0496826171875,
-0.0086669921875,
-0.0103759765625,
0.0276031494140625,
0.04669189453125,
0.049346923828125,
-0.02606201171875,
-0.045013427734375,
0.046966552734375,
-0.03985595703125,
-0.03173828125,
0.0195465087890625,
-0.0290374755859375,
-0.0077972412109375,
-0.0183258056640625,
0.0173492431640625,
-0.045318603515625,
0.00811767578125,
-0.03515625,
0.0008702278137207031,
-0.0433349609375,
-0.04742431640625,
-0.0199127197265625,
0.0194091796875,
0.020416259765625,
0.002899169921875,
-0.025115966796875,
0.0276641845703125,
-0.04156494140625,
-0.019744873046875,
-0.049407958984375,
0.040496826171875,
-0.01177215576171875,
-0.0158843994140625,
-0.025482177734375,
0.03118896484375,
0.0128326416015625,
-0.0012826919555664062,
-0.0019702911376953125,
-0.043609619140625,
-0.0206451416015625,
-0.02142333984375,
-0.01366424560546875,
-0.0014982223510742188,
-0.043914794921875,
-0.0316162109375,
0.0274505615234375,
-0.01080322265625,
-0.036224365234375,
-0.021270751953125,
-0.004512786865234375,
0.032135009765625,
-0.0267181396484375,
-0.0355224609375,
-0.003253936767578125,
-0.01220703125,
0.00313568115234375,
-0.0382080078125,
0.020751953125,
-0.00511932373046875,
0.01410675048828125,
0.00669097900390625,
0.01477813720703125,
0.0494384765625,
-0.039154052734375,
0.027679443359375,
0.007843017578125,
-0.039306640625,
0.02642822265625,
-0.026031494140625,
0.0472412109375,
0.049224853515625,
-0.041717529296875,
-0.007488250732421875,
-0.01129913330078125,
-0.04376220703125,
-0.00434112548828125,
0.041046142578125,
-0.04376220703125,
0.0452880859375,
-0.0178375244140625,
-0.027984619140625,
-0.024688720703125,
0.0219879150390625,
0.006622314453125,
0.019622802734375,
0.03125,
0.0030155181884765625,
-0.0295867919921875,
-0.042144775390625,
-0.020263671875,
-0.048126220703125,
0.0163421630859375,
0.048553466796875,
0.033233642578125,
0.03790283203125,
-0.0105133056640625,
0.0243377685546875,
-0.004329681396484375,
0.002933502197265625,
0.0257110595703125,
-0.049224853515625,
-0.0169830322265625,
-0.0010118484497070312,
-0.00385284423828125,
0.031005859375,
0.03509521484375,
-0.01070404052734375,
0.0285797119140625,
0.021087646484375,
0.0172271728515625,
-0.044525146484375,
0.020233154296875,
0.072998046875,
-0.02001953125,
-0.0250396728515625,
-0.029205322265625,
-0.003635406494140625,
-0.0143280029296875,
-0.05657958984375,
0.0275726318359375,
-0.0018148422241210938,
-0.0309295654296875,
0.02374267578125,
-0.0374755859375,
0.0265960693359375,
0.0194854736328125,
-0.0184478759765625,
-0.083984375,
0.0196533203125,
-0.0214996337890625,
0.0244598388671875,
-0.07550048828125,
-0.028167724609375,
0.06292724609375,
0.0616455078125,
0.019683837890625,
-0.0164794921875,
0.039306640625,
0.03619384765625,
0.0251007080078125,
-0.053192138671875,
0.01959228515625,
0.0205230712890625,
-0.04437255859375,
-0.0167236328125,
-0.0183258056640625,
-0.0140838623046875,
-0.038665771484375,
-0.018310546875,
-0.09869384765625,
-0.054412841796875,
-0.0256805419921875,
0.0258636474609375,
-0.012115478515625,
-0.023101806640625,
0.0200347900390625,
-0.007843017578125,
-0.035858154296875,
-0.0237579345703125,
-0.0008807182312011719,
-0.03253173828125,
-0.00844573974609375,
0.034881591796875,
0.0290985107421875,
-0.04888916015625,
0.041748046875,
-0.036407470703125,
-0.00577545166015625,
0.00801849365234375,
-0.02423095703125,
-0.0188446044921875,
0.05865478515625,
-0.023284912109375,
0.0338134765625,
0.0014791488647460938,
-0.0019054412841796875,
0.042694091796875,
-0.0269775390625,
3.9577484130859375e-05,
0.0200042724609375,
0.048431396484375,
-0.0498046875,
-0.049774169921875,
-0.002902984619140625,
0.031219482421875,
-0.03619384765625,
0.0277099609375,
0.05914306640625,
0.00939178466796875,
0.0210418701171875,
-0.0217742919921875,
-0.010650634765625,
0.0190887451171875,
0.041015625,
-0.02484130859375,
-0.062103271484375,
-0.04644775390625,
0.037445068359375,
0.046478271484375,
-0.037933349609375,
-0.058807373046875,
-0.061981201171875,
0.06463623046875,
0.017852783203125,
0.037811279296875,
-0.0010118484497070312,
-0.0802001953125,
0.045379638671875,
0.07037353515625,
0.0144805908203125,
-0.05120849609375,
-0.048309326171875,
0.0347900390625,
-0.02276611328125,
-0.0292816162109375,
-0.01177215576171875,
0.005573272705078125,
-0.006664276123046875,
-0.0295562744140625,
0.0011463165283203125,
-0.045196533203125,
0.0008130073547363281,
-0.06439208984375,
0.0372314453125,
0.02886962890625,
-0.00446319580078125,
-0.053253173828125,
-0.039215087890625,
-0.063720703125,
-0.01042938232421875,
-0.0282440185546875,
-0.059356689453125,
-0.052947998046875,
-0.06146240234375,
-0.006542205810546875,
-0.03216552734375,
0.0034942626953125,
0.049102783203125,
0.044677734375,
0.0037212371826171875,
0.01047515869140625,
0.018218994140625,
0.034698486328125,
0.0249786376953125,
-0.0198822021484375,
0.00688934326171875,
-0.023162841796875,
0.006595611572265625,
-0.023590087890625,
-0.050323486328125,
-0.0574951171875,
-0.057037353515625,
0.0194244384765625,
0.043670654296875,
0.023040771484375,
-0.01336669921875,
0.00612640380859375,
0.030975341796875,
0.049407958984375,
-0.035552978515625,
-0.03643798828125,
-0.005870819091796875,
-0.007259368896484375,
0.0183868408203125,
-0.01451873779296875,
0.041107177734375,
-0.0158233642578125,
-0.01544189453125,
-0.0193328857421875,
0.047332763671875,
-0.00884246826171875,
0.0031528472900390625,
0.035308837890625,
0.0706787109375,
-0.010589599609375,
-0.0202178955078125,
0.046417236328125,
0.03338623046875,
0.045501708984375,
-0.026336669921875,
-0.040924072265625,
0.012969970703125,
0.037841796875,
0.014404296875,
-0.0293121337890625,
0.02496337890625,
-0.01910400390625,
0.0215301513671875,
0.04400634765625,
0.02734375,
0.032318115234375,
0.042572021484375,
0.01265716552734375,
0.0036296844482421875,
0.0021820068359375,
-0.0380859375,
0.00846099853515625,
0.041534423828125,
-0.007419586181640625,
-0.034881591796875,
0.043792724609375,
0.0182037353515625,
-0.0121612548828125,
-0.01407623291015625,
0.0276031494140625,
-0.03076171875,
-0.054229736328125,
-0.026458740234375,
0.004154205322265625,
-0.041839599609375,
-0.03009033203125,
-0.027191162109375,
-0.0297698974609375,
0.04571533203125,
-0.024658203125,
0.06982421875,
0.03839111328125,
0.01461029052734375,
0.0298919677734375,
0.0151214599609375,
-0.00957489013671875,
-0.03118896484375,
-0.0311279296875,
0.0232696533203125,
0.0182647705078125,
-0.050445556640625,
0.015472412109375,
0.0272369384765625,
0.00360107421875,
0.027923583984375,
-0.009490966796875,
-0.01702880859375,
0.004451751708984375,
-0.007671356201171875,
0.054290771484375,
0.045257568359375,
-0.0345458984375,
0.021881103515625,
0.058258056640625,
0.05963134765625,
-0.0289764404296875,
0.01378631591796875,
-0.01000213623046875,
0.03448486328125,
-0.006359100341796875,
0.0355224609375,
-0.059967041015625,
-0.008819580078125,
0.01313018798828125,
0.004161834716796875,
-0.04534912109375,
0.03369140625,
0.01158905029296875,
0.0007796287536621094,
-0.0244903564453125,
-0.025970458984375,
0.0237579345703125,
0.01824951171875,
-0.0150299072265625,
-0.03924560546875,
-0.052276611328125,
-0.0328369140625,
-0.0255584716796875,
0.04241943359375,
0.039459228515625,
0.0211639404296875,
-0.046875,
-0.0374755859375,
0.04229736328125,
-0.01404571533203125,
-0.01120758056640625,
-0.00981903076171875,
0.03662109375,
-0.005924224853515625,
0.039703369140625,
0.01418304443359375,
-0.033203125,
-0.041717529296875,
-0.00783538818359375,
-0.0240478515625,
-0.0010652542114257812,
-0.08978271484375,
-0.017120361328125,
0.0016126632690429688,
0.056915283203125,
-0.05047607421875,
-0.0204925537109375,
0.0321044921875,
-0.00490570068359375,
0.0265960693359375,
0.046142578125,
0.02545166015625,
-0.060028076171875,
0.005664825439453125,
-0.0179595947265625,
0.007266998291015625,
-0.054840087890625,
-0.03155517578125,
0.00731658935546875,
-0.0032329559326171875,
-0.038330078125,
-0.016357421875,
0.0233154296875,
0.007671356201171875,
-0.01152801513671875,
-0.032745361328125,
-0.04583740234375,
0.040740966796875,
0.06671142578125,
-0.0276031494140625,
-0.028228759765625,
-0.046478271484375,
0.0706787109375,
0.036651611328125,
-0.0166015625,
0.0213775634765625,
-0.047698974609375,
0.0281982421875,
-0.042572021484375,
-0.01318359375,
0.03448486328125,
0.02911376953125,
-0.01483917236328125,
-0.0100860595703125,
-0.0479736328125,
0.0164642333984375,
0.00556182861328125,
0.049530029296875,
0.0031719207763671875,
0.0255889892578125,
-0.0201263427734375,
-0.045501708984375,
-0.044281005859375,
-0.0186004638671875,
0.004238128662109375,
-0.02056884765625,
-0.01439666748046875,
0.001373291015625,
0.019561767578125,
-0.036163330078125,
-0.0357666015625,
-0.0053253173828125,
-0.01445770263671875,
0.01258087158203125,
0.0195465087890625,
0.0262451171875,
0.0027980804443359375,
0.006793975830078125,
0.0102081298828125,
0.05224609375,
-0.0146484375,
0.01519775390625,
0.0152740478515625,
0.04803466796875,
0.062255859375,
0.0255889892578125,
-0.052459716796875,
-0.01629638671875,
0.044525146484375,
-0.022369384765625,
-0.006290435791015625,
0.02130126953125,
-0.007091522216796875,
0.0226593017578125,
0.029388427734375,
-0.0168304443359375,
-0.052764892578125,
0.0238037109375,
0.00420379638671875,
0.00290679931640625,
-0.05914306640625,
0.02392578125,
0.0011625289916992188,
-0.0108184814453125,
-0.042724609375,
-0.0113983154296875,
0.0101318359375,
0.047454833984375,
0.021087646484375,
-0.01355743408203125,
0.0292816162109375,
-0.060546875,
-0.035797119140625,
0.018035888671875,
0.046905517578125,
-0.01462554931640625,
0.03326416015625,
-0.026397705078125,
-0.01715087890625,
-0.03729248046875,
-0.035400390625,
-8.881092071533203e-06,
-0.036773681640625,
-0.008087158203125,
0.0143280029296875,
-0.00133514404296875,
0.061492919921875,
0.033721923828125,
-0.04949951171875,
-0.059234619140625,
-0.0158538818359375,
-0.00390625,
-0.01294708251953125,
-0.031585693359375,
0.045013427734375,
-0.04510498046875,
-0.0479736328125,
0.03912353515625,
0.04791259765625,
0.0262603759765625,
0.029754638671875,
0.04779052734375,
0.056640625,
0.01454925537109375,
-0.008148193359375,
-0.0291748046875,
-0.01898193359375,
-0.029693603515625,
-0.059844970703125,
-0.0247802734375,
0.020599365234375,
-0.00669097900390625,
-0.0643310546875,
0.003139495849609375,
-0.01326751708984375,
0.0364990234375,
-0.01522064208984375,
0.0244598388671875,
-0.048980712890625,
-0.0540771484375,
0.0023860931396484375,
0.0257110595703125,
-0.0212860107421875,
0.052093505859375,
0.0054168701171875,
0.0008683204650878906,
-0.0243682861328125,
-0.032623291015625,
0.019622802734375,
0.0048370361328125,
0.01477813720703125,
-0.0035190582275390625,
-0.0318603515625,
0.005401611328125,
-0.026641845703125,
0.02691650390625,
0.020660400390625,
-0.014678955078125,
-0.043914794921875,
-0.01548004150390625,
-0.039886474609375,
0.0223541259765625,
-0.026397705078125,
-0.02923583984375,
0.0287628173828125,
0.0112762451171875,
-0.0416259765625,
0.003047943115234375,
0.003009796142578125,
0.01410675048828125,
0.0043487548828125,
-0.0018224716186523438,
-0.057952880859375,
0.0128326416015625,
0.0322265625,
0.055145263671875,
-0.0017547607421875,
-0.0545654296875,
0.03912353515625,
-0.05523681640625,
-0.037811279296875,
0.0063323974609375,
0.0299835205078125,
-0.054534912109375,
-0.0816650390625,
-0.0604248046875,
-0.03265380859375,
-0.06365966796875,
-0.0108642578125,
-0.024932861328125,
-0.004161834716796875,
0.0262298583984375,
-0.04351806640625,
-0.005023956298828125,
0.042877197265625,
0.019500732421875,
-0.0307769775390625,
0.00445556640625,
-0.0010023117065429688,
-0.00823974609375,
-0.038726806640625,
-0.0023708343505859375,
-0.0114288330078125,
-0.040496826171875,
0.0006556510925292969,
0.032684326171875,
-0.0201416015625,
-0.0582275390625,
0.032379150390625,
-0.01605224609375,
0.0452880859375,
0.023956298828125,
0.00409698486328125,
-0.0099639892578125,
0.0201263427734375,
-0.034393310546875,
-0.047607421875,
0.024383544921875,
0.043304443359375,
0.013336181640625,
-0.04986572265625,
-0.0241851806640625,
0.0484619140625,
0.0640869140625,
-0.0224456787109375,
0.035919189453125,
-0.0052947998046875,
-0.007221221923828125,
-0.032012939453125,
-0.007633209228515625,
0.038970947265625,
0.026824951171875,
0.0120697021484375,
0.003936767578125,
0.04486083984375,
-0.02471923828125,
0.0298919677734375,
-0.0021800994873046875,
-0.01541900634765625,
0.0225982666015625,
-0.05096435546875,
-0.046142578125,
-0.03411865234375,
-0.03680419921875,
-0.03399658203125,
-0.0183563232421875,
-0.012939453125,
-0.00635528564453125,
0.043426513671875,
0.0301361083984375,
0.053253173828125,
0.019195556640625,
0.06597900390625,
0.0164031982421875,
-0.007427215576171875,
-0.069580078125,
0.0391845703125,
0.0401611328125,
-0.01904296875,
-0.005786895751953125,
-0.0401611328125,
-0.048370361328125,
0.0273284912109375,
-0.009002685546875,
0.05322265625,
0.0411376953125,
-0.024322509765625,
-0.057342529296875,
0.045318603515625,
0.0019130706787109375,
-0.00952911376953125,
0.03271484375,
-0.002696990966796875,
0.031768798828125,
0.033782958984375,
-0.0281982421875,
0.01204681396484375,
0.00038743019104003906,
0.004547119140625,
0.0440673828125,
0.02239990234375,
0.05670166015625,
0.053802490234375,
0.0177154541015625,
-0.01824951171875,
0.012939453125,
0.038909912109375,
0.0284576416015625,
-0.052154541015625,
0.054229736328125,
0.0265960693359375,
0.042083740234375,
-0.05108642578125,
-0.0108489990234375,
-0.0174102783203125,
-0.0201263427734375,
0.026641845703125,
0.035491943359375,
0.030609130859375,
0.044891357421875,
0.010528564453125,
0.036346435546875,
0.0296630859375,
0.036712646484375,
-0.0265655517578125,
-0.04931640625,
0.0421142578125,
0.04327392578125,
-0.0206146240234375,
0.0310211181640625,
0.043243408203125,
-0.04876708984375,
0.0103759765625,
-0.01206207275390625,
0.01763916015625,
0.015899658203125,
-0.04132080078125,
-0.05621337890625,
0.032958984375,
0.0020313262939453125,
-0.03448486328125,
0.0352783203125,
0.0897216796875,
0.059051513671875,
0.0290374755859375,
0.040496826171875,
-0.032684326171875,
0.008575439453125,
0.0027713775634765625,
-0.037109375,
0.017364501953125,
-0.0123291015625,
0.08984375,
0.04888916015625,
-0.0243377685546875,
0.01210784912109375,
-0.00342559814453125,
0.0202789306640625,
-0.01157379150390625,
0.04827880859375,
-0.032196044921875,
-0.034149169921875,
0.01494598388671875,
-0.003204345703125,
-0.01343536376953125,
-0.01751708984375,
0.0134735107421875,
0.04718017578125,
0.11785888671875,
0.06396484375,
0.0146942138671875,
-0.0595703125,
0.0264739990234375,
0.1072998046875,
-0.0027675628662109375,
0.01568603515625,
-0.01519775390625,
0.006931304931640625,
0.039764404296875,
0.039459228515625,
0.037689208984375,
0.0283966064453125,
0.03302001953125,
-0.037200927734375,
-0.012664794921875,
0.00807952880859375,
-0.0164947509765625,
-0.043701171875,
0.0301971435546875,
0.036163330078125,
0.0213623046875,
0.046295166015625,
0.0256805419921875,
0.0112762451171875,
0.04364013671875,
-0.03509521484375,
0.0205841064453125,
0.013275146484375,
-0.01031494140625,
0.01214599609375,
-0.0430908203125,
-0.039398193359375,
0.0207061767578125,
0.0094146728515625,
0.017852783203125,
-0.0159454345703125,
-0.00928497314453125,
-0.0224456787109375,
-0.0258331298828125,
0.0692138671875,
0.059356689453125,
0.04034423828125,
-0.004974365234375,
-0.0161895751953125,
0.0400390625,
-0.0123138427734375,
0.0024204254150390625,
0.018096923828125,
0.00705718994140625,
-0.0379638671875,
-0.07037353515625,
0.0199127197265625,
0.0280914306640625,
-0.0209503173828125,
-0.00041294097900390625,
-0.03460693359375,
-0.036529541015625,
0.0294952392578125,
0.06744384765625,
-0.00728607177734375,
0.018798828125,
-0.00579071044921875,
-0.032958984375,
0.001308441162109375,
0.016082763671875,
-0.0174407958984375,
-0.03338623046875,
-0.037872314453125,
-0.01904296875,
0.002105712890625,
-0.032012939453125,
0.04034423828125,
0.08880615234375,
0.047698974609375,
0.0159149169921875,
-0.007770538330078125,
0.0224609375,
0.059844970703125,
0.0438232421875,
-0.013336181640625,
-0.0280609130859375,
-0.006717681884765625,
-0.0148162841796875,
0.005390167236328125,
-0.047027587890625,
-0.043182373046875,
0.05218505859375,
0.049102783203125,
0.027618408203125,
0.0279998779296875,
0.039947509765625,
0.017120361328125,
-0.036865234375,
-0.05072021484375,
0.0450439453125,
-0.01175689697265625,
0.003017425537109375,
-0.040374755859375,
-0.05126953125,
0.068603515625,
0.052490234375,
0.0034008026123046875,
0.00984954833984375,
-0.047332763671875,
0.046295166015625,
-0.0171966552734375,
-0.041015625,
-0.0404052734375,
-0.0037384033203125,
-0.03460693359375,
0.0241241455078125,
-0.0321044921875,
-0.01995849609375,
-0.02593994140625,
0.0196533203125,
0.0775146484375,
0.005901336669921875,
-0.0156707763671875,
-0.0274200439453125,
0.06829833984375,
-0.0144500732421875,
0.0194091796875,
0.0191802978515625,
0.0004954338073730469,
-0.0180816650390625,
0.008514404296875,
0.043701171875,
0.054595947265625,
-0.00908660888671875,
0.034637451171875,
0.002307891845703125,
-0.036773681640625,
0.0618896484375,
-0.042022705078125,
-0.05816650390625,
0.01282501220703125,
0.0321044921875,
0.0203704833984375,
0.03021240234375,
0.0560302734375,
-0.0099029541015625,
0.004413604736328125,
-0.0262603759765625,
0.042205810546875,
0.035430908203125,
-0.005634307861328125,
0.07666015625,
0.0164337158203125,
-0.01186370849609375,
0.01288604736328125,
-0.0312042236328125,
-0.07696533203125,
-0.036834716796875,
-0.020721435546875,
0.018157958984375,
0.0650634765625,
0.0114288330078125,
-0.07080078125,
0.007144927978515625,
-0.030120849609375,
-0.037109375,
-0.004467010498046875,
-0.040283203125,
0.0478515625,
0.021209716796875,
0.037078857421875,
0.00830841064453125,
-0.047454833984375,
0.027801513671875,
-0.00787353515625,
0.045806884765625,
0.027801513671875,
0.05743408203125,
-0.0178985595703125,
-0.059295654296875,
-0.027252197265625,
0.0150299072265625,
0.0533447265625,
0.03216552734375,
-0.058868408203125,
-0.0355224609375,
0.0706787109375,
-0.040679931640625,
-0.05426025390625,
0.0028362274169921875,
0.017059326171875,
0.08740234375,
0.0218048095703125,
-0.035186767578125,
0.053802490234375,
-0.015411376953125,
0.041107177734375,
-0.02587890625,
0.03582763671875,
-0.00679779052734375,
-0.042327880859375,
-0.0160675048828125,
0.00585174560546875,
0.03387451171875,
-0.01486968994140625,
0.031646728515625,
0.042388916015625,
-0.0259552001953125,
-0.00734710693359375,
-0.0341796875,
0.026397705078125,
0.061920166015625,
0.0147857666015625,
0.09375,
0.052886962890625,
-0.0116729736328125,
-0.02392578125,
0.03875732421875,
0.00405120849609375,
-0.034576416015625,
0.0289459228515625,
-0.00386810302734375,
-0.0220794677734375,
-0.0240325927734375,
-0.0010137557983398438,
0.0321044921875,
-0.0294189453125,
0.0545654296875,
0.00738525390625,
0.023284912109375,
0.020294189453125,
-0.039520263671875,
0.03973388671875,
0.04736328125,
-0.048309326171875,
0.05462646484375,
-0.0002434253692626953,
0.08087158203125,
-0.026824951171875,
0.002857208251953125,
0.03240966796875,
-0.01192474365234375,
0.06585693359375,
-0.05096435546875,
-0.003955841064453125,
0.032562255859375,
-0.0004973411560058594,
0.0265655517578125,
0.003662109375,
0.06634521484375,
0.01326751708984375,
0.00141143798828125,
0.0479736328125,
0.07196044921875,
0.017730712890625,
-0.055023193359375,
0.00970458984375,
-0.033905029296875,
0.0416259765625,
0.030914306640625,
-0.10296630859375,
-0.0592041015625,
-0.00823211669921875,
0.036163330078125,
-0.0241851806640625,
-0.04736328125,
-0.04046630859375,
-0.064697265625,
0.034088134765625,
-0.02197265625,
0.05670166015625,
0.06988525390625,
-0.058013916015625,
-0.0386962890625,
0.009918212890625,
-0.021697998046875,
0.04669189453125,
-0.0195770263671875,
0.030120849609375,
0.0276947021484375,
-0.0242767333984375,
0.0034694671630859375,
-0.00688934326171875,
0.044708251953125,
0.039154052734375,
-0.04644775390625,
0.05242919921875,
0.04327392578125,
0.021484375,
-0.0022449493408203125,
-0.0308685302734375,
0.10009765625,
0.01406097412109375,
0.046539306640625,
0.0193634033203125,
0.07379150390625,
0.053802490234375,
0.0205535888671875,
0.025238037109375,
-0.0014934539794921875,
-0.036346435546875,
-0.00106048583984375,
-0.045379638671875,
-0.0171661376953125,
0.01163482666015625,
-0.0095672607421875,
-0.02398681640625,
-0.039093017578125,
0.02301025390625,
-0.00624847412109375,
0.046630859375,
-0.029083251953125,
-0.0016813278198242188,
0.011505126953125,
0.005840301513671875,
0.001495361328125,
0.00814056396484375,
0.0287322998046875,
-0.0172882080078125,
-0.015411376953125,
0.01019287109375,
-0.0180206298828125,
0.01288604736328125,
-0.0032825469970703125,
0.06768798828125,
0.06463623046875,
-0.0281219482421875,
-0.037353515625,
0.01442718505859375,
0.005855560302734375,
0.0277557373046875,
0.0024738311767578125,
-0.036865234375,
-0.032867431640625,
-0.0219879150390625,
-0.0013437271118164062,
-0.0528564453125,
-0.0188446044921875,
0.0171661376953125,
0.005680084228515625,
0.06298828125,
-0.056243896484375,
-0.05316162109375,
-0.016754150390625,
-0.0307769775390625,
-0.03466796875,
-0.0391845703125,
-0.0301055908203125,
0.055450439453125,
-0.0021190643310546875,
-0.040557861328125,
0.015228271484375,
0.042510986328125,
-0.03076171875,
-0.03753662109375,
0.0177459716796875,
-0.02081298828125,
-0.011810302734375,
0.0128326416015625,
0.035980224609375,
0.052825927734375,
0.0035495758056640625,
0.023193359375,
-0.0150146484375,
-0.01470947265625,
-0.060028076171875,
0.03106689453125,
-0.0230560302734375,
0.013580322265625,
0.0316162109375,
-0.01267242431640625,
0.02880859375,
0.01242828369140625,
-0.05535888671875,
-0.0313720703125,
-0.0236358642578125,
-0.056243896484375,
-0.0587158203125,
0.0291595458984375,
-0.00334930419921875,
0.0565185546875,
-0.059722900390625,
-0.0022678375244140625,
-0.01120758056640625,
0.03668212890625,
0.028839111328125,
-0.020111083984375,
-0.01128387451171875,
-0.022369384765625,
-0.0211334228515625,
0.0027675628662109375,
-0.06768798828125,
-0.0169525146484375,
0.0284576416015625,
0.03887939453125,
0.0273590087890625,
-0.038848876953125,
-0.003887176513671875,
-0.026031494140625,
0.01318359375,
-0.0010271072387695312,
0.0178375244140625,
0.026763916015625,
-0.025909423828125,
-0.01335906982421875,
0.04443359375,
-0.05438232421875,
-0.057830810546875,
0.0168914794921875,
0.07696533203125,
0.053680419921875,
-0.05078125,
-0.0243072509765625,
0.00684356689453125,
-0.004566192626953125,
-0.03790283203125,
0.0189971923828125,
-0.017822265625,
-0.05889892578125,
-0.0022106170654296875,
-0.0269775390625,
-0.048583984375,
-0.06982421875,
0.009613037109375,
0.059661865234375,
-0.05169677734375,
0.0364990234375,
-0.0244140625,
-0.0279998779296875,
-0.0131072998046875,
-0.0167999267578125,
0.00545501708984375,
0.0046539306640625,
0.017303466796875,
0.0246124267578125,
0.00785064697265625,
-0.040313720703125,
0.0183868408203125,
0.025177001953125,
-0.0305328369140625,
0.02874755859375,
0.043914794921875,
0.0117340087890625,
0.034881591796875,
0.023223876953125,
0.01788330078125,
-0.0122222900390625,
0.001312255859375,
-0.036590576171875,
-0.0101318359375,
0.025421142578125,
0.005565643310546875,
-0.01029205322265625,
-0.00534820556640625,
-0.00362396240234375,
0.03277587890625,
-0.03570556640625,
-0.04669189453125,
0.050018310546875,
-0.0275421142578125,
-0.019287109375,
-0.033203125,
-0.03887939453125,
-0.0247650146484375,
0.03009033203125,
-0.0119171142578125,
-0.033843994140625,
-0.038330078125,
0.000247955322265625,
-0.0002760887145996094,
-0.03106689453125,
-0.0312347412109375,
-0.0100860595703125,
-0.0276641845703125,
0.0060272216796875,
-0.0095672607421875,
0.0146636962890625,
0.00992584228515625,
0.056640625,
0.028228759765625,
0.031982421875,
-0.04876708984375,
-0.034515380859375,
0.02960205078125,
0.039581298828125,
-0.01442718505859375,
-0.06329345703125,
0.005283355712890625,
0.0228118896484375,
0.025299072265625,
0.0474853515625,
-0.010772705078125,
-0.060150146484375,
-0.04681396484375,
-0.033050537109375,
0.033355712890625,
0.01026153564453125,
-0.047210693359375,
0.022613525390625,
0.040557861328125,
0.03924560546875,
0.063232421875,
0.050079345703125,
-0.006866455078125,
-0.047576904296875,
-0.055755615234375,
0.050323486328125,
0.0155029296875,
-0.023681640625,
-0.0217437744140625,
0.026702880859375,
-0.01229095458984375,
0.0008196830749511719,
-0.0225982666015625,
-0.0341796875,
-0.01459503173828125,
0.053009033203125,
-0.03497314453125,
0.032196044921875,
0.00374603271484375,
0.003261566162109375,
0.0151214599609375,
-0.043914794921875,
-0.01157379150390625,
0.003368377685546875,
-0.00957489013671875,
-0.039947509765625,
0.0249176025390625,
-0.0009946823120117188,
-0.0193023681640625,
0.03314208984375,
0.004169464111328125,
-0.00545501708984375,
0.034637451171875,
-0.0028972625732421875,
-0.026641845703125,
0.0179595947265625,
0.0254058837890625,
0.059967041015625,
-0.05413818359375,
-0.00423431396484375,
-0.021453857421875,
-0.03515625,
-0.005718231201171875,
-0.0261383056640625,
-0.0140228271484375,
0.06610107421875,
0.054931640625,
0.023529052734375,
-0.01042938232421875,
0.0276336669921875,
0.006877899169921875,
0.054229736328125,
0.0264739990234375,
0.0169677734375,
-0.0718994140625,
0.055572509765625,
0.0657958984375,
0.00469207763671875,
0.0308990478515625,
-0.018310546875,
-0.03857421875,
0.016815185546875,
0.0035533905029296875,
-0.01432037353515625,
0.052581787109375,
-0.0257568359375,
0.0246429443359375,
-0.008056640625,
0.0477294921875,
-0.0193939208984375,
0.0016937255859375,
-0.009124755859375,
-0.0377197265625,
0.0299224853515625,
0.0577392578125,
-0.05352783203125,
-0.021759033203125,
-0.0008616447448730469,
-0.01102447509765625,
0.046295166015625,
-0.035797119140625,
0.037109375,
0.02691650390625,
0.021026611328125,
0.00466156005859375,
0.0135955810546875,
-0.027130126953125,
0.06976318359375,
0.01287078857421875,
0.06097412109375,
-0.0182952880859375,
-0.03692626953125,
0.050994873046875,
0.02740478515625,
0.0271148681640625,
0.012725830078125,
0.08154296875,
0.07537841796875,
0.00905609130859375,
-0.0139617919921875,
0.01027679443359375,
0.031463623046875,
0.0214385986328125,
0.00760650634765625,
0.07196044921875,
-0.005382537841796875,
0.00881195068359375,
-0.0038776397705078125,
0.0158843994140625,
-0.04962158203125,
0.00750732421875,
0.049896240234375,
-0.042510986328125,
0.0205841064453125,
0.0252838134765625,
-0.047943115234375,
0.019378662109375,
0.0248870849609375,
0.061859130859375,
-0.029083251953125,
0.03509521484375,
0.060333251953125,
-0.0016632080078125,
0.017913818359375,
-0.0131988525390625,
-0.0207977294921875,
-0.033905029296875,
0.0281829833984375,
-0.01044464111328125,
0.00738525390625,
-0.03662109375,
-0.0065155029296875,
0.045501708984375,
0.04656982421875,
-0.056396484375,
-0.0166473388671875,
0.0184478759765625,
0.0225830078125,
0.036590576171875,
-0.006488800048828125,
0.009918212890625,
0.0287017822265625,
0.0242462158203125,
0.0120849609375,
0.00933074951171875,
-0.01117706298828125,
0.01047515869140625,
-0.0176849365234375,
0.0177459716796875,
0.0224761962890625,
0.030975341796875,
-0.00951385498046875,
0.04656982421875,
0.037078857421875,
0.01161956787109375,
0.043426513671875,
0.035858154296875,
0.04681396484375,
-0.04901123046875,
0.02587890625,
-0.0232391357421875,
0.0022983551025390625,
-0.00414276123046875,
-0.044952392578125,
-0.037445068359375,
0.044403076171875,
-0.003345489501953125,
0.031646728515625,
0.033203125,
-0.00634002685546875,
0.007526397705078125,
-0.01251983642578125,
0.022613525390625,
-0.01561737060546875,
-0.01494598388671875,
0.0284576416015625,
-0.042327880859375,
0.0144195556640625,
-0.05535888671875,
-0.0191497802734375,
-0.045989990234375,
-0.052001953125,
-0.05169677734375,
0.0212554931640625,
0.05499267578125,
-0.0021724700927734375,
0.0499267578125,
0.048828125,
0.016265869140625,
-0.023223876953125,
-0.03887939453125,
-0.002277374267578125,
-0.03594970703125,
-0.0089263916015625,
0.037322998046875,
-0.03448486328125,
0.053436279296875,
0.0228271484375,
0.0184326171875,
0.0194549560546875,
0.0295257568359375,
-0.006465911865234375,
0.06719970703125,
0.016998291015625,
-0.004047393798828125,
-0.01377105712890625,
-0.019866943359375,
-0.0274200439453125,
0.0002677440643310547,
0.0234527587890625,
0.024383544921875,
-0.030914306640625,
0.04632568359375,
-0.043609619140625,
-0.050567626953125,
0.046234130859375,
0.016998291015625,
-0.0343017578125,
0.035552978515625,
0.003864288330078125,
-0.032958984375,
-0.0085296630859375,
-0.03314208984375,
-0.0175323486328125,
-0.017669677734375,
-0.037017822265625,
-0.034454345703125,
0.0182342529296875,
0.01441192626953125,
-0.0305633544921875,
0.028045654296875,
0.00582122802734375,
-0.0246734619140625,
-0.0210723876953125,
0.039031982421875,
0.00450897216796875,
0.0184783935546875,
0.0012636184692382812,
-0.027801513671875,
-0.01520538330078125,
-0.028778076171875,
0.001781463623046875,
0.0188140869140625,
0.021392822265625,
-0.0290374755859375,
0.0014276504516601562,
-0.0022983551025390625,
-0.06719970703125,
-0.0208282470703125,
-0.025634765625,
0.0361328125,
0.006381988525390625,
0.0002218484878540039,
-0.0132293701171875,
-0.0221099853515625,
-0.0063018798828125,
0.03564453125,
-0.04718017578125,
-0.00371551513671875,
0.009246826171875,
0.02166748046875,
0.00817108154296875,
-0.03521728515625,
0.0172882080078125,
-8.70823860168457e-05,
0.01042938232421875,
-0.036895751953125,
0.021240234375,
-0.0184478759765625,
-0.04327392578125,
0.023712158203125,
-0.0179443359375,
-0.042144775390625,
0.0223846435546875,
-0.04290771484375,
-0.01406097412109375,
0.0085296630859375,
-0.0036258697509765625,
-0.0179901123046875,
0.0020885467529296875,
-0.039215087890625,
0.005191802978515625,
-0.027435302734375,
-0.01800537109375,
0.057037353515625,
0.045166015625,
0.005817413330078125,
-0.07464599609375,
-0.042083740234375,
0.0002651214599609375,
-0.0008625984191894531,
-0.0124969482421875,
0.046173095703125,
0.036224365234375,
0.019287109375,
0.05352783203125,
0.039398193359375,
-0.061370849609375,
-0.063232421875,
0.0101165771484375,
-0.00043463706970214844,
0.0089263916015625,
-0.0200042724609375,
-0.005458831787109375,
0.04937744140625,
0.052337646484375,
0.01763916015625,
0.016510009765625,
0.03411865234375,
0.033660888671875,
0.019927978515625,
-0.03875732421875,
-0.049346923828125,
0.0263824462890625,
-0.041595458984375,
-0.0189361572265625,
0.046142578125,
0.00811004638671875,
-0.02288818359375,
0.00827789306640625,
0.03411865234375,
0.004543304443359375,
0.01568603515625,
-0.07000732421875,
-0.006103515625,
0.03369140625,
-0.04638671875,
-0.0413818359375,
-0.0249786376953125,
0.03399658203125,
0.00797271728515625,
0.0158233642578125,
-0.02374267578125,
-0.00201416015625,
0.01551055908203125,
-0.036376953125,
0.007732391357421875,
0.02117919921875,
-0.0499267578125,
0.0140228271484375,
-0.00998687744140625,
0.007564544677734375,
0.0595703125,
-0.045257568359375,
0.025543212890625,
0.0396728515625,
0.05499267578125,
-0.019989013671875,
0.01520538330078125,
0.048492431640625,
0.016082763671875,
-0.0151519775390625,
-0.02130126953125,
0.0225677490234375,
0.0157318115234375,
0.034149169921875,
-0.0462646484375,
-0.052093505859375,
0.00792694091796875,
0.05743408203125,
-0.02813720703125,
0.045623779296875,
-0.0533447265625,
-0.02471923828125,
0.023895263671875,
-0.039306640625,
-0.023834228515625,
-0.0087127685546875,
-0.043792724609375,
0.043487548828125,
-0.011077880859375,
0.0211029052734375,
-0.0604248046875,
-0.0633544921875,
-0.039398193359375,
-0.055999755859375,
0.0114898681640625,
0.0452880859375,
-0.0211639404296875,
0.0011911392211914062,
-0.021759033203125,
0.0123291015625,
-0.01236724853515625,
0.014373779296875,
-0.044586181640625,
-0.0408935546875,
0.02947998046875,
-0.00931549072265625,
0.0199432373046875,
0.05902099609375,
0.002758026123046875,
0.04205322265625,
0.0537109375,
0.0196533203125,
0.036865234375,
-0.00022399425506591797,
-0.037200927734375,
-0.0016069412231445312,
-0.04180908203125,
0.00437164306640625,
-0.060577392578125,
-0.023895263671875,
0.02374267578125,
-0.00989532470703125,
-0.036865234375,
0.01959228515625,
0.0231170654296875,
0.004764556884765625,
-0.039703369140625,
0.0183258056640625,
-0.052642822265625,
0.0020732879638671875,
-0.040313720703125,
-0.00629425048828125,
0.036376953125,
-0.0175933837890625,
-0.0400390625,
-0.00919342041015625,
0.007904052734375,
0.004974365234375,
0.03131103515625,
-0.0025539398193359375,
-0.005706787109375,
0.00939178466796875,
-0.00029015541076660156,
0.001514434814453125,
-0.03314208984375,
0.0031681060791015625,
0.05877685546875,
0.017425537109375,
-0.0535888671875,
0.0013494491577148438,
0.04449462890625,
-0.01532745361328125,
0.01351165771484375,
0.0116424560546875,
-0.0141448974609375,
0.0239105224609375,
0.001064300537109375,
-0.039947509765625,
0.036590576171875,
0.0604248046875,
-0.0008616447448730469,
0.00537872314453125,
0.034454345703125,
-0.0165252685546875,
0.037750244140625,
0.026275634765625,
0.0662841796875,
-0.0005168914794921875,
0.01361846923828125,
0.01308441162109375,
0.031402587890625,
0.00507354736328125,
-0.008087158203125,
0.041290283203125,
0.0289459228515625,
0.00731658935546875,
-0.0086517333984375,
-0.01384735107421875,
-0.051727294921875,
-0.0212860107421875,
-0.005756378173828125,
0.0164642333984375,
-0.005523681640625,
-0.00337982177734375,
0.04071044921875,
0.01220703125,
0.0233154296875,
-0.02783203125,
0.0195770263671875,
0.01447296142578125,
-0.0106201171875,
0.0079193115234375,
0.055877685546875,
0.0074310302734375,
-0.0077362060546875,
-0.01409149169921875,
0.07720947265625,
0.0670166015625,
-0.0439453125,
-0.0176849365234375,
0.06640625,
-0.00926971435546875,
0.02392578125,
0.0035839080810546875,
-0.0570068359375,
-0.06793212890625,
-0.040191650390625,
-0.0224151611328125,
-0.0024356842041015625,
3.30805778503418e-05,
0.004169464111328125,
0.039031982421875,
-0.042816162109375,
0.061309814453125,
0.05810546875,
0.08203125,
0.061981201171875,
0.0229034423828125,
0.0185546875,
-0.005077362060546875,
-0.0115203857421875,
0.0543212890625,
0.01448822021484375,
0.0207366943359375,
-0.01080322265625,
-0.01149749755859375,
-0.048065185546875,
-0.01025390625,
-0.04388427734375,
-0.0418701171875,
0.0273284912109375,
0.033905029296875,
0.043701171875,
0.02789306640625,
-0.00891876220703125,
0.01983642578125,
0.03125,
-0.01434326171875,
0.0307769775390625,
0.062164306640625,
0.0193939208984375,
-0.01338958740234375,
0.015838623046875,
-0.010284423828125,
0.016326904296875,
0.059722900390625,
-0.0216522216796875,
-0.08648681640625,
-0.00943756103515625,
0.087158203125,
-0.0103607177734375,
0.0265350341796875,
-0.04754638671875,
0.0190887451171875,
0.015655517578125,
0.00275421142578125,
-0.0005817413330078125,
-0.008056640625,
-0.06494140625,
0.04339599609375,
0.002834320068359375,
-0.0165863037109375,
-0.0024280548095703125,
0.01025390625,
0.0362548828125,
-0.032440185546875,
0.05303955078125,
0.03662109375,
-0.01084136962890625,
-0.0301513671875,
0.00881195068359375,
0.01049041748046875,
0.067626953125,
-0.00252532958984375,
-0.035003662109375,
-0.0455322265625,
-0.0272369384765625,
0.083251953125,
0.023101806640625,
-0.024505615234375,
0.039337158203125,
-0.032470703125,
-0.0166473388671875,
0.035552978515625,
0.05816650390625,
-0.0131683349609375,
-0.0177764892578125,
-0.035888671875,
-0.032196044921875,
0.071533203125,
0.0118560791015625,
-0.031829833984375,
-0.00930023193359375,
-0.054718017578125,
-0.0176544189453125,
-0.0188140869140625,
-0.0029850006103515625,
0.006839752197265625,
0.0103912353515625,
0.037994384765625,
-0.03216552734375,
0.0677490234375,
-0.021942138671875,
0.05023193359375,
0.047332763671875,
0.0111236572265625,
-0.005031585693359375,
-0.032470703125,
0.0103607177734375,
0.01251983642578125,
-0.0156097412109375,
-0.028411865234375,
-0.00582122802734375,
0.057281494140625,
0.031524658203125,
0.08685302734375,
0.037200927734375,
0.008636474609375,
0.01096343994140625,
-0.008636474609375,
-0.0029926300048828125,
0.02166748046875,
-0.01837158203125,
-0.032928466796875,
0.0112152099609375,
-0.036651611328125,
0.021575927734375,
0.004398345947265625,
0.0200958251953125,
0.004978179931640625,
-0.0021800994873046875,
0.0241851806640625,
-0.01168060302734375,
0.032928466796875,
-0.03302001953125,
0.06280517578125,
0.0390625,
-0.0169830322265625,
0.04522705078125,
0.02667236328125,
-0.03271484375,
0.052886962890625,
-0.06591796875,
0.00830078125,
-0.003612518310546875,
-0.046630859375,
-0.077880859375,
-0.018218994140625,
0.02618408203125,
-0.0221099853515625,
-0.003742218017578125,
0.034332275390625,
0.038848876953125,
0.02197265625,
0.00131988525390625,
-0.00231170654296875,
0.062408447265625,
0.038787841796875,
0.0225830078125,
0.00907135009765625,
-0.0316162109375,
0.022247314453125,
0.023956298828125,
0.027984619140625,
-0.0153350830078125,
-0.0758056640625,
-0.0244598388671875,
-0.0161285400390625,
0.057525634765625,
-0.029754638671875,
0.05853271484375,
0.036468505859375,
-0.0243377685546875,
-0.0125579833984375,
-0.01146697998046875,
-0.055389404296875,
-0.033935546875,
0.01416015625,
0.01024627685546875,
-0.056488037109375,
-0.020294189453125,
-0.018341064453125,
-0.015350341796875,
0.04443359375,
0.038177490234375,
0.02178955078125,
-0.033233642578125,
0.047088623046875,
-0.046875,
-0.02923583984375,
-0.00021982192993164062,
0.061553955078125,
-0.026458740234375,
-0.03485107421875,
-0.044036865234375,
-0.01507568359375,
-0.004047393798828125,
-0.01611328125,
0.01285552978515625,
0.006816864013671875,
0.024749755859375,
-0.0134735107421875,
0.00327301025390625,
-0.03497314453125,
-0.019378662109375,
-0.06964111328125,
0.0231475830078125,
0.00795745849609375,
0.0352783203125,
-0.03350830078125,
-0.011077880859375,
0.050933837890625,
0.019683837890625,
-0.02996826171875,
-0.044586181640625,
0.0028896331787109375,
-0.07720947265625,
0.01050567626953125,
0.0043182373046875,
-0.0826416015625,
-0.09454345703125,
-0.0621337890625,
-0.04150390625,
0.0125885009765625,
-0.059326171875,
0.003940582275390625,
-0.0587158203125,
-0.043701171875,
0.0035724639892578125,
-0.07220458984375,
0.035125732421875,
0.031280517578125,
-0.02783203125,
-0.009521484375,
0.0019092559814453125,
-0.04583740234375,
0.0028095245361328125,
0.01456451416015625,
0.0274658203125,
0.0479736328125,
0.00220489501953125,
-0.047454833984375,
-0.052947998046875,
0.0010480880737304688,
-0.00765228271484375,
0.06195068359375,
0.0290679931640625,
0.0038928985595703125,
-0.0200653076171875,
-0.046295166015625,
0.024688720703125,
0.015533447265625,
0.010528564453125,
-0.03265380859375,
-0.01004791259765625,
0.022674560546875,
0.0550537109375,
-0.042144775390625,
0.00946044921875,
-0.0065155029296875,
0.0887451171875,
0.0274658203125,
-0.034820556640625,
0.038360595703125,
0.0511474609375,
-0.0214080810546875,
-0.026885986328125,
0.05322265625,
-0.0347900390625,
-0.0616455078125,
0.0181732177734375,
0.09344482421875,
-0.00634765625,
-0.060394287109375,
0.0118408203125,
-0.06854248046875,
-0.0034847259521484375,
0.022674560546875,
0.0243377685546875,
-0.038238525390625,
-0.01062774658203125,
0.051483154296875,
-0.04296875,
0.00649261474609375,
-0.038177490234375,
-0.0382080078125,
0.01806640625,
0.025787353515625,
0.057708740234375,
0.045166015625,
-0.008819580078125,
-0.0036468505859375,
0.03875732421875,
-0.006130218505859375,
-0.051605224609375,
-0.060394287109375,
0.01209259033203125,
-0.011810302734375,
0.0188140869140625,
-0.005359649658203125,
-0.01421356201171875,
-0.013214111328125,
-0.0225982666015625,
0.0228271484375,
0.01349639892578125,
-0.02001953125,
-0.006916046142578125,
-0.0116424560546875,
0.005130767822265625,
0.018585205078125,
0.03466796875,
0.05194091796875,
-0.00998687744140625,
0.040985107421875,
-0.0224609375,
0.049774169921875,
0.03704833984375,
-0.01215362548828125,
-0.043609619140625,
-0.0131072998046875,
0.032623291015625,
0.024505615234375,
0.00968170166015625,
0.0111083984375,
-0.027252197265625,
-0.0225372314453125,
-0.040618896484375,
-0.02203369140625,
-0.045135498046875,
-0.029205322265625,
-0.0250396728515625,
0.0295562744140625,
0.0253753662109375,
0.0215606689453125,
0.027313232421875,
0.0011663436889648438,
-0.0132904052734375,
-0.0016183853149414062,
-0.0279388427734375,
0.037353515625,
-0.0018415451049804688,
-0.01611328125,
-0.028717041015625,
0.00902557373046875,
0.0038394927978515625,
0.051177978515625,
0.0140380859375,
-0.015777587890625,
0.051422119140625,
-0.0096893310546875,
-0.0139617919921875,
-0.03350830078125,
-0.0552978515625,
-0.017333984375,
-0.0645751953125,
0.061248779296875,
0.02069091796875,
-0.0270233154296875,
0.0216217041015625,
0.056182861328125,
0.050628662109375,
0.002643585205078125,
0.04620361328125,
0.0234832763671875,
0.01233673095703125,
0.05316162109375,
0.0228271484375,
0.047576904296875,
0.033355712890625,
-0.059661865234375,
-0.03289794921875,
0.0098114013671875,
0.0811767578125,
-0.01678466796875,
-0.047637939453125,
-0.032440185546875,
-0.02398681640625,
-0.02655029296875,
-0.049835205078125,
-0.07666015625,
-0.04083251953125,
0.0203857421875,
0.00809478759765625,
-0.002315521240234375,
0.054351806640625,
-0.040679931640625,
-0.032470703125,
0.0157012939453125,
0.04022216796875,
0.01377105712890625,
0.00832366943359375,
0.034088134765625,
0.05072021484375,
0.0229949951171875,
0.0467529296875,
-0.040924072265625,
-0.01080322265625,
-0.02789306640625,
0.026092529296875,
0.00722503662109375,
0.012939453125,
0.0241546630859375,
0.0108184814453125,
0.02923583984375,
-0.04998779296875,
-0.03265380859375,
-0.0279388427734375,
-0.0308074951171875,
0.04541015625,
0.026092529296875,
0.043701171875,
-0.03271484375,
-0.0228118896484375,
0.0352783203125,
0.03350830078125,
-0.0167388916015625,
-0.03466796875,
-0.0295257568359375,
-0.0265960693359375,
0.000614166259765625,
0.0112152099609375,
0.04815673828125,
-0.0233612060546875,
0.045745849609375,
-0.0037631988525390625,
0.0173492431640625,
-0.02508544921875,
-0.0037021636962890625,
-0.0200347900390625,
0.042388916015625,
0.019073486328125,
-0.0167694091796875,
-0.031005859375,
0.01751708984375,
-0.0224456787109375,
-0.01910400390625,
-0.025787353515625,
-0.0033893585205078125,
-0.03765869140625,
0.0103759765625,
-0.01107025146484375,
-0.012237548828125,
0.01361846923828125,
0.0254058837890625,
0.03778076171875,
0.031585693359375,
0.0226287841796875,
-0.035491943359375,
-0.035186767578125,
0.017059326171875,
-0.0308990478515625,
-0.036285400390625,
0.0433349609375,
0.04229736328125,
-0.0131072998046875,
-0.00640869140625,
-0.0487060546875,
0.032012939453125,
-0.0127105712890625,
-0.022613525390625,
0.04730224609375,
0.019622802734375,
0.038726806640625,
-0.0081329345703125,
-0.0399169921875,
0.004467010498046875,
0.039337158203125,
0.006591796875,
-0.048980712890625,
0.00782012939453125,
0.0010843276977539062,
0.032867431640625,
8.028745651245117e-05,
-0.004199981689453125,
-0.005962371826171875,
-0.002193450927734375,
-0.01995849609375,
-0.033477783203125,
0.0423583984375,
-0.001079559326171875,
0.03741455078125,
-0.004123687744140625,
-0.040191650390625,
-0.045654296875,
0.001163482666015625,
-0.043212890625,
-0.042449951171875,
0.0027923583984375,
0.04473876953125,
0.034576416015625,
0.0006470680236816406,
0.04949951171875,
0.0411376953125,
-0.017059326171875,
0.0202789306640625,
-0.03436279296875,
-0.00492095947265625,
0.01983642578125,
0.037139892578125,
-0.0171051025390625,
-0.02032470703125,
-0.041839599609375,
-0.0033359527587890625,
0.03155517578125,
-0.0099334716796875,
-0.032196044921875,
0.02435302734375,
1.7940998077392578e-05,
-0.007350921630859375,
-0.01201629638671875,
-0.00255584716796875,
-0.0123748779296875,
0.043243408203125,
-0.039276123046875,
0.01067352294921875,
0.041290283203125,
-0.01910400390625,
0.0298004150390625,
0.0239715576171875,
0.027374267578125,
0.0177001953125,
-0.043212890625,
0.01068878173828125,
0.041229248046875,
0.001819610595703125,
0.04205322265625,
0.0133514404296875,
0.04400634765625,
0.00458526611328125,
-0.0052947998046875,
-0.047882080078125,
0.00644683837890625,
-0.0104217529296875,
-0.0260162353515625,
-0.008636474609375,
0.0208282470703125,
-0.037841796875,
-0.01462554931640625,
-0.00762939453125,
-0.0096435546875,
-0.038299560546875,
-0.031646728515625,
-0.004547119140625,
0.033355712890625,
0.04833984375,
-0.01279449462890625,
0.04205322265625,
-0.01348114013671875,
0.00582122802734375,
0.037689208984375,
0.0231170654296875,
0.020965576171875,
0.03387451171875,
-0.0064544677734375,
0.0380859375,
0.031646728515625,
-0.0272674560546875,
-0.031463623046875,
-0.0301361083984375,
-0.0139007568359375,
0.0235137939453125,
-0.0082550048828125,
-0.014923095703125,
0.0007271766662597656,
0.0200347900390625,
-0.0404052734375,
-0.036468505859375,
0.0230712890625,
0.004901885986328125,
-0.0016088485717773438,
-0.040771484375,
0.01873779296875,
-0.043548583984375,
-0.0355224609375,
0.049591064453125,
-0.031951904296875,
-0.0139312744140625,
-0.030426025390625,
0.004558563232421875,
-0.0300750732421875,
0.0293121337890625,
0.019073486328125,
-0.00559234619140625,
0.0228424072265625,
-0.00811004638671875,
0.022247314453125,
0.041595458984375,
0.0262298583984375,
0.0261383056640625,
0.0261077880859375,
0.048004150390625,
-0.039825439453125,
0.049560546875,
-0.013671875,
0.0113677978515625,
0.0482177734375,
0.037139892578125,
0.01080322265625,
-0.0205535888671875,
-0.0233917236328125,
0.032623291015625,
-0.0498046875,
-0.01119232177734375,
0.040802001953125,
0.0103759765625,
-0.01096343994140625,
0.0129241943359375,
0.046478271484375,
0.02557373046875,
-0.011932373046875,
-0.024383544921875,
-0.0076141357421875,
-0.042694091796875,
-0.041015625,
-0.01385498046875,
0.043548583984375,
-0.00719451904296875,
-0.038116455078125,
0.0093841552734375,
0.001171112060546875,
-0.02056884765625,
-0.0070648193359375,
0.01511383056640625,
-0.03857421875,
-0.015625,
-0.042266845703125,
0.0189971923828125,
0.040191650390625,
-0.01485443115234375,
0.0030727386474609375,
-0.02618408203125,
0.02301025390625,
0.04156494140625,
-0.02874755859375,
0.0033931732177734375,
-0.040863037109375,
-0.01129913330078125,
-0.033843994140625,
0.011688232421875,
0.006999969482421875,
-0.01200103759765625,
-0.01323699951171875,
-0.03857421875,
0.0260772705078125,
0.009521484375,
-0.033447265625,
-0.01641845703125,
-0.0122833251953125,
-0.02423095703125,
0.0014142990112304688,
0.021209716796875,
0.00860595703125,
-0.04315185546875,
-0.0278472900390625,
-0.042877197265625,
0.0272979736328125,
-0.00601959228515625,
0.042572021484375,
0.01251220703125,
-0.0172882080078125,
0.032958984375,
-0.0283050537109375,
0.02685546875,
0.039520263671875,
0.029937744140625,
-0.03173828125,
0.0170440673828125,
-0.027191162109375,
-0.0223388671875,
-0.006031036376953125,
-0.0230560302734375,
0.01303863525390625,
-0.019256591796875,
0.04571533203125,
-0.041015625,
0.0034542083740234375,
0.037109375,
-0.0086669921875,
-0.028167724609375,
-0.0132904052734375,
-0.0200347900390625,
0.0155029296875,
-0.0211334228515625,
-0.038360595703125,
0.039703369140625,
0.0261077880859375,
-0.0225982666015625,
-0.0204010009765625,
-0.039459228515625,
-0.049285888671875,
-0.0097503662109375,
0.0197906494140625,
0.0214080810546875,
0.038787841796875,
-0.0130615234375,
0.015625,
-0.0304107666015625,
-0.010101318359375,
-0.0017976760864257812,
-0.0204925537109375,
0.0109100341796875,
-0.04827880859375,
-0.042388916015625,
-0.0087738037109375,
-0.041412353515625,
0.0214996337890625,
-0.01027679443359375,
-0.0274810791015625,
-0.045928955078125,
-0.02008056640625,
-0.044952392578125,
0.036376953125,
0.0082855224609375,
-0.007534027099609375,
0.0011959075927734375,
-0.018035888671875,
0.047454833984375,
-0.023681640625,
-0.006671905517578125,
0.0467529296875,
-0.0333251953125,
0.0009565353393554688,
-0.008453369140625,
0.03851318359375,
0.04296875,
-0.0081634521484375,
-0.04034423828125,
0.01910400390625,
-0.024444580078125,
-0.021881103515625,
-0.0240478515625,
0.0200653076171875,
0.00560760498046875,
0.039398193359375,
-0.03192138671875,
-0.037322998046875,
-0.0237884521484375,
0.0248260498046875,
0.01380157470703125,
-0.028564453125,
0.036407470703125,
-0.018798828125,
-0.0285797119140625,
0.006587982177734375,
0.0145721435546875,
-0.0182647705078125,
0.0232086181640625,
0.022430419921875,
0.01197052001953125,
-0.003566741943359375,
0.0222625732421875,
-0.033782958984375,
-0.00021314620971679688,
-0.014190673828125,
0.032470703125,
0.04327392578125,
-0.0443115234375,
0.0087127685546875,
0.01152801513671875,
-0.01406097412109375,
-0.04766845703125,
-0.028106689453125,
4.9114227294921875e-05,
0.0389404296875,
-0.03607177734375,
-0.047119140625,
-0.0362548828125,
-0.048309326171875,
-0.044708251953125,
0.0188140869140625,
-0.00847625732421875,
-0.046234130859375,
-0.048797607421875,
-0.04425048828125,
0.005939483642578125,
0.029998779296875,
-0.0467529296875,
-0.0306854248046875,
-0.04266357421875,
0.010772705078125,
-0.0156707763671875,
0.036224365234375,
-0.0163421630859375,
0.0416259765625,
-0.048828125,
0.0088653564453125,
-0.0161895751953125,
-0.0277099609375,
-0.0185089111328125,
-0.0288238525390625,
-0.017333984375,
-0.028839111328125,
0.0294647216796875,
0.00249481201171875,
-0.041473388671875,
-0.0452880859375,
-0.0045318603515625,
-0.052398681640625,
0.053680419921875,
0.06634521484375,
0.004901885986328125,
-0.01218414306640625,
0.05157470703125,
0.032806396484375,
-0.030029296875,
-0.038482666015625,
-0.0255584716796875,
0.031707763671875,
-0.009552001953125,
0.04278564453125,
-0.0229034423828125,
-0.03662109375,
0.023193359375,
-0.0186920166015625,
0.034393310546875,
0.0280303955078125,
0.018157958984375,
-0.0273590087890625,
-0.03607177734375,
0.00800323486328125,
0.008636474609375,
-0.0261383056640625,
-0.005313873291015625,
0.033935546875,
-0.052459716796875,
-0.041961669921875,
0.03765869140625,
0.0220184326171875,
0.03619384765625,
-0.0093231201171875,
0.01239776611328125,
0.066650390625,
0.059967041015625,
-0.01227569580078125,
-0.04534912109375,
0.03399658203125,
0.05218505859375,
-0.04046630859375,
0.036041259765625,
-0.051483154296875,
-0.02996826171875,
0.04986572265625,
-0.0280303955078125,
0.029754638671875,
0.021209716796875,
-0.027008056640625,
-0.019134521484375,
-0.0202178955078125,
0.037109375,
-0.01195526123046875,
-0.0013408660888671875,
-0.004901885986328125,
-0.033721923828125,
-0.047515869140625,
-0.033843994140625,
-0.02081298828125,
-0.00751495361328125,
0.00634002685546875,
0.045196533203125,
0.05291748046875,
0.039398193359375,
-0.01389312744140625,
0.042572021484375,
0.048004150390625,
-0.0010652542114257812,
0.0450439453125,
-0.0114898681640625,
0.00543975830078125,
0.00677490234375,
-0.006988525390625,
-0.0276336669921875,
-0.033721923828125,
-0.0423583984375,
-0.03997802734375,
-0.0214080810546875,
-0.0276336669921875,
0.0248870849609375,
-0.018585205078125,
0.005046844482421875,
-0.0012598037719726562,
0.0234832763671875,
0.05615234375,
0.042694091796875,
0.0465087890625,
-0.05279541015625,
0.03582763671875,
0.052398681640625,
-0.00963592529296875,
0.006175994873046875,
-0.042816162109375,
-0.028900146484375,
0.01342010498046875,
0.056732177734375,
0.0153350830078125,
-0.052978515625,
-0.045623779296875,
0.0274810791015625,
0.0094451904296875,
-0.0169219970703125,
-0.04071044921875,
-0.01430511474609375,
0.0238189697265625,
0.0631103515625,
-0.023040771484375,
0.042266845703125,
0.0236968994140625,
-0.0038738250732421875,
0.048736572265625,
0.0066986083984375,
-0.03643798828125,
0.025634765625,
-0.05108642578125,
-0.053314208984375,
-0.0019397735595703125,
-0.0254364013671875,
-0.0173492431640625,
-0.04522705078125,
0.043731689453125,
0.050140380859375,
0.07171630859375,
0.0279083251953125,
0.01293182373046875,
0.0294647216796875,
-0.0031414031982421875,
0.055145263671875,
0.0173797607421875,
0.04083251953125,
-0.018707275390625,
0.041656494140625,
-0.0108489990234375,
-0.004261016845703125,
0.055694580078125,
0.03350830078125,
0.0242156982421875,
0.003032684326171875,
0.03302001953125,
0.05865478515625,
0.0214385986328125,
0.027801513671875,
-0.019256591796875,
-0.03448486328125,
0.043792724609375,
-0.031494140625,
0.0231170654296875,
-0.007541656494140625,
0.035919189453125,
0.037750244140625,
-0.03973388671875,
0.05438232421875,
0.01381683349609375,
-0.039764404296875,
-0.037841796875,
-0.05218505859375,
-0.049591064453125,
-0.041351318359375,
0.053924560546875,
-0.034393310546875,
-0.0096588134765625,
0.05145263671875,
0.048553466796875,
0.053131103515625,
0.009674072265625,
-0.0401611328125,
0.0238189697265625,
0.01947021484375,
0.02069091796875,
-0.01093292236328125,
0.0009064674377441406,
-0.0311126708984375,
0.055572509765625,
-0.0019893646240234375,
0.0212860107421875,
0.044342041015625,
-0.049102783203125,
0.0153045654296875,
-0.01064300537109375,
-0.0227508544921875,
-0.01410675048828125,
-0.0391845703125,
-0.04510498046875,
-0.032440185546875,
0.005977630615234375,
0.01169586181640625,
-0.004741668701171875,
-0.007076263427734375,
-0.04290771484375,
-0.025238037109375,
0.0273590087890625,
-0.0271759033203125,
0.034088134765625,
0.01837158203125,
-0.0307159423828125,
0.0217132568359375,
0.02337646484375,
0.04925537109375,
0.03619384765625,
0.058349609375,
0.015899658203125,
-0.0028553009033203125,
0.006099700927734375,
-0.0175018310546875,
-0.037567138671875,
0.0233001708984375,
0.01751708984375,
-0.012176513671875,
-0.0362548828125,
0.036529541015625,
-0.037811279296875,
-0.05157470703125,
-0.0333251953125,
0.00713348388671875,
0.03289794921875,
0.0119781494140625,
-0.0131072998046875,
-0.035308837890625,
-0.00982666015625,
-0.0051422119140625,
0.00798797607421875,
-0.028839111328125,
0.06231689453125,
-0.0019464492797851562,
-0.0240020751953125,
-0.057403564453125,
0.07098388671875,
0.016021728515625,
-0.053253173828125,
0.030487060546875,
-0.08221435546875,
0.01406097412109375,
-0.055877685546875,
-0.03369140625,
-0.005115509033203125,
-0.0251922607421875,
0.005466461181640625,
-0.0121002197265625,
0.0159912109375,
0.05377197265625,
-0.044921875,
0.032684326171875,
0.013519287109375,
0.0278167724609375,
-0.046600341796875,
-0.0209503173828125,
-0.011932373046875,
-0.00838470458984375,
0.0176544189453125,
0.0154876708984375,
-0.01123809814453125,
-0.0228271484375,
-0.0300750732421875,
-0.0312042236328125,
0.007045745849609375,
0.015869140625,
-0.0132904052734375,
0.016998291015625,
0.018463134765625,
-0.01934814453125,
-0.017425537109375,
0.0144500732421875,
-0.053680419921875,
0.031646728515625,
0.050323486328125,
-0.029876708984375,
0.019287109375,
-0.060943603515625,
-0.025970458984375,
-0.031982421875,
-0.0168914794921875,
0.0343017578125,
0.0562744140625,
-0.043792724609375,
0.0161285400390625,
0.0195159912109375,
-0.020660400390625,
-0.007083892822265625,
-0.062286376953125,
-0.01531219482421875,
-0.021392822265625,
0.042449951171875,
0.0272064208984375,
-0.01258087158203125,
-0.0005240440368652344,
-0.038299560546875,
-0.0187530517578125,
-0.00853729248046875,
0.017486572265625,
-0.0305023193359375,
-0.060089111328125,
0.032989501953125,
-0.0002512931823730469,
0.03253173828125,
-0.0028476715087890625,
-0.001766204833984375,
0.0250091552734375,
-0.0300445556640625,
0.049407958984375,
-0.01568603515625,
-0.01247406005859375,
0.038238525390625,
0.00740814208984375,
-0.01319122314453125,
-0.027374267578125,
0.01122283935546875,
0.0070037841796875,
0.018341064453125,
-0.038482666015625,
-0.0077972412109375,
0.0263214111328125,
0.04443359375,
0.049591064453125,
0.0230560302734375,
0.0013761520385742188,
-0.03228759765625,
0.049713134765625,
0.0208740234375,
-0.0004954338073730469,
-0.0283203125,
0.02203369140625,
0.0023403167724609375,
0.038543701171875,
-0.012298583984375,
0.045318603515625,
0.0263519287109375,
0.051666259765625,
-0.0035495758056640625,
0.04144287109375,
0.01006317138671875,
-0.0267333984375,
0.05157470703125,
0.0265350341796875,
-0.021484375,
0.042083740234375,
-0.01090240478515625,
-0.01390838623046875,
-0.013031005859375,
-0.045074462890625,
0.045867919921875,
0.053558349609375,
0.02911376953125,
-0.01216888427734375,
-0.02886962890625,
-0.0015439987182617188,
-0.0269317626953125,
0.05450439453125,
0.044677734375,
-0.0232086181640625,
0.005756378173828125,
-0.03692626953125,
0.034027099609375,
-0.01372528076171875,
-0.0234375,
0.040435791015625,
0.03607177734375,
-0.0199737548828125,
0.00136566162109375,
0.007236480712890625,
0.0010213851928710938,
0.041290283203125,
0.0237884521484375,
-0.0258331298828125,
-0.00463104248046875,
-0.03173828125,
-0.0196075439453125,
0.04571533203125,
0.036102294921875,
0.02813720703125,
0.0498046875,
0.06427001953125,
-0.01480865478515625,
0.03350830078125,
-0.03643798828125,
-0.0005936622619628906,
-0.060028076171875,
0.00962066650390625,
0.047760009765625,
0.00237274169921875,
0.03802490234375,
-0.027679443359375,
-0.00879669189453125,
0.00696563720703125,
0.010009765625,
0.0589599609375,
0.0170440673828125,
0.01406097412109375,
0.033660888671875,
-0.05621337890625,
0.053924560546875,
-0.0325927734375,
-0.007610321044921875,
-0.023345947265625,
0.005859375,
-0.01308441162109375,
0.003326416015625,
0.032470703125,
0.03179931640625,
-0.0103912353515625,
-0.0149993896484375,
-0.00914764404296875,
0.0692138671875,
-0.0252685546875,
0.03546142578125,
0.0489501953125,
-0.0380859375,
-0.047698974609375,
-0.078369140625,
-0.04034423828125,
-0.0311279296875,
0.04779052734375,
-0.011199951171875,
-0.07354736328125,
-0.0232696533203125,
0.0128173828125,
0.03338623046875,
-0.0052642822265625,
0.024444580078125,
0.0469970703125,
0.032318115234375,
-0.04559326171875,
0.046478271484375,
0.0219879150390625,
-0.045440673828125,
-0.0408935546875,
0.006687164306640625,
-0.0380859375,
-0.004253387451171875,
0.00585174560546875,
-0.01727294921875,
-0.060272216796875,
-0.058074951171875,
0.057952880859375,
-0.007251739501953125,
-0.0268096923828125,
-0.005939483642578125,
-0.07183837890625,
-0.05596923828125,
0.037933349609375,
0.01471710205078125,
0.006504058837890625,
-0.02545166015625,
-0.0009975433349609375,
-0.056121826171875,
-0.043212890625,
0.025482177734375,
-0.0159149169921875,
0.03350830078125,
-0.004352569580078125,
-0.0552978515625,
-0.056854248046875,
0.024505615234375,
-0.0328369140625,
-0.035858154296875,
-0.0186920166015625,
-0.033599853515625,
0.044769287109375,
0.0709228515625,
-0.0301666259765625,
0.0552978515625,
0.005153656005859375,
0.0711669921875,
0.09295654296875,
0.02374267578125,
-0.044921875,
0.04876708984375,
0.0143890380859375,
-0.0238037109375,
-0.002201080322265625,
-0.0452880859375,
-0.0082244873046875,
-0.0005879402160644531,
-0.0091705322265625,
0.056732177734375,
0.0362548828125,
0.0374755859375,
0.011474609375,
-0.04400634765625,
-0.036865234375,
-0.0270233154296875,
-0.05029296875,
-0.0494384765625,
-0.02239990234375,
-0.027069091796875,
-0.03143310546875,
-0.007572174072265625,
-0.0439453125,
0.049896240234375,
0.0172882080078125,
0.040557861328125,
0.02178955078125,
0.00688934326171875,
-0.0162506103515625,
-0.039459228515625,
-0.06292724609375,
-0.0156402587890625,
-0.0228271484375,
-0.016571044921875,
0.03094482421875,
0.01934814453125,
-0.036224365234375,
0.0369873046875,
0.0010290145874023438,
-0.023284912109375,
-0.004550933837890625,
0.0172882080078125,
-0.04425048828125,
0.009429931640625,
0.04248046875,
-0.0262908935546875,
-0.01525115966796875,
-0.031585693359375,
0.0014734268188476562,
-0.0304412841796875,
-0.023773193359375,
0.0223541259765625,
-0.05364990234375,
0.030181884765625,
0.01398468017578125,
0.04388427734375,
0.0189056396484375,
0.01073455810546875,
0.00695037841796875,
0.0033855438232421875,
0.016815185546875,
0.06109619140625,
-0.0003046989440917969,
0.003391265869140625,
0.05609130859375,
0.00040721893310546875,
0.067626953125,
-0.039794921875,
-0.0557861328125,
0.037078857421875,
-0.0238037109375,
0.0291595458984375,
0.037445068359375,
0.046875,
0.01371002197265625,
-0.0183868408203125,
-0.05657958984375,
-0.0214996337890625,
0.049224853515625,
-0.002407073974609375,
0.007450103759765625,
0.0031566619873046875,
0.030059814453125,
0.036590576171875,
0.043792724609375,
0.07257080078125,
-0.0240478515625,
-0.050750732421875,
0.00983428955078125,
0.031097412109375,
0.0782470703125,
0.0225830078125,
0.0421142578125,
-0.0232086181640625,
0.007801055908203125,
-0.0277252197265625,
-0.054840087890625,
-0.026397705078125,
0.100341796875,
0.0462646484375,
-0.0255584716796875,
0.01486968994140625,
0.0028076171875,
-0.01776123046875,
-0.04949951171875,
-0.05426025390625,
-0.04608154296875,
-0.043853759765625,
-0.0279541015625,
-0.0009222030639648438,
-0.060516357421875,
-0.0080718994140625,
0.01081085205078125,
0.054107666015625,
0.044189453125,
0.01081085205078125,
0.0396728515625,
0.043182373046875,
0.02783203125,
0.0013484954833984375,
0.035797119140625,
0.03106689453125,
0.062225341796875,
0.0447998046875,
-0.039337158203125,
-0.0221710205078125,
0.04400634765625,
0.0271759033203125,
-0.0247802734375,
-0.050018310546875,
0.00955963134765625,
-0.034149169921875,
-0.046051025390625,
-0.043609619140625,
0.05438232421875,
0.0950927734375,
0.05859375,
-0.03802490234375,
-0.0704345703125,
0.02093505859375,
0.043487548828125,
-0.02569580078125,
0.0090484619140625,
-0.0241851806640625,
0.015350341796875,
0.040252685546875,
0.00959014892578125,
-0.0007123947143554688,
0.01229095458984375,
-0.00991058349609375,
0.0289306640625,
-0.0273895263671875,
-0.02508544921875,
0.085205078125,
-0.006504058837890625,
-0.062744140625,
0.0118865966796875,
0.023834228515625,
-0.031829833984375,
0.0152435302734375,
0.0621337890625,
0.06695556640625,
0.0237884521484375,
0.0191802978515625,
0.06256103515625,
0.0156402587890625,
-0.006061553955078125,
0.03411865234375,
-0.0135498046875,
-0.044525146484375,
-0.0279693603515625,
0.0047607421875,
0.0321044921875,
-0.050994873046875,
0.018646240234375,
-0.04290771484375,
-0.04534912109375,
0.03961181640625,
-0.0011758804321289062,
-0.030303955078125,
-0.0021114349365234375,
-0.06829833984375,
0.0287017822265625,
-0.0185699462890625,
0.0025482177734375,
-0.033355712890625,
-0.0117034912109375,
0.005107879638671875,
0.03375244140625,
0.00594329833984375,
-0.031951904296875,
0.035614013671875,
0.03619384765625,
0.0023956298828125,
0.0240478515625,
0.0154266357421875,
-0.0250091552734375,
-0.0199127197265625,
0.05670166015625,
-0.020477294921875,
-0.01470947265625,
-0.00983428955078125,
0.05682373046875,
0.04071044921875,
0.056671142578125,
0.0141448974609375,
0.0076751708984375,
0.0098724365234375,
0.0234832763671875,
-0.0169677734375,
0.051177978515625,
0.03558349609375,
-0.03955078125,
-0.015899658203125,
-0.040679931640625,
-0.037445068359375,
-0.02301025390625,
-0.049713134765625,
-0.0467529296875,
0.04888916015625,
0.016845703125,
-0.040283203125,
-0.02294921875,
0.0112152099609375,
-0.044921875,
-0.055755615234375,
-0.02581787109375,
-0.0159759521484375,
-0.0236663818359375,
-0.0251617431640625,
0.004581451416015625,
0.01000213623046875,
-0.00391387939453125,
-0.0260009765625,
0.044891357421875,
0.04864501953125,
0.0148162841796875,
0.01409149169921875,
-0.032745361328125,
0.053009033203125,
0.0182647705078125,
0.055450439453125,
-0.0653076171875,
-0.02471923828125,
0.035797119140625,
0.0462646484375,
0.02874755859375,
0.005741119384765625,
0.053924560546875,
0.030853271484375,
0.012481689453125,
-0.05694580078125,
-0.0186004638671875,
0.1102294921875,
0.029083251953125,
-0.0207366943359375,
-0.0694580078125,
0.0175628662109375,
-0.04541015625,
-0.020538330078125,
-0.037322998046875,
-0.01171875,
-0.03961181640625,
0.00823211669921875,
0.002582550048828125,
-0.0171356201171875,
-0.0189208984375,
0.005725860595703125,
0.00911712646484375,
0.01336669921875,
0.027618408203125,
0.062042236328125,
-0.033447265625,
-0.022735595703125,
0.0021419525146484375,
0.0438232421875,
0.0154571533203125,
-0.01947021484375,
-0.0032291412353515625,
0.061614990234375,
-0.046356201171875,
-0.0238494873046875,
-0.0012159347534179688,
0.0015659332275390625,
-0.003631591796875,
-0.034881591796875,
-0.040496826171875,
-0.0472412109375,
0.0251007080078125,
0.016448974609375,
-0.0037250518798828125,
0.0038166046142578125,
-0.01904296875,
0.01018524169921875,
0.022186279296875,
-0.0235137939453125,
-0.01554107666015625,
-0.0283355712890625,
0.0289764404296875,
0.016815185546875,
-0.053131103515625,
0.04473876953125,
-0.0172271728515625,
0.025390625,
-0.031890869140625,
0.0023403167724609375,
0.0139312744140625,
0.007091522216796875,
0.037872314453125,
0.059356689453125,
0.042572021484375,
-0.0277557373046875,
-0.031585693359375,
-0.03277587890625,
-0.060333251953125,
-0.01776123046875,
-0.06304931640625,
0.01491546630859375,
0.033782958984375,
0.0303192138671875,
-0.00495147705078125,
0.055908203125,
0.0070343017578125,
0.0245208740234375,
0.0230712890625,
0.0034198760986328125,
0.06036376953125,
0.007038116455078125,
0.046142578125,
0.0295562744140625,
-0.02276611328125,
0.0254058837890625,
-0.024383544921875,
0.0266876220703125,
0.05426025390625,
0.06341552734375,
0.027679443359375,
0.046875,
-0.00836181640625,
0.05450439453125,
0.01548004150390625,
0.029449462890625,
0.036956787109375,
-0.004150390625,
0.00775146484375,
0.024444580078125,
-0.0280609130859375,
-0.0148162841796875,
-0.07177734375,
0.0284881591796875,
-0.01512908935546875,
0.047637939453125,
0.049835205078125,
0.05029296875,
0.01105499267578125,
0.04107666015625,
0.025482177734375,
-0.039306640625,
-0.047760009765625,
-0.06536865234375,
0.021484375,
-0.058074951171875,
-0.0280609130859375,
0.01422119140625,
0.040008544921875,
-0.0369873046875,
-0.07879638671875,
0.0029144287109375,
-0.006229400634765625,
0.04302978515625,
-0.03204345703125,
0.03106689453125,
-0.0413818359375,
-0.04541015625,
0.0203704833984375,
-0.03564453125,
-0.025665283203125,
-0.0352783203125,
-0.03375244140625,
-0.0052947998046875,
0.039154052734375,
0.0206756591796875,
-0.0161895751953125,
-0.01654052734375,
0.024139404296875,
0.0203094482421875,
0.00418853759765625,
-0.0269317626953125,
0.039703369140625,
-0.033935546875,
0.04888916015625,
0.01393890380859375,
0.009490966796875,
0.0216217041015625,
0.0262298583984375,
0.06707763671875,
-0.0010128021240234375,
-0.0242462158203125,
0.0704345703125,
-0.0191650390625,
0.0020008087158203125,
0.0024051666259765625,
0.03173828125,
0.01067352294921875,
0.0087890625,
0.0002956390380859375,
-0.0265960693359375,
-0.00777435302734375,
0.01390838623046875,
-0.0297088623046875,
-0.02203369140625,
0.055938720703125,
-0.055908203125,
-0.04034423828125,
0.0587158203125,
0.004291534423828125,
0.041961669921875,
-0.04962158203125,
-0.0269317626953125,
0.03863525390625,
-0.06524658203125,
-0.0220947265625,
0.0030536651611328125,
0.00725555419921875,
0.005550384521484375,
0.0421142578125,
-0.00234222412109375,
-0.026763916015625,
-0.020660400390625,
-0.0026092529296875,
-0.020660400390625,
-0.01293182373046875,
-0.003742218017578125,
0.033660888671875,
-0.03509521484375,
0.01092529296875,
-0.01160430908203125,
0.00959014892578125,
-0.004810333251953125,
-0.04345703125,
0.01457977294921875,
-0.050079345703125,
-0.01348876953125,
-0.03314208984375,
0.036041259765625,
0.00665283203125,
-0.03973388671875,
-0.0655517578125,
0.0099945068359375,
-0.0196075439453125,
-0.03521728515625,
0.02435302734375,
0.0208892822265625,
-0.058013916015625,
0.0011806488037109375,
0.043701171875,
0.0124664306640625,
-0.0019273757934570312,
0.0008993148803710938,
-0.029449462890625,
0.0675048828125,
0.0093994140625,
0.03985595703125,
-0.0416259765625,
0.0284423828125,
0.01009368896484375,
0.087890625,
-0.030548095703125,
-0.005825042724609375,
-0.005889892578125,
0.0648193359375,
0.047637939453125,
0.0203399658203125,
0.0050048828125,
0.06610107421875,
-0.0015420913696289062,
-0.02752685546875,
0.042999267578125,
-0.0171661376953125,
-0.05328369140625,
-0.04302978515625,
-0.01153564453125,
-0.033660888671875,
-0.03289794921875,
0.021331787109375,
-0.05731201171875,
-0.004222869873046875,
0.0009093284606933594,
0.0301513671875,
0.0057373046875,
0.00556182861328125,
0.08636474609375,
0.0180206298828125,
0.01349639892578125,
0.032867431640625,
-0.005741119384765625,
0.063720703125,
0.0304718017578125,
0.047607421875,
0.0284881591796875,
-0.0164642333984375,
0.035736083984375,
0.038055419921875,
0.0341796875,
-0.07061767578125,
-0.0780029296875,
-0.0350341796875,
0.0242462158203125,
-0.0014324188232421875,
0.0252227783203125,
0.00989532470703125,
-0.019989013671875,
0.0006623268127441406,
0.042205810546875,
-0.0041961669921875,
-0.02117919921875,
-0.020660400390625,
-0.0290679931640625,
-0.00457000732421875,
0.052734375,
0.038848876953125,
0.03875732421875,
-0.02606201171875,
0.018035888671875,
0.0128021240234375,
0.0273590087890625,
0.022552490234375,
-0.03997802734375,
-0.0278167724609375,
-0.0638427734375,
0.0110321044921875,
-0.0022792816162109375,
0.01313018798828125,
0.01465606689453125,
-0.0435791015625,
0.04217529296875,
0.021820068359375,
0.02117919921875,
-0.027130126953125,
0.0177459716796875,
0.034698486328125,
-0.008636474609375,
0.01212310791015625,
-0.003749847412109375,
0.01189422607421875,
0.0158843994140625,
-0.01415252685546875,
0.043060302734375,
0.03289794921875,
0.0616455078125,
0.03741455078125,
-0.030609130859375,
0.05926513671875,
0.05023193359375,
0.0114288330078125,
-0.08990478515625,
-0.0159454345703125,
0.0009603500366210938,
0.014312744140625,
-0.0253143310546875,
0.0008101463317871094,
-0.006595611572265625,
-0.042510986328125,
-0.0029315948486328125,
-0.041107177734375,
-0.002681732177734375,
-0.017364501953125,
0.017242431640625,
-0.06805419921875,
0.01104736328125,
0.0004761219024658203,
0.04937744140625,
0.033355712890625,
0.047515869140625,
-0.043853759765625,
-0.00261688232421875,
-0.061981201171875,
-0.0208892822265625,
0.0791015625,
-0.0096282958984375,
-0.046783447265625,
0.0277557373046875,
0.037750244140625,
-0.00417327880859375,
0.045257568359375,
0.04937744140625,
-0.0096893310546875,
0.0006880760192871094,
-0.04742431640625,
-0.015380859375,
-0.010894775390625,
-0.018310546875,
-0.039520263671875,
-0.0576171875,
0.051605224609375,
0.034759521484375,
-0.025115966796875,
0.048126220703125,
-0.00341033935546875,
0.0711669921875,
-0.0163421630859375,
-0.040008544921875,
-0.0250091552734375,
0.01678466796875,
-0.0176239013671875,
0.01085662841796875,
-0.0162200927734375,
0.0228729248046875,
-0.009918212890625,
0.060302734375,
0.052886962890625,
0.041259765625,
0.02618408203125,
-0.0111541748046875,
-0.004070281982421875,
0.0460205078125,
0.01296234130859375,
0.0230712890625,
-0.022796630859375,
-0.0028362274169921875,
-0.057952880859375,
-0.01380157470703125,
0.041900634765625,
0.006801605224609375,
-0.0022106170654296875,
-0.006008148193359375,
-0.035614013671875,
0.03973388671875,
-0.005123138427734375,
0.042083740234375,
0.0161590576171875,
0.0290069580078125,
0.048004150390625,
-0.052490234375,
0.048675537109375,
0.0266571044921875,
-0.0202789306640625,
-0.0092315673828125,
-0.036895751953125,
-0.0016679763793945312,
-0.035614013671875,
0.0163726806640625,
0.021575927734375,
-0.0570068359375,
0.01617431640625,
0.01361846923828125,
-0.006809234619140625,
0.01299285888671875,
0.02154541015625,
0.014495849609375,
0.04486083984375,
0.01739501953125,
0.008819580078125,
0.09765625,
-0.0158843994140625,
-0.040496826171875,
0.01145172119140625,
-0.03729248046875,
-0.0277557373046875,
0.034820556640625,
-0.05792236328125,
0.0123138427734375,
0.010498046875,
-0.04022216796875,
0.00948333740234375,
0.038238525390625,
0.029205322265625,
-0.0301055908203125,
-0.0285797119140625,
0.01104736328125,
0.005802154541015625,
-0.0307464599609375,
-0.0156097412109375,
-0.04840087890625,
0.0091094970703125,
0.02117919921875,
0.027130126953125,
0.029144287109375,
0.042633056640625,
0.032989501953125,
-0.047393798828125,
-0.0006341934204101562,
-0.038726806640625,
0.03936767578125,
-0.0185394287109375,
0.0037689208984375,
0.031524658203125,
0.007328033447265625,
-0.031707763671875,
0.03802490234375,
-0.03704833984375,
-0.0230712890625,
-0.0323486328125,
0.033203125,
0.038848876953125,
0.03912353515625,
0.06207275390625,
0.0328369140625,
0.027740478515625,
0.0465087890625,
0.01009368896484375,
-0.01061248779296875,
0.017791748046875,
0.045745849609375,
0.0292816162109375,
0.0462646484375,
-0.00978851318359375,
-0.04132080078125,
-0.01131439208984375,
-0.0152435302734375,
0.0384521484375,
-0.024871826171875,
-0.01222991943359375,
-0.01568603515625,
-0.024993896484375,
-0.0288543701171875,
-0.017608642578125,
-0.06011962890625,
-0.052215576171875,
-0.038482666015625,
0.04376220703125,
0.0292510986328125,
-0.033233642578125,
0.0134735107421875,
0.03009033203125,
-0.05230712890625,
0.053253173828125,
-0.0159912109375,
-0.0021514892578125,
0.044586181640625,
0.04254150390625,
0.050048828125,
0.03948974609375,
0.021087646484375,
-0.006717681884765625,
0.01116180419921875,
-0.033233642578125,
-0.00948333740234375,
-0.0106964111328125,
-0.0243072509765625,
0.06610107421875,
0.0275115966796875,
-0.0244293212890625,
-0.05364990234375,
0.032135009765625,
0.0523681640625,
0.026885986328125,
0.01317596435546875,
0.0821533203125,
0.0231781005859375,
-0.04803466796875,
0.004734039306640625,
-0.030029296875,
0.01146697998046875,
-0.051055908203125,
-0.07281494140625,
-0.0105743408203125,
0.04541015625,
0.014556884765625,
-0.0037384033203125,
-0.0223541259765625,
0.053192138671875,
-0.03558349609375,
-0.026641845703125,
0.035552978515625,
-0.0287933349609375,
0.0188446044921875,
-0.0635986328125,
-0.04248046875,
0.06365966796875,
0.02838134765625,
-0.048980712890625,
-0.026153564453125,
0.012298583984375,
-0.00403594970703125,
0.0172271728515625,
0.01528167724609375,
-0.01678466796875,
0.0022068023681640625,
0.038330078125,
0.060577392578125,
0.05889892578125,
0.03521728515625,
0.02978515625,
-0.045501708984375,
-0.046051025390625,
0.035675048828125,
0.01375579833984375,
-0.018768310546875,
-0.0152130126953125,
-0.00839996337890625,
-3.4749507904052734e-05,
-0.018341064453125,
0.061859130859375,
-0.00780487060546875,
-0.0225372314453125,
-0.04364013671875,
0.0191497802734375,
-0.066650390625,
-0.044158935546875,
0.01419830322265625,
0.047607421875,
0.01363372802734375,
-0.0212860107421875,
0.0789794921875,
0.06475830078125,
-0.0115203857421875,
-0.054962158203125,
-0.033721923828125,
-0.0185699462890625,
0.0239715576171875,
0.025482177734375,
-0.0306396484375,
-0.0182647705078125,
-0.04644775390625,
-0.033355712890625,
-0.03857421875,
0.0310516357421875,
0.043365478515625,
-0.03009033203125,
0.0210113525390625,
0.0699462890625,
-0.00807952880859375,
0.042144775390625,
-0.0243377685546875,
0.005260467529296875,
-0.03204345703125,
0.04705810546875,
-0.0312042236328125,
-0.0012731552124023438,
-0.01107025146484375,
-0.04107666015625,
0.02203369140625,
-0.0311431884765625,
-0.060211181640625,
-0.034149169921875,
0.01043701171875,
-0.051177978515625,
0.00714111328125,
0.040863037109375,
0.04498291015625,
-0.007686614990234375,
-0.00919342041015625,
-0.03436279296875,
-0.039703369140625,
0.043426513671875,
-0.02630615234375,
0.0165557861328125,
0.0562744140625,
0.036529541015625,
-0.004734039306640625,
0.021392822265625,
-0.0208587646484375,
-0.0235443115234375,
0.0154571533203125,
-0.022491455078125,
-0.0107269287109375,
-0.0100555419921875,
-0.051239013671875,
0.004974365234375,
0.03985595703125,
0.041961669921875,
-0.066650390625,
-0.006816864013671875,
0.059906005859375,
-0.01288604736328125,
-0.032806396484375,
-0.02496337890625,
0.038055419921875,
0.04302978515625,
-0.007602691650390625,
0.0155487060546875,
-0.0024871826171875,
0.0014181137084960938,
0.0187225341796875,
0.04046630859375,
0.026275634765625,
-0.0367431640625,
-0.04766845703125,
0.01113128662109375,
0.010223388671875,
-0.017608642578125,
0.00882720947265625,
-0.0316162109375,
-0.01824951171875,
-0.007770538330078125,
0.0087890625,
-0.034881591796875,
-0.01873779296875,
6.246566772460938e-05,
0.044952392578125,
0.0211181640625,
0.0273590087890625,
0.059326171875,
-0.049530029296875,
-0.03692626953125,
-0.053558349609375,
-0.0195770263671875,
-6.979703903198242e-05,
-0.06146240234375,
0.03436279296875,
-0.0156402587890625,
-0.06793212890625,
0.004245758056640625,
-0.034149169921875,
0.041259765625,
-0.055999755859375,
-0.05078125,
-0.058502197265625,
0.037750244140625,
-0.0201416015625,
-0.024322509765625,
-0.04864501953125,
0.038543701171875,
0.0546875,
0.0236358642578125,
0.01215362548828125,
-0.0300140380859375,
-0.0281219482421875,
-0.003665924072265625,
-0.0469970703125,
0.01149749755859375,
-0.028472900390625,
-0.00495147705078125,
-0.0291595458984375,
0.004840850830078125,
-0.005496978759765625,
0.0098724365234375,
0.0290985107421875,
0.044189453125,
-0.004199981689453125,
-0.05712890625,
0.0085296630859375,
-0.0113525390625,
0.013671875,
0.057525634765625,
0.021240234375,
0.03033447265625,
0.0325927734375,
-0.0172119140625,
0.0738525390625,
-0.00827789306640625,
0.05029296875,
0.05047607421875,
-0.0197906494140625,
-0.009368896484375,
-0.057586669921875,
0.0211029052734375,
-0.02142333984375,
-0.06158447265625,
0.0161590576171875,
-0.01021575927734375,
-0.01044464111328125,
0.01045989990234375,
-0.06707763671875,
-0.00223541259765625,
-0.031402587890625,
0.01230621337890625,
-0.00627899169921875,
-0.015899658203125,
0.0216217041015625,
-0.0002880096435546875,
0.012176513671875,
0.018768310546875,
-0.04376220703125,
0.020050048828125,
0.00109100341796875,
-0.027191162109375,
0.039031982421875,
-0.0430908203125,
-0.00939178466796875,
-0.035858154296875,
-0.016937255859375,
0.034912109375,
-0.0198211669921875,
0.0194854736328125,
0.0231170654296875,
-0.016510009765625,
-0.02301025390625,
-0.0648193359375,
-0.07537841796875,
-0.0160980224609375,
-0.0438232421875,
-0.00717926025390625,
-0.01291656494140625,
-0.01531219482421875,
0.0406494140625,
0.033660888671875,
-0.03173828125,
-0.0160675048828125,
-0.0225067138671875,
0.04913330078125,
0.03131103515625,
0.043487548828125,
-0.0181121826171875,
0.018829345703125,
-0.00909423828125,
-0.004547119140625,
0.052032470703125,
0.010009765625,
-0.01349639892578125,
0.049530029296875,
0.043670654296875,
0.005985260009765625,
-0.0006203651428222656,
-0.01092529296875,
0.007358551025390625,
-0.040496826171875,
0.046051025390625,
0.0029430389404296875,
0.0780029296875,
-0.03765869140625,
-0.04669189453125,
0.037261962890625,
-0.01409912109375,
-0.020965576171875,
0.021881103515625,
0.0474853515625,
0.06671142578125,
0.00533294677734375,
0.004604339599609375,
0.07037353515625,
0.031280517578125,
0.060028076171875,
-0.0102386474609375,
0.032928466796875,
0.06915283203125,
0.031494140625,
-0.045074462890625,
-0.04278564453125,
0.0301513671875,
-0.048126220703125,
-0.0187835693359375,
-0.0164031982421875,
0.038604736328125,
0.017822265625,
-0.053131103515625,
-0.04345703125,
-0.06671142578125,
0.00567626953125,
0.0218658447265625,
-0.044525146484375,
0.03900146484375,
-0.018218994140625,
0.021728515625,
0.036651611328125,
0.0229339599609375,
0.018798828125,
-0.0006856918334960938,
-0.0199127197265625,
-0.057586669921875,
0.0203857421875,
-0.001979827880859375,
-0.0164337158203125,
0.01380157470703125,
0.051055908203125,
0.053497314453125,
0.01364898681640625,
-0.06060791015625,
-0.0008683204650878906,
-0.0230712890625,
-0.01366424560546875,
-0.060516357421875,
-0.0171661376953125,
0.032318115234375,
0.01953125,
-0.035614013671875,
-0.040557861328125,
-0.04779052734375,
0.050628662109375,
0.0148162841796875,
0.0185089111328125,
-0.010009765625,
0.00063323974609375,
0.0220489501953125,
0.03582763671875,
-0.014556884765625,
0.008819580078125,
0.049560546875,
-0.052154541015625,
0.0225067138671875,
-0.0233306884765625,
0.031005859375,
0.01517486572265625,
-0.042236328125,
-0.00484466552734375,
0.05731201171875,
-0.0012350082397460938,
0.031494140625,
0.0024929046630859375,
0.01436614990234375,
0.018646240234375,
0.032867431640625,
-0.0279541015625,
0.0128326416015625,
-0.0051116943359375,
0.04864501953125,
-0.032196044921875,
-0.02655029296875,
-0.0276031494140625,
0.034271240234375,
-0.0145111083984375,
-0.035308837890625,
0.04644775390625,
-0.013885498046875,
0.043304443359375,
-0.057464599609375,
0.0168914794921875,
-0.04937744140625,
-0.043701171875,
-0.024200439453125,
0.046722412109375,
-0.0019292831420898438,
-0.038848876953125,
-0.052703857421875,
0.0198516845703125,
0.01372528076171875,
-0.01128387451171875,
0.0310516357421875,
-0.0013551712036132812,
0.048309326171875,
0.0389404296875,
0.06671142578125,
0.040679931640625,
0.01233673095703125,
-0.05206298828125,
-0.0184478759765625,
0.03692626953125,
0.009521484375,
-0.0195465087890625,
-0.007022857666015625,
0.033111572265625,
0.006053924560546875,
-0.006961822509765625,
-0.05120849609375,
0.017547607421875,
-0.0654296875,
0.00555419921875,
0.07794189453125,
0.0144500732421875,
0.01483154296875,
0.045745849609375,
0.015899658203125,
-0.0032939910888671875,
0.029998779296875,
-0.02978515625,
0.024169921875,
-0.0011339187622070312,
-0.00873565673828125,
0.055938720703125,
-0.0023593902587890625,
0.0256195068359375,
-0.06610107421875,
0.01922607421875,
-0.0108184814453125,
0.0172119140625,
0.0229339599609375,
0.059967041015625,
0.0292510986328125,
-0.0200347900390625,
0.0496826171875,
0.0264129638671875,
0.028533935546875,
0.01358795166015625,
0.051727294921875,
0.01194000244140625,
0.0235595703125,
-0.01141357421875,
0.0086517333984375,
0.02349853515625,
-0.01532745361328125,
0.0232086181640625,
0.01363372802734375,
-0.01128387451171875,
0.01207733154296875,
0.050323486328125,
-0.036895751953125,
-0.04608154296875,
-0.01800537109375,
-0.0065460205078125,
-0.051116943359375,
-0.054351806640625,
0.0174560546875,
0.034820556640625,
-0.016021728515625,
-0.02081298828125,
0.0102996826171875,
-0.00714874267578125,
-0.01546478271484375,
-0.00443267822265625,
-0.0287933349609375,
-0.038330078125,
-0.045013427734375,
0.02880859375,
0.0265960693359375,
0.03900146484375,
-0.048248291015625,
-0.00237274169921875,
0.0201568603515625,
0.041778564453125,
0.02490234375,
-0.0243988037109375,
0.035797119140625,
0.034454345703125,
-0.01274871826171875,
0.03741455078125,
-0.045928955078125,
0.0178680419921875,
0.0285797119140625,
0.018310546875,
-0.06707763671875,
-0.01258087158203125,
0.042449951171875,
0.005001068115234375,
-0.0672607421875,
0.032867431640625,
0.0204010009765625,
-0.00693511962890625,
0.047027587890625,
0.028167724609375,
0.0040130615234375,
0.0254058837890625,
-0.0384521484375,
-0.002727508544921875,
0.061614990234375,
-0.036224365234375,
0.024017333984375,
-0.044769287109375,
0.02435302734375,
0.051177978515625,
0.0782470703125,
0.022674560546875,
0.052154541015625,
0.0200347900390625,
0.042083740234375,
-0.00627899169921875,
-0.0287322998046875,
0.0626220703125,
0.04632568359375,
-0.027099609375,
0.0394287109375,
0.03192138671875,
-0.034271240234375,
-0.01898193359375,
-0.006443023681640625,
-0.0193328857421875,
0.06610107421875,
-0.005107879638671875,
0.0071258544921875,
0.0010709762573242188,
0.0175933837890625,
0.00951385498046875,
0.0382080078125,
-0.01038360595703125,
-3.153085708618164e-05,
-0.013275146484375,
-0.0234375,
0.0026683807373046875,
0.0523681640625,
0.01033782958984375,
-0.062744140625,
-0.00714111328125,
0.049072265625,
0.047119140625,
0.0266265869140625,
-0.012847900390625,
-0.0572509765625,
-0.0526123046875,
-0.05181884765625,
-0.0323486328125,
0.04193115234375,
0.037322998046875,
0.025909423828125,
0.0143280029296875,
-0.011566162109375,
0.049163818359375,
0.07159423828125,
0.00888824462890625,
0.0116729736328125,
0.0010309219360351562,
0.062103271484375,
-0.0015583038330078125,
-0.0044403076171875,
-0.0105743408203125,
0.04071044921875,
0.001071929931640625,
0.032012939453125,
-0.01462554931640625,
0.00897216796875,
0.004566192626953125,
-0.01580810546875,
-0.01439666748046875,
-0.02239990234375,
-0.005889892578125,
-0.0189056396484375,
0.0115203857421875,
-0.0472412109375,
0.0462646484375,
0.038421630859375,
0.0222930908203125,
0.030670166015625,
-0.019012451171875,
0.019989013671875,
0.005626678466796875,
0.020111083984375,
0.035675048828125,
0.015655517578125,
-0.016632080078125,
0.0240936279296875,
-0.0465087890625,
-0.01410675048828125,
-0.0015430450439453125,
0.0026721954345703125,
-0.02532958984375,
-0.01849365234375,
-0.03167724609375,
0.02056884765625,
0.034881591796875,
-0.0027332305908203125,
-0.04254150390625,
0.048370361328125,
0.0264739990234375,
-0.043731689453125,
-0.008514404296875,
-0.02899169921875,
0.031646728515625,
0.0013761520385742188,
0.0211029052734375,
0.014617919921875,
0.04315185546875,
-0.052093505859375,
-0.0015516281127929688,
-0.0108642578125,
-0.0106658935546875,
0.018890380859375,
0.01971435546875,
-0.03314208984375,
0.02197265625,
-0.04425048828125,
-0.0093231201171875,
-0.0031890869140625,
-0.033599853515625,
-0.035125732421875,
0.04351806640625,
-0.0123443603515625,
-0.02947998046875,
0.01480865478515625,
-0.04486083984375,
0.0280609130859375,
-0.03729248046875,
-0.01094818115234375,
0.0196685791015625,
0.0145263671875,
-0.045196533203125,
0.055023193359375,
0.01561737060546875,
0.09136962890625,
0.00360107421875,
0.06561279296875,
-0.0294036865234375,
0.0253448486328125,
0.01236724853515625,
-0.036895751953125,
0.0088043212890625,
-0.0106964111328125,
-0.02691650390625,
-0.050262451171875,
-0.041778564453125,
-0.022186279296875,
0.05706787109375,
-0.0287322998046875,
-0.021240234375,
0.049285888671875,
-0.0186309814453125,
-0.01629638671875,
0.0102691650390625,
-0.0443115234375,
0.03619384765625,
-0.03570556640625,
-0.01129913330078125,
-0.009796142578125,
-0.039215087890625,
0.00051116943359375,
0.0179443359375,
0.0260772705078125,
-0.0247955322265625,
0.0290069580078125,
0.037261962890625,
0.0235443115234375,
-0.038970947265625,
-0.01439666748046875,
-0.0305023193359375,
-0.01004791259765625,
0.01079559326171875,
-0.029632568359375,
0.0058746337890625,
0.019378662109375,
-0.016845703125,
-0.0283203125,
-0.0389404296875,
0.0682373046875,
0.06475830078125,
-0.026611328125,
-0.04010009765625,
0.007106781005859375,
0.063720703125,
0.04107666015625,
0.0291290283203125,
0.00722503662109375,
-0.0076141357421875,
-0.0526123046875,
-0.048004150390625,
0.04486083984375,
0.0185546875,
-0.0196380615234375,
-0.0025424957275390625,
-0.00975799560546875,
-0.047332763671875,
0.00025463104248046875,
-0.033782958984375,
-0.032623291015625,
0.001613616943359375,
-0.005706787109375,
-0.0194091796875,
0.04425048828125,
0.00165557861328125,
-0.01922607421875,
-0.00814056396484375,
0.05902099609375,
-0.01464080810546875,
0.004657745361328125,
0.03125,
0.003215789794921875,
0.084228515625,
-0.0193939208984375,
-0.051055908203125,
-0.0193634033203125,
0.061309814453125,
0.037322998046875,
0.02496337890625,
-0.0232696533203125,
-0.01503753662109375,
0.042755126953125,
-0.025390625,
0.00420379638671875,
-0.01111602783203125,
0.02581787109375,
0.02008056640625,
0.04351806640625,
-0.01983642578125,
-0.042205810546875,
0.033447265625,
-0.0274505615234375,
0.033111572265625,
0.0472412109375,
0.058837890625,
0.01043701171875,
0.04522705078125,
-0.0279388427734375,
-0.039642333984375,
-0.0138702392578125,
-0.0389404296875,
0.05804443359375,
-0.00200653076171875,
0.00547027587890625,
-0.0240020751953125,
-0.0277099609375,
-0.028778076171875,
0.0570068359375,
0.011688232421875,
0.05072021484375,
0.0053253173828125,
-0.044464111328125,
-0.04296875,
-0.016937255859375,
0.044158935546875,
-0.04241943359375,
-0.00148773193359375,
-0.0117340087890625,
-0.007709503173828125,
0.029937744140625,
-0.045013427734375,
0.015655517578125,
0.0487060546875,
-0.046905517578125,
0.032806396484375,
0.030914306640625,
0.0030059814453125,
0.0693359375,
-0.0309906005859375,
0.041839599609375,
0.004241943359375,
0.06243896484375,
0.0104827880859375,
0.04107666015625,
0.058135986328125,
0.049041748046875,
0.05609130859375,
0.021697998046875,
0.0022754669189453125,
0.0321044921875,
0.03265380859375,
-0.04205322265625,
-0.025360107421875,
-0.01483154296875,
0.051788330078125,
0.0194244384765625,
-0.032989501953125,
-0.0311431884765625,
-0.038848876953125,
0.004596710205078125,
-0.043914794921875,
0.00405120849609375,
-0.0258026123046875,
0.050689697265625,
-0.0135650634765625,
0.006011962890625,
-0.017120361328125,
-0.0248565673828125,
0.033477783203125,
-0.006259918212890625,
0.052734375,
0.00931549072265625,
0.0002199411392211914,
0.028106689453125,
0.025115966796875,
0.04302978515625,
0.0296630859375,
0.01244354248046875,
0.043212890625,
-0.03302001953125,
-0.048248291015625,
0.009765625,
0.022491455078125,
0.0251922607421875,
0.00957489013671875,
0.043548583984375,
0.014190673828125,
0.01131439208984375,
0.0394287109375,
0.05084228515625,
-0.046722412109375,
-0.0026874542236328125,
0.0169830322265625,
0.02099609375,
0.0196075439453125,
-0.039306640625,
-0.04022216796875,
-0.0141143798828125,
-0.01154327392578125,
0.0207977294921875,
0.015350341796875,
-0.04046630859375,
0.02398681640625,
0.0655517578125,
0.0711669921875,
-6.091594696044922e-05,
-0.01093292236328125,
-0.0167694091796875,
0.048980712890625,
0.0016222000122070312,
-0.042877197265625,
0.0167694091796875,
-0.03851318359375,
0.005168914794921875,
0.00922393798828125,
-0.0716552734375,
0.05401611328125,
0.04217529296875,
0.0277557373046875,
-0.049041748046875,
-0.025177001953125,
-0.01261138916015625,
0.04791259765625,
0.0100555419921875,
0.017333984375,
0.056854248046875,
0.013946533203125,
0.0193328857421875,
0.04168701171875,
0.0523681640625,
0.04400634765625,
-0.0258026123046875,
0.0104827880859375,
-0.027557373046875,
0.0261383056640625,
-0.05975341796875,
-0.0191192626953125,
0.008209228515625,
-0.032501220703125,
-0.0305023193359375,
-0.0283660888671875,
0.0037174224853515625,
0.045257568359375,
-0.034088134765625,
0.0019779205322265625,
-0.0292816162109375,
-0.004367828369140625,
0.0693359375,
0.057586669921875,
0.01067352294921875,
-0.0131683349609375,
-0.0285186767578125,
-0.06201171875,
-0.01068878173828125,
-0.0133819580078125,
-0.040679931640625,
-0.052001953125,
0.0173492431640625,
-0.0172119140625,
0.06634521484375,
0.04248046875,
-0.03436279296875,
0.01033782958984375,
-0.022674560546875,
0.0228271484375,
-0.024078369140625,
-0.010162353515625,
-0.048919677734375,
-0.011993408203125,
0.0057525634765625,
-0.05792236328125,
-0.019683837890625,
-0.0084686279296875,
0.006069183349609375,
-0.048858642578125,
0.004573822021484375,
0.035888671875,
-0.028564453125,
0.02423095703125,
0.02093505859375,
0.0726318359375,
0.011199951171875,
0.002758026123046875,
-0.004344940185546875,
0.0343017578125,
0.041534423828125,
0.0160369873046875,
0.03564453125,
-0.042694091796875,
-0.00605010986328125,
0.0028934478759765625,
0.00395965576171875,
-0.00469207763671875,
0.0302276611328125,
0.015716552734375,
-0.0557861328125,
0.047637939453125,
-0.004302978515625,
0.0312347412109375,
0.049835205078125,
0.05303955078125,
-0.0221405029296875,
0.01873779296875,
0.0173187255859375,
0.03216552734375,
0.04730224609375,
-0.017791748046875,
-0.0040130615234375,
0.0797119140625,
-0.00635528564453125,
-0.02081298828125,
-0.033905029296875,
-0.050323486328125,
-0.0236053466796875,
-0.023834228515625,
0.060943603515625,
-0.0190277099609375,
-0.0232696533203125,
0.00286102294921875,
0.02667236328125,
-0.03253173828125,
0.0283050537109375,
0.017333984375,
-0.00807952880859375,
-0.04840087890625,
-0.0298614501953125,
0.06170654296875,
0.01338958740234375,
-0.033050537109375,
0.00896453857421875,
-0.0030193328857421875,
0.01422119140625,
-0.0096588134765625,
-0.007598876953125,
0.0309295654296875,
0.0199432373046875,
0.038055419921875,
-0.06365966796875,
-0.0014820098876953125,
0.037994384765625,
0.05987548828125,
0.007415771484375,
-0.0005512237548828125,
-0.03338623046875,
-0.00389862060546875,
0.021881103515625,
0.0316162109375,
0.01381683349609375,
0.046722412109375,
-0.00635528564453125,
-0.0275726318359375,
0.0217742919921875,
0.046630859375,
-0.01546478271484375,
0.0090179443359375,
-0.00858306884765625,
-0.042205810546875,
-0.043792724609375,
0.00994873046875,
-0.01271820068359375,
-0.002498626708984375,
0.03985595703125,
0.0478515625,
0.0253753662109375,
0.026275634765625,
0.045013427734375,
-0.0151214599609375,
0.00470733642578125,
-0.0323486328125,
-0.0250396728515625,
-0.031341552734375,
0.034210205078125,
0.01491546630859375,
0.0172882080078125,
-0.0135345458984375,
0.0382080078125,
0.0298919677734375,
-0.040740966796875,
-0.0635986328125,
0.00992584228515625,
0.0489501953125,
-0.0063629150390625,
0.02734375,
0.0185089111328125,
0.038360595703125,
0.0038547515869140625,
0.0430908203125,
0.017974853515625,
-0.0241241455078125,
0.0015316009521484375,
0.047821044921875,
-0.00893402099609375,
-0.0631103515625,
-0.053619384765625,
0.04376220703125,
0.0041046142578125,
0.0022754669189453125,
-0.06280517578125,
0.050262451171875,
-0.02734375,
-0.0183868408203125,
-0.01441192626953125,
0.01120758056640625,
-0.037689208984375,
-0.048797607421875,
-0.074951171875,
-0.038421630859375,
0.01447296142578125,
-0.0019664764404296875,
0.0035648345947265625,
0.00872039794921875,
0.01155853271484375,
-0.038604736328125,
0.0248870849609375,
-0.0080718994140625,
0.0797119140625,
-0.0242462158203125,
-0.050140380859375,
0.01074981689453125,
0.0141448974609375,
-0.0198974609375,
0.01465606689453125,
0.0190887451171875,
0.034393310546875,
-0.04876708984375,
-0.01007843017578125,
-0.003536224365234375,
0.029571533203125,
-0.03790283203125,
-0.04315185546875,
-0.0323486328125,
-0.02484130859375,
0.03369140625,
-0.0176239013671875,
0.033111572265625,
-0.026611328125,
-0.0517578125,
-0.023681640625,
0.02667236328125,
0.0222015380859375,
0.006595611572265625,
0.0220489501953125,
-0.02227783203125,
0.0198516845703125,
0.04754638671875,
0.00884246826171875,
0.05615234375,
0.06756591796875,
0.012847900390625,
0.0153961181640625,
-0.0300140380859375,
0.020751953125,
0.003528594970703125,
0.027587890625,
-0.03350830078125,
0.0114898681640625,
0.0113067626953125,
-0.0330810546875,
0.036468505859375,
0.0819091796875,
-0.0150604248046875,
-0.043304443359375,
-0.01163482666015625,
0.0234527587890625,
-0.029998779296875,
0.0142364501953125,
-0.055877685546875,
-0.02056884765625,
-0.0372314453125,
-0.036895751953125,
-0.060028076171875,
-0.0026302337646484375,
-0.00917816162109375,
0.0010995864868164062,
-0.0634765625,
0.01061248779296875,
-0.0165557861328125,
0.032745361328125,
-0.0008220672607421875,
-0.058929443359375,
0.0236053466796875,
-0.0020751953125,
-0.0008802413940429688,
-0.0081634521484375,
0.04449462890625,
0.02392578125,
-0.040130615234375,
-0.0280609130859375,
0.04974365234375,
-0.02008056640625,
0.0478515625,
-0.0039825439453125,
-0.072021484375,
0.0335693359375,
-0.006473541259765625,
-0.028289794921875,
-0.051971435546875,
0.0092315673828125,
-0.04193115234375,
0.06060791015625,
-0.049407958984375,
0.043426513671875,
0.0224609375,
-0.038055419921875,
0.044891357421875,
-0.0301666259765625,
-0.01038360595703125,
0.0233306884765625,
0.021392822265625,
0.0252227783203125,
-0.06512451171875,
0.03680419921875,
0.019500732421875,
-0.0010528564453125,
-0.040985107421875,
-0.05084228515625,
-0.01551055908203125,
0.0013532638549804688,
-0.042633056640625,
0.049530029296875,
-0.0269775390625,
0.022430419921875,
0.0022716522216796875,
0.05133056640625,
8.422136306762695e-05,
-0.0167388916015625,
0.00833892822265625,
0.01071929931640625,
-0.0193328857421875,
-0.017120361328125,
0.0042572021484375,
-0.0384521484375,
-0.0201416015625,
0.05828857421875,
0.051055908203125,
-0.041778564453125,
-0.01244354248046875,
0.008880615234375,
0.013671875,
-0.004520416259765625,
-0.044158935546875,
0.0499267578125,
-0.032379150390625,
-0.01763916015625,
0.0035228729248046875,
0.009307861328125,
-0.0166778564453125,
0.051177978515625,
0.014678955078125,
-0.01629638671875,
-0.03533935546875,
-0.0160980224609375,
-0.0047149658203125,
-0.01100921630859375,
-0.0155487060546875,
0.04327392578125,
0.034210205078125,
0.023681640625,
0.04559326171875,
0.0404052734375,
0.00601959228515625,
0.045562744140625,
0.057586669921875,
0.0005826950073242188,
0.01183319091796875,
-0.0007481575012207031,
-0.0650634765625,
0.0128173828125,
-0.0418701171875,
-0.055694580078125,
-0.0294189453125,
0.03399658203125,
-0.0080108642578125,
0.01551055908203125,
0.047698974609375,
0.021942138671875,
-0.021697998046875,
0.0259246826171875,
0.01284027099609375,
0.036773681640625,
0.018035888671875,
-0.00807952880859375,
0.04400634765625,
-0.0113525390625,
0.058868408203125,
-0.038665771484375,
-0.01824951171875,
0.0738525390625,
0.052001953125,
-0.0298309326171875,
-0.017059326171875,
-0.013763427734375,
0.0155029296875,
0.0270843505859375,
0.0244293212890625,
-0.0298309326171875,
0.0016841888427734375,
0.02734375,
-0.039947509765625,
-0.0262451171875,
0.0205230712890625,
0.030487060546875,
0.0206298828125,
-0.039459228515625,
-0.0174560546875,
0.0185089111328125,
-0.053619384765625,
-0.0191497802734375,
0.0278472900390625,
-0.0026397705078125,
-0.058013916015625,
0.0028057098388671875,
-0.046356201171875,
-0.04638671875,
0.006580352783203125,
-0.0117340087890625,
0.0579833984375,
0.0537109375,
0.0036869049072265625,
0.01123809814453125,
-0.0306854248046875,
-0.0288238525390625,
-0.0215301513671875,
-0.0273284912109375,
0.034271240234375,
-0.0191802978515625,
0.004726409912109375,
-0.0075531005859375,
-0.0175628662109375,
-0.05908203125,
-0.040771484375,
0.03009033203125,
-0.049530029296875,
-0.054656982421875,
-0.01537322998046875,
-0.0287933349609375,
-0.00966644287109375,
0.0215606689453125,
0.039398193359375,
-0.019622802734375,
0.031463623046875,
-0.0244903564453125,
0.031341552734375,
0.0272979736328125,
0.02203369140625,
-0.012786865234375,
0.04266357421875,
-0.01959228515625,
0.002201080322265625,
0.0083465576171875,
-0.00986480712890625,
-0.048828125,
-0.00989532470703125,
-0.047698974609375,
-0.0078277587890625,
-0.05755615234375,
0.0070648193359375,
-0.0218658447265625,
-0.04779052734375,
0.0300445556640625,
0.0017910003662109375,
0.06610107421875,
-0.01393890380859375,
-0.008331298828125,
-0.00905609130859375,
0.06134033203125,
-0.03546142578125,
0.0256195068359375,
-0.032928466796875,
-0.033660888671875,
0.02392578125,
0.032806396484375,
0.012786865234375,
-0.0224609375,
0.01065826416015625,
-0.0021266937255859375,
-0.040435791015625,
0.0389404296875,
2.4974346160888672e-05,
-0.002788543701171875,
-0.0377197265625,
0.0504150390625,
-0.002712249755859375,
0.034027099609375,
0.0450439453125,
-0.042694091796875,
0.0386962890625,
0.0186004638671875,
-0.0015687942504882812,
0.00919342041015625,
-0.00567626953125,
0.0406494140625,
0.0215301513671875,
0.0457763671875,
0.018341064453125,
0.01474761962890625,
0.024017333984375,
-0.04095458984375,
0.0175018310546875,
-0.034393310546875,
0.0263824462890625,
-0.061279296875,
0.00616455078125,
-0.035308837890625,
0.033447265625,
0.0277099609375,
-0.039276123046875,
0.006107330322265625,
-0.05517578125,
-0.05255126953125,
-0.031890869140625,
0.038848876953125,
0.021636962890625,
-0.00147247314453125,
0.011322021484375,
0.044586181640625,
0.048736572265625,
0.0310821533203125,
-0.068603515625,
0.040252685546875,
0.0574951171875,
0.0191497802734375,
0.0061187744140625,
0.031707763671875,
-0.036041259765625,
-0.01186370849609375,
0.053314208984375,
0.04534912109375,
-0.032196044921875,
-0.04656982421875,
-0.0282745361328125,
0.031524658203125,
0.06524658203125,
0.0084228515625,
0.0362548828125,
-0.0267486572265625,
-0.0258331298828125,
-0.007762908935546875,
0.03057861328125,
-0.00653076171875,
0.00334930419921875,
0.04852294921875,
0.018402099609375,
-0.037109375,
0.01485443115234375,
0.0287628173828125,
0.035430908203125,
0.07904052734375,
0.017669677734375,
0.0027675628662109375,
-0.045166015625,
-0.00783538818359375,
0.049102783203125,
0.03173828125,
-0.0159912109375,
-0.046295166015625,
0.00852203369140625,
0.0164337158203125,
0.024658203125,
0.0306854248046875,
-0.00988006591796875,
-0.006744384765625,
-0.004116058349609375,
0.040679931640625,
0.0298004150390625,
-0.028167724609375,
-0.0161590576171875,
-0.026763916015625,
0.0190277099609375,
0.006805419921875,
-0.0251922607421875,
-0.0078277587890625,
0.040283203125,
0.040008544921875,
0.017913818359375,
0.00905609130859375,
-0.0145721435546875,
-0.0114288330078125,
0.0038356781005859375,
-0.0699462890625,
-0.022979736328125,
-0.02056884765625,
0.06280517578125,
0.055694580078125,
-0.00823974609375,
-0.0063323974609375,
-0.0182037353515625,
0.0811767578125,
0.00330352783203125,
0.04254150390625,
-0.000492095947265625,
-0.0177459716796875,
0.046173095703125,
-0.022216796875,
-0.0124969482421875,
-0.018646240234375,
-0.042694091796875,
0.0209503173828125,
0.0301361083984375,
0.0012454986572265625,
0.01337432861328125,
0.0205078125,
0.03448486328125,
0.06207275390625,
-0.00673675537109375,
0.0377197265625,
-0.0275421142578125,
0.062103271484375,
0.0024623870849609375,
0.0284576416015625,
0.038787841796875,
-0.0087432861328125,
-0.030426025390625,
0.050079345703125,
0.0389404296875,
0.06463623046875,
0.03759765625,
0.00421142578125,
0.006900787353515625,
0.027923583984375,
0.0389404296875,
0.0011463165283203125,
-0.017791748046875,
-0.00231170654296875,
0.0302276611328125,
0.0295257568359375,
-0.041351318359375,
0.038543701171875,
-0.04229736328125,
0.0262298583984375,
0.00801849365234375,
0.013702392578125,
-0.0303192138671875,
-0.0150909423828125,
-0.00652313232421875,
0.040130615234375,
-0.0009670257568359375,
0.0684814453125,
0.03948974609375,
-0.00634002685546875,
0.019622802734375,
0.02392578125,
0.012786865234375,
0.006008148193359375,
-0.055908203125,
-0.0267333984375,
0.0173187255859375,
0.037811279296875,
-0.072998046875,
-0.030975341796875,
-0.0030269622802734375,
-0.0198822021484375,
-0.003215789794921875,
0.0396728515625,
-0.046173095703125,
-0.033660888671875,
0.0404052734375,
-0.032257080078125,
-0.0225982666015625,
-0.00516510009765625,
0.00815582275390625,
0.034332275390625,
-0.006771087646484375,
0.00768280029296875,
-0.054656982421875,
-0.02581787109375,
-0.0194854736328125,
0.0098724365234375,
0.05865478515625,
0.0287017822265625,
0.033416748046875,
-0.035919189453125,
-0.0182952880859375,
0.01062774658203125,
-0.0198211669921875,
-0.035614013671875,
-0.035797119140625,
-0.033294677734375,
0.054718017578125,
0.045379638671875,
0.0169219970703125,
0.017852783203125,
0.0765380859375,
0.0275115966796875,
-0.00994110107421875,
0.0201263427734375,
-0.00785064697265625,
0.0269775390625,
0.0069427490234375,
0.01409912109375,
-0.052642822265625,
-0.0015716552734375,
0.057952880859375,
0.038360595703125,
-0.0035877227783203125,
-0.0433349609375,
-0.052581787109375,
0.01410675048828125,
0.007038116455078125,
-0.05987548828125,
-0.0188446044921875,
0.00673675537109375,
0.021759033203125,
-0.0181732177734375,
0.04644775390625,
-0.04522705078125,
-0.03076171875,
-0.0281829833984375,
0.0276641845703125,
0.01216888427734375,
0.0134124755859375,
0.0284881591796875,
0.03424072265625,
-0.002300262451171875,
0.030242919921875,
0.045013427734375,
0.03656005859375,
-0.038665771484375,
-0.0213623046875,
-0.053863525390625,
0.042083740234375,
-0.01861572265625,
-0.02447509765625,
-0.0474853515625,
0.0272674560546875,
0.0064697265625,
-0.00977325439453125,
0.006374359130859375,
0.029571533203125,
0.00907135009765625,
-0.02825927734375,
-0.043060302734375,
0.031494140625,
-0.02288818359375,
-0.01666259765625,
0.033050537109375,
0.0220794677734375,
-0.00640106201171875,
0.023773193359375,
0.019805908203125,
0.039276123046875,
0.0289306640625,
0.035064697265625,
0.00827789306640625,
0.00730133056640625,
0.01508331298828125,
-0.0172576904296875,
-0.004276275634765625,
-0.0498046875,
-0.006099700927734375,
-0.04736328125,
-0.01003265380859375,
-0.024505615234375,
-0.053680419921875,
-0.045318603515625,
-0.06390380859375,
0.045257568359375,
0.03228759765625,
-0.061309814453125,
0.0004429817199707031,
-0.055145263671875,
0.0249176025390625,
0.01788330078125,
0.0263671875,
0.0396728515625,
0.055694580078125,
-0.02471923828125,
0.04803466796875,
-0.0465087890625,
0.0279693603515625,
-0.01351165771484375,
-0.01702880859375,
-0.02215576171875,
-0.061248779296875,
-0.039764404296875,
0.044891357421875,
0.0494384765625,
-0.034271240234375,
-0.0279541015625,
-0.081298828125,
-0.0169219970703125,
0.0236968994140625,
0.0716552734375,
0.054901123046875,
0.0026683807373046875,
0.0208587646484375,
0.0004296302795410156,
0.00726318359375,
-0.07373046875,
0.03924560546875,
0.006923675537109375,
-0.01557159423828125,
-0.066162109375,
-0.01031494140625,
-0.0704345703125,
0.0091705322265625,
-0.052581787109375,
0.0027256011962890625,
0.005794525146484375,
0.0167999267578125,
-0.049224853515625,
-0.054595947265625,
0.0205841064453125,
0.050201416015625,
0.0175933837890625,
0.0047607421875,
0.0282440185546875,
-0.0206756591796875,
-0.039154052734375,
-0.08843994140625,
-0.05780029296875,
0.0379638671875,
0.059478759765625,
0.0921630859375,
0.005046844482421875,
-0.01146697998046875,
-0.046173095703125,
-0.007045745849609375,
0.0109710693359375,
-0.01229095458984375,
0.0281829833984375,
-0.06048583984375,
-0.047332763671875,
-0.0100555419921875,
-0.062408447265625,
0.0014276504516601562,
-0.040679931640625,
-0.02105712890625,
0.025634765625,
-0.005023956298828125,
0.050811767578125,
-0.056884765625,
-0.0184478759765625,
-0.0697021484375,
-0.004749298095703125,
0.04193115234375,
-0.0205841064453125,
-0.002696990966796875,
0.0028820037841796875,
0.023956298828125,
-0.0367431640625,
-0.002010345458984375,
0.0662841796875,
-0.04815673828125,
-0.060943603515625,
-0.038330078125,
-0.0220947265625,
0.03436279296875,
-0.0731201171875,
-0.01447296142578125,
0.0210113525390625,
-0.01605224609375,
0.06500244140625,
-0.036285400390625,
-0.043609619140625,
-0.014862060546875,
-0.0270538330078125,
-0.031402587890625,
0.01407623291015625,
0.078857421875,
0.05389404296875,
-0.0269012451171875,
-0.0428466796875,
0.050048828125,
0.04205322265625,
0.007556915283203125,
-0.00690460205078125,
-0.04052734375,
0.029266357421875,
-0.03521728515625,
0.01232147216796875,
-0.0477294921875,
-0.0033092498779296875,
0.015045166015625,
0.0076141357421875,
-0.02935791015625,
-0.029998779296875,
0.0179901123046875,
-0.0272674560546875,
0.048797607421875,
0.038604736328125,
-0.01024627685546875,
0.040008544921875,
-0.007541656494140625,
0.042083740234375,
-0.02996826171875,
-0.0161895751953125,
0.056884765625,
0.0083465576171875,
0.0002753734588623047,
-0.062744140625,
-0.07012939453125,
-0.03204345703125,
-0.02691650390625,
-0.05023193359375,
-0.041778564453125,
0.0250091552734375,
0.0175018310546875,
-0.024169921875,
0.03814697265625,
0.0038852691650390625,
0.0171966552734375,
0.004261016845703125,
-0.02508544921875,
-0.0343017578125,
0.004436492919921875,
-0.00849151611328125,
-0.0306549072265625,
0.0528564453125,
-0.01214599609375,
0.039794921875,
-0.048370361328125,
-0.0185394287109375,
0.06719970703125,
0.03961181640625,
0.08721923828125,
0.00887298583984375,
0.06842041015625,
-0.0030460357666015625,
0.01126861572265625,
-0.01180267333984375,
0.0289154052734375,
0.020660400390625,
-0.0012683868408203125,
0.0408935546875,
0.0020046234130859375,
0.03363037109375,
0.036102294921875,
-0.0092620849609375,
0.0286865234375,
-0.0501708984375,
0.006206512451171875,
-0.00921630859375,
0.01064300537109375,
-0.022857666015625,
0.069580078125,
-0.01242828369140625,
-0.057861328125,
0.0726318359375,
-0.03997802734375,
-0.0007381439208984375,
0.008819580078125,
-0.0030384063720703125,
-0.007579803466796875,
0.0264434814453125,
0.047454833984375,
0.0277099609375,
0.01447296142578125,
0.017852783203125,
0.07147216796875,
0.055328369140625,
-0.0048980712890625,
0.07135009765625,
-0.002971649169921875,
0.003833770751953125,
-0.0247650146484375,
0.01337432861328125,
-0.00902557373046875,
0.033416748046875,
0.055908203125,
0.03863525390625,
-0.0287322998046875,
0.0576171875,
-0.00604248046875,
-0.042083740234375,
-0.046722412109375,
0.042755126953125,
0.0193634033203125,
-0.058441162109375,
-0.0141754150390625,
-0.041107177734375,
-0.037322998046875,
0.0032482147216796875,
-0.0024566650390625,
-0.0013675689697265625,
-0.0149993896484375,
0.032623291015625,
0.00066375732421875,
0.00476837158203125,
-0.000782012939453125,
-0.04345703125,
0.00414276123046875,
-0.058502197265625,
0.0260467529296875,
0.045562744140625,
-0.0029582977294921875,
0.02398681640625,
0.00910186767578125,
0.049835205078125,
-0.0180511474609375,
0.032440185546875,
-0.051605224609375,
0.007183074951171875,
0.07049560546875,
0.07611083984375,
0.0031871795654296875,
0.0222320556640625,
0.07440185546875,
0.05340576171875,
0.0572509765625,
-0.053802490234375,
0.0323486328125,
0.031524658203125,
0.0931396484375,
-0.0264892578125,
-0.0270538330078125,
-0.0117950439453125,
0.016265869140625,
0.0096435546875,
0.0311737060546875,
0.01325225830078125,
-0.004680633544921875,
-0.0281219482421875,
0.020843505859375,
0.044219970703125,
0.068359375,
-0.01410675048828125,
-0.049591064453125,
0.028778076171875,
0.057281494140625,
-0.0105438232421875,
-0.0018024444580078125,
0.02593994140625,
0.062408447265625,
-0.00634002685546875,
0.0484619140625,
-0.0205230712890625,
0.036376953125,
0.0256805419921875,
0.063720703125,
0.0036449432373046875,
0.0105743408203125,
-0.005855560302734375,
0.056060791015625,
0.06561279296875,
-0.0011272430419921875,
0.0254058837890625,
-0.02239990234375,
0.03369140625,
0.057830810546875,
-0.0169677734375,
-0.047943115234375,
-0.033203125,
0.0196533203125,
-0.03472900390625,
0.03350830078125,
-0.042877197265625,
0.005756378173828125,
0.02825927734375,
-0.0010700225830078125,
0.001407623291015625,
-0.0212860107421875,
0.04193115234375,
0.043792724609375,
0.033111572265625,
-0.01043701171875,
-0.0007042884826660156,
-0.05224609375,
0.0439453125,
0.1143798828125,
0.044219970703125,
-0.058319091796875,
0.034149169921875,
0.07672119140625,
0.0240936279296875,
0.0030612945556640625,
0.0272369384765625,
0.004108428955078125,
0.06292724609375,
0.0024013519287109375,
0.007537841796875,
-0.03759765625,
0.033477783203125,
0.08795166015625,
-0.033355712890625,
0.01059722900390625,
-0.00243377685546875,
-0.022186279296875,
0.0191497802734375,
-0.0276031494140625,
-0.04150390625,
-0.0103759765625,
-0.005283355712890625,
0.0654296875,
0.0242919921875,
-0.0399169921875,
-0.01959228515625,
-0.05206298828125,
0.045654296875,
-0.0221710205078125,
0.07257080078125,
0.01163482666015625,
0.042388916015625,
-0.01418304443359375,
-0.0293731689453125,
0.01282501220703125,
-0.0250091552734375,
0.061676025390625,
-0.036041259765625,
0.0394287109375,
0.0036487579345703125,
0.016632080078125,
0.0684814453125,
0.0008978843688964844,
0.00814056396484375,
-0.05731201171875,
0.0240478515625,
-0.01502227783203125,
-0.0288848876953125,
-0.0155181884765625,
-0.0013103485107421875,
0.044769287109375,
0.0007009506225585938,
0.01422119140625,
-0.005268096923828125,
0.0203704833984375,
0.02227783203125,
-0.04461669921875,
0.031494140625,
0.00959014892578125,
0.046905517578125,
-0.05419921875,
-0.055816650390625,
0.046661376953125,
0.00572967529296875,
0.0665283203125,
0.01520538330078125,
-0.011627197265625,
0.05267333984375,
-0.042266845703125,
0.052825927734375,
-0.032012939453125,
-0.0242462158203125,
0.02984619140625,
0.011505126953125,
0.029571533203125,
0.055755615234375,
0.004138946533203125,
-0.0167388916015625,
0.0011377334594726562,
0.0305633544921875,
0.006374359130859375,
-0.0009360313415527344,
0.0115814208984375,
-0.049346923828125,
0.02703857421875,
0.052398681640625,
-0.01036834716796875,
0.035675048828125,
-0.04083251953125,
-0.01151275634765625,
-0.0179290771484375,
-0.00946807861328125,
-0.00803375244140625,
-0.030303955078125,
0.06524658203125,
0.0657958984375,
0.053466796875,
0.0611572265625,
-0.026519775390625,
-0.0139617919921875,
-0.0012569427490234375,
-0.053863525390625,
0.050994873046875,
0.0369873046875,
0.0236968994140625,
-0.0057830810546875,
-0.0325927734375,
-0.0019779205322265625,
-0.052825927734375,
-0.04901123046875,
-0.035186767578125,
-0.05767822265625,
0.022003173828125,
0.004703521728515625,
-0.05010986328125,
-0.028717041015625,
-0.01395416259765625,
0.054534912109375,
0.057373046875,
0.076416015625,
0.0384521484375,
0.01198577880859375,
0.06201171875,
0.1031494140625,
0.054473876953125,
0.026214599609375,
-0.06011962890625,
0.01009368896484375,
-0.031402587890625,
-0.007343292236328125,
-0.052459716796875,
-0.021270751953125,
0.002307891845703125,
-0.0104827880859375,
-0.05712890625,
-0.0196685791015625,
0.049835205078125,
0.011260986328125,
-0.053375244140625,
-0.038818359375,
0.033966064453125,
0.034149169921875,
0.02386474609375,
-0.03411865234375,
0.0009183883666992188,
0.032806396484375,
0.09185791015625,
0.07183837890625,
0.005702972412109375,
-0.051361083984375,
-0.034912109375,
0.03485107421875,
0.0518798828125,
-0.040557861328125,
0.03753662109375,
-0.018646240234375,
-0.054351806640625,
0.033050537109375,
-0.005207061767578125,
-0.048248291015625,
0.01512908935546875,
0.051483154296875,
0.03631591796875,
-0.0355224609375,
0.042633056640625,
0.043365478515625,
-0.040924072265625,
-0.01605224609375,
0.005931854248046875,
0.005184173583984375,
0.0181884765625,
-0.03076171875,
-0.059051513671875,
0.01232147216796875,
0.0078582763671875,
0.01244354248046875,
-0.04864501953125,
0.012359619140625,
-0.0418701171875,
-0.05206298828125,
-0.01079559326171875,
0.0028820037841796875,
0.017486572265625,
-0.0013227462768554688,
0.034698486328125,
-0.017120361328125,
-0.0164947509765625,
-0.0743408203125,
-0.051422119140625,
-0.0026226043701171875,
0.0229949951171875,
-0.00992584228515625,
-0.031585693359375,
0.048095703125,
-0.036468505859375,
-0.00013589859008789062,
-0.023529052734375,
0.0093536376953125,
0.052978515625,
0.07598876953125,
0.0097808837890625,
0.026885986328125,
0.05322265625,
0.0171661376953125,
0.037109375,
-0.01910400390625,
0.03546142578125,
-0.00838470458984375,
0.0298614501953125,
0.0478515625,
-0.036376953125,
-0.0235595703125,
-0.0204620361328125,
0.03619384765625,
-0.014007568359375,
0.052886962890625,
-0.042022705078125,
0.006103515625,
0.0037517547607421875,
0.017913818359375,
0.053741455078125,
0.0219879150390625,
0.01032257080078125,
0.060821533203125,
-0.0034465789794921875,
-0.032989501953125,
0.00955963134765625,
0.06256103515625,
0.0308380126953125,
0.043182373046875,
-0.00677490234375,
-0.05267333984375,
0.0374755859375,
-0.036285400390625,
0.0204925537109375,
0.0243377685546875,
0.050445556640625,
0.007038116455078125,
0.032379150390625,
-0.0205078125,
0.01273345947265625,
0.0771484375,
0.016845703125,
-0.03521728515625,
-0.047882080078125,
-0.016754150390625,
0.01702880859375,
-0.0560302734375,
-0.053924560546875,
0.0006747245788574219,
-0.053436279296875,
-0.021026611328125,
0.01425933837890625,
0.0195159912109375,
0.03485107421875,
0.037567138671875,
-0.03167724609375,
-0.0015859603881835938,
-0.01523590087890625,
0.044281005859375,
-0.032928466796875,
0.008636474609375,
0.0102996826171875,
-0.0215911865234375,
-0.010986328125,
0.017913818359375,
0.01221466064453125,
0.051788330078125,
0.020477294921875,
-0.00765228271484375,
0.003955841064453125,
-0.00653839111328125,
0.0021533966064453125,
-0.033447265625,
0.02142333984375,
0.0033321380615234375,
-0.0184783935546875,
0.05548095703125,
0.06341552734375,
0.030426025390625,
0.0230865478515625,
-0.038970947265625,
0.01300811767578125,
0.0797119140625,
0.0157318115234375,
0.04669189453125,
0.00940704345703125,
-0.005176544189453125,
-0.00916290283203125,
0.0046844482421875,
2.0563602447509766e-05,
0.005641937255859375,
0.005931854248046875,
0.020843505859375,
0.02813720703125,
0.04229736328125,
-0.041900634765625,
0.00896453857421875,
-0.00815582275390625,
0.0309295654296875,
-0.019805908203125,
0.0177001953125,
0.027191162109375,
0.025726318359375,
-0.0024585723876953125,
-0.01206207275390625,
0.01416015625,
0.00434112548828125,
0.01074981689453125,
-0.00795745849609375,
-0.00537872314453125,
-0.0113677978515625,
-0.060211181640625,
-0.0032520294189453125,
-0.0421142578125,
0.034759521484375,
-0.0005078315734863281,
-0.037994384765625,
-0.008636474609375,
-0.0030269622802734375,
-0.046356201171875,
-0.0621337890625,
-0.00861358642578125,
-0.03851318359375,
0.0076904296875,
-0.002422332763671875,
0.04168701171875,
0.0369873046875,
-0.006412506103515625,
0.10284423828125,
-0.02685546875,
0.06048583984375,
0.0156402587890625,
0.0258026123046875,
0.01654052734375,
0.0246429443359375,
-0.04052734375,
0.0309600830078125,
0.061279296875,
0.0193023681640625,
0.04278564453125,
0.0180511474609375,
-0.006610870361328125,
0.0044097900390625,
0.055328369140625,
0.0005168914794921875,
-0.06256103515625,
-0.01457977294921875,
-0.03363037109375,
-0.0265655517578125,
-0.0038890838623046875,
-0.048431396484375,
-0.031524658203125,
0.0010519027709960938,
0.0145263671875,
0.0290069580078125,
0.0631103515625,
-0.034393310546875,
0.046356201171875,
0.0726318359375,
0.015777587890625,
0.033905029296875,
0.03033447265625,
0.0229949951171875,
0.06951904296875,
-0.019500732421875,
-0.038360595703125,
-0.062347412109375,
-0.00665283203125,
0.0261383056640625,
0.0146636962890625,
0.0237579345703125,
0.0225982666015625,
0.003833770751953125,
0.041900634765625,
-0.030426025390625,
0.05377197265625,
0.0177459716796875,
0.04815673828125,
-0.0246734619140625,
0.0302276611328125,
-0.00988006591796875,
-0.0548095703125,
0.006591796875,
0.05316162109375,
-3.30805778503418e-05,
0.01175689697265625,
-0.044647216796875,
0.01247406005859375,
0.0460205078125,
0.044464111328125,
0.01239013671875,
-0.036834716796875,
-4.172325134277344e-06,
0.00313568115234375,
0.019500732421875,
0.023223876953125,
0.0198516845703125,
0.065673828125,
0.1114501953125,
-0.026947021484375,
-0.0132904052734375,
0.048187255859375,
0.07672119140625,
0.0280914306640625,
-0.0164031982421875,
-0.040313720703125,
0.04229736328125,
-0.0103759765625,
-0.01428985595703125,
0.0386962890625,
-0.0419921875,
0.004062652587890625,
0.035308837890625,
0.005329132080078125,
0.0223541259765625,
0.027984619140625,
-0.037689208984375,
-0.027984619140625,
-0.045654296875,
0.0246429443359375,
0.0061187744140625,
0.00399017333984375,
0.04571533203125,
0.037200927734375,
0.002044677734375,
-0.0560302734375,
-0.05401611328125,
0.0230560302734375,
0.055633544921875,
-0.007747650146484375,
-0.047210693359375,
0.06610107421875,
0.034271240234375,
-0.00902557373046875,
-0.03631591796875,
0.0105743408203125,
0.0241546630859375,
-0.0033397674560546875,
-0.0109710693359375,
0.03759765625,
0.0219573974609375,
-0.02685546875,
0.0247039794921875,
-0.0264129638671875,
0.0180206298828125,
-0.021270751953125,
0.0242462158203125,
-0.038330078125,
0.0030765533447265625,
-0.03289794921875,
-0.004150390625,
0.048187255859375,
0.027679443359375,
-0.035430908203125,
0.01885986328125,
0.050994873046875,
0.0191650390625,
-0.03875732421875,
0.00614166259765625,
-0.034912109375,
0.0167083740234375,
-0.00643157958984375,
0.024505615234375,
0.0006961822509765625,
0.047454833984375,
-0.01209259033203125,
0.0007390975952148438,
-0.045928955078125,
-0.041473388671875,
-0.0276947021484375,
-0.0188446044921875,
-0.0244903564453125,
0.022674560546875,
0.049224853515625,
-0.013946533203125,
0.0256195068359375,
0.0228271484375,
0.0186004638671875,
-0.01824951171875,
0.00226593017578125,
0.0467529296875,
-0.040863037109375,
0.0037822723388671875,
-0.0196075439453125,
0.03192138671875,
0.0119171142578125,
0.00928497314453125,
0.061126708984375,
-0.0106201171875,
0.041290283203125,
-0.0310821533203125,
-0.0255126953125,
-0.0220184326171875,
-0.02655029296875,
-0.0355224609375,
0.053558349609375,
0.0038051605224609375,
0.01561737060546875,
-0.041656494140625,
0.006015777587890625,
-0.0013370513916015625,
0.020263671875,
0.046722412109375,
-0.045562744140625,
0.01555633544921875,
-0.0236358642578125,
0.02410888671875,
0.0158843994140625,
-0.043304443359375,
-0.01065826416015625,
0.040496826171875,
0.0097503662109375,
-0.01424407958984375,
-0.020599365234375,
-0.0135955810546875,
0.01204681396484375,
-0.0179595947265625,
-0.0050201416015625,
-0.040313720703125,
-0.0165557861328125,
-0.078125,
-0.007965087890625,
0.0021800994873046875,
0.031280517578125,
0.06280517578125,
-0.012786865234375,
0.0189208984375,
-0.00665283203125,
0.03424072265625,
0.049163818359375,
0.00013828277587890625,
0.01531219482421875,
-0.05633544921875,
0.0428466796875,
0.0022449493408203125,
-0.0504150390625,
-0.0187835693359375,
0.0022487640380859375,
0.01035308837890625,
0.0227203369140625,
0.036895751953125,
0.042022705078125,
0.06781005859375,
0.0223846435546875,
-0.0010223388671875,
0.011566162109375,
-0.04290771484375,
0.007579803466796875,
0.0030231475830078125,
0.0163421630859375,
-0.040496826171875,
-0.0175628662109375,
-0.032745361328125,
-0.02203369140625,
0.037567138671875,
0.007213592529296875,
-0.006595611572265625,
0.037261962890625,
-0.017608642578125,
-0.00644683837890625,
-0.0264739990234375,
0.04974365234375,
-0.0295867919921875,
-0.026702880859375,
0.05712890625,
0.0301055908203125,
0.036895751953125,
0.037506103515625,
0.05267333984375,
-0.0134124755859375,
0.0504150390625,
0.00958251953125,
0.0811767578125,
0.032196044921875,
-0.0195465087890625,
0.032379150390625,
-0.013916015625,
0.0142059326171875,
0.040130615234375,
0.0023555755615234375,
-0.0467529296875,
0.004978179931640625,
-0.0036220550537109375,
-0.053375244140625,
-0.01018524169921875,
-0.059417724609375,
0.00888824462890625,
-0.006145477294921875,
-0.0125274658203125,
-0.00597381591796875,
-0.0084381103515625,
0.00774383544921875,
-0.02606201171875,
0.0160064697265625,
0.01349639892578125,
-0.060272216796875,
0.033782958984375,
-0.0204315185546875,
-0.057586669921875,
-0.0073394775390625,
0.0002944469451904297,
0.05914306640625,
-0.0004324913024902344,
0.02484130859375,
-0.0212249755859375,
-0.00589752197265625,
0.051788330078125,
-0.0274658203125,
-0.00539398193359375,
-0.0290985107421875,
-0.05194091796875,
-0.017120361328125,
-0.0016202926635742188,
0.0170440673828125,
-0.029510498046875,
-0.0207672119140625,
0.05181884765625,
0.03704833984375,
0.0295867919921875,
-0.0479736328125,
-0.032440185546875,
-0.0134735107421875,
0.040802001953125,
0.003322601318359375,
0.009552001953125,
0.039947509765625,
0.0098114013671875,
-0.0156402587890625,
0.035797119140625,
-0.0048065185546875,
0.06878662109375,
0.039825439453125,
-0.03863525390625,
0.0033359527587890625,
0.041229248046875,
-0.04339599609375,
-0.0020236968994140625,
0.038604736328125,
-0.0283203125,
0.0203094482421875,
0.04632568359375,
-0.0229949951171875,
0.03375244140625,
0.025238037109375,
-0.0211944580078125,
0.01456451416015625,
0.07525634765625,
0.0736083984375,
0.027435302734375,
0.042755126953125,
0.0494384765625,
-0.0100860595703125,
-0.051666259765625,
-0.0037631988525390625,
0.0235443115234375,
-0.040313720703125,
0.0008883476257324219,
-0.00136566162109375,
-0.030303955078125,
-0.055450439453125,
0.0253448486328125,
-0.0180816650390625,
-0.0245819091796875,
-0.0234375,
0.0020694732666015625,
0.0299835205078125,
0.049560546875,
0.0281829833984375,
-0.071044921875,
-0.0223846435546875,
0.0296630859375,
0.06121826171875,
-0.037689208984375,
0.0330810546875,
0.040679931640625,
0.01546478271484375,
-0.049072265625,
-0.061859130859375,
-0.0250701904296875,
-0.0225067138671875,
-0.0165252685546875,
0.018310546875,
0.022247314453125,
-0.005413055419921875,
0.0283050537109375,
0.016326904296875,
0.0070037841796875,
-0.03802490234375,
0.01168060302734375,
-0.00716400146484375,
-0.03961181640625,
-0.040618896484375,
-0.049713134765625,
-0.03369140625,
-0.01293182373046875,
0.038299560546875,
0.0187225341796875,
-0.018768310546875,
-0.060821533203125,
0.042633056640625,
-0.033111572265625,
0.037109375,
-0.032501220703125,
0.00616455078125,
-0.0091705322265625,
0.0186004638671875,
0.0184478759765625,
-0.046875,
0.00051116943359375,
0.01116180419921875,
-0.041473388671875,
-0.038909912109375,
-0.05316162109375,
0.0113525390625,
-0.0210113525390625,
-0.022491455078125,
0.038238525390625,
-0.040924072265625,
0.03759765625,
-0.0227508544921875,
0.0438232421875,
0.002231597900390625,
-0.0241241455078125,
-0.0301361083984375,
0.0557861328125,
-0.007038116455078125,
-0.027252197265625,
0.006256103515625,
0.02978515625,
0.03021240234375,
-0.02978515625,
-0.055389404296875,
-0.039031982421875,
0.01396942138671875,
0.0027179718017578125,
-0.044586181640625,
-0.0362548828125,
0.056121826171875,
-0.0051422119140625,
0.0273284912109375,
0.0122222900390625,
0.0013637542724609375,
-0.06475830078125,
-0.0472412109375,
-0.03582763671875,
0.013153076171875,
-0.00975799560546875,
-0.040679931640625,
-0.05596923828125,
0.038604736328125,
-0.047698974609375,
0.004932403564453125,
-0.0280303955078125,
-0.008270263671875,
0.0204925537109375,
0.022491455078125,
-0.03424072265625,
0.029754638671875,
-0.01403045654296875,
0.02642822265625,
0.0143585205078125,
0.031768798828125,
0.044281005859375,
0.00970458984375,
0.044677734375,
-0.0088958740234375,
0.0247039794921875,
0.026519775390625,
-0.0263671875,
0.01551055908203125,
-0.020721435546875,
0.00818634033203125,
-0.0058746337890625,
0.0034465789794921875,
0.010284423828125,
0.030426025390625,
0.060333251953125,
0.050567626953125,
-0.01122283935546875,
-0.006504058837890625,
-0.04571533203125,
-0.0137176513671875,
0.0205535888671875,
0.023529052734375,
0.018524169921875,
-0.0250244140625,
0.01446533203125,
-0.047515869140625,
-0.0185546875,
0.0302581787109375,
-0.04681396484375,
-0.0174560546875,
0.018585205078125,
-0.0057525634765625,
0.024566650390625,
0.046966552734375,
0.02447509765625,
0.0015726089477539062,
-0.022125244140625,
-0.006916046142578125,
0.0067596435546875,
-0.00789642333984375,
-0.016693115234375,
0.06561279296875,
0.0416259765625,
0.033355712890625,
-0.050567626953125,
0.016754150390625,
0.04052734375,
-0.035980224609375,
-0.051116943359375,
-0.005687713623046875,
-0.001003265380859375,
-0.045989990234375,
0.035614013671875,
0.0308074951171875,
0.01338958740234375,
-0.01251220703125,
0.015960693359375,
-0.0177154541015625,
-0.0226593017578125,
0.0265045166015625,
0.002399444580078125,
-0.042236328125,
0.04962158203125,
0.060546875,
-0.01189422607421875,
0.032989501953125,
-0.045074462890625,
-0.03570556640625,
-0.05877685546875,
-0.0347900390625,
0.0076751708984375,
0.055999755859375,
-0.006916046142578125,
0.0204620361328125,
0.007366180419921875,
0.0033416748046875,
-0.018280029296875,
0.01506805419921875,
0.01119232177734375,
0.02740478515625,
0.05322265625,
0.01039886474609375,
-0.056671142578125,
-0.0239410400390625,
-0.018524169921875,
0.003849029541015625,
0.042694091796875,
0.0418701171875,
0.0411376953125,
0.0064239501953125,
-0.047943115234375,
-0.0027599334716796875,
-0.021697998046875,
0.0391845703125,
-0.039520263671875,
-0.04827880859375,
-0.01177215576171875,
0.0254669189453125,
-0.01025390625,
0.01056671142578125,
0.041015625,
-0.01042938232421875,
0.0206146240234375,
0.006641387939453125,
0.03546142578125,
-0.020263671875,
0.05224609375,
-0.0200347900390625,
0.030670166015625,
-0.0083160400390625,
-0.041351318359375,
-0.01837158203125,
0.036529541015625,
-0.045166015625,
-0.007434844970703125,
-0.0301513671875,
-0.028472900390625,
0.03802490234375,
-0.01300811767578125,
0.06402587890625,
0.006000518798828125,
0.03839111328125,
0.0261077880859375,
0.0255584716796875,
-0.0045928955078125,
-0.0401611328125,
-0.0289764404296875,
0.043792724609375,
0.0306854248046875,
0.03936767578125,
-0.0191497802734375,
0.037109375,
0.009918212890625,
0.0190277099609375,
0.018798828125,
0.0198974609375,
-0.025115966796875,
-0.01399993896484375,
0.0175018310546875,
0.02630615234375,
0.0066986083984375,
0.016357421875,
-0.0112457275390625,
-0.035430908203125,
-0.0171356201171875,
0.0185699462890625,
-0.0421142578125,
0.040557861328125,
-0.0231475830078125,
-0.053741455078125,
0.0169525146484375,
0.0548095703125,
-0.004375457763671875,
0.04486083984375,
0.022918701171875,
0.023193359375,
0.07269287109375,
0.033355712890625,
0.004062652587890625,
0.004734039306640625,
0.022918701171875,
0.035186767578125,
0.0269622802734375,
0.0023479461669921875,
0.032958984375,
-0.03173828125,
0.004077911376953125,
0.034820556640625,
-0.00923919677734375,
-0.044525146484375,
0.037506103515625,
-0.050384521484375,
0.028564453125,
-0.0294036865234375,
0.033416748046875,
-0.051422119140625,
-0.018310546875,
0.0105438232421875,
-0.0287322998046875,
0.0443115234375,
0.032806396484375,
-0.030120849609375,
-0.001491546630859375,
-0.01468658447265625,
-0.0401611328125,
0.0282135009765625,
-0.0133209228515625,
-0.023193359375,
-0.01385498046875,
-0.0262603759765625,
-0.0165252685546875,
0.041168212890625,
-0.01503753662109375,
0.03228759765625,
0.0286712646484375,
0.0369873046875,
-0.0262298583984375,
0.017974853515625,
-0.050506591796875,
-0.03485107421875,
0.0006151199340820312,
0.01119232177734375,
0.01412200927734375,
-0.01324462890625,
-0.041290283203125,
0.0214080810546875,
-0.00823974609375,
-0.037353515625,
-0.005054473876953125,
-0.035003662109375,
-0.0130767822265625,
0.01153564453125,
-0.0236663818359375,
0.0088958740234375,
-0.037689208984375,
-0.006259918212890625,
0.0467529296875,
0.042755126953125,
-0.030609130859375,
-0.05059814453125,
0.0291748046875,
-0.01375579833984375,
-0.021484375,
0.0085296630859375,
-0.029510498046875,
0.02606201171875,
0.02410888671875,
0.03680419921875,
-0.0450439453125,
-0.0296478271484375,
0.032012939453125,
-0.0223846435546875,
0.00870513916015625,
0.037200927734375,
-0.005138397216796875,
-0.0291595458984375,
-0.0068511962890625,
0.045562744140625,
0.0262451171875,
-0.0283203125,
0.00612640380859375,
-0.0438232421875,
0.00616455078125,
0.041778564453125,
0.03863525390625,
-0.0194244384765625,
0.0321044921875,
-0.032440185546875,
-0.008331298828125,
-0.00948333740234375,
0.032501220703125,
-0.0380859375,
0.026458740234375,
0.032196044921875,
-0.03173828125,
-0.01226043701171875,
-0.0262603759765625,
-0.0289764404296875,
-0.023468017578125,
0.039642333984375,
0.003772735595703125,
0.0294342041015625,
-0.030426025390625,
0.0235748291015625,
0.02032470703125,
-0.0262908935546875,
-0.0272064208984375,
-0.0301971435546875,
-0.02484130859375,
-0.012908935546875,
0.0246124267578125,
-0.0259246826171875,
-0.0255279541015625,
-0.005615234375,
0.0249176025390625,
0.02960205078125,
0.04095458984375,
-0.029876708984375,
0.0164031982421875,
-0.0255584716796875,
-0.0225372314453125,
0.047027587890625,
-0.01715087890625,
-0.00376129150390625,
0.0036334991455078125,
-0.036407470703125,
0.034027099609375,
0.00380706787109375,
-0.01204681396484375,
0.0025882720947265625,
0.01500701904296875,
-0.0172882080078125,
-0.044586181640625,
0.00122833251953125,
-0.03900146484375,
0.0225982666015625,
-0.01953125,
0.043701171875,
0.00848388671875,
0.0168914794921875,
0.0029144287109375,
0.00872039794921875,
-0.048126220703125,
-0.05255126953125,
-0.043243408203125,
-0.03497314453125,
-0.02850341796875,
0.032684326171875,
-0.020172119140625,
0.0219268798828125,
0.00013756752014160156,
0.0264739990234375,
0.0279083251953125,
-0.0297088623046875,
-0.0181121826171875,
-0.045806884765625,
0.00605010986328125,
0.0428466796875,
-0.0216522216796875,
-0.0428466796875,
0.01953125,
0.02935791015625,
-0.03729248046875,
-0.0199432373046875,
0.020172119140625,
-0.018798828125,
-0.0010633468627929688,
-0.04296875,
-0.01088714599609375,
0.007160186767578125,
0.028289794921875,
0.0159149169921875,
0.0231475830078125,
-0.0300140380859375,
-0.00423431396484375,
-0.04754638671875,
0.0077667236328125,
0.01061248779296875,
-0.04913330078125,
0.0014295578002929688,
-0.021636962890625,
-0.041259765625,
0.0136871337890625,
-0.025421142578125,
0.01099395751953125,
-0.02587890625,
0.00458526611328125,
-0.026153564453125,
-0.0095062255859375,
0.036590576171875,
-0.0252227783203125,
-0.033843994140625,
-0.031402587890625,
-0.037445068359375,
-0.00771331787109375,
-0.03912353515625,
-0.0335693359375,
0.0154876708984375,
-0.0231475830078125,
0.0297393798828125,
0.01494598388671875,
0.01503753662109375,
-0.0081939697265625,
-0.045379638671875,
-0.040435791015625,
0.01000213623046875,
-0.03399658203125,
-0.0172119140625,
-0.021270751953125,
-0.0031757354736328125,
0.00519561767578125,
-0.044769287109375,
0.01219940185546875,
0.0081939697265625,
-0.00916290283203125,
0.024078369140625,
-0.03448486328125,
0.0157928466796875,
0.045501708984375,
-0.041595458984375,
0.028656005859375,
0.0318603515625,
-0.0015172958374023438,
0.006183624267578125,
-0.034423828125,
-0.0246429443359375,
0.0017118453979492188,
-0.00885772705078125,
-0.004451751708984375,
0.025604248046875,
-0.002033233642578125,
-0.036041259765625,
0.0148468017578125,
-0.033966064453125,
0.046539306640625,
-0.04888916015625,
0.048248291015625,
-0.019317626953125,
0.0148773193359375,
0.030914306640625,
0.018707275390625,
0.03619384765625,
0.01108551025390625,
0.048187255859375,
0.01788330078125,
-0.0186004638671875,
-0.036773681640625,
-0.0196075439453125,
-0.0364990234375,
-0.02587890625,
0.0242156982421875,
-0.04095458984375,
0.04486083984375,
-0.032989501953125,
-0.005298614501953125,
-0.0068206787109375,
-0.03192138671875,
-0.04180908203125,
3.325939178466797e-05,
-0.0086669921875,
-0.025909423828125,
-0.052337646484375,
-0.007587432861328125,
0.0192108154296875,
0.033538818359375,
0.0175323486328125,
0.0294952392578125,
-0.048980712890625,
-0.01959228515625,
-0.0223541259765625,
0.0218048095703125,
0.0094146728515625,
0.0175018310546875,
-0.044891357421875,
-0.043853759765625,
-0.00403594970703125,
0.0148162841796875,
0.024566650390625,
-0.047637939453125,
-0.0209503173828125,
0.034637451171875,
-0.021087646484375,
-0.01499176025390625,
-0.0208892822265625,
0.0165863037109375,
-0.0489501953125,
0.015411376953125,
0.006195068359375,
-0.046356201171875,
-0.00859832763671875,
0.034423828125,
0.030242919921875,
-0.050506591796875,
0.0174713134765625,
-0.018707275390625,
0.01141357421875,
-0.02313232421875,
0.0239105224609375,
-0.008392333984375,
0.0232391357421875,
-0.005847930908203125,
-0.00476837158203125,
0.01398468017578125,
0.033294677734375,
0.0282440185546875,
-0.04058837890625,
-0.00975799560546875,
-0.033538818359375,
-0.048248291015625,
-0.0311431884765625,
-0.049713134765625,
0.02764892578125,
-0.02325439453125,
-0.04278564453125,
0.0178680419921875,
-0.022064208984375,
-0.02154541015625,
-0.022796630859375,
-0.0228729248046875,
0.003612518310546875,
0.0355224609375,
-0.0211334228515625,
-0.005916595458984375,
0.01314544677734375,
0.0157470703125,
0.030731201171875,
-0.01580810546875,
-0.0438232421875,
-0.0477294921875,
-0.03570556640625,
-0.005374908447265625,
-0.001861572265625,
-0.0164947509765625,
-0.00998687744140625,
-0.0187835693359375,
0.005481719970703125,
-0.036041259765625,
-0.0185394287109375,
-0.036285400390625,
0.015716552734375,
0.036956787109375,
0.019927978515625,
0.0186767578125,
-0.0018863677978515625,
0.004978179931640625,
0.035797119140625,
0.030487060546875,
-0.03594970703125,
0.0307464599609375,
-0.0198974609375,
0.006099700927734375,
-0.03033447265625,
-0.042938232421875,
-0.01557159423828125,
-0.025238037109375,
-0.038543701171875,
-0.0259552001953125,
-0.0030879974365234375,
0.027130126953125,
0.0303802490234375,
-0.00975799560546875,
0.005954742431640625,
0.01107025146484375,
-0.00911712646484375,
0.0204010009765625,
0.037933349609375,
-0.023590087890625,
0.046142578125,
-0.0049591064453125,
0.034820556640625,
0.0103302001953125,
-0.0159149169921875,
0.028594970703125,
-0.032501220703125,
-0.0107574462890625,
0.0411376953125,
0.02294921875,
0.04833984375,
0.03289794921875,
-0.0135955810546875,
0.0009441375732421875,
-0.0261383056640625,
0.032958984375,
-0.018524169921875,
-0.040283203125,
-0.047027587890625,
-0.01385498046875,
0.00823974609375,
-0.01495361328125,
0.04376220703125,
0.031951904296875,
0.04840087890625,
-0.0347900390625,
0.0157623291015625,
0.035003662109375,
0.0247650146484375,
0.0271148681640625,
0.035858154296875,
-0.0304412841796875,
-0.0064544677734375,
-0.0297088623046875,
-0.014404296875,
-0.024993896484375,
0.0210113525390625,
0.0396728515625,
0.0303192138671875,
0.044952392578125,
0.0228729248046875,
-0.0418701171875,
-0.03271484375,
0.01019287109375,
0.00469207763671875,
-0.00803375244140625,
0.014617919921875,
-0.026611328125,
-0.0178985595703125,
0.032073974609375,
0.013153076171875,
-0.0204010009765625,
0.038360595703125,
-0.0255889892578125,
0.0233917236328125,
-0.04071044921875,
0.040496826171875,
0.049407958984375,
-0.0020275115966796875,
-0.032440185546875,
-0.003265380859375,
-0.033111572265625,
-0.027130126953125,
0.0303955078125,
0.029937744140625,
-0.044464111328125,
-0.028594970703125,
-0.03546142578125,
0.037078857421875,
0.01702880859375,
0.026153564453125,
0.039581298828125,
-0.046539306640625,
0.003108978271484375,
-0.029510498046875,
-0.0106658935546875,
-0.047454833984375,
-0.0037403106689453125,
-0.037109375,
0.02593994140625,
-0.045806884765625,
0.04730224609375,
0.016998291015625,
-0.0187530517578125,
0.0301666259765625,
-0.0288848876953125,
-0.045166015625,
-0.0145721435546875,
-0.036712646484375,
0.0361328125,
-0.024993896484375,
0.0089569091796875,
-0.0185699462890625,
0.02276611328125,
0.01361083984375,
0.0185089111328125,
0.03564453125,
-0.0210418701171875,
-0.025146484375,
0.047515869140625,
-0.0174560546875,
0.0308685302734375,
0.0083465576171875,
0.01922607421875,
0.00775146484375,
0.0252685546875,
-0.0107879638671875,
-0.044830322265625,
0.034698486328125,
-0.044647216796875,
0.0242767333984375,
0.000835418701171875,
-0.0117034912109375,
-0.020233154296875,
-0.0343017578125,
0.047393798828125,
-0.017791748046875,
0.0129241943359375,
-0.0006737709045410156,
0.03997802734375,
-0.01898193359375,
0.0072479248046875,
0.01444244384765625,
-0.01361846923828125,
0.036376953125,
0.0382080078125,
0.0020694732666015625,
-0.01052093505859375,
-0.04339599609375,
0.035919189453125,
0.0182647705078125,
0.01325225830078125,
-0.028900146484375,
0.0005388259887695312,
-0.0281829833984375,
0.046661376953125,
0.0106964111328125,
0.03521728515625,
0.004451751708984375,
0.033721923828125,
0.03369140625,
-0.042755126953125,
-0.0238800048828125,
-0.049560546875,
0.0308074951171875,
-0.0426025390625,
0.0135498046875,
-0.038665771484375,
-0.02581787109375,
0.03350830078125,
0.0499267578125,
0.04107666015625,
0.036224365234375,
-0.002613067626953125,
-0.0032138824462890625,
0.03839111328125,
0.021575927734375,
-0.043365478515625,
-0.0030651092529296875,
-0.029388427734375,
0.02099609375,
0.023590087890625,
0.0108642578125,
0.0029144287109375,
-0.027374267578125,
-0.044769287109375,
0.0209808349609375,
0.048675537109375,
0.04376220703125,
-0.025970458984375,
0.01384735107421875,
0.025634765625,
0.007015228271484375,
-0.03558349609375,
-0.04888916015625,
-0.01395416259765625,
0.01678466796875,
-0.0343017578125,
0.0257720947265625,
0.03155517578125,
0.03912353515625,
-0.0455322265625,
0.0220184326171875,
-0.0258941650390625,
-0.005962371826171875,
0.044830322265625,
-0.00902557373046875,
-0.0217742919921875,
0.038970947265625,
0.0194854736328125,
-0.0147552490234375,
-0.049285888671875,
0.00017547607421875,
-0.0301361083984375,
-0.0213165283203125,
-0.0496826171875,
0.004100799560546875,
-0.0305023193359375,
0.01218414306640625,
-0.0005273818969726562,
0.047027587890625,
0.002338409423828125,
-0.034454345703125,
0.04296875,
0.0121307373046875,
-0.0126800537109375,
0.041961669921875,
0.00724029541015625,
-0.034759521484375,
-0.032958984375,
0.03021240234375,
-0.0007328987121582031,
0.04754638671875,
-0.01506805419921875,
-0.001903533935546875,
0.03619384765625,
-0.01605224609375,
-0.0093994140625,
0.003215789794921875,
-0.006206512451171875,
-0.0021991729736328125,
-0.036041259765625,
-0.00937652587890625,
-0.0286102294921875,
0.01708984375,
-0.00981903076171875,
0.035614013671875,
-0.0157623291015625,
-0.03228759765625,
0.02081298828125,
0.03338623046875,
0.037261962890625,
0.04693603515625,
-0.01593017578125,
-0.047607421875,
-0.026336669921875,
-0.035736083984375,
0.0092620849609375,
0.0214385986328125,
-0.036163330078125,
0.0221405029296875,
0.039886474609375,
-0.033233642578125,
0.00405120849609375,
-0.0174713134765625,
0.013458251953125,
-0.01617431640625,
-0.032806396484375,
-0.023193359375,
0.01326751708984375,
-0.01058197021484375,
0.00848388671875,
-0.040679931640625,
-0.03668212890625,
0.0096588134765625,
-0.034698486328125,
0.032318115234375,
-0.007495880126953125,
-0.01495361328125,
-0.0010967254638671875,
0.0242156982421875,
-0.0226287841796875,
0.0026531219482421875,
0.019622802734375,
-0.046844482421875,
-0.02606201171875,
0.01061248779296875,
-0.00814056396484375,
-0.035736083984375,
-0.01427459716796875,
0.0309295654296875,
0.0301055908203125,
-0.00736236572265625,
0.048583984375,
-0.0377197265625,
0.0290374755859375,
-0.0299530029296875,
-0.005527496337890625,
0.006542205810546875,
-0.01641845703125,
-0.024078369140625,
-0.03863525390625,
0.04266357421875,
-0.03729248046875,
-0.032196044921875,
-0.024200439453125,
-0.024383544921875,
-0.0012617111206054688,
0.010589599609375,
0.0218353271484375,
0.022796630859375,
-0.03173828125,
-0.01499176025390625,
0.028472900390625,
0.017822265625,
-0.031036376953125,
-0.018798828125,
-0.026397705078125,
0.0081939697265625,
-0.0250396728515625,
0.04949951171875,
0.01045989990234375,
-0.03143310546875,
-0.005001068115234375,
-0.0273590087890625,
0.042144775390625,
-0.04974365234375,
0.00919342041015625,
0.03192138671875,
0.00858306884765625,
0.011199951171875,
0.02294921875,
-0.01580810546875,
-0.00882720947265625,
-0.0160675048828125,
-0.045806884765625,
0.0022869110107421875,
0.02984619140625,
0.00472259521484375,
-0.01273345947265625,
-0.038238525390625,
0.0026187896728515625,
0.005840301513671875,
-0.048187255859375,
-0.0101776123046875,
0.0210113525390625,
-0.0275115966796875,
-0.01480865478515625,
-0.02032470703125,
-0.03436279296875,
-0.0267181396484375,
-0.0219268798828125,
0.019927978515625,
-0.0482177734375,
0.0017900466918945312,
0.0271759033203125,
-0.046783447265625,
-0.028961181640625,
0.034027099609375,
0.0018453598022460938,
-0.02099609375,
0.035888671875,
-0.0060272216796875,
-0.044525146484375,
0.013458251953125,
-0.028717041015625,
-0.0281219482421875,
0.019805908203125,
0.0025272369384765625,
-0.0272064208984375,
0.00496673583984375,
0.019561767578125,
-0.019378662109375,
-0.005451202392578125,
0.029815673828125,
-0.01483917236328125,
-0.049957275390625,
-0.0193023681640625,
0.0184478759765625,
-0.0325927734375,
0.007396697998046875,
-0.041961669921875,
0.039306640625,
-0.039306640625,
0.00664520263671875,
0.01126861572265625,
-0.01348114013671875,
-0.046661376953125,
0.000579833984375,
0.00470733642578125,
-0.005222320556640625,
0.04217529296875,
0.0302581787109375,
0.0178070068359375,
-0.044769287109375,
0.0343017578125,
-0.00811767578125,
-0.0180511474609375,
0.0228729248046875,
0.03265380859375,
-0.02325439453125,
0.00643157958984375,
-0.0158538818359375,
-0.0283203125,
0.016632080078125,
-0.0204010009765625,
-0.02532958984375,
-0.03570556640625,
-0.035614013671875,
0.0011577606201171875,
-0.025146484375,
-0.02850341796875,
0.0244598388671875,
-0.0012989044189453125,
-0.0210723876953125,
0.0194244384765625,
0.0205078125,
0.0228118896484375,
-0.0263519287109375,
-0.0175018310546875,
-0.0237579345703125,
0.03973388671875,
0.0016889572143554688,
-0.0259552001953125,
-0.01290130615234375,
-0.043365478515625,
-0.0270538330078125,
-0.004207611083984375,
0.049072265625,
0.0028133392333984375,
-0.0190277099609375,
0.013397216796875,
-0.02496337890625,
0.03363037109375,
-0.01190185546875,
0.030670166015625,
0.040191650390625,
0.0086822509765625,
-0.0254364013671875,
-0.044830322265625,
-0.018402099609375,
-0.0426025390625,
-1.2576580047607422e-05,
0.0452880859375,
-0.00771331787109375,
0.007114410400390625,
-0.0117034912109375,
-0.0455322265625,
0.0206756591796875,
0.047210693359375,
-0.019561767578125,
-0.00269317626953125,
0.01953125,
0.048248291015625,
0.01233673095703125,
0.053009033203125,
0.044464111328125,
-0.0272369384765625,
0.00489044189453125,
-0.0355224609375,
-0.045745849609375,
-0.04339599609375,
0.0096588134765625,
0.048431396484375,
-0.0145721435546875,
-0.052093505859375,
-0.0748291015625,
-0.047332763671875,
0.042022705078125,
0.053558349609375,
-0.043914794921875,
0.0182342529296875,
0.00882720947265625,
-0.003833770751953125,
-0.0457763671875,
-0.0330810546875,
-0.02301025390625,
0.078125,
-0.0269012451171875,
0.022857666015625,
-0.018585205078125,
-0.02642822265625,
-0.040374755859375,
-0.028228759765625,
0.0167694091796875,
-0.0200042724609375,
-0.003551483154296875,
0.008758544921875,
-0.0208587646484375,
-0.049530029296875,
-0.0276031494140625,
-0.040130615234375,
-0.061065673828125,
-0.018890380859375,
0.02569580078125,
-0.040069580078125,
-0.051422119140625,
-0.07257080078125,
0.03399658203125,
-0.003276824951171875,
-0.03741455078125,
0.015838623046875,
-0.005840301513671875,
-0.0230712890625,
-0.040618896484375,
-0.02801513671875,
-0.053924560546875,
0.0068206787109375,
0.0367431640625,
-0.0574951171875,
-0.006488800048828125,
-0.02777099609375,
0.0236358642578125,
-0.054962158203125,
0.000728607177734375,
-0.01153564453125,
0.06890869140625,
0.0279541015625,
-0.041168212890625,
-0.03070068359375,
-0.00412750244140625,
-0.027252197265625,
-0.055450439453125,
-0.007411956787109375,
-0.042327880859375,
0.00982666015625,
0.046417236328125,
0.0347900390625,
0.07281494140625,
0.068603515625,
-0.04547119140625,
-0.0277862548828125,
0.06414794921875,
0.06634521484375,
-0.0144195556640625,
-0.042327880859375,
-0.033935546875,
-0.002376556396484375,
-0.04052734375,
-0.02398681640625,
0.00894927978515625,
0.056884765625,
-0.031280517578125,
-0.056243896484375,
0.0038890838623046875,
0.045196533203125,
0.03411865234375,
0.025360107421875,
0.005962371826171875,
-0.053863525390625,
-0.039764404296875,
0.033782958984375,
0.0024280548095703125,
0.07232666015625,
0.00513458251953125,
0.034698486328125,
0.0254669189453125,
-0.031219482421875,
0.0189056396484375,
-0.0305328369140625,
-0.036712646484375,
-0.05047607421875,
-0.0198974609375,
-0.0153350830078125,
-0.0312042236328125,
-0.037384033203125,
-0.058929443359375,
-0.01253509521484375,
0.0328369140625,
0.03912353515625,
-0.0097198486328125,
-0.024322509765625,
0.04656982421875,
-0.00279998779296875,
0.052764892578125,
0.012542724609375,
0.056427001953125,
0.00699615478515625,
-0.0206146240234375,
-0.06488037109375,
-0.0033092498779296875,
-0.0303802490234375,
0.04095458984375,
-0.032989501953125,
0.058258056640625,
0.0185699462890625,
-0.0148468017578125,
-0.02838134765625,
-0.034149169921875,
0.0472412109375,
0.0118865966796875,
-0.0114593505859375,
0.056304931640625,
-0.0207672119140625,
-0.0721435546875,
0.046875,
0.062042236328125,
0.0311279296875,
-0.0002987384796142578,
-0.048370361328125,
-0.00948333740234375,
-0.006374359130859375,
-0.047332763671875,
-0.03594970703125,
0.0343017578125,
-0.020660400390625,
0.01360321044921875,
-0.01029205322265625,
0.0154266357421875,
-0.0232391357421875,
0.00534820556640625,
-0.034820556640625,
0.0218505859375,
0.0260772705078125,
-0.00099945068359375,
0.0728759765625,
-0.0003399848937988281,
0.014373779296875,
0.038909912109375,
0.0188751220703125,
0.052764892578125,
0.06439208984375,
0.00579071044921875,
-0.0423583984375,
-0.026031494140625,
0.0142974853515625,
0.0164947509765625,
0.001720428466796875,
0.0223541259765625,
-0.0303497314453125,
-0.02130126953125,
-0.036346435546875,
-0.022613525390625,
-0.04583740234375,
0.0174560546875,
0.0009617805480957031,
-0.036468505859375,
0.01479339599609375,
0.022979736328125,
0.0290069580078125,
0.060028076171875,
0.05828857421875,
-0.0273895263671875,
0.034423828125,
-0.0430908203125,
-0.0290985107421875,
0.03253173828125,
-0.00246429443359375,
-0.0120697021484375,
0.0296478271484375,
-0.0142669677734375,
0.015045166015625,
-0.056884765625,
-0.002010345458984375,
-0.005535125732421875,
-0.044952392578125,
-0.008636474609375,
-0.0609130859375,
0.03607177734375,
0.06396484375,
0.038787841796875,
-0.07684326171875,
0.025726318359375,
0.056884765625,
0.07080078125,
-0.0028533935546875,
0.01145172119140625,
-0.0088348388671875,
0.01171112060546875,
-0.041656494140625,
0.025726318359375,
0.025604248046875,
-0.002758026123046875,
0.036407470703125,
-0.046875,
0.0036468505859375,
-0.036773681640625,
0.015899658203125,
-0.0633544921875,
-0.0201263427734375,
-0.03253173828125,
0.047119140625,
-0.037109375,
-0.0301971435546875,
-0.026153564453125,
-0.061187744140625,
0.03338623046875,
0.05792236328125,
-0.004825592041015625,
-0.0225982666015625,
0.040802001953125,
-0.006130218505859375,
0.003292083740234375,
0.01334381103515625,
-0.0291900634765625,
0.060150146484375,
0.00867462158203125,
0.04425048828125,
-0.00811004638671875,
-0.0014848709106445312,
-0.005985260009765625,
-0.01544189453125,
0.0237274169921875,
-0.0011882781982421875,
0.006336212158203125,
-0.01476287841796875,
-0.051239013671875,
0.042022705078125,
0.03955078125,
0.02349853515625,
-0.026763916015625,
-0.01265716552734375,
-0.041595458984375,
0.034027099609375,
0.03656005859375,
0.031280517578125,
0.050018310546875,
0.016632080078125,
0.024749755859375,
0.02886962890625,
0.048309326171875,
-0.00684356689453125,
-0.0286865234375,
0.049224853515625,
-0.0252227783203125,
0.0174407958984375,
0.01338958740234375,
-3.874301910400391e-06,
0.0262298583984375,
-0.0023403167724609375,
0.023101806640625,
0.0186614990234375,
-0.006801605224609375,
0.034637451171875,
-0.0147705078125,
0.006824493408203125,
0.03240966796875,
-0.0226287841796875,
-0.03424072265625,
-0.027862548828125,
0.037750244140625,
-0.04730224609375,
-0.03192138671875,
-0.056060791015625,
0.0104827880859375,
-0.0227508544921875,
0.0221405029296875,
0.01297760009765625,
0.0022830963134765625,
-0.00652313232421875,
0.04498291015625,
-0.0386962890625,
0.038818359375,
0.00344085693359375,
0.06378173828125,
-0.04071044921875,
0.0311431884765625,
-0.038177490234375,
0.03192138671875,
-0.01873779296875,
0.0002810955047607422,
0.009857177734375,
-0.0209503173828125,
0.0377197265625,
0.046966552734375,
0.0015783309936523438,
-0.0290985107421875,
0.0419921875,
0.0312347412109375,
-0.0372314453125,
0.016326904296875,
0.09088134765625,
0.039581298828125,
0.0049896240234375,
-0.03228759765625,
0.017913818359375,
-0.007656097412109375,
0.06402587890625,
0.024932861328125,
-0.0303192138671875,
-0.053558349609375,
0.0015087127685546875,
-0.03338623046875,
-0.044952392578125,
-0.0117034912109375,
0.015899658203125,
-0.061920166015625,
-0.03472900390625,
0.002101898193359375,
-0.0196075439453125,
-0.062255859375,
-0.01479339599609375,
0.012847900390625,
-0.0226287841796875,
0.04833984375,
0.035888671875,
0.05560302734375,
0.01152801513671875,
0.00534820556640625,
-0.034637451171875,
0.05755615234375,
0.04949951171875,
0.0034847259521484375,
0.07440185546875,
0.034515380859375,
-0.052490234375,
0.0225067138671875,
0.033355712890625,
0.034423828125,
0.01288604736328125,
0.035308837890625,
0.0093841552734375,
-0.0255126953125,
0.031402587890625,
0.0291900634765625,
0.02117919921875,
0.0060272216796875,
0.034820556640625,
0.0364990234375,
-0.047515869140625,
0.062164306640625,
-0.01678466796875,
0.041259765625,
-0.0002830028533935547,
-0.0183563232421875,
0.042327880859375,
0.053802490234375,
0.010833740234375,
0.053131103515625,
0.01247406005859375,
0.0242919921875,
0.021942138671875,
0.0289459228515625,
0.042877197265625,
-0.027862548828125,
-0.018707275390625,
-0.040008544921875,
-0.050750732421875,
-0.003986358642578125,
-0.00159454345703125,
-0.0252227783203125,
-0.03173828125,
-0.0219268798828125,
-0.056304931640625,
-0.0097808837890625,
0.04736328125,
0.018341064453125,
0.0146026611328125,
0.03594970703125,
-0.060791015625,
0.006595611572265625,
-0.023223876953125,
-0.024658203125,
0.01140594482421875,
-0.034027099609375,
-0.01363372802734375,
-0.056182861328125,
-0.066162109375,
-0.041717529296875,
0.0196685791015625,
-0.0341796875,
0.032135009765625,
0.0038394927978515625,
-0.018798828125,
0.0273590087890625,
0.0231170654296875,
0.05889892578125,
0.034912109375,
0.0131072998046875,
-0.01434326171875,
0.01464080810546875,
0.0249481201171875,
-0.000850677490234375,
-0.00415802001953125,
0.0255584716796875,
0.03692626953125,
0.0012302398681640625,
0.036346435546875,
0.044464111328125,
-0.01873779296875,
0.045074462890625,
-0.0117340087890625,
0.0024566650390625,
0.021759033203125,
0.001804351806640625,
-0.0240478515625,
0.0206298828125,
-0.0148162841796875,
-0.0233306884765625,
-0.01178741455078125,
0.023193359375,
0.0225982666015625,
0.038299560546875,
0.0245513916015625,
0.0233612060546875,
-0.0281982421875,
0.037933349609375,
0.045318603515625,
0.0262908935546875,
-0.043792724609375,
0.0012063980102539062,
0.023773193359375,
-0.0489501953125,
0.012603759765625,
-0.040435791015625,
0.0006198883056640625,
0.0382080078125,
-0.024871826171875,
0.0694580078125,
-0.0118408203125,
-0.0255584716796875,
0.0010528564453125,
0.01378631591796875,
0.029693603515625,
-0.0276336669921875,
0.004894256591796875,
-0.0033893585205078125,
-0.03497314453125,
0.0298919677734375,
-0.055206298828125,
-0.0130157470703125,
0.0645751953125,
0.03521728515625,
0.0341796875,
-0.028778076171875,
-0.0196533203125,
0.01029205322265625,
0.051788330078125,
0.0212249755859375,
0.051025390625,
0.005710601806640625,
-0.030242919921875,
0.0205841064453125,
-0.0107879638671875,
-0.0523681640625,
-0.046630859375,
-0.02496337890625,
0.03619384765625,
-0.01103973388671875,
-0.0262603759765625,
0.005878448486328125,
0.00984954833984375,
0.06988525390625,
0.011016845703125,
-0.0224761962890625,
0.005435943603515625,
0.031524658203125,
0.042449951171875,
-0.0242156982421875,
-0.053131103515625,
-0.00015544891357421875,
-0.01788330078125,
-0.044677734375,
0.04052734375,
0.045501708984375,
0.049468994140625,
-0.024200439453125,
-0.04107666015625,
0.028289794921875,
-0.04364013671875,
0.005855560302734375,
-0.0408935546875,
-0.04058837890625,
0.0187225341796875,
-0.06671142578125,
0.0306396484375,
0.060699462890625,
0.059173583984375,
0.035675048828125,
0.06207275390625,
0.037841796875,
0.03948974609375,
0.050140380859375,
0.06719970703125,
-0.00554656982421875,
0.0263671875,
-0.01800537109375,
0.01280975341796875,
0.007843017578125,
0.002227783203125,
-0.0218505859375,
-0.0592041015625,
0.0032787322998046875,
0.07843017578125,
-0.019256591796875,
-0.0322265625,
-0.0203857421875,
0.06298828125,
0.0254974365234375,
-0.01332855224609375,
0.011383056640625,
0.030120849609375,
-0.0014781951904296875,
-0.06463623046875,
-0.035430908203125,
-0.0225830078125,
0.01605224609375,
-0.00897979736328125,
0.00469207763671875,
0.02410888671875,
0.0202789306640625,
-0.02130126953125,
-0.0192413330078125,
-0.0211944580078125,
0.00614166259765625,
-0.005462646484375,
-0.08917236328125,
-0.00360107421875,
-0.0174560546875,
0.015228271484375,
-0.019195556640625,
-0.042724609375,
-0.006969451904296875,
-0.012176513671875,
0.016571044921875,
-0.028411865234375,
-0.06463623046875,
-0.016357421875,
-0.0677490234375,
-0.03521728515625,
0.0014619827270507812,
0.0027313232421875,
-0.01117706298828125,
0.0204315185546875,
0.01522064208984375,
0.039520263671875,
-0.029510498046875,
-0.017791748046875,
0.0313720703125,
-0.00984954833984375,
-0.0006289482116699219,
0.014495849609375,
-0.0023250579833984375,
0.01551055908203125,
0.0274200439453125,
-0.0307464599609375,
0.0260162353515625,
0.01274871826171875,
0.020233154296875,
0.008453369140625,
0.0182647705078125,
-0.019287109375,
0.005550384521484375,
0.03045654296875,
-0.005893707275390625,
0.027069091796875,
0.0655517578125,
-0.02581787109375,
-0.037445068359375,
-0.00981903076171875,
0.0254364013671875,
-0.08319091796875,
-0.084228515625,
0.017333984375,
0.0190887451171875,
-0.0005865097045898438,
-0.06414794921875,
-0.08917236328125,
0.007328033447265625,
0.01477813720703125,
-0.052337646484375,
0.020416259765625,
-0.049224853515625,
0.001880645751953125,
-0.006137847900390625,
-0.0655517578125,
-0.0714111328125,
-0.06610107421875,
-0.035247802734375,
-0.03924560546875,
-0.0677490234375,
-0.0266571044921875,
-0.034210205078125,
-0.015289306640625,
0.050537109375,
-0.05938720703125,
-0.00030875205993652344,
0.0116119384765625,
0.032440185546875,
0.00899505615234375,
-0.04461669921875,
-0.034210205078125,
-0.01300048828125,
0.010772705078125,
0.0112762451171875,
0.017913818359375,
-0.05767822265625,
-0.00516510009765625,
0.0123138427734375,
-0.032684326171875,
0.0168609619140625,
-0.0244140625,
-0.0268402099609375,
-0.0467529296875,
0.01495361328125,
-0.070556640625,
0.0053558349609375,
0.0191497802734375,
0.01279449462890625,
0.01568603515625,
-0.0264129638671875,
0.00939178466796875,
0.01338958740234375,
0.031494140625,
0.004421234130859375,
-0.03485107421875,
-0.09051513671875,
-0.004913330078125,
0.0220947265625,
0.0252532958984375,
-0.0140228271484375,
-0.009307861328125,
-0.01235198974609375,
-0.0283203125,
0.003326416015625,
-0.0030670166015625,
0.021514892578125,
0.052276611328125,
0.046234130859375,
0.028564453125,
0.0180511474609375,
0.013824462890625,
0.049102783203125,
0.054962158203125,
-0.024322509765625,
-0.030181884765625,
0.027130126953125,
0.05072021484375,
0.0244293212890625,
-0.0015382766723632812,
-0.00705718994140625,
0.006500244140625,
0.007801055908203125,
0.0026302337646484375,
-0.0197906494140625,
-0.040557861328125,
-0.05804443359375,
0.01137542724609375,
0.003665924072265625,
-0.002925872802734375,
-0.0283660888671875,
0.01329803466796875,
-0.0228271484375,
-0.0088043212890625,
0.038543701171875,
-0.0467529296875,
0.034088134765625,
0.01279449462890625,
-0.003856658935546875,
0.051239013671875,
0.033966064453125,
-0.052490234375,
-0.024871826171875,
-0.013153076171875,
-0.011627197265625,
-0.08209228515625,
-0.03167724609375,
-0.031982421875,
-0.060516357421875,
0.04034423828125,
0.0030841827392578125,
0.025970458984375,
-0.058441162109375,
0.037322998046875,
0.000621795654296875,
0.0184326171875,
-0.06610107421875,
-0.05841064453125,
0.01036834716796875,
-0.004535675048828125,
-0.01206207275390625,
0.0274505615234375,
-0.0214996337890625,
0.0560302734375,
0.049560546875,
0.0225677490234375,
-0.0164947509765625,
-0.025726318359375,
-0.040863037109375,
-0.0233612060546875,
0.028656005859375,
-0.040771484375,
-0.00634002685546875,
-0.0169830322265625,
-0.01403045654296875,
-0.0267333984375,
-0.006557464599609375,
-0.0379638671875,
0.0113983154296875,
-0.0206756591796875,
-0.0399169921875,
0.04949951171875,
0.0260009765625,
0.03546142578125,
-0.031494140625,
0.0511474609375,
-0.0215606689453125,
-0.00836944580078125,
-0.045745849609375,
0.03680419921875,
0.0180816650390625,
0.0022945404052734375,
0.04156494140625,
0.06744384765625,
0.00852203369140625,
-0.044921875,
-0.050567626953125,
-0.0194854736328125,
-0.01213836669921875,
0.0316162109375,
0.00579071044921875,
-0.00540924072265625,
0.0460205078125,
-0.05487060546875,
0.01273345947265625,
-0.024658203125,
-0.02099609375,
0.01488494873046875,
-0.00408172607421875,
-0.004802703857421875,
0.034820556640625,
0.039520263671875,
0.01442718505859375,
-0.042694091796875,
-0.038818359375,
0.055999755859375,
0.037811279296875,
0.07183837890625,
0.032867431640625,
-0.047271728515625,
-0.003154754638671875,
-0.050201416015625,
-0.0301971435546875,
-0.0205230712890625,
-0.011077880859375,
0.059326171875,
0.014556884765625,
-0.037689208984375,
-0.0181427001953125,
-0.02862548828125,
0.014251708984375,
-0.00402069091796875,
0.037689208984375,
-0.0095062255859375,
-0.042144775390625,
0.00015544891357421875,
-0.05352783203125,
0.01337432861328125,
-0.045745849609375,
0.03179931640625,
-0.016632080078125,
0.053131103515625,
0.01143646240234375,
-0.0312042236328125,
0.019561767578125,
0.035369873046875,
-0.06243896484375,
-0.0131683349609375,
0.0277557373046875,
0.044189453125,
-0.042388916015625,
-0.007160186767578125,
-0.02606201171875,
-0.00202178955078125,
0.03778076171875,
-0.053924560546875,
-0.00888824462890625,
-0.0032215118408203125,
0.040252685546875,
-0.04327392578125,
0.037841796875,
-0.057586669921875,
-0.027557373046875,
0.0218353271484375,
-0.031768798828125,
-0.0059661865234375,
-0.042694091796875,
0.01934814453125,
0.00576019287109375,
-0.035308837890625,
0.052276611328125,
0.006061553955078125,
-0.013763427734375,
-0.045745849609375,
-0.0139007568359375,
0.01328277587890625,
-0.06414794921875,
0.0281829833984375,
0.0283660888671875,
0.0205230712890625,
-0.001384735107421875,
0.0843505859375,
0.0242462158203125,
0.0034008026123046875,
0.04156494140625,
-0.0193939208984375,
0.018798828125,
0.0208587646484375,
-1.519918441772461e-05,
-0.03363037109375,
-0.055999755859375,
0.02008056640625,
0.027130126953125,
-0.052490234375,
0.051239013671875,
0.0204315185546875,
-0.04534912109375,
0.0283660888671875,
0.0032939910888671875,
-0.0284881591796875,
0.0193328857421875,
0.06964111328125,
0.06658935546875,
-0.046051025390625,
-0.01187896728515625,
-0.025665283203125,
-0.02325439453125,
-0.06396484375,
0.04052734375,
0.0302276611328125,
0.00904083251953125,
0.0261383056640625,
0.0201568603515625,
0.00860595703125,
-0.05364990234375,
0.018157958984375,
-0.0263519287109375,
0.03875732421875,
0.02764892578125,
0.04132080078125,
0.0277099609375,
-0.058837890625,
-0.056365966796875,
0.00400543212890625,
0.0389404296875,
-0.054229736328125,
0.048828125,
0.02947998046875,
0.05255126953125,
-0.061126708984375,
0.031402587890625,
0.050445556640625,
-0.01110076904296875,
0.0494384765625,
-0.05413818359375,
-0.0171966552734375,
-0.058197021484375,
-0.00884246826171875,
0.0113372802734375,
-0.0196380615234375,
0.02337646484375,
0.0212554931640625,
-0.043182373046875,
-0.0299072265625,
-0.005039215087890625,
0.0283660888671875,
-0.0026645660400390625,
-0.037139892578125,
-0.05242919921875,
-0.03216552734375,
0.0285186767578125,
-0.0042266845703125,
-0.0391845703125,
0.015533447265625,
0.024505615234375,
-0.01216888427734375,
-0.031463623046875,
0.04052734375,
-0.004962921142578125,
-0.041015625,
0.012786865234375,
0.054229736328125,
-0.00273895263671875,
-0.060394287109375,
-0.06365966796875,
-0.040771484375,
-0.0731201171875,
-0.0396728515625,
-0.018646240234375,
0.070068359375,
-0.0792236328125,
-0.020050048828125,
-0.040496826171875,
0.0364990234375,
0.07781982421875,
-0.0281219482421875,
0.005207061767578125,
0.04595947265625,
0.037750244140625,
-0.01568603515625,
0.0218353271484375,
0.0001544952392578125,
-0.0369873046875,
-0.029296875,
0.0200653076171875,
-0.04638671875,
-0.033905029296875,
0.033966064453125,
-0.00710296630859375,
-0.053863525390625,
-0.0020694732666015625,
0.0208587646484375,
-0.04913330078125,
0.04522705078125,
0.07208251953125,
0.01442718505859375,
-0.07281494140625,
0.01264190673828125,
-0.033721923828125,
0.05133056640625,
-0.038909912109375,
-0.0241546630859375,
-0.041748046875,
-0.03594970703125,
0.043365478515625,
-0.0257415771484375,
-0.06878662109375,
0.0162811279296875,
0.0192413330078125,
0.0007185935974121094,
-0.0112457275390625,
-0.0281829833984375,
-0.03204345703125,
0.0240325927734375,
0.0086212158203125,
-0.036468505859375,
-0.059600830078125,
-0.00785064697265625,
-0.035369873046875,
0.0012311935424804688,
-0.0214080810546875,
-0.04046630859375,
0.050323486328125,
-0.0027599334716796875,
-0.005466461181640625,
0.048187255859375,
0.045684814453125,
-0.02728271484375,
0.0291595458984375,
0.042572021484375,
-0.0384521484375,
-0.0211639404296875,
-0.0197906494140625,
-0.035552978515625,
-0.01435089111328125,
-0.0192108154296875,
-0.02960205078125,
-0.0457763671875,
-0.039886474609375,
-0.020111083984375,
-0.002094268798828125,
-0.067138671875,
-0.0026187896728515625,
0.006381988525390625,
0.045989990234375,
-0.040924072265625,
-0.004474639892578125,
-0.041259765625,
0.0273590087890625,
0.000644683837890625,
-0.013763427734375,
0.024810791015625,
0.007579803466796875,
-0.026153564453125,
0.0084686279296875,
0.00994110107421875,
-0.06146240234375,
-0.0428466796875,
-0.0110931396484375,
0.023529052734375,
-0.00018835067749023438,
-0.01727294921875,
0.0243072509765625,
0.0006766319274902344,
0.0307464599609375,
0.019256591796875,
0.0197601318359375,
-0.027679443359375,
0.0246124267578125,
0.0255889892578125,
-0.0755615234375,
-0.08099365234375,
-0.004909515380859375,
0.0703125,
0.055572509765625,
-0.03314208984375,
-0.00514984130859375,
-0.0406494140625,
-0.0243377685546875,
0.0345458984375,
-0.005214691162109375,
-5.14984130859375e-05,
-0.049468994140625,
0.034881591796875,
-0.0201568603515625,
-0.0004076957702636719,
-0.0614013671875,
-0.026275634765625,
-0.023345947265625,
-0.00907135009765625,
0.00937652587890625,
0.0005497932434082031,
0.027252197265625,
0.056884765625,
-0.0484619140625,
-0.040283203125,
0.01324462890625,
0.0413818359375,
-0.00250244140625,
0.038055419921875,
0.038970947265625,
0.026031494140625,
0.046630859375,
0.0565185546875,
0.024322509765625,
0.025177001953125,
0.02606201171875,
0.041351318359375,
0.032928466796875,
0.0433349609375,
-0.003238677978515625,
-0.0689697265625,
-0.0193328857421875,
-0.03558349609375,
0.00998687744140625,
0.0002301931381225586,
0.0105133056640625,
-0.0182647705078125,
0.0726318359375,
0.01800537109375,
0.03656005859375,
-0.05035400390625,
-0.033538818359375,
-0.0268707275390625,
-0.01326751708984375,
-0.051025390625,
-0.004680633544921875,
0.028045654296875,
0.013519287109375,
-0.0178680419921875,
-0.040069580078125,
-0.0113983154296875,
0.034637451171875,
0.03411865234375,
-0.00823211669921875,
-0.028106689453125,
0.028228759765625,
0.045196533203125,
-0.008514404296875,
0.0089569091796875,
0.00921630859375,
0.016143798828125,
-0.0013628005981445312,
-0.0281829833984375,
0.061492919921875,
-0.01262664794921875,
-0.057769775390625,
-0.01181793212890625,
0.029510498046875,
0.0285797119140625,
0.0310211181640625,
-0.00923919677734375,
-0.042755126953125,
-0.0177459716796875,
0.033599853515625,
0.0299530029296875,
-0.035400390625,
-0.05316162109375,
-0.03753662109375,
-0.04901123046875,
0.03582763671875,
-0.0675048828125,
-0.08050537109375,
0.03179931640625,
0.0141448974609375,
0.01119232177734375,
0.024078369140625,
-0.060150146484375,
-0.00765228271484375,
0.0059814453125,
-0.0244598388671875,
0.03155517578125,
-0.022613525390625,
0.0276336669921875,
0.043121337890625,
-0.00835418701171875,
0.004909515380859375,
0.07708740234375,
-0.0229034423828125,
0.0003809928894042969,
0.05096435546875,
0.014190673828125,
-0.020050048828125,
0.045013427734375,
0.035552978515625,
0.03106689453125,
-0.0396728515625,
-0.027984619140625,
0.0020904541015625,
0.0287628173828125,
-0.017608642578125,
-0.044097900390625,
0.0057830810546875,
0.06915283203125,
-0.019317626953125,
0.0243072509765625,
-0.013946533203125,
-0.034332275390625,
0.034332275390625,
0.03277587890625,
-0.038299560546875,
0.0491943359375,
0.040679931640625,
-0.0123291015625,
-0.01419830322265625,
0.00963592529296875,
-0.0009226799011230469,
0.0491943359375,
0.06280517578125,
0.039306640625,
0.009429931640625,
-0.044647216796875,
0.00879669189453125,
0.02899169921875,
-0.0516357421875,
-0.02362060546875,
0.020233154296875,
0.033477783203125,
0.00632476806640625,
-0.042755126953125,
-0.021209716796875,
-0.047119140625,
-0.0236053466796875,
-0.028839111328125,
-0.01024627685546875,
0.0007181167602539062,
0.024932861328125,
-0.018524169921875,
0.01143646240234375,
-0.01385498046875,
0.034698486328125,
0.054718017578125,
0.07958984375,
0.031097412109375,
-0.00982666015625,
-0.01983642578125,
-0.02935791015625,
-0.0374755859375,
0.01255035400390625,
0.0111541748046875,
-0.006282806396484375,
-0.035797119140625,
-0.0269317626953125,
-0.05792236328125,
-0.04766845703125,
-0.06298828125,
-0.0219879150390625,
-0.033050537109375,
-0.00347137451171875,
-0.019317626953125,
0.048919677734375,
-0.0043792724609375,
-0.0217437744140625,
-0.0295867919921875,
0.03314208984375,
0.0565185546875,
0.07843017578125,
0.04376220703125,
-0.078369140625,
-0.0059814453125,
0.047119140625,
0.0190582275390625,
0.0198822021484375,
-0.01934814453125,
0.020843505859375,
-0.015716552734375,
0.0247650146484375,
-0.07208251953125,
-0.004779815673828125,
0.0099334716796875,
-0.037994384765625,
-0.05657958984375,
0.00748443603515625,
0.0011205673217773438,
0.0712890625,
-0.004566192626953125,
0.036712646484375,
-0.004985809326171875,
-0.006069183349609375,
0.0284576416015625,
0.039703369140625,
-0.005283355712890625,
0.0305023193359375,
0.0665283203125,
-0.045135498046875,
-0.04034423828125,
0.023406982421875,
-0.02655029296875,
-0.0369873046875,
-0.0546875,
-0.044097900390625,
-0.057952880859375,
-0.0175628662109375,
0.0263214111328125,
0.0858154296875,
-0.046875,
-0.0560302734375,
0.035888671875,
-0.031768798828125,
0.06536865234375,
0.01154327392578125,
0.0225982666015625,
0.006572723388671875,
-0.057647705078125,
-0.049285888671875,
-0.06854248046875,
-0.026519775390625,
-0.0284881591796875,
-0.0155181884765625,
-0.0214691162109375,
-0.00281524658203125,
0.038818359375,
0.045806884765625,
0.044281005859375,
-0.0290069580078125,
0.016632080078125,
0.0498046875,
0.033050537109375,
-0.04547119140625,
-0.016387939453125,
0.046112060546875,
-0.0262298583984375,
-0.034637451171875,
0.02978515625,
0.0182342529296875,
0.06207275390625,
0.008026123046875,
-0.02947998046875,
0.08740234375,
0.06646728515625,
0.057373046875,
-0.039703369140625,
0.01001739501953125,
0.0119476318359375,
0.01038360595703125,
-0.028656005859375,
-0.0211334228515625,
0.007030487060546875,
-0.03857421875,
-0.044921875,
7.450580596923828e-06,
-0.0178070068359375,
0.033233642578125,
0.01085662841796875,
-0.029571533203125,
-0.056854248046875,
0.033966064453125,
0.01535797119140625,
-0.020233154296875,
0.052734375,
0.00312042236328125,
-0.0265960693359375,
0.047088623046875,
-0.01085662841796875,
-0.0172271728515625,
0.05889892578125,
0.0484619140625,
0.052764892578125,
0.006183624267578125,
-0.01369476318359375,
0.006549835205078125,
0.012420654296875,
-0.0243072509765625,
-0.07586669921875,
-0.05914306640625,
0.034271240234375,
-0.0219268798828125,
-0.035858154296875,
0.0030651092529296875,
0.0247650146484375,
-0.024566650390625,
0.001129150390625,
0.010772705078125,
0.0269775390625,
-0.06060791015625,
0.0390625,
0.071533203125,
0.0194244384765625,
-0.0361328125,
-0.002109527587890625,
0.013427734375,
-0.057098388671875,
0.031402587890625,
-0.0121917724609375,
0.0469970703125,
-0.0804443359375,
-0.04168701171875,
-0.01189422607421875,
0.04437255859375,
0.087646484375,
-0.0205535888671875,
-0.0328369140625,
0.0623779296875,
0.0328369140625,
-0.01264190673828125,
-0.041748046875,
0.06341552734375,
0.047943115234375,
0.04998779296875,
-0.00664520263671875,
0.033203125,
-0.0166778564453125,
0.0499267578125,
-0.004314422607421875,
-0.0212554931640625,
0.0018138885498046875,
-0.039459228515625,
0.0222930908203125,
0.0301971435546875,
0.0091400146484375,
-0.0082244873046875,
0.016998291015625,
0.0191650390625,
0.03125,
-0.00274658203125,
-0.01439666748046875,
-0.059234619140625,
-0.017333984375,
-0.0269927978515625,
0.0299072265625,
-0.03826904296875,
0.058258056640625,
0.048614501953125,
0.01143646240234375,
0.04071044921875,
-0.00579833984375,
0.061920166015625,
-0.038726806640625,
0.0238494873046875,
-0.048370361328125,
0.024627685546875,
-0.0278167724609375,
0.0287628173828125,
0.0060882568359375,
0.0186767578125,
0.041351318359375,
-0.0458984375,
0.0665283203125,
0.018707275390625,
-0.00623321533203125,
-0.0291290283203125,
0.0067291259765625,
0.08013916015625,
-0.01348114013671875,
0.058197021484375,
0.03875732421875,
0.017791748046875,
-0.003841400146484375,
-0.0278778076171875,
0.00527191162109375,
-0.01554107666015625,
0.049896240234375,
-0.0218353271484375,
-0.041656494140625,
0.014892578125,
0.043670654296875,
0.044586181640625,
-0.0244293212890625,
-0.0328369140625,
-0.01617431640625,
0.035736083984375,
-0.0261993408203125,
0.08587646484375,
0.01050567626953125,
0.00986480712890625,
0.04852294921875,
0.051849365234375,
0.028289794921875,
0.059661865234375,
0.033660888671875,
0.025726318359375,
0.035369873046875,
0.00872802734375,
-0.0255126953125,
-0.057403564453125,
-0.0302734375,
0.0200347900390625,
-0.0165863037109375,
-0.025146484375,
-0.043212890625,
-0.04437255859375,
0.01221466064453125,
-0.032806396484375,
0.038726806640625,
0.04461669921875,
-0.035064697265625,
-0.0096282958984375,
-0.001003265380859375,
-0.0006818771362304688,
0.0574951171875,
-0.046142578125,
0.0236968994140625,
0.032958984375,
0.03533935546875,
-0.01275634765625,
-0.039337158203125,
0.0284881591796875,
0.00040602684020996094,
-0.0291748046875,
0.05419921875,
-0.007404327392578125,
0.0350341796875,
-0.00984954833984375,
0.003833770751953125,
0.0556640625,
0.0452880859375,
-0.0217132568359375,
-0.0535888671875,
0.00702667236328125,
-0.0264892578125,
0.046600341796875,
0.027252197265625,
0.01226806640625,
0.0088348388671875,
-0.0272979736328125,
0.0284881591796875,
0.051971435546875,
0.0396728515625,
-0.023223876953125,
-0.02880859375,
-0.020111083984375,
-0.036102294921875,
0.02459716796875,
0.0113525390625,
0.044769287109375,
0.040863037109375,
0.0261993408203125,
-0.043121337890625,
0.0533447265625,
-0.0035572052001953125,
0.01187896728515625,
0.0070648193359375,
0.02215576171875,
0.034942626953125,
0.02752685546875,
-0.040374755859375,
-0.060089111328125,
0.037811279296875,
0.0097503662109375,
-0.01091766357421875,
0.041259765625,
0.032562255859375,
0.0579833984375,
-0.006793975830078125,
0.040618896484375,
-0.01184844970703125,
0.034332275390625,
0.0223846435546875,
-0.01442718505859375,
0.0401611328125,
0.021209716796875,
0.0775146484375,
-0.03387451171875,
-0.02264404296875,
-0.03094482421875,
-0.0264739990234375,
0.03472900390625,
0.043487548828125,
0.0185089111328125,
-0.0136260986328125,
-0.042266845703125,
-0.05029296875,
0.031890869140625,
-0.0010051727294921875,
0.05242919921875,
0.035736083984375,
-0.059539794921875,
0.00905609130859375,
0.059814453125,
0.07232666015625,
0.0350341796875,
0.037445068359375,
0.0286712646484375,
0.057098388671875,
-0.035980224609375,
-0.01009368896484375,
0.006984710693359375,
-0.0179443359375,
-0.0205230712890625,
0.00565338134765625,
0.0298309326171875,
0.01000213623046875,
-0.0655517578125,
-0.040618896484375,
-0.0012826919555664062,
0.00884246826171875,
-0.0399169921875,
-0.05322265625,
0.01023101806640625,
-0.01137542724609375,
-0.0120849609375,
-0.04290771484375,
-0.0340576171875,
0.057037353515625,
0.03271484375,
-0.053741455078125,
0.021331787109375,
0.045257568359375,
0.04132080078125,
0.059722900390625,
0.0411376953125,
0.0009908676147460938,
0.0238494873046875,
0.03936767578125,
0.0261077880859375,
-0.0328369140625,
-0.036712646484375,
-0.035980224609375,
-0.009521484375,
-0.0118560791015625,
0.00402069091796875,
0.0168304443359375,
0.07470703125,
0.04766845703125,
0.024627685546875,
0.003570556640625,
-0.004425048828125,
-0.047119140625,
-0.06494140625,
-0.041748046875,
-0.053680419921875,
-0.00757598876953125,
-0.00833892822265625,
0.058807373046875,
0.0184783935546875,
0.01386260986328125,
0.043792724609375,
0.055023193359375,
0.0272216796875,
-0.0187225341796875,
0.042083740234375,
0.05279541015625,
0.034637451171875,
-0.01099395751953125,
-0.0311279296875,
-0.0220489501953125,
0.023345947265625,
-0.04949951171875,
-0.01258087158203125,
0.036865234375,
0.049560546875,
0.059234619140625,
0.017730712890625,
0.0026493072509765625,
-0.07818603515625,
0.039276123046875,
0.01009368896484375,
-0.020355224609375,
-0.0228424072265625,
-0.064453125,
0.059783935546875,
-0.04888916015625,
0.0182952880859375,
-0.0166015625,
-0.061126708984375,
0.0430908203125,
-0.01218414306640625,
-0.0277252197265625,
0.050537109375,
0.0181121826171875,
-0.02032470703125,
-0.013519287109375,
0.03192138671875,
0.0007786750793457031,
0.06365966796875,
0.0082244873046875,
0.036712646484375,
-0.069580078125,
-0.0113067626953125,
-0.001972198486328125,
-0.02117919921875,
0.03448486328125,
-0.0008292198181152344,
0.01202392578125,
0.04132080078125,
-0.046478271484375,
0.052520751953125,
0.04718017578125,
0.054107666015625,
0.01142120361328125,
0.04290771484375,
-0.00652313232421875,
-0.00470733642578125,
0.04669189453125,
0.006622314453125,
0.0249176025390625,
-0.0249481201171875,
0.0099639892578125,
-0.043182373046875,
0.04833984375,
0.0205841064453125,
-0.01007080078125,
-0.061798095703125,
0.019439697265625,
0.050201416015625,
0.039886474609375,
-0.04449462890625,
-0.037139892578125,
0.01276397705078125,
0.052734375,
-0.013946533203125,
0.007568359375,
-0.019134521484375,
0.0565185546875,
0.006404876708984375,
0.003261566162109375,
0.0187835693359375,
-0.0199432373046875,
0.0253143310546875,
-0.05767822265625,
-0.006702423095703125,
0.0253143310546875,
-0.0149383544921875,
-0.0167694091796875,
0.00015425682067871094,
0.02764892578125,
0.024017333984375,
-0.02783203125,
0.01067352294921875,
0.0584716796875,
0.045654296875,
-0.0276947021484375,
-0.023895263671875,
-0.01064300537109375,
0.01025390625,
-0.01438140869140625,
0.02801513671875,
-0.00563812255859375,
0.007045745849609375,
0.034942626953125,
0.01812744140625,
-0.0017652511596679688,
0.060302734375,
-0.0531005859375,
-0.02056884765625,
0.040130615234375,
-0.006183624267578125,
0.034881591796875,
0.0118865966796875,
0.014801025390625,
-0.03851318359375,
0.042938232421875,
-0.01026153564453125,
-0.007465362548828125,
0.03204345703125,
0.037384033203125,
-0.01320648193359375,
0.0080718994140625,
-0.05474853515625,
0.0150146484375,
0.035308837890625,
-0.05181884765625,
-0.005794525146484375,
-0.060333251953125,
0.00914764404296875,
-0.022735595703125,
0.00273895263671875,
-0.025665283203125,
0.034088134765625,
0.0288848876953125,
-0.00026035308837890625,
0.016387939453125,
-0.021392822265625,
0.023162841796875,
0.017486572265625,
0.0289764404296875,
0.02978515625,
0.0140228271484375,
0.0390625,
0.10333251953125,
0.035675048828125,
-0.0132904052734375,
-0.072509765625,
0.0677490234375,
0.065185546875,
-0.049560546875,
0.0177459716796875,
0.013946533203125,
0.015655517578125,
-0.053955078125,
-0.0032367706298828125,
0.016510009765625,
0.009063720703125,
0.007472991943359375,
-0.0261993408203125,
-0.004390716552734375,
-0.040740966796875,
-0.030059814453125,
0.00713348388671875,
-0.00098419189453125,
0.0513916015625,
0.016632080078125,
0.03271484375,
-0.0205230712890625,
0.0234375,
0.016265869140625,
0.0347900390625,
-0.057464599609375,
-0.020477294921875,
0.07574462890625,
-0.033111572265625,
-0.062744140625,
-0.050872802734375,
-0.01244354248046875,
0.04351806640625,
-0.0013036727905273438,
-0.0411376953125,
0.02655029296875,
-0.047637939453125,
5.2034854888916016e-05,
-0.007129669189453125,
-0.060089111328125,
-0.006359100341796875,
0.01605224609375,
-0.0252838134765625,
0.02978515625,
-0.0084991455078125,
-0.0026340484619140625,
-0.031585693359375,
0.00237274169921875,
-0.0027484893798828125,
-0.04046630859375,
-0.001232147216796875,
0.0626220703125,
0.039398193359375,
0.03863525390625,
0.031829833984375,
-1.4543533325195312e-05,
0.0161590576171875,
-0.01378631591796875,
-0.005031585693359375,
-0.04541015625,
-0.04736328125,
0.038482666015625,
0.005901336669921875,
-0.04522705078125,
0.0439453125,
0.006473541259765625,
0.0017595291137695312,
-0.0027065277099609375,
-0.040496826171875,
-0.03399658203125,
0.07501220703125,
0.05316162109375,
-0.03350830078125,
-0.042572021484375,
0.048614501953125,
0.01178741455078125,
-0.04510498046875,
0.043792724609375,
0.00975799560546875,
-0.007598876953125,
-0.04742431640625,
0.0139923095703125,
0.0231781005859375,
-0.0264892578125,
0.018310546875,
-0.0196533203125,
0.05865478515625,
-0.0037860870361328125,
0.0246429443359375,
-0.053009033203125,
0.00092315673828125,
0.06005859375,
0.006938934326171875,
0.0260467529296875,
0.01418304443359375,
0.04595947265625,
-0.01271820068359375,
0.07391357421875,
0.0232086181640625,
0.0316162109375,
-0.0599365234375,
0.031768798828125,
-0.0024967193603515625,
-0.00249481201171875,
-0.020294189453125,
0.00261688232421875,
0.04388427734375,
-0.0305633544921875,
-0.042144775390625,
0.045074462890625,
0.033203125,
0.018951416015625,
-0.04833984375,
-0.01045989990234375,
0.044708251953125,
-0.0443115234375,
0.053314208984375,
-0.043426513671875,
-0.0281829833984375,
0.044158935546875,
-0.0087127685546875,
-0.04150390625,
-0.020538330078125,
0.0141143798828125,
-0.0305633544921875,
-0.0251312255859375,
-0.0268707275390625,
0.0023040771484375,
-0.0211639404296875,
0.032623291015625,
0.005950927734375,
0.00966644287109375,
-0.0352783203125,
-0.0232391357421875,
0.0147857666015625,
0.0291595458984375,
0.044158935546875,
-0.04718017578125,
0.0023097991943359375,
0.002628326416015625,
-0.030609130859375,
0.004604339599609375,
-0.01187896728515625,
0.01427459716796875,
0.0246124267578125,
0.01499176025390625,
-0.0081329345703125,
0.0211181640625,
-0.03302001953125,
0.04461669921875,
0.041778564453125,
0.0251922607421875,
-0.056060791015625,
0.032562255859375,
-0.023468017578125,
-0.03759765625,
-0.055206298828125,
-0.043182373046875,
-0.01290130615234375,
-0.01050567626953125,
0.032958984375,
-0.02154541015625,
-0.0190277099609375,
-0.0279998779296875,
-0.014068603515625,
0.0211639404296875,
-0.00794219970703125,
-0.01385498046875,
-0.0169677734375,
0.047088623046875,
0.04498291015625,
-0.060638427734375,
-0.0111236572265625,
-0.0236358642578125,
-9.85860824584961e-05,
0.045989990234375,
-0.02642822265625,
0.021392822265625,
-0.0239105224609375,
0.032440185546875,
-0.0565185546875,
-0.010284423828125,
0.01392364501953125,
-0.0201263427734375,
-0.0022869110107421875,
0.0020046234130859375,
-0.02972412109375,
0.0207977294921875,
-0.01666259765625,
-0.059814453125,
-0.035736083984375,
0.0020084381103515625,
-0.03192138671875,
0.0278167724609375,
-0.023223876953125,
-0.0035457611083984375,
0.0131988525390625,
0.055877685546875,
-0.044464111328125,
-0.019317626953125,
-0.0160675048828125,
-0.0439453125,
0.015655517578125,
-0.0101318359375,
-0.044525146484375,
-0.006969451904296875,
-0.0102996826171875,
0.033172607421875,
0.0011463165283203125,
0.030975341796875,
-0.03472900390625,
-0.005939483642578125,
-0.05633544921875,
0.01788330078125,
-0.0172119140625,
-0.0310516357421875,
0.01238250732421875,
0.0178070068359375,
-0.0189361572265625,
-0.01551055908203125,
0.0009889602661132812,
-0.0335693359375,
0.022247314453125,
0.05352783203125,
-0.037872314453125,
-0.0447998046875,
0.05548095703125,
0.026519775390625,
-0.0160064697265625,
-0.0102996826171875,
0.0294189453125,
-0.019256591796875,
0.019378662109375,
0.006366729736328125,
-0.037445068359375,
-0.0188446044921875,
0.0008940696716308594,
-0.05841064453125,
0.03759765625,
-0.01253509521484375,
0.01290130615234375,
0.01531219482421875,
-0.056304931640625,
0.057952880859375,
0.062042236328125,
-0.03900146484375,
-0.027130126953125,
0.0268096923828125,
-0.0328369140625,
-0.049774169921875,
0.023193359375,
-0.0208587646484375,
0.006317138671875,
0.022308349609375,
0.01177215576171875,
0.0433349609375,
0.04901123046875,
0.006023406982421875,
-0.0029296875,
0.060455322265625,
0.059295654296875,
-0.002895355224609375,
0.0008101463317871094,
0.00939178466796875,
0.01261138916015625,
-0.023040771484375,
-0.0163421630859375,
0.002674102783203125,
-0.05035400390625,
-0.03948974609375,
0.037628173828125,
-0.0259552001953125,
0.01444244384765625,
0.03790283203125,
-0.0098419189453125,
-0.02825927734375,
0.034942626953125,
0.02337646484375,
0.0313720703125,
0.055206298828125,
0.0127105712890625,
0.0635986328125,
0.0276947021484375,
0.06915283203125,
0.00833892822265625,
-0.01305389404296875,
0.045196533203125,
0.036102294921875,
0.0117340087890625,
0.0062103271484375,
-0.08892822265625,
0.0230255126953125,
-0.0241241455078125,
-0.05035400390625,
0.031097412109375,
-0.01708984375,
-0.03814697265625,
0.0107421875,
0.0023021697998046875,
-0.045745849609375,
0.054046630859375,
0.0780029296875,
0.08392333984375,
-0.06756591796875,
-0.0343017578125,
0.039337158203125,
0.076171875,
-0.01160430908203125,
0.0237274169921875,
-0.01611328125,
-0.007549285888671875,
-0.0241851806640625,
-0.0007085800170898438,
0.04937744140625,
0.007236480712890625,
0.028778076171875,
0.030670166015625,
-0.00963592529296875,
-0.05926513671875,
-0.03936767578125,
-0.04718017578125,
0.017578125,
0.0312347412109375,
-0.00759124755859375,
0.0006518363952636719,
-0.003635406494140625,
0.0041656494140625,
0.056549072265625,
0.01216888427734375,
0.00511932373046875,
-0.021270751953125,
0.0108489990234375,
-0.033905029296875,
0.01342010498046875,
0.031341552734375,
0.00800323486328125,
-0.0029926300048828125,
-0.056610107421875,
-0.04595947265625,
-0.00832366943359375,
-0.0035247802734375,
0.01508331298828125,
-0.07708740234375,
-0.01490020751953125,
-0.05413818359375,
0.00792694091796875,
0.0257720947265625,
-0.00528717041015625,
-0.03564453125,
0.05010986328125,
-0.03125,
-0.022125244140625,
0.005870819091796875,
-0.0305938720703125,
0.03338623046875,
0.0100555419921875,
0.053863525390625,
-0.003421783447265625,
-0.045379638671875,
0.0289306640625,
-0.0182952880859375,
0.031829833984375,
-0.04205322265625,
-0.0183258056640625,
0.0242156982421875,
-0.06463623046875,
-0.00896453857421875,
-0.08648681640625,
-0.01511383056640625,
0.029693603515625,
0.052093505859375,
0.056915283203125,
0.05560302734375,
-0.02874755859375,
-0.004665374755859375,
-0.017791748046875,
0.08642578125,
-0.0044097900390625,
0.0006594657897949219,
0.04266357421875,
-0.025146484375,
0.033233642578125,
0.038665771484375,
0.048187255859375,
0.031402587890625,
0.0269622802734375,
0.0401611328125,
0.003421783447265625,
0.0709228515625,
0.04278564453125,
-0.06439208984375,
-0.037200927734375,
-0.005794525146484375,
-0.011566162109375,
-0.0291290283203125,
0.0103912353515625,
-0.004741668701171875,
-0.074462890625,
-0.03179931640625,
-0.037445068359375,
0.0179901123046875,
-0.0260772705078125,
-0.003936767578125,
0.030792236328125,
-0.045166015625,
0.09332275390625,
0.0380859375,
0.027069091796875,
0.0201873779296875,
0.0208587646484375,
-0.032623291015625,
-0.03851318359375,
-0.02215576171875,
-0.019927978515625,
-0.0225982666015625,
0.03564453125,
-0.00217437744140625,
-0.048583984375,
0.007007598876953125,
-0.051727294921875,
-0.005863189697265625,
-0.012298583984375,
-0.078125,
0.0390625,
0.060943603515625,
0.042327880859375,
0.01326751708984375,
-0.0323486328125,
-0.0257415771484375,
0.01425933837890625,
0.059722900390625,
0.0303802490234375,
0.05206298828125,
-0.050567626953125,
-0.060516357421875,
-0.05511474609375,
0.0227813720703125,
0.0406494140625,
-0.032073974609375,
-0.08294677734375,
0.06463623046875,
0.026458740234375,
0.047515869140625,
-0.042724609375,
-0.0543212890625,
-0.0035724639892578125,
-0.0272216796875,
0.057098388671875,
-0.0413818359375,
0.00882720947265625,
0.01558685302734375,
0.036163330078125,
-0.007228851318359375,
-0.0665283203125,
0.04376220703125,
-0.016754150390625,
0.035400390625,
-0.0260772705078125,
-0.040557861328125,
0.0003390312194824219,
0.05126953125,
0.0025463104248046875,
-0.07781982421875,
-0.01251983642578125,
-0.00257110595703125,
0.0042724609375,
0.006961822509765625,
-0.056854248046875,
0.008331298828125,
0.01561737060546875,
0.043121337890625,
0.0088958740234375,
0.0039043426513671875,
0.040374755859375,
0.007808685302734375,
0.012969970703125,
0.007450103759765625,
-0.04766845703125,
-0.01541900634765625,
0.04638671875,
0.073486328125,
0.0418701171875,
-0.033050537109375,
-0.00021338462829589844,
0.012847900390625,
-0.04736328125,
0.039154052734375,
0.01294708251953125,
-0.05511474609375,
-0.0279693603515625,
0.00872039794921875,
0.047149658203125,
0.05126953125,
-0.0562744140625,
0.04913330078125,
-0.029083251953125,
0.0360107421875,
0.031463623046875,
-0.04730224609375,
0.038787841796875,
0.0299530029296875,
-0.01519012451171875,
-0.0242767333984375,
-0.0006117820739746094,
0.04376220703125,
0.05267333984375,
0.0252532958984375,
0.03778076171875,
0.00980377197265625,
0.05584716796875,
0.061187744140625,
0.0322265625,
0.0245819091796875,
-0.033905029296875,
-0.05731201171875,
0.039947509765625,
0.04180908203125,
0.016265869140625,
-0.016876220703125,
-0.07952880859375,
-0.049591064453125,
-0.0190887451171875,
0.04168701171875,
-0.060638427734375,
-0.0640869140625,
-0.0174713134765625,
0.0003447532653808594,
0.00347137451171875,
0.01519775390625,
-0.033721923828125,
0.045196533203125,
0.0083465576171875,
-0.054595947265625,
-0.0169219970703125,
0.01427459716796875,
0.014923095703125,
-0.040435791015625,
-0.054168701171875,
0.04669189453125,
-0.024322509765625,
0.02642822265625,
-0.054168701171875,
-0.09075927734375,
0.031982421875,
0.0221405029296875,
-0.0010585784912109375,
0.023712158203125,
-0.0692138671875,
0.04986572265625,
0.044281005859375,
0.0165252685546875,
0.021484375,
-0.00835418701171875,
-0.042633056640625,
-0.0115966796875,
-0.0290374755859375,
-0.002719879150390625,
0.0253448486328125,
-0.041473388671875,
0.024444580078125,
0.015960693359375,
0.07281494140625,
0.056610107421875,
0.0229034423828125,
-0.047607421875,
-0.03228759765625,
0.0246429443359375,
-0.0066070556640625,
0.00762176513671875,
0.01715087890625,
0.043975830078125,
0.003589630126953125,
-0.0684814453125,
0.04364013671875,
-0.0299530029296875,
-0.07940673828125,
-0.03192138671875,
-0.030426025390625,
-0.01399993896484375,
0.0086212158203125,
0.009185791015625,
0.02490234375,
0.002834320068359375,
0.01442718505859375,
-0.0084991455078125,
0.047515869140625,
0.011199951171875,
-0.0019130706787109375,
-0.0296478271484375,
-0.05438232421875,
0.01187896728515625,
-0.01349639892578125,
0.052398681640625,
-0.00098419189453125,
-0.07452392578125,
0.017669677734375,
0.010894775390625,
-0.007038116455078125,
-0.06103515625,
0.0243682861328125,
-0.05572509765625,
0.00301361083984375,
0.042327880859375,
-0.0628662109375,
-0.044891357421875,
0.0086517333984375,
0.0193634033203125,
0.01367950439453125,
0.0205841064453125,
0.033355712890625,
0.049407958984375,
-0.00672149658203125,
0.028778076171875,
0.049041748046875,
0.041534423828125,
-0.044097900390625,
0.002471923828125,
-0.048126220703125,
-0.051025390625,
-0.0887451171875,
0.0037860870361328125,
-0.00039649009704589844,
-0.0254364013671875,
0.0014066696166992188,
-0.03607177734375,
-0.01190948486328125,
0.05517578125,
0.031341552734375,
-0.00713348388671875,
-0.009307861328125,
-0.0142974853515625,
-0.0440673828125,
-0.054107666015625,
-0.048095703125,
0.0167083740234375,
0.0162200927734375,
-0.0004143714904785156,
-0.00855255126953125,
0.032562255859375,
-0.0063323974609375,
0.020172119140625,
0.027496337890625,
-0.055419921875,
-0.02166748046875,
0.021240234375,
0.005802154541015625,
0.00397491455078125,
0.0181884765625,
0.02020263671875,
-0.0576171875,
-0.041656494140625,
0.0012350082397460938,
0.07330322265625,
-0.060150146484375,
-0.03448486328125,
0.0081024169921875,
-0.006397247314453125,
-0.0030364990234375,
0.00931549072265625,
0.046234130859375,
0.0005693435668945312,
-0.0272674560546875,
0.0168914794921875,
0.00469970703125,
0.02825927734375,
-0.032745361328125,
-0.0007157325744628906,
-0.04229736328125,
0.039886474609375,
-0.0223236083984375,
-0.048370361328125,
-0.04241943359375,
0.01145172119140625,
-0.001087188720703125,
-0.04913330078125,
-0.0014734268188476562,
-0.0153350830078125,
0.036468505859375,
-0.0157012939453125,
0.048004150390625,
0.0297393798828125,
0.036712646484375,
-0.011810302734375,
0.030914306640625,
0.0046539306640625,
-0.03851318359375,
-0.02142333984375,
0.035888671875,
-0.0251922607421875,
0.03277587890625,
-0.0258636474609375,
-0.00507354736328125,
0.049774169921875,
-0.041717529296875,
0.042510986328125,
-0.01861572265625,
-0.005390167236328125,
0.040557861328125,
0.02630615234375,
0.045867919921875,
-0.04119873046875,
0.048187255859375,
0.003253936767578125,
0.00942230224609375,
-0.01392364501953125,
-0.0282135009765625,
0.021087646484375,
0.0251007080078125,
-0.0159454345703125,
-0.048675537109375,
-0.033660888671875,
0.035003662109375,
-0.033843994140625,
-0.0236968994140625,
0.038970947265625,
0.00905609130859375,
-0.0079498291015625,
0.01261138916015625,
-0.039276123046875,
-0.034423828125,
-0.021209716796875,
-0.00420379638671875,
0.00800323486328125,
0.020477294921875,
0.043670654296875,
-0.028106689453125,
0.00946044921875,
0.0301055908203125,
-0.0357666015625,
0.015777587890625,
-0.03265380859375,
0.00835418701171875,
0.03704833984375,
-0.01800537109375,
-0.04559326171875,
-0.00799560546875,
-0.0006046295166015625,
0.020050048828125,
-0.048980712890625,
-0.01081085205078125,
-0.0307159423828125,
-0.03765869140625,
-0.0097198486328125,
-0.045318603515625,
-0.03594970703125,
0.0175628662109375,
-0.00162506103515625,
0.0491943359375,
-0.033782958984375,
0.023040771484375,
-0.036834716796875,
-0.039337158203125,
-0.01544952392578125,
-0.018035888671875,
-0.005340576171875,
-0.04864501953125,
-0.0039043426513671875,
0.032257080078125,
-0.00695037841796875,
0.035736083984375,
-0.027984619140625,
-0.0099639892578125,
0.04034423828125,
-0.005176544189453125,
0.035247802734375,
0.04656982421875,
0.007720947265625,
-0.022247314453125,
-0.035491943359375,
-0.0247039794921875,
0.007965087890625,
0.01305389404296875,
-0.0467529296875,
-0.005039215087890625,
-0.006195068359375,
0.0215606689453125,
0.0262908935546875,
-0.04949951171875,
0.0325927734375,
0.042205810546875,
-0.003620147705078125,
0.0177001953125,
-0.00970458984375,
0.03302001953125,
0.0308837890625,
0.04815673828125,
-0.042144775390625,
-0.0016450881958007812,
-0.0054779052734375,
0.00011754035949707031,
-0.005168914794921875,
0.042205810546875,
-0.0173187255859375,
-0.0198974609375,
-0.013427734375,
0.03619384765625,
-0.036895751953125,
-0.035186767578125,
0.033538818359375,
-0.033050537109375,
-0.00848388671875,
0.042388916015625,
-0.0220489501953125,
0.047088623046875,
-0.00927734375,
0.0268402099609375,
-0.041961669921875,
-0.00572967529296875,
-0.0219573974609375,
0.034027099609375,
-0.0017690658569335938,
-0.049957275390625,
-0.00977325439453125,
-0.0133209228515625,
0.01149749755859375,
-0.0391845703125,
0.025482177734375,
0.004634857177734375,
-0.037445068359375,
-0.03814697265625,
0.0293731689453125,
-0.036041259765625,
-0.04315185546875,
-0.040863037109375,
-0.031829833984375,
-0.01312255859375,
-0.0251007080078125,
0.0218963623046875,
0.032684326171875,
0.005828857421875,
0.045257568359375,
0.021820068359375,
-0.0184783935546875,
0.042144775390625,
0.0389404296875,
0.010955810546875,
0.0217742919921875,
-1.3709068298339844e-06,
0.01512908935546875,
0.044036865234375,
0.0195159912109375,
0.01788330078125,
0.01280975341796875,
-0.03790283203125,
0.013946533203125,
-0.04864501953125,
-0.006557464599609375,
-0.049468994140625,
-0.043792724609375,
-0.035888671875,
0.00868988037109375,
-0.0306549072265625,
0.048309326171875,
-0.02764892578125,
0.0297393798828125,
-0.046478271484375,
0.01215362548828125,
0.01045989990234375,
0.00923919677734375,
-0.01039886474609375,
0.020660400390625,
-0.0011463165283203125,
-0.0004050731658935547,
0.04534912109375,
-0.027069091796875,
-0.04620361328125,
0.0024242401123046875,
-0.0012531280517578125,
-0.0263519287109375,
-0.00965118408203125,
0.04193115234375,
-0.041259765625,
-0.0183868408203125,
-0.0164642333984375,
0.039398193359375,
-0.0400390625,
-0.0352783203125,
-0.0005311965942382812,
0.032379150390625,
0.010223388671875,
-0.0263824462890625,
0.04095458984375,
-0.026763916015625,
-0.0159759521484375,
0.02777099609375,
-0.0268402099609375,
-0.035491943359375,
0.0086669921875,
0.046295166015625,
-0.02899169921875,
0.019378662109375,
-0.00791168212890625,
-0.0170440673828125,
-0.01082611083984375,
0.0482177734375,
0.02435302734375,
0.0303497314453125,
-0.02252197265625,
0.042388916015625,
-0.030181884765625,
-0.040496826171875,
0.041229248046875,
0.028717041015625,
-0.041015625,
0.026611328125,
0.029205322265625,
0.018096923828125,
0.0225982666015625,
-0.00841522216796875,
-0.02642822265625,
0.00909423828125,
0.00539398193359375,
-0.01216888427734375,
-0.039703369140625,
0.02923583984375,
-0.00347137451171875,
0.048614501953125,
0.049774169921875,
-0.013763427734375,
-0.045074462890625,
-0.0172882080078125,
-0.031524658203125,
-0.022125244140625,
0.03704833984375,
-0.02191162109375,
0.022369384765625,
-0.03167724609375,
-0.0272369384765625,
0.03900146484375,
0.014556884765625,
-0.0216827392578125,
7.474422454833984e-05,
0.0210418701171875,
-0.04376220703125,
-0.004482269287109375,
-0.04461669921875,
-0.04498291015625,
0.0185394287109375,
-0.040008544921875,
0.0430908203125,
-0.0160064697265625,
0.021942138671875,
0.04888916015625,
0.039886474609375,
0.00682830810546875,
0.043060302734375,
-0.041290283203125,
0.0036945343017578125,
-0.00466156005859375,
0.0228729248046875,
-0.049224853515625,
-0.021087646484375,
-0.034759521484375,
-0.0257110595703125,
-0.01043701171875,
-0.0049896240234375,
-0.034881591796875,
-0.0265960693359375,
-0.0406494140625,
-0.0100555419921875,
-0.0154876708984375,
0.00846099853515625,
0.044952392578125,
-0.049957275390625,
-0.0211944580078125,
0.047943115234375,
-0.0167236328125,
-0.03509521484375,
-0.041290283203125,
0.024322509765625,
0.049530029296875,
-0.0487060546875,
0.021392822265625,
0.00072479248046875,
0.0040740966796875,
-0.0316162109375,
0.01038360595703125,
0.004222869873046875,
-0.048309326171875,
-0.0060272216796875,
-0.034210205078125,
-0.01537322998046875,
-0.04718017578125,
-0.01364898681640625,
0.0462646484375,
-0.0006537437438964844,
-0.036712646484375,
-0.04443359375,
0.045135498046875,
-0.0017452239990234375,
-0.003963470458984375,
-0.01198577880859375,
-0.018402099609375,
0.0247344970703125,
0.0090179443359375,
-0.0196380615234375,
0.0156707763671875,
-0.032257080078125,
-0.0182952880859375,
0.028839111328125,
-0.026519775390625,
0.006175994873046875,
0.021087646484375,
0.0175933837890625,
0.02496337890625,
-0.0137939453125,
0.0418701171875,
0.00733184814453125,
0.024749755859375,
-0.032623291015625,
0.018890380859375,
0.045135498046875,
0.0283203125,
0.0296478271484375,
0.00041866302490234375,
-0.046173095703125,
0.02667236328125,
0.0140228271484375,
-0.043487548828125,
0.014801025390625,
0.005035400390625,
0.020050048828125,
0.0181732177734375,
-0.0345458984375,
-0.0274200439453125,
-0.04583740234375,
0.0239410400390625,
-0.033935546875,
-0.0250701904296875,
-0.037261962890625,
-0.0374755859375,
-0.047271728515625,
0.0020503997802734375,
0.0130615234375,
-0.033050537109375,
0.0258331298828125,
0.00279998779296875,
-0.0477294921875,
0.0035457611083984375,
0.0009136199951171875,
-0.0216522216796875,
-0.0008826255798339844,
0.01290130615234375,
0.048797607421875,
0.042755126953125,
-0.04833984375,
0.0294342041015625,
-0.039825439453125,
0.02410888671875,
0.034149169921875,
0.041107177734375,
-0.0175018310546875,
0.0016946792602539062,
0.0117340087890625,
0.03546142578125,
0.0247802734375,
-0.03106689453125,
-0.04644775390625,
-0.007198333740234375,
-0.019012451171875,
0.045135498046875,
-0.003841400146484375,
0.0022449493408203125,
0.037811279296875,
-0.0263824462890625,
-0.02947998046875,
0.031097412109375,
-0.0112152099609375,
0.04345703125,
0.00992584228515625,
-0.009918212890625,
0.034332275390625,
-0.00897979736328125,
-0.02386474609375,
0.0523681640625,
-0.0042877197265625,
-0.032501220703125,
-0.034698486328125,
0.0760498046875,
0.040313720703125,
0.031829833984375,
0.021514892578125,
0.039215087890625,
0.058135986328125,
-0.011199951171875,
-0.039306640625,
0.0282440185546875,
0.05010986328125,
-0.022308349609375,
0.041778564453125,
-0.033294677734375,
0.04534912109375,
0.010040283203125,
0.0511474609375,
0.024322509765625,
0.04180908203125,
-0.033050537109375,
0.02056884765625,
0.03131103515625,
-0.0171051025390625,
-0.0184173583984375,
-0.0235443115234375,
0.031982421875,
0.01116943359375,
0.026947021484375,
0.06402587890625,
-0.006855010986328125,
0.00762176513671875,
0.021942138671875,
0.0755615234375,
0.08349609375,
0.054962158203125,
0.0477294921875,
0.036529541015625,
0.004901885986328125,
0.004123687744140625,
-0.048553466796875,
-0.04534912109375,
0.007762908935546875,
-0.04095458984375,
-0.032562255859375,
-0.02655029296875,
-0.0251617431640625,
-0.0369873046875,
0.03338623046875,
-0.02490234375,
-0.02459716796875,
0.058502197265625,
-0.01922607421875,
0.0036983489990234375,
-0.0288543701171875,
-0.0293426513671875,
0.017242431640625,
-0.026824951171875,
0.00080108642578125,
-0.052947998046875,
0.0189208984375,
-0.05419921875,
-0.00841522216796875,
0.0203094482421875,
0.01904296875,
0.0117340087890625,
0.00350189208984375,
-0.0259246826171875,
-0.0275726318359375,
0.0294036865234375,
0.07958984375,
-0.00885772705078125,
0.039642333984375,
-0.045867919921875,
0.0226287841796875,
-0.0009593963623046875,
-0.07989501953125,
0.026458740234375,
0.053863525390625,
0.0277099609375,
0.02984619140625,
-0.07073974609375,
-0.017486572265625,
0.0170135498046875,
0.06622314453125,
0.0236663818359375,
-0.004913330078125,
-0.00832366943359375,
-0.0628662109375,
0.03369140625,
0.00830078125,
0.044403076171875,
-0.0338134765625,
0.0020771026611328125,
-0.005794525146484375,
-0.048583984375,
-0.04351806640625,
0.04766845703125,
0.0286865234375,
0.0279083251953125,
0.031341552734375,
-0.0213623046875,
0.043548583984375,
0.005340576171875,
0.054901123046875,
0.020721435546875,
0.0208587646484375,
0.0386962890625,
0.0946044921875,
0.049713134765625,
0.05682373046875,
0.037445068359375,
0.05841064453125,
-0.0010547637939453125,
0.03167724609375,
0.0061187744140625,
0.04913330078125,
-0.053192138671875,
-0.04656982421875,
0.01020050048828125,
-0.032379150390625,
-0.02557373046875,
-0.07159423828125,
0.034820556640625,
0.028472900390625,
0.0462646484375,
0.062225341796875,
0.0147552490234375,
0.049896240234375,
0.044769287109375,
-0.0182037353515625,
-0.01535797119140625,
0.0228729248046875,
-0.05023193359375,
0.00884246826171875,
-0.031494140625,
0.0089111328125,
0.032867431640625,
-0.0184173583984375,
0.062042236328125,
0.00665283203125,
0.0389404296875,
0.03607177734375,
0.0229034423828125,
0.012115478515625,
0.054656982421875,
0.052337646484375,
-0.055023193359375,
0.004657745361328125,
0.049407958984375,
-0.0166168212890625,
0.0003609657287597656,
-0.048248291015625,
0.0027446746826171875,
0.0164031982421875,
-0.007419586181640625,
-0.0271453857421875,
-0.048614501953125,
-0.03094482421875,
-0.022064208984375,
0.006763458251953125,
-0.04046630859375,
-0.07122802734375,
0.0243988037109375,
0.0943603515625,
0.042327880859375,
-0.0130157470703125,
0.0240020751953125,
-0.0389404296875,
0.0197601318359375,
-0.01397705078125,
-0.047821044921875,
-0.045440673828125,
-0.040008544921875,
-0.028533935546875,
0.044342041015625,
-0.03778076171875,
0.037506103515625,
0.005340576171875,
0.034332275390625,
0.043212890625,
-0.046173095703125,
0.006351470947265625,
-0.0523681640625,
-0.05511474609375,
-0.017120361328125,
-0.054351806640625,
-0.0203704833984375,
0.03173828125,
0.050811767578125,
-0.0184173583984375,
-0.036865234375,
-0.0560302734375,
-0.08123779296875,
-0.0157012939453125,
0.0811767578125,
0.037841796875,
0.0229339599609375,
-0.04376220703125,
-0.024383544921875,
0.056488037109375,
0.00638580322265625,
-0.0234832763671875,
-0.0543212890625,
-0.0234832763671875,
-0.0244293212890625,
0.00298309326171875,
0.033111572265625,
-0.08050537109375,
-0.0060577392578125,
-0.01380157470703125,
-0.0205841064453125,
-0.016326904296875,
-0.014892578125,
0.08258056640625,
0.0821533203125,
-0.037872314453125,
-0.0224456787109375,
0.04644775390625,
-0.00864410400390625,
-0.031829833984375,
-0.00799560546875,
-0.04229736328125,
-0.043670654296875,
0.00209808349609375,
0.058990478515625,
0.0286407470703125,
0.043914794921875,
-0.00946044921875,
-0.0726318359375,
-0.032135009765625,
0.036956787109375,
0.0090179443359375,
-0.031036376953125,
0.0355224609375,
0.0189056396484375,
-0.05548095703125,
-0.048553466796875,
-0.0638427734375,
0.018218994140625,
0.00032138824462890625,
0.029022216796875,
-0.04248046875,
0.0186004638671875,
0.0008459091186523438,
0.05352783203125,
0.046539306640625,
0.030120849609375,
0.0217132568359375,
0.047210693359375,
-0.0253143310546875,
-0.0308074951171875,
-0.045257568359375,
0.0401611328125,
0.0738525390625,
-0.017608642578125,
-0.008758544921875,
-0.00630950927734375,
-0.0290679931640625,
0.014007568359375,
0.0168609619140625,
0.004131317138671875,
0.044586181640625,
-0.03497314453125,
0.0218658447265625,
-0.0022258758544921875,
0.04083251953125,
0.039764404296875,
0.0163726806640625,
0.032501220703125,
0.06427001953125,
0.050994873046875,
0.0219879150390625,
-0.0142822265625,
-0.0099945068359375,
-0.0166168212890625,
-0.044281005859375,
0.034088134765625,
0.0330810546875,
-0.0037250518798828125,
-0.02899169921875,
-0.0584716796875,
-0.048065185546875,
-0.041229248046875,
0.037445068359375,
0.060516357421875,
-0.00894927978515625,
-0.06982421875,
-0.0294036865234375,
-0.0152435302734375,
0.04095458984375,
0.01088714599609375,
0.01502227783203125,
-0.036407470703125,
0.02752685546875,
0.0262603759765625,
0.0037708282470703125,
-0.00392913818359375,
-0.032684326171875,
-0.0273284912109375,
0.02459716796875,
-0.0025005340576171875,
0.01190185546875,
-0.0147705078125,
-0.0109100341796875,
-0.007091522216796875,
0.0303802490234375,
-0.05877685546875,
-0.0501708984375,
-0.041748046875,
0.06036376953125,
0.01183319091796875,
0.00853729248046875,
-0.008209228515625,
-0.030670166015625,
0.01302337646484375,
0.04058837890625,
0.045928955078125,
-0.057586669921875,
-0.005657196044921875,
-0.048309326171875,
-0.0489501953125,
-0.031524658203125,
0.027984619140625,
-0.04486083984375,
0.007724761962890625,
-0.038787841796875,
0.0174407958984375,
0.017242431640625,
-0.0193328857421875,
0.036712646484375,
0.0147552490234375,
-0.026275634765625,
0.0018301010131835938,
-0.01390838623046875,
0.029754638671875,
-0.0062255859375,
0.0034046173095703125,
-0.036773681640625,
-0.00911712646484375,
-0.038299560546875,
0.0224456787109375,
-0.01995849609375,
0.0005254745483398438,
0.0071258544921875,
0.0242462158203125,
0.038421630859375,
-0.052459716796875,
0.01309967041015625,
0.06719970703125,
0.04010009765625,
0.0289459228515625,
-0.031982421875,
0.030120849609375,
0.044036865234375,
0.047210693359375,
-0.052032470703125,
-0.021575927734375,
0.01113128662109375,
0.065673828125,
-0.031707763671875,
-0.039520263671875,
0.0211029052734375,
0.041778564453125,
-0.0082244873046875,
0.0189666748046875,
-0.015380859375,
0.00421905517578125,
-0.03314208984375,
0.00945281982421875,
-0.035400390625,
0.01349639892578125,
0.03900146484375,
0.058013916015625,
0.0247802734375,
-0.053009033203125,
0.016815185546875,
0.0167083740234375,
0.08331298828125,
0.0106658935546875,
-0.0227813720703125,
0.011383056640625,
0.056243896484375,
0.0362548828125,
0.0266876220703125,
-0.0236968994140625,
0.009521484375,
0.00473785400390625,
0.00044536590576171875,
-0.0487060546875,
-0.045928955078125,
0.050933837890625,
-0.034820556640625,
-0.048126220703125,
-0.02801513671875,
0.046295166015625,
0.044708251953125,
0.021392822265625,
-0.026275634765625,
0.0428466796875,
0.0260467529296875,
0.017913818359375,
-0.0013065338134765625,
-0.0175628662109375,
-0.05328369140625,
-0.06390380859375,
-0.03509521484375,
0.005859375,
0.023895263671875,
-0.008209228515625,
-0.04351806640625,
-0.048919677734375,
-0.035369873046875,
-0.05157470703125,
0.0025043487548828125,
0.030853271484375,
0.0404052734375,
-0.04937744140625,
0.00507354736328125,
0.045318603515625,
0.01322174072265625,
0.0039005279541015625,
0.0297088623046875,
0.053924560546875,
-0.032470703125,
0.0020923614501953125,
-0.0113525390625,
-0.041351318359375,
-0.0308685302734375,
0.001544952392578125,
0.039306640625,
-0.00034236907958984375,
-0.0276641845703125,
0.0258026123046875,
0.02362060546875,
-0.03375244140625,
0.03314208984375,
-0.034912109375,
-0.037750244140625,
0.03466796875,
0.01499176025390625,
-0.00574493408203125,
-0.0501708984375,
0.0283050537109375,
0.0264434814453125,
0.04058837890625,
-0.0120849609375,
-0.0259552001953125,
-0.01548004150390625,
-0.017578125,
0.01247406005859375,
0.0236663818359375,
0.00555419921875,
-0.019866943359375,
-0.061492919921875,
-0.037017822265625,
-0.0290069580078125,
-0.0235443115234375,
-0.0017538070678710938,
-0.031341552734375,
0.025543212890625,
0.0008397102355957031,
0.035247802734375,
0.0128936767578125,
-0.01270294189453125,
-0.0259552001953125,
0.0129852294921875,
0.01141357421875,
-0.004795074462890625,
-0.02142333984375,
0.08660888671875,
0.04345703125,
-0.0007801055908203125,
0.01528167724609375,
-0.0340576171875,
-0.004505157470703125,
0.07958984375,
0.00873565673828125,
0.0242462158203125,
0.04132080078125,
0.0740966796875,
0.04510498046875,
0.05474853515625,
-0.0083770751953125,
-0.0206451416015625,
0.052764892578125,
-0.0201416015625,
-0.001415252685546875,
-0.017578125,
0.0206756591796875,
0.060272216796875,
0.0496826171875,
0.01288604736328125,
-0.0162353515625,
-0.04229736328125,
0.041656494140625,
0.03265380859375,
-0.0029296875,
-0.004985809326171875,
0.050140380859375,
0.0325927734375,
0.031463623046875,
-0.0011072158813476562,
0.056793212890625,
0.01806640625,
0.0108489990234375,
-0.0011091232299804688,
-0.00998687744140625,
0.0104217529296875,
0.0086212158203125,
0.01131439208984375,
-0.043243408203125,
0.00725555419921875,
0.043243408203125,
0.0254364013671875,
-0.00568389892578125,
0.04168701171875,
-0.05047607421875,
-0.026947021484375,
-0.05657958984375,
-0.0160675048828125,
-0.00812530517578125,
0.030029296875,
0.028839111328125,
-0.01241302490234375,
0.043365478515625,
-0.00878143310546875,
0.0028133392333984375,
-0.07073974609375,
0.003574371337890625,
0.004810333251953125,
0.018035888671875,
-0.01262664794921875,
-0.050384521484375,
-0.0045013427734375,
0.09527587890625,
-0.01337432861328125,
0.0032253265380859375,
-0.04010009765625,
0.0665283203125,
0.0139923095703125,
0.0110015869140625,
-0.028564453125,
-0.0533447265625,
-0.038543701171875,
-0.08856201171875,
0.027557373046875,
0.012451171875,
0.0278167724609375,
0.02777099609375,
-0.0210723876953125,
0.05743408203125,
0.035430908203125,
-0.06390380859375,
-0.03759765625,
0.035491943359375,
0.0321044921875,
0.02020263671875,
-0.0250091552734375,
-0.0509033203125,
0.01751708984375,
-0.002162933349609375,
-0.0015954971313476562,
0.02032470703125,
-0.0008649826049804688,
-0.009246826171875,
0.03314208984375,
-0.040283203125,
-0.03253173828125,
-0.025421142578125,
0.0280609130859375,
0.046173095703125,
-0.0272369384765625,
0.0166778564453125,
-0.0017452239990234375,
-0.01113128662109375,
0.053558349609375,
-0.01776123046875,
-0.00099945068359375,
0.030975341796875,
-0.007701873779296875,
0.017578125,
0.050384521484375,
-0.01367950439453125,
-0.00959014892578125,
0.0268707275390625,
0.034149169921875,
0.0015554428100585938,
-0.054962158203125,
0.051300048828125,
0.033538818359375,
-0.0128631591796875,
-0.0200042724609375,
-0.07806396484375,
-0.0067596435546875,
-0.08673095703125,
0.0196380615234375,
-0.02166748046875,
-0.004024505615234375,
0.0311737060546875,
-0.0223388671875,
0.00555419921875,
0.033721923828125,
-0.07489013671875,
0.00798797607421875,
0.037261962890625,
0.08026123046875,
0.0084686279296875,
-0.04473876953125,
-0.03375244140625,
0.0087432861328125,
0.07550048828125,
-0.007671356201171875,
0.0203857421875,
-0.0291900634765625,
0.05816650390625,
-0.03790283203125,
-0.01214599609375,
-0.041534423828125,
0.0008983612060546875,
-0.003841400146484375,
-0.00218963623046875,
-0.0145263671875,
-0.03240966796875,
-0.03271484375,
-0.0284423828125,
-0.0247955322265625,
0.044036865234375,
-0.0391845703125,
-0.0343017578125,
-0.0007224082946777344,
0.035614013671875,
0.037384033203125,
0.01114654541015625,
-0.0386962890625,
-0.006412506103515625,
0.04644775390625,
0.0146484375,
-0.0065155029296875,
-0.024169921875,
0.013763427734375,
0.01271820068359375,
-0.0285491943359375,
-0.04644775390625,
0.0206146240234375,
0.033843994140625,
0.04620361328125,
-0.0038356781005859375,
0.033905029296875,
-0.0012159347534179688,
-0.0281982421875,
-0.024078369140625,
-0.033172607421875,
-0.0197601318359375,
0.0026092529296875,
0.0202789306640625,
0.0247039794921875,
0.02777099609375,
-0.0313720703125,
-0.0240020751953125,
0.050323486328125,
0.01444244384765625,
-0.00827789306640625,
-0.0075836181640625,
-0.0286407470703125,
-0.029388427734375,
0.0213470458984375,
-0.00021398067474365234,
-0.03924560546875,
-0.0361328125,
0.039703369140625,
0.0303802490234375,
0.01059722900390625,
-0.05572509765625,
-0.0264129638671875,
0.047515869140625,
2.372264862060547e-05,
0.001712799072265625,
0.00772857666015625,
-0.0183563232421875,
-0.051116943359375,
-0.0045623779296875,
0.0467529296875,
0.0173492431640625,
0.025970458984375,
-0.04632568359375,
0.042083740234375,
0.0175018310546875,
-0.0036792755126953125,
0.0367431640625,
0.0079345703125,
-0.022979736328125,
0.04705810546875,
-0.00518798828125,
-0.019775390625,
-0.04522705078125,
0.007476806640625,
-0.00420379638671875,
0.0238800048828125,
0.0145263671875,
-0.036651611328125,
0.03277587890625,
-0.00943756103515625,
-0.023101806640625,
-0.002544403076171875,
-0.007793426513671875,
-0.004261016845703125,
0.03826904296875,
0.01971435546875,
-0.00787353515625,
0.007106781005859375,
0.0262908935546875,
0.012786865234375,
0.0260009765625,
-0.04443359375,
-0.0162506103515625,
0.0250396728515625,
-0.036224365234375,
0.005138397216796875,
0.006206512451171875,
0.00641632080078125,
0.0122528076171875,
5.894899368286133e-05,
0.034515380859375,
0.006374359130859375,
-0.0245361328125,
0.0355224609375,
-0.002529144287109375,
-0.0207672119140625,
-0.037506103515625,
-0.011962890625,
0.02386474609375,
0.0308837890625,
-0.005298614501953125,
-0.054901123046875,
-0.001964569091796875,
-0.034423828125,
-0.04327392578125,
0.03424072265625,
-0.022613525390625,
-0.0325927734375,
0.037200927734375,
0.00408172607421875,
-0.046875,
-0.019134521484375,
0.0030040740966796875,
0.012237548828125,
-0.0202484130859375,
0.0109405517578125,
0.00495147705078125,
-0.018310546875,
-0.016021728515625,
-0.0004150867462158203,
-0.06689453125,
-0.011627197265625,
0.0160369873046875,
-0.0045318603515625,
0.031402587890625,
-0.040374755859375,
0.0260162353515625,
0.047088623046875,
0.01120758056640625,
0.045501708984375,
-0.018463134765625,
-0.006931304931640625,
-0.03326416015625,
-0.033538818359375,
-0.058746337890625,
-0.0380859375,
-0.001842498779296875,
0.0231475830078125,
0.043487548828125,
0.0345458984375,
0.01873779296875,
-0.0396728515625,
0.0254364013671875,
0.038726806640625,
0.033294677734375,
-0.057037353515625,
0.01169586181640625,
-0.0100250244140625,
-0.0277252197265625,
-0.0038585662841796875,
-0.0034656524658203125,
-0.057647705078125,
0.04132080078125,
0.05364990234375,
-0.00958251953125,
0.029083251953125,
0.0274505615234375,
0.027984619140625,
0.0012149810791015625,
-0.037139892578125,
-0.046112060546875,
0.037506103515625,
0.01446533203125,
-0.008697509765625,
-0.0300750732421875,
0.00975799560546875,
-0.0193023681640625,
-0.0096435546875,
-0.0105438232421875,
0.061767578125,
0.111083984375,
0.004993438720703125,
-0.0159454345703125,
0.0259246826171875,
0.0185394287109375,
0.0389404296875,
0.058258056640625,
0.03424072265625,
-0.0176849365234375,
0.01088714599609375,
0.01605224609375,
-0.0631103515625,
0.0295562744140625,
0.04986572265625,
-0.04974365234375,
-0.04864501953125,
-0.009918212890625,
0.0059661865234375,
0.01043701171875,
-0.00720977783203125,
0.0032825469970703125,
0.0231475830078125,
0.04339599609375,
-0.0006442070007324219,
0.0027618408203125,
-0.048126220703125,
-0.0020389556884765625,
-0.00475311279296875,
-0.0036067962646484375,
0.041778564453125,
-0.0114288330078125,
-0.0151519775390625,
-0.0361328125,
-0.0389404296875,
-0.0214080810546875,
0.03399658203125,
0.031463623046875,
-0.01324462890625,
-0.07470703125,
-0.00043964385986328125,
0.00434112548828125,
0.0250244140625,
0.01268768310546875,
0.0174713134765625,
-0.05059814453125,
0.028533935546875,
0.0066680908203125,
-0.0281829833984375,
-0.011749267578125,
-0.054595947265625,
-0.0546875,
-0.0015802383422851562,
-0.023040771484375,
0.038818359375,
-0.002838134765625,
0.0048065185546875,
0.01006317138671875,
0.0157318115234375,
-0.006610870361328125,
-0.00909423828125,
-0.036102294921875,
0.053192138671875,
-0.026458740234375,
-0.0299224853515625,
-0.0589599609375,
0.0082550048828125,
-0.0098876953125,
0.012176513671875,
0.02813720703125,
-0.0267181396484375,
-0.0021839141845703125,
0.0882568359375,
0.01015472412109375,
-0.0188751220703125,
-0.0245513916015625,
0.0243072509765625,
0.050750732421875,
0.0343017578125,
-0.030914306640625,
0.0271148681640625,
0.027435302734375,
0.05316162109375,
0.03839111328125,
0.01090240478515625,
0.028411865234375,
0.011474609375,
0.016998291015625,
0.042633056640625,
-0.040679931640625,
0.021942138671875,
-0.032501220703125,
-0.0270538330078125,
0.058807373046875,
0.0239715576171875,
0.008453369140625,
-0.0005025863647460938,
0.006961822509765625,
-0.0206451416015625,
0.04302978515625,
0.005340576171875,
0.03436279296875,
0.049407958984375,
-0.028350830078125,
-0.015045166015625,
0.01358795166015625,
0.0673828125,
-0.0126800537109375,
0.032012939453125,
-0.0011816024780273438,
-0.0280609130859375,
0.037384033203125,
-0.042144775390625,
0.050689697265625,
0.04901123046875,
-0.036712646484375,
-0.019622802734375,
0.023193359375,
-0.021026611328125,
-0.05511474609375,
-0.034942626953125,
0.056610107421875,
-0.039276123046875,
-0.019561767578125,
0.017730712890625,
0.042816162109375,
0.0433349609375,
-0.025238037109375,
0.054840087890625,
-0.01473236083984375,
0.053680419921875,
0.0285186767578125,
-0.02978515625,
0.0188140869140625,
-0.0361328125,
0.060760498046875,
-0.019561767578125,
-0.037872314453125,
-0.0013561248779296875,
-0.021484375,
0.0035305023193359375,
0.038970947265625,
-0.0144500732421875,
-0.0621337890625,
-0.00771331787109375,
-0.0033435821533203125,
0.06072998046875,
-0.0236358642578125,
-0.04510498046875,
-0.022216796875,
-0.0145263671875,
0.0281524658203125,
0.005573272705078125,
0.01165008544921875,
0.0272064208984375,
-0.0360107421875,
0.0521240234375,
0.052490234375,
0.036590576171875,
0.0462646484375,
0.0120849609375,
0.04083251953125,
0.0286102294921875,
0.0413818359375,
0.037353515625,
-0.006839752197265625,
-0.0141143798828125,
-0.0181884765625,
-0.04547119140625,
-0.0222625732421875,
-0.043914794921875,
0.0217132568359375,
-0.01342010498046875,
0.023956298828125,
-0.0194091796875,
0.003376007080078125,
-0.004146575927734375,
0.03814697265625,
-0.0038967132568359375,
-0.02337646484375,
-0.01477813720703125,
0.0355224609375,
0.038330078125,
-0.010833740234375,
-0.031982421875,
-0.04718017578125,
-0.0245513916015625,
0.04339599609375,
-0.01508331298828125,
-0.053680419921875,
0.0078582763671875,
0.01873779296875,
-0.00688934326171875,
-0.053558349609375,
-0.058013916015625,
-0.0287017822265625,
-0.004852294921875,
0.07684326171875,
-0.01122283935546875,
0.009429931640625,
-0.018768310546875,
-0.0050811767578125,
-0.0012655258178710938,
-0.0016012191772460938,
-0.02166748046875,
0.027923583984375,
0.0199127197265625,
0.010986328125,
-0.00624847412109375,
0.054168701171875,
-0.049285888671875,
-0.0008020401000976562,
0.002658843994140625,
0.04669189453125,
0.04046630859375,
0.000881195068359375,
-0.0033283233642578125,
-0.0223236083984375,
-0.050628662109375,
-0.06463623046875,
0.02288818359375,
0.0137481689453125,
-0.052520751953125,
0.0221710205078125,
0.0043182373046875,
0.0194854736328125,
0.051116943359375,
-0.0146484375,
-0.039215087890625,
-0.0191650390625,
-0.0299224853515625,
0.01271820068359375,
0.028045654296875,
-0.0023326873779296875,
-0.0031337738037109375,
0.006740570068359375,
0.01137542724609375,
0.000579833984375,
0.00731658935546875,
0.03558349609375,
-0.01338958740234375,
-0.03619384765625,
-0.0252685546875,
-0.0072021484375,
0.0677490234375,
0.0115203857421875,
-0.052154541015625,
0.056243896484375,
0.0293426513671875,
0.045379638671875,
0.01971435546875,
0.025848388671875,
-0.00019407272338867188,
0.0039043426513671875,
-0.0215606689453125,
-0.026824951171875,
-0.002277374267578125,
-0.03558349609375,
0.0097808837890625,
-0.057769775390625,
0.050048828125,
-0.048797607421875,
-0.02349853515625,
-0.039642333984375,
-0.0038299560546875,
-0.01267242431640625,
-0.010284423828125,
-0.03521728515625,
0.0194091796875,
0.04461669921875,
-0.00933074951171875,
-0.0222930908203125,
-0.034759521484375,
0.01194000244140625,
-0.0178680419921875,
0.06500244140625,
-0.01042938232421875,
0.040435791015625,
0.0135345458984375,
0.0596923828125,
-0.0295257568359375,
-0.01494598388671875,
-0.0279541015625,
0.026519775390625,
0.004253387451171875,
0.043182373046875,
-0.042510986328125,
0.035003662109375,
0.038177490234375,
-0.031463623046875,
-0.00952911376953125,
-0.061798095703125,
-0.014068603515625,
-0.041351318359375,
0.035430908203125,
-0.03692626953125,
0.0235595703125,
0.0171051025390625,
0.0135040283203125,
-0.041595458984375,
-0.0183868408203125,
-0.0262298583984375,
0.00502777099609375,
0.050323486328125,
0.0156707763671875,
-0.0008268356323242188,
-0.0305633544921875,
-0.032073974609375,
-0.014129638671875,
-0.006931304931640625,
0.0235443115234375,
0.0271148681640625,
-0.02825927734375,
0.044891357421875,
0.05908203125,
-0.06976318359375,
-0.05560302734375,
-0.0174407958984375,
-0.0177154541015625,
0.00632476806640625,
-0.042694091796875,
0.029022216796875,
-0.002635955810546875,
-0.01654052734375,
0.044952392578125,
0.0287017822265625,
-0.0014705657958984375,
0.00988006591796875,
-0.04052734375,
0.0142974853515625,
0.0011682510375976562,
0.003875732421875,
0.0205078125,
0.00858306884765625,
-0.051300048828125,
0.032623291015625,
0.020172119140625,
-0.03741455078125,
-0.0445556640625,
-0.06842041015625,
-0.044677734375,
0.0313720703125,
-0.056884765625,
-0.006893157958984375,
0.043365478515625,
-0.0562744140625,
-0.00890350341796875,
-0.0306243896484375,
-0.03424072265625,
0.018951416015625,
-0.06329345703125,
-0.06597900390625,
0.017181396484375,
-0.00592803955078125,
-0.0087432861328125,
-0.00824737548828125,
-0.00740814208984375,
-0.0023326873779296875,
-0.05096435546875,
-0.02154541015625,
0.0138092041015625,
0.00982666015625,
0.0305328369140625,
-0.0185546875,
-0.07733154296875,
0.0031147003173828125,
0.01251220703125,
-0.0399169921875,
0.0279998779296875,
-0.03558349609375,
0.007537841796875,
0.0108184814453125,
0.055450439453125,
0.031524658203125,
-0.033050537109375,
-0.04534912109375,
0.034149169921875,
-0.03533935546875,
-0.05535888671875,
0.03515625,
-0.02020263671875,
0.0205841064453125,
-0.0191497802734375,
-0.051239013671875,
0.01473236083984375,
-0.045654296875,
-0.0020809173583984375,
-0.06219482421875,
-0.049560546875,
-0.083251953125,
-0.01885986328125,
0.007781982421875,
-0.044464111328125,
-0.048431396484375,
0.054443359375,
0.0097503662109375,
-0.0184478759765625,
0.01226043701171875,
-0.0173797607421875,
0.06207275390625,
0.01059722900390625,
-0.0247344970703125,
0.018157958984375,
-0.0189666748046875,
-0.016357421875,
-0.0170135498046875,
-0.037078857421875,
-0.0134429931640625,
0.0153045654296875,
0.00362396240234375,
0.017486572265625,
0.04974365234375,
0.0538330078125,
0.02081298828125,
0.00795745849609375,
-0.01824951171875,
0.0148773193359375,
-0.00948333740234375,
-0.005199432373046875,
0.01509857177734375,
-0.003139495849609375,
-0.0692138671875,
-0.04351806640625,
-0.016143798828125,
0.01557159423828125,
-0.00736236572265625,
-0.04864501953125,
-0.0092010498046875,
-0.030487060546875,
0.01485443115234375,
0.0003616809844970703,
0.03009033203125,
0.061920166015625,
0.049468994140625,
0.0169525146484375,
-0.037322998046875,
0.01537322998046875,
0.0017108917236328125,
0.039031982421875,
0.007595062255859375,
0.0059661865234375,
-0.0697021484375,
-0.03167724609375,
0.041961669921875,
-0.0203704833984375,
-0.01319122314453125,
-0.03082275390625,
0.0006775856018066406,
-0.01558685302734375,
-0.0169525146484375,
0.017059326171875,
0.035858154296875,
0.026519775390625,
0.0479736328125,
0.039886474609375,
-0.04095458984375,
0.03564453125,
0.031829833984375,
0.01430511474609375,
-0.0304107666015625,
0.0178375244140625,
-0.03375244140625,
0.050994873046875,
-0.048187255859375,
0.021575927734375,
-0.0189056396484375,
-0.0228729248046875,
-0.03314208984375,
0.0098419189453125,
-0.02362060546875,
-0.00511932373046875,
0.019805908203125,
-0.02484130859375,
0.0113983154296875,
0.050537109375,
0.045562744140625,
0.037384033203125,
0.00386810302734375,
0.01151275634765625,
-0.0213165283203125,
0.05181884765625,
0.06298828125,
0.05816650390625,
0.04705810546875,
0.05194091796875,
-0.00983428955078125,
-0.0302581787109375,
0.00827789306640625,
0.035003662109375,
-0.0237274169921875,
-0.04296875,
0.02178955078125,
0.008544921875,
-0.045318603515625,
-0.0092620849609375,
0.04974365234375,
0.024200439453125,
0.022918701171875,
-0.0231475830078125,
-0.018310546875,
0.048828125,
-0.006496429443359375,
0.01007843017578125,
0.007190704345703125,
0.005168914794921875,
-0.00531005859375,
-0.04864501953125,
-0.01328277587890625,
0.01189422607421875,
-0.03521728515625,
-0.035552978515625,
-0.0545654296875,
0.052398681640625,
0.0126953125,
0.0218963623046875,
-0.00960540771484375,
0.00516510009765625,
-0.0124969482421875,
0.036529541015625,
-0.01082611083984375,
-0.02288818359375,
-0.01413726806640625,
-0.008453369140625,
-0.0168609619140625,
0.007495880126953125,
0.051422119140625,
0.006931304931640625,
0.01537322998046875,
-0.0200653076171875,
-0.018096923828125,
0.054779052734375,
0.007671356201171875,
-0.0032672882080078125,
0.039215087890625,
-0.037384033203125,
-0.029754638671875,
-0.01349639892578125,
0.034271240234375,
-0.00811767578125,
-0.0640869140625,
-0.0110626220703125,
0.01453399658203125,
0.048919677734375,
-0.02215576171875,
-0.062103271484375,
-0.0174407958984375,
0.0496826171875,
0.00982666015625,
-0.0084991455078125,
-0.02294921875,
-0.0176849365234375,
-0.0196380615234375,
0.046173095703125,
0.01197052001953125,
0.0106658935546875,
0.045867919921875,
-0.03094482421875,
-0.041961669921875,
-0.0193023681640625,
-0.021820068359375,
0.048309326171875,
-0.044586181640625,
-0.00913238525390625,
-0.0274505615234375,
-0.01800537109375,
-0.041046142578125,
-0.00629425048828125,
-0.00617218017578125,
0.0274810791015625,
-0.060455322265625,
0.01459503173828125,
-0.036712646484375,
-0.038970947265625,
0.01502227783203125,
-0.029449462890625,
0.0215911865234375,
-0.0416259765625,
0.022918701171875,
-0.0240325927734375,
0.01558685302734375,
-0.0121612548828125,
0.01392364501953125,
0.002437591552734375,
-0.0216827392578125,
-0.01274871826171875,
-0.0225067138671875,
0.0467529296875,
-0.0194549560546875,
-0.047088623046875,
-0.019134521484375,
0.006671905517578125,
0.06866455078125,
0.006702423095703125,
-0.04437255859375,
-0.017913818359375,
0.028289794921875,
0.0305938720703125,
-0.0179290771484375,
0.002410888671875,
-0.044830322265625,
0.04949951171875,
-0.048309326171875,
-0.017974853515625,
0.040618896484375,
-0.053009033203125,
-0.003849029541015625,
0.0164947509765625,
0.03729248046875,
0.0026836395263671875,
0.05206298828125,
0.0293121337890625,
-0.039276123046875,
-0.032745361328125,
-0.043426513671875,
-0.03314208984375,
0.029754638671875,
-0.057281494140625,
0.01507568359375,
-0.045379638671875,
-0.04852294921875,
0.058349609375,
-0.0146026611328125,
-0.00597381591796875,
-0.016021728515625,
-0.0172576904296875,
0.01326751708984375,
0.01064300537109375,
-0.0394287109375,
-0.0112762451171875,
-3.808736801147461e-05,
0.06182861328125,
0.01690673828125,
-0.02471923828125,
-0.0304718017578125,
0.03173828125,
0.006572723388671875,
0.060699462890625,
0.035308837890625,
-0.016387939453125,
0.00787353515625,
-0.004245758056640625,
0.0305023193359375,
0.01090240478515625,
-0.05322265625,
0.02752685546875,
0.0479736328125,
-0.0034656524658203125,
-0.0653076171875,
0.008941650390625,
0.003345489501953125,
-0.004543304443359375,
0.0281524658203125,
0.027984619140625,
-0.0006084442138671875,
0.0479736328125,
0.0211639404296875,
0.037841796875,
0.0672607421875,
-0.028289794921875,
0.01146697998046875,
0.0263214111328125,
0.0401611328125,
-0.004993438720703125,
-0.0082244873046875,
0.0440673828125,
-0.032440185546875,
-0.04193115234375,
-0.05975341796875,
0.0377197265625,
0.0085906982421875,
0.02911376953125,
-0.0169525146484375,
-0.0074462890625,
-0.0121002197265625,
-0.0230865478515625,
-0.0406494140625,
-0.046783447265625,
-0.01537322998046875,
0.053253173828125,
-0.0179290771484375,
0.037750244140625,
-0.00908660888671875,
-0.06591796875,
0.030029296875,
0.00379180908203125,
-0.0275726318359375,
0.005695343017578125,
-0.0309906005859375,
-0.052734375,
0.0090484619140625,
0.024871826171875,
0.013397216796875,
-0.01174163818359375,
-0.026519775390625,
-0.0061798095703125,
0.0184326171875,
-0.00943756103515625,
0.06329345703125,
0.030120849609375,
-0.044097900390625,
0.0219879150390625,
0.055908203125,
0.07977294921875,
-0.04974365234375,
-0.04217529296875,
-0.013397216796875,
0.0020618438720703125,
0.041961669921875,
0.03155517578125,
0.0171661376953125,
0.041717529296875,
-0.036865234375,
0.0096435546875,
-0.007289886474609375,
-0.01148223876953125,
-0.06988525390625,
0.0073394775390625,
-0.00408935546875,
-0.05279541015625,
-0.03839111328125,
0.0005793571472167969,
0.04296875,
0.0008740425109863281,
-0.0083160400390625,
-0.0201416015625,
-0.024322509765625,
-0.04119873046875,
0.0192413330078125,
-0.034332275390625,
0.032318115234375,
0.0169677734375,
0.053375244140625,
-0.026214599609375,
0.0240478515625,
-0.0168304443359375,
0.0046539306640625,
0.036834716796875,
-0.03326416015625,
0.0010528564453125,
0.020599365234375,
-0.053955078125,
-0.0450439453125,
0.030059814453125,
-0.05712890625,
-0.028289794921875,
-0.05010986328125,
0.0140533447265625,
-0.0721435546875,
-0.05780029296875,
-0.0213623046875,
0.0166168212890625,
-0.0267791748046875,
0.033172607421875,
-0.0482177734375,
0.00632476806640625,
0.059356689453125,
0.035064697265625,
0.0093994140625,
0.0721435546875,
-0.01085662841796875,
0.005950927734375,
0.0281524658203125,
0.050048828125,
0.04486083984375,
-0.046661376953125,
-0.05621337890625,
-0.018798828125,
-0.048858642578125,
-0.0082244873046875,
0.029510498046875,
-0.022491455078125,
-0.0606689453125,
-0.05914306640625,
-0.05059814453125,
0.03765869140625,
-0.0027751922607421875,
-0.03594970703125,
0.03753662109375,
-0.051239013671875,
-0.0031833648681640625,
-0.0340576171875,
0.04376220703125,
0.042816162109375,
0.038665771484375,
0.041259765625,
0.046783447265625,
-0.0284271240234375,
0.046142578125,
0.036285400390625,
0.0341796875,
0.036407470703125,
-0.02679443359375,
0.005886077880859375,
-0.0301055908203125,
0.0244598388671875,
0.040679931640625,
0.02435302734375,
0.01171112060546875,
0.027008056640625,
-0.0172882080078125,
-0.041259765625,
-0.0230712890625,
0.043853759765625,
-0.03717041015625,
-0.0294342041015625,
-0.049835205078125,
-0.0161895751953125,
-0.00457000732421875,
-0.03533935546875,
-0.006587982177734375,
-0.038238525390625,
0.002857208251953125,
0.0233612060546875,
0.033294677734375,
0.0309906005859375,
0.0017347335815429688,
-0.01097869873046875,
0.0129241943359375,
-0.034332275390625,
-0.02655029296875,
-0.01071929931640625,
-0.04364013671875,
-0.005420684814453125,
0.004581451416015625,
-0.0367431640625,
0.040069580078125,
0.036102294921875,
-0.032684326171875,
-0.035400390625,
0.0012359619140625,
-0.0182952880859375,
-0.037933349609375,
0.0013227462768554688,
-0.03204345703125,
-0.03662109375,
-0.009918212890625,
-0.0009937286376953125,
-0.0244598388671875,
0.004680633544921875,
0.002300262451171875,
-0.01280975341796875,
0.0013437271118164062,
-0.034088134765625,
0.01024627685546875,
-0.047271728515625,
0.042083740234375,
-0.0143890380859375,
0.02459716796875,
-0.006870269775390625,
-0.031951904296875,
0.0484619140625,
0.0245208740234375,
-0.0189208984375,
0.008819580078125,
-0.043853759765625,
-0.00942230224609375,
-0.047821044921875,
0.0211944580078125,
0.0267791748046875,
-0.0102996826171875,
0.0134429931640625,
-0.0308990478515625,
0.03363037109375,
-0.0428466796875,
0.009063720703125,
0.0491943359375,
-0.0244598388671875,
-0.0036602020263671875,
-0.01009368896484375,
0.01351165771484375,
-0.048370361328125,
-0.03369140625,
-0.048095703125,
0.02001953125,
-0.041595458984375,
-0.019287109375,
-0.035491943359375,
-0.005565643310546875,
-0.00467681884765625,
0.0386962890625,
0.040985107421875,
0.004817962646484375,
-0.042388916015625,
-0.04595947265625,
-0.03155517578125,
0.040496826171875,
-0.037841796875,
0.0153961181640625,
0.0218048095703125,
0.00899505615234375,
0.0026187896728515625,
-0.04425048828125,
0.0377197265625,
-0.0275421142578125,
-0.0181427001953125,
-0.050079345703125,
-0.0430908203125,
0.047943115234375,
-0.0052947998046875,
-0.0201873779296875,
-0.044342041015625,
0.04339599609375,
-0.006786346435546875,
0.016357421875,
0.046295166015625,
0.01473236083984375,
-0.0185394287109375,
-0.0249176025390625,
0.0116119384765625,
0.005527496337890625,
0.00476837158203125,
-0.033843994140625,
0.0014295578002929688,
-0.046295166015625,
0.038970947265625,
-0.017364501953125,
0.005329132080078125,
0.020172119140625,
-0.050872802734375,
0.042388916015625,
-0.0019779205322265625,
-0.019775390625,
-0.014984130859375,
0.037017822265625,
0.0188751220703125,
0.02740478515625,
0.0132904052734375,
-0.04888916015625,
-0.0044708251953125,
-0.00820159912109375,
-0.041015625,
0.031280517578125,
-0.0219268798828125,
0.040374755859375,
0.006317138671875,
0.028594970703125,
0.0229644775390625,
0.009307861328125,
-0.002010345458984375,
-0.01320648193359375,
0.038360595703125,
-0.020751953125,
-0.01468658447265625,
0.043304443359375,
-0.02496337890625,
0.0096588134765625,
-0.0352783203125,
-0.034515380859375,
-0.027557373046875,
-0.04400634765625,
-0.035064697265625,
-0.0228271484375,
-0.0197296142578125,
0.039764404296875,
-0.01149749755859375,
0.01132965087890625,
-0.04559326171875,
0.04931640625,
-0.00795745849609375,
0.01788330078125,
-0.00891876220703125,
-0.047882080078125,
0.0008993148803710938,
-0.0130462646484375,
-0.0305328369140625,
0.0214385986328125,
0.038238525390625,
-0.00896453857421875,
-0.045562744140625,
0.03631591796875,
-0.04803466796875,
-0.02764892578125,
0.037384033203125,
0.0189666748046875,
-0.01776123046875,
-0.00250244140625,
0.043426513671875,
0.020538330078125,
0.01194000244140625,
-0.0098876953125,
0.00933837890625,
0.00783538818359375,
-0.0504150390625,
-0.0217437744140625,
0.026580810546875,
0.037017822265625,
-0.017333984375,
-0.016143798828125,
0.016357421875,
-0.0120391845703125,
0.0124664306640625,
-0.0176239013671875,
-0.037017822265625,
-0.024932861328125,
0.0034694671630859375,
0.0496826171875,
-0.00606536865234375,
-0.0178985595703125,
-3.4332275390625e-05,
-0.0225830078125,
-0.0083465576171875,
-0.0239105224609375,
0.031463623046875,
0.025665283203125,
0.0253753662109375,
-0.0115814208984375,
0.0149383544921875,
0.0035419464111328125,
0.017120361328125,
0.0240325927734375,
0.0189971923828125,
0.01078033447265625,
-0.031005859375,
-0.026702880859375,
-0.031890869140625,
-0.0174713134765625,
0.0005273818969726562,
-0.0467529296875,
-0.00629425048828125,
0.0008425712585449219,
0.0247039794921875,
-0.005710601806640625,
0.0213623046875,
0.007205963134765625,
-0.01386260986328125,
0.0457763671875,
0.0002219676971435547,
-0.0186309814453125,
-0.03753662109375,
0.039215087890625,
0.035552978515625,
0.0267791748046875,
0.022003173828125,
0.0305938720703125,
-0.0051422119140625,
0.028594970703125,
-0.0279388427734375,
-0.0181884765625,
0.04949951171875,
-0.043365478515625,
0.03924560546875,
0.0160369873046875,
0.032012939453125,
-0.00982666015625,
-0.0179290771484375,
-0.049774169921875,
-0.0318603515625,
0.0234375,
0.0096588134765625,
-0.035888671875,
0.045928955078125,
-0.0033016204833984375,
-0.006072998046875,
0.034637451171875,
-0.037353515625,
0.0159912109375,
0.040496826171875,
0.03448486328125,
-0.005123138427734375,
-0.015838623046875,
-0.038299560546875,
0.02569580078125,
-0.01036834716796875,
-0.0176544189453125,
-0.032806396484375,
-0.0202789306640625,
0.046112060546875,
0.04632568359375,
0.04351806640625,
-0.005146026611328125,
-0.049224853515625,
-0.002498626708984375,
0.02655029296875,
-0.0150604248046875,
-0.02593994140625,
0.045562744140625,
0.027679443359375,
-0.017242431640625,
-0.01513671875,
-0.04583740234375,
-0.03607177734375,
0.0292816162109375,
0.0029850006103515625,
0.0149078369140625,
-0.0190887451171875,
-0.027587890625,
-0.0295562744140625,
-0.029693603515625,
-0.00998687744140625,
0.007373809814453125,
0.020751953125,
-0.0234527587890625,
-0.03228759765625,
0.0218658447265625,
-0.01514434814453125,
0.022369384765625,
0.047576904296875,
0.01006317138671875,
-0.036224365234375,
-0.0264434814453125,
0.0258026123046875,
0.0195770263671875,
-0.038421630859375,
0.012603759765625,
0.0233917236328125,
-0.046722412109375,
0.02850341796875,
0.020721435546875,
-0.036651611328125,
-0.023834228515625,
0.00020647048950195312,
-0.031768798828125,
0.040374755859375,
0.03594970703125,
0.038787841796875,
-0.01273345947265625,
-0.00766754150390625,
0.020843505859375,
0.047698974609375,
0.045684814453125,
-0.048095703125,
0.01010894775390625,
0.0272979736328125,
-0.0090789794921875,
0.033935546875,
-0.0455322265625,
0.033843994140625,
0.006046295166015625,
-0.04498291015625,
0.043212890625,
-0.02008056640625,
-0.006587982177734375,
0.021942138671875,
0.0127105712890625,
-0.00748443603515625,
0.048370361328125,
-0.0019989013671875,
0.030059814453125,
0.0379638671875,
-0.038909912109375,
0.0270843505859375,
-0.04888916015625,
0.0308685302734375,
0.0244903564453125,
-0.042236328125,
-0.01500701904296875,
0.043670654296875,
-0.0257720947265625,
-0.0304107666015625,
0.022979736328125,
-0.048797607421875,
0.0186309814453125,
-0.0300140380859375,
0.002994537353515625,
-0.0278778076171875,
0.007404327392578125,
-0.04119873046875,
-0.032867431640625,
0.01001739501953125,
0.03936767578125,
-0.0029201507568359375,
-0.01274871826171875,
0.016448974609375,
0.04010009765625,
-0.01256561279296875,
0.016021728515625,
-0.0177764892578125,
-0.018585205078125,
0.0259857177734375,
0.021270751953125,
0.02508544921875,
0.02044677734375,
-0.0302734375,
-0.010986328125,
0.006320953369140625,
-0.040496826171875,
-0.046905517578125,
-0.047088623046875,
-0.01230621337890625,
-0.04730224609375,
0.014739990234375,
0.032806396484375,
-0.0253753662109375,
0.0411376953125,
0.037689208984375,
-0.0421142578125,
-0.00740814208984375,
-0.045745849609375,
0.0026569366455078125,
0.04351806640625,
0.041290283203125,
0.0173187255859375,
-0.043853759765625,
-0.039276123046875,
0.046234130859375,
0.0224609375,
0.025115966796875,
0.037261962890625,
-0.059906005859375,
0.017913818359375,
-0.022735595703125,
0.01319122314453125,
-0.03790283203125,
0.026641845703125,
-0.03179931640625,
-0.0250701904296875,
0.0011835098266601562,
-0.0131683349609375,
-0.01009368896484375,
0.04815673828125,
-0.041748046875,
-0.02276611328125,
0.00955963134765625,
-0.0179595947265625,
-0.006244659423828125,
0.0288238525390625,
-0.0025234222412109375,
0.054962158203125,
0.0843505859375,
0.0413818359375,
0.05377197265625,
0.0182952880859375,
0.041046142578125,
0.032196044921875,
0.0207672119140625,
0.01678466796875,
0.032745361328125,
0.056121826171875,
-0.0364990234375,
0.0240325927734375,
-0.034423828125,
0.0203704833984375,
-0.0247955322265625,
0.0229644775390625,
0.06292724609375,
-0.035797119140625,
-0.006343841552734375,
0.033355712890625,
0.015777587890625,
0.03582763671875,
-0.02001953125,
0.021270751953125,
0.04669189453125,
0.03814697265625,
0.023040771484375,
-0.012176513671875,
-0.017120361328125,
-0.034881591796875,
0.0304107666015625,
0.031768798828125,
0.049224853515625,
0.054840087890625,
0.01812744140625,
0.07257080078125,
0.007472991943359375,
0.004871368408203125,
0.01009368896484375,
-0.01983642578125,
0.034088134765625,
-0.039276123046875,
0.0161590576171875,
0.0174560546875,
0.00450897216796875,
0.01483917236328125,
-0.00983428955078125,
0.005279541015625,
0.005596160888671875,
-0.007343292236328125,
0.05706787109375,
-0.024871826171875,
-0.0110931396484375,
-0.0019969940185546875,
-0.0546875,
0.01251220703125,
0.0203399658203125,
-0.01506805419921875,
0.022369384765625,
0.002895355224609375,
-0.048675537109375,
-0.01080322265625,
-0.03631591796875,
-0.01020050048828125,
0.003376007080078125,
-0.0013704299926757812,
0.03167724609375,
-0.0325927734375,
0.05029296875,
0.03729248046875,
0.0298004150390625,
0.0005927085876464844,
0.01552581787109375,
-0.016143798828125,
0.002899169921875,
0.034027099609375,
-0.035369873046875,
0.03619384765625,
0.068115234375,
-0.0032024383544921875,
-0.0252532958984375,
0.040252685546875,
0.035400390625,
-0.00015234947204589844,
0.016357421875,
0.02294921875,
-0.0299072265625,
0.05194091796875,
0.038330078125,
0.037384033203125,
0.05682373046875,
0.06292724609375,
-0.0235748291015625,
-0.0301971435546875,
0.047332763671875,
-0.00545501708984375,
0.038848876953125,
0.032073974609375,
-0.0139923095703125,
0.03643798828125,
-0.047698974609375,
-0.043792724609375,
0.0018854141235351562,
-0.0261993408203125,
-0.0243988037109375,
0.04180908203125,
-0.035247802734375,
0.021820068359375,
-0.022369384765625,
-0.0318603515625,
0.0014047622680664062,
-0.041656494140625,
-0.043212890625,
-0.026641845703125,
0.0709228515625,
0.04254150390625,
-0.059356689453125,
0.0394287109375,
-0.0038814544677734375,
-0.0250701904296875,
-0.0237884521484375,
-0.043121337890625,
-0.0089263916015625,
-0.01374053955078125,
-0.05072021484375,
-0.042510986328125,
-0.05059814453125,
-0.0230865478515625,
-0.04449462890625,
0.00017726421356201172,
-0.0516357421875,
-0.00614166259765625,
-0.004093170166015625,
-0.08447265625,
0.00873565673828125,
-0.008056640625,
0.033233642578125,
-0.0706787109375,
-0.025482177734375,
0.01007843017578125,
-0.05126953125,
-0.0452880859375,
0.00357818603515625,
-0.01580810546875,
-0.02349853515625,
-0.01546478271484375,
-0.027618408203125,
0.045501708984375,
-0.0011110305786132812,
0.0185546875,
-0.0546875,
-0.061737060546875,
0.044677734375,
0.0174407958984375,
-0.06048583984375,
-0.00203704833984375,
-0.012451171875,
-0.036346435546875,
-0.029296875,
0.057037353515625,
0.00823974609375,
0.01000213623046875,
0.00998687744140625,
0.029754638671875,
-0.04620361328125,
0.01373291015625,
-0.0128631591796875,
0.036956787109375,
-0.037322998046875,
-0.042388916015625,
-0.0038013458251953125,
-0.003391265869140625,
0.038909912109375,
0.0158843994140625,
-0.0281524658203125,
-0.031280517578125,
0.0384521484375,
-0.041351318359375,
-0.0016660690307617188,
0.0183868408203125,
0.037872314453125,
0.06573486328125,
-0.014434814453125,
-0.0482177734375,
0.002834320068359375,
0.01511383056640625,
0.03668212890625,
-0.051177978515625,
-0.08428955078125,
0.01198577880859375,
-0.034027099609375,
-0.03759765625,
0.036834716796875,
-0.034088134765625,
-0.08074951171875,
-0.059295654296875,
-0.01363372802734375,
0.004047393798828125,
-0.0106201171875,
-0.0162506103515625,
0.03271484375,
-0.02880859375,
-0.039306640625,
-0.04827880859375,
-0.0016632080078125,
-0.03753662109375,
-0.04266357421875,
-0.005340576171875,
-0.047760009765625,
-0.03045654296875,
-0.01123809814453125,
-0.05316162109375,
-0.01224517822265625,
-0.05694580078125,
-0.03167724609375,
0.00045490264892578125,
-0.05828857421875,
-0.0101776123046875,
-0.0276031494140625,
-0.01837158203125,
-0.037567138671875,
0.024017333984375,
-0.02362060546875,
0.02886962890625,
0.011383056640625,
-0.036956787109375,
0.01020050048828125,
-0.02685546875,
-0.01158905029296875,
-0.03564453125,
-0.0058441162109375,
-0.0173187255859375,
0.003997802734375,
-0.046417236328125,
-0.0182647705078125,
0.0298614501953125,
0.0283660888671875,
-0.014251708984375,
0.0088348388671875,
0.052764892578125,
0.04132080078125,
0.037628173828125,
0.00799560546875,
0.049407958984375,
0.0062103271484375,
-0.01523590087890625,
-0.0174713134765625,
-0.034759521484375,
-0.016326904296875,
0.010406494140625,
0.0419921875,
0.01305389404296875,
-0.033111572265625,
-0.0233154296875,
0.032684326171875,
0.0177154541015625,
-0.0120391845703125,
0.03631591796875,
-0.01465606689453125,
-0.04583740234375,
0.0197296142578125,
0.0189361572265625,
-0.0230560302734375,
-0.00024044513702392578,
-0.001377105712890625,
-0.0032196044921875,
0.009521484375,
-0.00988006591796875,
0.036285400390625,
0.023223876953125,
0.040496826171875,
-0.03521728515625,
0.02496337890625,
-0.02978515625,
0.00045490264892578125,
-0.03857421875,
0.0288848876953125,
-0.0211944580078125,
-0.03582763671875,
-0.027008056640625,
0.005298614501953125,
0.045989990234375,
-0.03533935546875,
-0.0063629150390625,
-0.0504150390625,
0.006023406982421875,
-0.04083251953125,
-0.0584716796875,
0.004764556884765625,
0.040069580078125,
0.042449951171875,
0.046356201171875,
0.0389404296875,
-0.034942626953125,
-0.0229034423828125,
0.0439453125,
-0.033233642578125,
-0.0400390625,
-0.03875732421875,
0.044189453125,
-0.029937744140625,
-0.038177490234375,
0.04296875,
0.011627197265625,
-0.053924560546875,
-0.00029277801513671875,
-0.032562255859375,
0.049407958984375,
-0.05255126953125,
0.0271148681640625,
-0.00687408447265625,
-0.0202789306640625,
0.01800537109375,
-0.0141448974609375,
0.03564453125,
-0.00392913818359375,
-0.033233642578125,
0.011566162109375,
-0.03472900390625,
-0.0187835693359375,
-0.01971435546875,
-0.0338134765625,
0.0457763671875,
0.05987548828125,
0.04730224609375,
0.04119873046875,
0.0297088623046875,
0.033935546875,
-0.037078857421875,
-0.044189453125,
0.00428009033203125,
-0.0222015380859375,
-0.04486083984375,
0.031219482421875,
0.049468994140625,
-0.0281982421875,
-0.0312042236328125,
0.031646728515625,
-0.0182037353515625,
-0.01044464111328125,
-0.0128173828125,
0.0252532958984375,
0.051788330078125,
0.048431396484375,
0.0006895065307617188,
0.0188140869140625,
-0.007137298583984375,
-0.0160675048828125,
0.05865478515625,
0.062164306640625,
0.019683837890625,
0.049041748046875,
-0.031494140625,
0.0003311634063720703,
-0.037139892578125,
-0.057373046875,
0.032470703125,
0.00650787353515625,
0.00717926025390625,
-0.0036067962646484375,
0.039794921875,
0.042633056640625,
-0.022674560546875,
0.024169921875,
0.05133056640625,
-0.0188446044921875,
0.06878662109375,
0.0280609130859375,
-0.01255035400390625,
-0.0278167724609375,
0.03167724609375,
0.041290283203125,
0.05926513671875,
0.0635986328125,
0.04052734375,
-0.0254974365234375,
-0.0305633544921875,
0.06219482421875,
0.039031982421875,
-0.034393310546875,
0.06817626953125,
-0.037322998046875,
0.0181121826171875,
-0.041778564453125,
0.024261474609375,
0.00107574462890625,
0.04327392578125,
-0.04376220703125,
-0.0804443359375,
0.01947021484375,
0.06536865234375,
0.0149078369140625,
0.0234527587890625,
-0.0211944580078125,
0.057586669921875,
0.0197601318359375,
0.00638580322265625,
0.00823974609375,
0.002674102783203125,
0.08538818359375,
-0.00023090839385986328,
0.00011664628982543945,
0.0316162109375,
0.0300445556640625,
0.07220458984375,
0.07159423828125,
-3.4928321838378906e-05,
-0.024383544921875,
-0.01387786865234375,
-0.00909423828125,
0.031585693359375,
-0.0439453125,
0.00595855712890625,
-0.052581787109375,
-0.008636474609375,
-0.046356201171875,
0.013214111328125,
0.05230712890625,
0.004314422607421875,
0.01397705078125,
-0.0274810791015625,
0.05352783203125,
0.03363037109375,
0.0006318092346191406,
-0.01050567626953125,
-0.034423828125,
0.015380859375,
0.01248931884765625,
-0.0033588409423828125,
-0.0201263427734375,
-0.01409912109375,
0.01172637939453125,
0.01210784912109375,
0.01073455810546875,
0.035858154296875,
-0.0250091552734375,
0.041015625,
-0.01507568359375,
0.06964111328125,
0.05712890625,
0.0252227783203125,
0.0036258697509765625,
0.027313232421875,
-0.048126220703125,
-0.0016469955444335938,
0.00455474853515625,
0.00981903076171875,
-0.0207977294921875,
-0.0271759033203125,
0.04766845703125,
-0.035369873046875,
-0.004810333251953125,
-0.0009908676147460938,
-0.0016965866088867188,
0.020050048828125,
0.037109375,
-0.0129547119140625,
-0.061767578125,
-0.01425933837890625,
0.0201873779296875,
0.00656890869140625,
0.0428466796875,
0.041473388671875,
-1.245737075805664e-05,
0.015350341796875,
0.01271820068359375,
0.0124969482421875,
0.043212890625,
0.0709228515625,
0.054351806640625,
-0.0294036865234375,
-0.06439208984375,
0.062347412109375,
0.0230865478515625,
0.00403594970703125,
0.04241943359375,
-0.0316162109375,
0.08563232421875,
0.07830810546875,
0.0010652542114257812,
-0.007904052734375,
0.0447998046875,
-0.0154571533203125,
-0.01532745361328125,
0.0229034423828125,
-0.030792236328125,
-0.03759765625,
-0.0218048095703125,
-0.05224609375,
-0.006351470947265625,
0.005352020263671875,
-0.004364013671875,
-0.013336181640625,
0.0004298686981201172,
0.0265350341796875,
-0.007373809814453125,
0.019561767578125,
0.042083740234375,
0.04541015625,
0.00414276123046875,
0.029052734375,
-0.0183258056640625,
-0.04449462890625,
-0.04962158203125,
-0.033782958984375,
-0.037750244140625,
0.01065826416015625,
0.0134124755859375,
-0.020660400390625,
-0.055633544921875,
0.03277587890625,
-0.053253173828125,
0.047027587890625,
-0.02069091796875,
0.0154266357421875,
0.043212890625,
0.0009489059448242188,
0.020843505859375,
0.052978515625,
0.0308990478515625,
0.0253448486328125,
0.02545166015625,
-0.0247955322265625,
-0.0357666015625,
0.0379638671875,
0.0377197265625,
-0.040130615234375,
-0.0240631103515625,
-0.05401611328125,
-0.005275726318359375,
0.0423583984375,
0.02880859375,
-0.0024871826171875,
0.032470703125,
0.00042438507080078125,
-0.0187225341796875,
0.04742431640625,
0.06451416015625,
0.0166168212890625,
-0.001445770263671875,
-0.036773681640625,
0.03582763671875,
-0.031585693359375,
-0.016387939453125,
-0.05401611328125,
-0.052490234375,
-0.040374755859375,
0.06207275390625,
0.025054931640625,
-0.01617431640625,
0.0199432373046875,
0.0204925537109375,
0.0195159912109375,
-0.0244598388671875,
0.0065460205078125,
-0.002460479736328125,
0.048370361328125,
0.05596923828125,
-0.0202789306640625,
0.0163116455078125,
-0.033782958984375,
-0.032012939453125,
-0.02947998046875,
-0.0089569091796875,
-0.0085906982421875,
0.07391357421875,
0.03131103515625,
-0.032745361328125,
0.052490234375,
0.04437255859375,
-0.03839111328125,
-0.044677734375,
0.0224151611328125,
0.062255859375,
0.0189056396484375,
-0.0287322998046875,
0.0261383056640625,
0.010406494140625,
-0.0188751220703125,
-0.002063751220703125,
0.01303863525390625,
-0.036163330078125,
-0.038665771484375,
0.0224151611328125,
0.0428466796875,
-0.040863037109375,
-0.01523590087890625,
-0.04510498046875,
0.07489013671875,
-0.005462646484375,
-0.0238494873046875,
-0.0206451416015625,
0.00019049644470214844,
-0.0083770751953125,
-0.05364990234375,
-0.06170654296875,
0.027862548828125,
-0.01611328125,
0.01311492919921875,
0.059722900390625,
0.004268646240234375,
0.044097900390625,
-0.0411376953125,
-0.02166748046875,
0.07159423828125,
-0.020111083984375,
-0.0202789306640625,
-0.04718017578125,
-0.032012939453125,
-0.035186767578125,
0.0380859375,
-0.046661376953125,
0.03192138671875,
-0.023223876953125,
0.02703857421875,
-0.0179595947265625,
0.0026950836181640625,
0.0247955322265625,
0.0205078125,
-0.049102783203125,
-0.03515625,
-0.022491455078125,
0.038177490234375,
0.00830841064453125,
-0.023773193359375,
0.0238189697265625,
0.0640869140625,
-0.026336669921875,
0.01392364501953125,
-0.048370361328125,
0.01220703125,
0.027801513671875,
0.016571044921875,
0.0243072509765625,
-0.00623321533203125,
-0.027130126953125,
0.059417724609375,
0.01351165771484375,
-0.032989501953125,
-0.01270294189453125,
0.051544189453125,
0.0282135009765625,
-0.007213592529296875,
-0.00457763671875,
0.001277923583984375,
-0.025299072265625,
-0.010955810546875,
-0.0207366943359375,
0.032501220703125,
-0.007595062255859375,
0.0008497238159179688,
-0.017578125,
-0.00185394287109375,
0.038330078125,
0.0455322265625,
0.0193328857421875,
-0.01320648193359375,
0.0367431640625,
0.0316162109375,
0.0093841552734375,
-0.026031494140625,
-0.006328582763671875,
0.026397705078125,
0.043731689453125,
-0.0252838134765625,
-0.0160980224609375,
-0.01285552978515625,
0.04498291015625,
0.016326904296875,
-0.0226593017578125,
0.0008859634399414062,
0.0025005340576171875,
-0.0162353515625,
0.08331298828125,
0.00499725341796875,
0.032562255859375,
0.0304412841796875,
0.0015811920166015625,
-0.01160430908203125,
0.04815673828125,
-0.033447265625,
-0.050079345703125,
0.0311737060546875,
-0.01374053955078125,
0.0114593505859375,
0.002674102783203125,
-0.0035858154296875,
-0.0294647216796875,
-0.01207733154296875,
0.05706787109375,
0.04559326171875,
-0.036163330078125,
0.08013916015625,
0.08526611328125,
-0.01235198974609375,
0.0270538330078125,
-0.0028285980224609375,
0.00772857666015625,
-0.004425048828125,
0.0134429931640625,
-0.01751708984375,
0.031158447265625,
0.06292724609375,
-0.037017822265625,
-0.05096435546875,
-0.0323486328125,
-0.033477783203125,
-0.033721923828125,
-0.051727294921875,
0.006053924560546875,
-0.028900146484375,
0.049774169921875,
-0.039215087890625,
-0.01491546630859375,
0.058746337890625,
0.0240325927734375,
0.041259765625,
0.0394287109375,
0.01885986328125,
-0.0021305084228515625,
-0.038421630859375,
0.003047943115234375,
0.060791015625,
0.043304443359375,
-0.005344390869140625,
0.0082244873046875,
0.0141143798828125,
0.0675048828125,
0.051513671875,
-0.034271240234375,
-0.0225067138671875,
0.05059814453125,
0.019439697265625,
-0.01422882080078125,
-0.03662109375,
-0.00777435302734375,
0.01629638671875,
0.046173095703125,
0.0287322998046875,
-0.0059356689453125,
0.0009908676147460938,
-0.005054473876953125,
-0.0010852813720703125,
0.0295562744140625,
-0.0160980224609375,
0.0716552734375,
0.032745361328125,
0.05523681640625,
0.049652099609375,
0.0162353515625,
0.0245361328125,
0.0106353759765625,
-0.0238189697265625,
-0.06365966796875,
-0.039459228515625,
-0.01959228515625,
0.0675048828125,
-0.0132293701171875,
-0.033203125,
-0.0163726806640625,
-0.006130218505859375,
-0.0192718505859375,
-0.0007467269897460938,
-0.050201416015625,
0.016845703125,
-0.006488800048828125,
-0.0268096923828125,
0.0267181396484375,
0.035064697265625,
-0.0184326171875,
0.0394287109375,
-0.029083251953125,
0.0162353515625,
-0.02362060546875,
-0.0164031982421875,
-0.020172119140625,
-0.027557373046875,
-0.0282440185546875,
-0.042388916015625,
0.0266265869140625,
-0.0294189453125,
0.040618896484375,
-0.036895751953125,
-0.0240020751953125,
0.006195068359375,
-0.00675201416015625,
-0.0185699462890625,
-0.04779052734375,
0.033203125,
0.01509857177734375,
0.0145263671875,
-0.043304443359375,
-0.0026836395263671875,
0.0379638671875,
-0.023162841796875,
0.02008056640625,
-0.0155181884765625,
0.006618499755859375,
-0.03643798828125,
-0.038604736328125,
-0.015838623046875,
-0.0467529296875,
-0.040252685546875,
0.021453857421875,
-0.0233001708984375,
0.005550384521484375,
0.049346923828125,
-0.015533447265625,
-0.0220184326171875,
0.01201629638671875,
-0.038116455078125,
-0.0260467529296875,
0.03131103515625,
0.04412841796875,
0.04833984375,
0.0352783203125,
-0.043426513671875,
0.0261993408203125,
0.011322021484375,
0.01540374755859375,
-0.0269927978515625,
-0.00978851318359375,
0.0012359619140625,
0.04193115234375,
0.04315185546875,
-0.0276336669921875,
-0.029388427734375,
0.0250396728515625,
-0.0254669189453125,
0.04132080078125,
-0.01023101806640625,
-0.003574371337890625,
0.00020039081573486328,
0.0024547576904296875,
-0.027099609375,
0.047119140625,
0.04437255859375,
-0.0171356201171875,
0.034637451171875,
0.030364990234375,
-0.039093017578125,
-0.020477294921875,
-0.01220703125,
-0.02862548828125,
0.041290283203125,
0.01396942138671875,
-0.046966552734375,
0.0194854736328125,
0.035919189453125,
0.0303802490234375,
0.01346588134765625,
0.03680419921875,
-0.0180206298828125,
0.0279541015625,
0.0292205810546875,
-0.00687408447265625,
-0.039154052734375,
-0.0087127685546875,
-0.0185546875,
0.0209808349609375,
0.02606201171875,
-0.04803466796875,
0.042327880859375,
0.007350921630859375,
0.041412353515625,
-0.0258331298828125,
-0.01473236083984375,
-0.0304107666015625,
-0.01561737060546875,
0.024169921875,
0.00396728515625,
-0.01172637939453125,
-0.0012731552124023438,
-0.046661376953125,
0.0243682861328125,
-0.021728515625,
-0.0101776123046875,
-0.0303802490234375,
-0.04205322265625,
0.00872039794921875,
-0.04150390625,
-0.01666259765625,
0.043243408203125,
0.0186004638671875,
0.04522705078125,
-0.038330078125,
0.0272064208984375,
0.019927978515625,
0.0467529296875,
0.04852294921875,
-0.0007567405700683594,
0.0283355712890625,
0.0224456787109375,
0.045074462890625,
-0.01076507568359375,
-0.0298309326171875,
-0.037139892578125,
0.0239715576171875,
-0.0399169921875,
-0.039398193359375,
-0.03839111328125,
-0.0173797607421875,
0.043182373046875,
-0.0267791748046875,
-0.02813720703125,
0.01210784912109375,
-0.00943756103515625,
-0.048370361328125,
-0.02215576171875,
-0.04498291015625,
0.03375244140625,
0.039703369140625,
0.04730224609375,
0.03558349609375,
-0.0295257568359375,
-0.0322265625,
-0.0261077880859375,
-0.031585693359375,
0.005054473876953125,
0.01317596435546875,
0.020111083984375,
-0.0250091552734375,
-0.045623779296875,
-0.02093505859375,
-0.007526397705078125,
0.041748046875,
-0.0228424072265625,
-0.04998779296875,
0.022857666015625,
-0.032867431640625,
-0.036773681640625,
-0.0479736328125,
0.03253173828125,
0.0257415771484375,
0.0205535888671875,
-0.034332275390625,
-0.043426513671875,
-0.042449951171875,
0.020263671875,
-0.017730712890625,
-0.03582763671875,
-0.01059722900390625,
0.0267791748046875,
0.01174163818359375,
-0.0438232421875,
0.020263671875,
-0.013824462890625,
-0.0115966796875,
0.0032520294189453125,
0.0037994384765625,
0.00800323486328125,
0.0098876953125,
-0.0439453125,
-0.0199127197265625,
0.016265869140625,
-0.0081634521484375,
-0.01450347900390625,
-0.0186004638671875,
-0.00925445556640625,
-0.024322509765625,
0.01499176025390625,
-0.0036449432373046875,
0.0244293212890625,
-0.043243408203125,
0.043670654296875,
-0.0016450881958007812,
-0.048187255859375,
0.0096588134765625,
0.015777587890625,
-0.0134735107421875,
-0.033599853515625,
0.021087646484375,
0.0035800933837890625,
-0.036102294921875,
-0.0211181640625,
-0.04437255859375,
0.0271759033203125,
-0.0088348388671875,
-0.021392822265625,
0.0296478271484375,
-0.0305023193359375,
-0.0187835693359375,
0.0343017578125,
0.04705810546875,
-0.03375244140625,
-0.0290374755859375,
-0.04400634765625,
0.0328369140625,
-0.021728515625,
0.036102294921875,
-0.01358795166015625,
-0.037506103515625,
-0.032623291015625,
0.032257080078125,
0.0257110595703125,
0.03472900390625,
-0.0075836181640625,
-0.007030487060546875,
0.00737762451171875,
0.032501220703125,
-0.04345703125,
-0.0330810546875,
-0.006103515625,
0.0157318115234375,
0.027252197265625,
0.0255889892578125,
-0.004901885986328125,
0.0179443359375,
0.040771484375,
-0.0015821456909179688,
0.01290130615234375,
0.0236968994140625,
-0.04779052734375,
-0.0259246826171875,
0.00948333740234375,
-0.00397491455078125,
0.0230865478515625,
0.034820556640625,
-0.046142578125,
0.030487060546875,
0.0362548828125,
-0.0225677490234375,
0.031890869140625,
-0.0208740234375,
-0.0311737060546875,
0.00033164024353027344,
-0.0024547576904296875,
0.038116455078125,
-0.0374755859375,
0.0265045166015625,
0.045440673828125,
0.03997802734375,
-0.02764892578125,
0.0338134765625,
-0.001720428466796875,
-0.0213623046875,
-0.027099609375,
-0.03216552734375,
0.01532745361328125,
-0.0174560546875,
-0.0254974365234375,
0.04071044921875,
0.03924560546875,
0.0239105224609375,
-0.00960540771484375,
-0.00888824462890625,
0.01422882080078125,
-0.0211334228515625,
-0.048858642578125,
0.045318603515625,
0.002323150634765625,
0.042205810546875,
-0.002086639404296875,
0.03192138671875,
-0.005855560302734375,
0.01080322265625,
-0.014923095703125,
0.013671875,
0.0004563331604003906,
-0.04833984375,
-0.003971099853515625,
-0.00992584228515625,
0.0313720703125,
0.048492431640625,
-0.0341796875,
-0.04534912109375,
-0.022308349609375,
-0.039825439453125,
0.037109375,
-0.016326904296875,
-0.0330810546875,
-0.03680419921875,
0.037872314453125,
0.018798828125,
0.050018310546875,
-0.005016326904296875,
-0.041290283203125,
-0.0455322265625,
0.009002685546875,
0.0033206939697265625,
0.005100250244140625,
0.048095703125,
-0.005733489990234375,
-0.043487548828125,
0.014617919921875,
-0.046539306640625,
-0.04461669921875,
0.005054473876953125,
-0.02105712890625,
-0.00875091552734375,
-0.013824462890625,
-0.013916015625,
0.0267181396484375,
-0.0180206298828125,
0.0224761962890625,
-0.020233154296875,
-0.0015964508056640625,
0.00482177734375,
-0.0030040740966796875,
-0.0225067138671875,
0.030059814453125,
0.0084381103515625,
-0.032623291015625,
-0.0298004150390625,
0.0196380615234375,
-0.041961669921875,
-0.047119140625,
0.047332763671875,
-0.04437255859375,
-0.04052734375,
-0.0251007080078125,
0.003879547119140625,
0.0030460357666015625,
-0.036773681640625,
0.02349853515625,
-0.001132965087890625,
0.01531219482421875,
0.0095977783203125,
-0.01209259033203125,
0.045623779296875,
-0.037506103515625,
0.02362060546875,
0.01097869873046875,
-0.021148681640625,
-0.047149658203125,
-0.01161956787109375,
-0.040008544921875,
-0.048004150390625,
0.031463623046875,
0.038909912109375,
0.006252288818359375,
-0.038177490234375,
0.0278778076171875,
-0.004955291748046875,
-0.031463623046875,
-0.03448486328125,
-0.0262603759765625,
0.0478515625,
-0.030426025390625,
0.043365478515625,
0.0003905296325683594,
0.03106689453125,
-0.0235595703125,
-0.0210723876953125,
-0.044586181640625,
0.01531219482421875,
-0.02911376953125,
0.0389404296875,
0.01302337646484375,
0.03759765625,
-0.0153961181640625,
-0.042388916015625,
0.007633209228515625,
0.0162506103515625,
0.027374267578125,
-0.03399658203125,
0.045562744140625,
-0.0294342041015625,
-0.0322265625,
-0.0024051666259765625,
-0.00356292724609375,
-0.0457763671875,
0.005191802978515625,
-0.0263671875,
-0.045623779296875,
0.025482177734375,
0.021087646484375,
0.04083251953125,
-0.0015478134155273438,
-0.006885528564453125,
-0.03369140625,
-0.017547607421875,
-0.042633056640625,
0.02435302734375,
0.0011568069458007812,
-0.03045654296875,
-0.0018835067749023438,
0.0311279296875,
0.025482177734375,
-0.0274658203125,
-0.06561279296875,
-0.0302886962890625,
-0.0271759033203125,
-0.04840087890625,
-0.0379638671875,
-0.01092529296875,
0.03619384765625,
-0.033477783203125,
-0.053863525390625,
-0.0170745849609375,
0.003208160400390625,
-0.0264434814453125,
-0.047698974609375,
-0.068603515625,
0.0178680419921875,
-0.070556640625,
-0.0662841796875,
-0.052154541015625,
-0.01203155517578125,
0.0948486328125,
-0.0089111328125,
-0.0165252685546875,
0.03912353515625,
-0.00991058349609375,
0.03118896484375,
0.0074462890625,
0.068359375,
-0.00439453125,
-0.054107666015625,
0.0204010009765625,
-0.03326416015625,
-0.01446533203125,
-0.05352783203125,
-0.01116180419921875,
0.043121337890625,
0.008056640625,
0.04736328125,
-0.005786895751953125,
0.040374755859375,
0.058258056640625,
-0.018890380859375,
0.0189361572265625,
-0.046844482421875,
-0.0018472671508789062,
-0.023223876953125,
-0.033905029296875,
0.040008544921875,
0.0279388427734375,
-0.03900146484375,
0.0552978515625,
0.0287017822265625,
-0.00460052490234375,
0.03619384765625,
0.039093017578125,
0.027862548828125,
-0.061981201171875,
0.038543701171875,
0.040435791015625,
-0.0035762786865234375,
0.04327392578125,
0.033477783203125,
-0.008575439453125,
0.0033130645751953125,
0.032012939453125,
0.01198577880859375,
-0.01131439208984375,
0.033172607421875,
0.01849365234375,
-0.050048828125,
0.0401611328125,
0.027435302734375,
0.01702880859375,
0.035491943359375,
-0.0697021484375,
-0.059814453125,
0.007770538330078125,
0.029937744140625,
-0.043731689453125,
-0.042083740234375,
-0.038055419921875,
0.0080718994140625,
-0.07110595703125,
-0.048553466796875,
0.021392822265625,
0.03009033203125,
-0.05987548828125,
-0.03497314453125,
-0.0158843994140625,
0.0233917236328125,
-0.051544189453125,
-0.044281005859375,
-0.0298919677734375,
-0.00910186767578125,
-0.01255035400390625,
-0.0262451171875,
0.020263671875,
0.0218048095703125,
-0.0321044921875,
0.0271453857421875,
0.041961669921875,
-0.050140380859375,
-0.04315185546875,
-0.00572967529296875,
0.01268768310546875,
0.031097412109375,
0.026641845703125,
-0.0367431640625,
0.0234375,
0.040283203125,
0.0178375244140625,
0.0208740234375,
0.03546142578125,
-0.004230499267578125,
-0.0186920166015625,
0.0136871337890625,
0.006603240966796875,
-0.031829833984375,
-0.05804443359375,
0.0028934478759765625,
-0.03826904296875,
0.05078125,
-0.020660400390625,
-0.01056671142578125,
0.048126220703125,
0.0255279541015625,
0.07635498046875,
0.033111572265625,
-0.03814697265625,
-0.036163330078125,
0.040252685546875,
0.0472412109375,
0.01312255859375,
-0.0018148422241210938,
0.037261962890625,
0.017364501953125,
0.01381683349609375,
-0.0638427734375,
0.037506103515625,
0.06787109375,
0.046661376953125,
-0.0416259765625,
-0.01337432861328125,
0.0009088516235351562,
0.0182037353515625,
-0.00958251953125,
-0.044342041015625,
0.031463623046875,
-0.042388916015625,
-0.01824951171875,
0.0174407958984375,
-0.018463134765625,
0.072265625,
-0.063720703125,
-0.09161376953125,
-0.050628662109375,
0.033538818359375,
0.032135009765625,
0.02447509765625,
-0.049652099609375,
0.00439453125,
0.0265655517578125,
-0.0012569427490234375,
-0.026824951171875,
0.0095367431640625,
0.02691650390625,
0.0237579345703125,
0.01593017578125,
0.02471923828125,
-0.0171051025390625,
0.005893707275390625,
0.0258941650390625,
0.0169219970703125,
-0.02880859375,
-0.049591064453125,
0.01275634765625,
0.0247650146484375,
-0.0195770263671875,
-0.0005469322204589844,
-0.018646240234375,
0.045318603515625,
0.04119873046875,
0.01105499267578125,
0.04742431640625,
-0.01535797119140625,
0.037628173828125,
-0.005329132080078125,
-0.048553466796875,
0.08123779296875,
-0.0035266876220703125,
-0.0053863525390625,
-0.0218505859375,
0.031341552734375,
0.037384033203125,
0.0009183883666992188,
-0.057159423828125,
-0.07061767578125,
0.0311126708984375,
0.0251007080078125,
0.0147247314453125,
-0.06378173828125,
-0.04522705078125,
0.016571044921875,
-0.04144287109375,
-0.037139892578125,
0.0026721954345703125,
0.03424072265625,
0.07684326171875,
-0.020050048828125,
-0.03546142578125,
0.0638427734375,
-0.03204345703125,
-0.052703857421875,
0.0265045166015625,
0.03741455078125,
0.038726806640625,
0.0167999267578125,
-0.052734375,
-0.0044097900390625,
-0.035369873046875,
-0.004032135009765625,
-0.01528167724609375,
-0.004913330078125,
0.05712890625,
-0.04461669921875,
-0.0298614501953125,
0.060791015625,
0.0179443359375,
-0.032623291015625,
-0.0804443359375,
0.01325225830078125,
0.037628173828125,
0.03314208984375,
-0.01154327392578125,
0.007717132568359375,
-0.055419921875,
-0.0382080078125,
0.01291656494140625,
0.01366424560546875,
0.037445068359375,
-0.0352783203125,
0.00589752197265625,
-0.00469970703125,
0.039093017578125,
0.0268707275390625,
-5.662441253662109e-06,
0.0036258697509765625,
-0.0008916854858398438,
-0.034515380859375,
-0.041961669921875,
0.031219482421875,
0.04901123046875,
0.00937652587890625,
-0.046478271484375,
-0.00025963783264160156,
0.029998779296875,
0.008056640625,
0.01000213623046875,
0.041290283203125,
0.04486083984375,
0.0281982421875,
0.024658203125,
0.0053558349609375,
0.0003750324249267578,
0.06298828125,
0.0300140380859375,
0.00789642333984375,
0.0013399124145507812,
-0.02947998046875,
0.01197052001953125,
-0.0390625,
-0.0308074951171875,
-0.005626678466796875,
0.0204010009765625,
-0.00928497314453125,
-0.0230560302734375,
0.016845703125,
0.02386474609375,
-0.01030731201171875,
0.0009703636169433594,
-0.0069580078125,
-0.03021240234375,
-0.0224151611328125,
-0.00010961294174194336,
0.0150604248046875,
0.03125,
-0.093505859375,
-0.00750732421875,
-0.0089569091796875,
0.011962890625,
0.0103607177734375,
-0.045013427734375,
0.01136016845703125,
0.035858154296875,
-0.03741455078125,
-0.0250244140625,
-0.0178070068359375,
-9.757280349731445e-05,
-0.044891357421875,
-0.0023956298828125,
-0.0156402587890625,
0.044677734375,
0.07269287109375,
-0.00881195068359375,
-0.050445556640625,
-0.028717041015625,
0.0307464599609375,
0.038848876953125,
-0.03802490234375,
-0.08001708984375,
0.0377197265625,
0.0169830322265625,
0.035858154296875,
-0.01486968994140625,
0.01004791259765625,
0.0487060546875,
-0.053070068359375,
-0.0621337890625,
0.02392578125,
0.03936767578125,
-0.023406982421875,
0.04638671875,
-0.025238037109375,
0.0269927978515625,
-0.046905517578125,
-0.021820068359375,
-0.04498291015625,
0.006687164306640625,
-0.00859832763671875,
-0.0211639404296875,
-0.027069091796875,
0.006072998046875,
0.0109710693359375,
0.031707763671875,
0.0262451171875,
0.03863525390625,
0.007366180419921875,
-0.01277923583984375,
-0.0226898193359375,
0.007259368896484375,
-0.001682281494140625,
-0.012420654296875,
-0.025299072265625,
0.05029296875,
0.01947021484375,
0.0194091796875,
0.07080078125,
0.0215301513671875,
0.00797271728515625,
-0.064453125,
-0.0238189697265625,
-0.02960205078125,
0.06427001953125,
-0.019287109375,
0.036529541015625,
-0.03759765625,
-0.037078857421875,
0.0025806427001953125,
-0.0133819580078125,
0.02923583984375,
0.018341064453125,
0.017120361328125,
-0.00893402099609375,
0.06378173828125,
0.03094482421875,
0.0010805130004882812,
-0.046142578125,
-0.003299713134765625,
0.038299560546875,
0.004795074462890625,
-0.0239105224609375,
0.00876617431640625,
-0.0230712890625,
-0.00714874267578125,
-0.056243896484375,
-0.047760009765625,
0.032745361328125,
0.0325927734375,
-0.043365478515625,
-0.03753662109375,
-0.020111083984375,
-0.04541015625,
-0.04571533203125,
-0.0246734619140625,
-0.01308441162109375,
0.009857177734375,
0.0301055908203125,
0.0189361572265625,
-0.01087188720703125,
-0.04339599609375,
-0.0174407958984375,
0.030487060546875,
0.029754638671875,
0.002635955810546875,
-0.0831298828125,
-0.07257080078125,
-0.033782958984375,
0.06622314453125,
-0.023223876953125,
-0.0391845703125,
0.01245880126953125,
0.01467132568359375,
-0.0065155029296875,
-0.0012502670288085938,
-0.025482177734375,
0.03326416015625,
-0.00975799560546875,
0.02154541015625,
-0.0234832763671875,
0.077880859375,
0.038360595703125,
-0.04876708984375,
-0.0167388916015625,
0.00557708740234375,
0.0711669921875,
-0.021209716796875,
-0.0080718994140625,
-0.004436492919921875,
-0.053497314453125,
0.005710601806640625,
-0.038238525390625,
0.001949310302734375,
0.017974853515625,
-0.0760498046875,
-0.019500732421875,
-0.057647705078125,
-0.05963134765625,
0.0276947021484375,
-0.05096435546875,
-0.05029296875,
-0.022979736328125,
0.026702880859375,
0.0086517333984375,
0.0377197265625,
0.0411376953125,
0.0006608963012695312,
-0.0077667236328125,
-0.044189453125,
0.04534912109375,
-0.018646240234375,
-0.002300262451171875,
-0.0362548828125,
0.03680419921875,
0.0022945404052734375,
0.0443115234375,
0.067626953125,
0.06634521484375,
-0.005970001220703125,
-0.040740966796875,
-0.007625579833984375,
0.011322021484375,
-0.0226593017578125,
0.00044608116149902344,
-0.00984954833984375,
-0.0399169921875,
0.026031494140625,
0.0357666015625,
0.0235748291015625,
-0.07562255859375,
-0.044921875,
0.021759033203125,
-0.01105499267578125,
-0.0259246826171875,
-0.0433349609375,
-0.040496826171875,
0.0221710205078125,
0.037933349609375,
0.0013561248779296875,
-0.0016965866088867188,
-0.01715087890625,
0.0165252685546875,
0.01329803466796875,
-0.00501251220703125,
0.011077880859375,
-0.0382080078125,
0.00974273681640625,
0.02593994140625,
0.0855712890625,
-0.00806427001953125,
0.04345703125,
0.050048828125,
-0.0168914794921875,
0.02734375,
0.07672119140625,
0.0645751953125,
0.04351806640625,
0.052459716796875,
-0.006259918212890625,
0.0274200439453125,
-0.032958984375,
-0.0399169921875,
-0.0198211669921875,
0.026519775390625,
-0.0084075927734375,
-0.052947998046875,
-0.060699462890625,
-0.04595947265625,
0.045166015625,
-0.045166015625,
-0.00943756103515625,
-0.059783935546875,
-0.014251708984375,
0.003650665283203125,
-0.056243896484375,
0.0005793571472167969,
0.0179901123046875,
0.01288604736328125,
-0.0345458984375,
0.0151824951171875,
0.035430908203125,
0.0509033203125,
-0.0174102783203125,
-0.019195556640625,
0.029510498046875,
-0.0066070556640625,
0.0026645660400390625,
-0.060089111328125,
0.031707763671875,
0.005828857421875,
-0.0189361572265625,
0.063232421875,
0.07330322265625,
0.0008673667907714844,
-0.00963592529296875,
0.0289306640625,
-0.012451171875,
0.061248779296875,
0.035614013671875,
0.035858154296875,
0.0237274169921875,
0.0186309814453125,
-0.034393310546875,
0.0171051025390625,
-0.035430908203125,
-0.039581298828125,
0.0023670196533203125,
-0.0299224853515625,
-0.01934814453125,
-0.022125244140625,
-0.018402099609375,
-0.039306640625,
0.05340576171875,
0.051177978515625,
0.05908203125,
0.00908660888671875,
-0.024169921875,
0.05999755859375,
0.031585693359375,
0.042724609375,
-0.01430511474609375,
0.048431396484375,
-0.03070068359375,
-0.0187225341796875,
-0.0174407958984375,
-0.0296783447265625,
-0.006267547607421875,
-0.038909912109375,
0.03912353515625,
0.0100860595703125,
-0.0491943359375,
-0.05010986328125,
-0.041656494140625,
0.0394287109375,
0.01861572265625,
-0.06201171875,
-0.0601806640625,
0.00968170166015625,
-0.0214385986328125,
-0.056396484375,
-0.01386260986328125,
-0.002262115478515625,
0.039825439453125,
-0.036407470703125,
0.00867462158203125,
0.025970458984375,
0.028961181640625,
0.06976318359375,
0.01806640625,
-0.01776123046875,
0.00817108154296875,
0.04962158203125,
-0.0200958251953125,
0.0426025390625,
0.01031494140625,
-0.0206298828125,
0.016265869140625,
0.06683349609375,
-0.00762939453125,
-0.01047515869140625,
-0.031951904296875,
-0.0256195068359375,
0.0689697265625,
-0.001392364501953125,
-0.047393798828125,
0.00652313232421875,
0.00794219970703125,
0.01280975341796875,
0.0190277099609375,
-0.003936767578125,
0.0428466796875,
-0.0025920867919921875,
-0.00754547119140625,
-0.035552978515625,
0.06268310546875,
0.046295166015625,
-0.06097412109375,
0.0238189697265625,
0.013885498046875,
0.048583984375,
-0.029815673828125,
-0.035919189453125,
-0.0167388916015625,
0.029449462890625,
-0.0184173583984375,
-0.0190582275390625,
-0.06744384765625,
0.0227203369140625,
0.02227783203125,
0.0186004638671875,
-0.044525146484375,
0.0178680419921875,
-0.0390625,
-0.016510009765625,
-0.0106353759765625,
-0.01806640625,
-0.00397491455078125,
0.03125,
-0.06488037109375,
0.06048583984375,
0.040069580078125,
-0.0265655517578125,
-0.0027370452880859375,
-0.04901123046875,
-0.0283203125,
-0.0101776123046875,
-0.0540771484375,
0.0372314453125,
0.0239410400390625,
-0.0301361083984375,
-0.039825439453125,
-0.0138702392578125,
0.026824951171875,
0.043426513671875,
0.017486572265625,
0.0181884765625,
-0.0228424072265625,
0.0178985595703125,
0.01483917236328125,
0.01108551025390625,
0.00611114501953125,
-0.021697998046875,
0.0002455711364746094,
0.0531005859375,
-0.0311279296875,
0.056854248046875,
-0.0306243896484375,
-0.0170135498046875,
0.06439208984375,
0.059600830078125,
0.01267242431640625,
-0.042388916015625,
0.00015723705291748047,
0.042205810546875,
0.06134033203125,
0.05499267578125,
-0.00988006591796875,
0.0087432861328125,
0.031890869140625,
0.00878143310546875,
0.0041351318359375,
-0.0106964111328125,
0.029937744140625,
0.0191192626953125,
0.01861572265625,
-0.043701171875,
0.00797271728515625,
0.056304931640625,
-0.035980224609375,
0.062164306640625,
0.051300048828125,
0.019256591796875,
0.05255126953125,
-0.01177978515625,
-0.00919342041015625,
-0.041839599609375,
-0.05224609375,
0.00922393798828125,
0.042510986328125,
0.008697509765625,
0.01425933837890625,
-0.056976318359375,
-0.0462646484375,
-0.0208587646484375,
0.0135955810546875,
-0.028076171875,
-0.06396484375,
0.0256805419921875,
-0.00032806396484375,
-0.0372314453125,
0.00743865966796875,
0.0207366943359375,
0.047088623046875,
0.059356689453125,
-0.0095367431640625,
-0.003208160400390625,
0.024566650390625,
-0.05084228515625,
-0.02825927734375,
0.044158935546875,
-0.0258941650390625,
0.048126220703125,
-0.056304931640625,
0.05908203125,
0.0528564453125,
-0.04730224609375,
0.0077056884765625,
-0.046356201171875,
-0.0025424957275390625,
0.035491943359375,
0.028717041015625,
0.033416748046875,
-0.054473876953125,
0.02374267578125,
-0.06298828125,
-0.00948333740234375,
0.055206298828125,
0.01129913330078125,
0.043670654296875,
-0.024749755859375,
-0.0027790069580078125,
-0.02484130859375,
0.028411865234375,
-0.00844573974609375,
0.05889892578125,
0.052642822265625,
-0.007724761962890625,
0.005672454833984375,
0.0031108856201171875,
0.0634765625,
0.06488037109375,
-0.0384521484375,
0.0244293212890625,
0.048248291015625,
-0.0187530517578125,
-0.010986328125,
0.0238494873046875,
0.004901885986328125,
0.039215087890625,
-0.020172119140625,
0.022735595703125,
0.04595947265625,
-0.034698486328125,
-0.046539306640625,
0.04302978515625,
0.026275634765625,
0.0291290283203125,
-0.00191497802734375,
-0.01470947265625,
-0.0377197265625,
-0.0167388916015625,
-0.017913818359375,
0.048065185546875,
0.0078582763671875,
0.0151519775390625,
0.0220947265625,
0.046722412109375,
-0.02325439453125,
0.00750732421875,
-0.0067138671875,
-0.08740234375,
-0.0518798828125,
-0.01175689697265625,
0.0672607421875,
0.0164642333984375,
-0.050323486328125,
0.00676727294921875,
-0.0174560546875,
0.005496978759765625,
0.0033588409423828125,
-0.032440185546875,
0.0279541015625,
0.0081634521484375,
0.01336669921875,
0.024261474609375,
0.048980712890625,
0.029296875,
0.03912353515625,
0.004405975341796875,
-0.0291748046875,
0.0245819091796875,
-0.038665771484375,
-0.0399169921875,
-0.0211639404296875,
-0.03533935546875,
0.005725860595703125,
-0.0032958984375,
0.05242919921875,
0.0281219482421875,
0.0003845691680908203,
-0.028076171875,
0.0301666259765625,
0.01184844970703125,
0.0310211181640625,
0.00908660888671875,
-0.021148681640625,
0.030059814453125,
0.03515625,
0.030364990234375,
-0.044647216796875,
0.03607177734375,
0.0034618377685546875,
0.0335693359375,
0.0219879150390625,
-0.040496826171875,
0.0443115234375,
-0.0009918212890625,
0.01050567626953125,
-0.02178955078125,
-0.0014553070068359375,
-0.02984619140625,
-0.018035888671875,
-0.01605224609375,
0.030670166015625,
0.02459716796875,
0.00015819072723388672,
-0.05413818359375,
-0.04107666015625,
0.023345947265625,
-0.0149078369140625,
-0.03253173828125,
0.0361328125,
-0.03277587890625,
-0.04205322265625,
0.0101165771484375,
0.039947509765625,
-0.007495880126953125,
-0.028564453125,
-0.04107666015625,
-0.00778961181640625,
0.032989501953125,
-0.033782958984375,
0.0379638671875,
0.03680419921875,
0.043548583984375,
0.0160369873046875,
-0.0015544891357421875,
0.0113067626953125,
-0.0005474090576171875,
0.036651611328125,
-0.001071929931640625,
-0.043792724609375,
0.01203155517578125,
0.004085540771484375,
0.0423583984375,
-0.044403076171875,
-0.029510498046875,
-0.01358795166015625,
-0.038055419921875,
-0.0144805908203125,
-0.022674560546875,
0.0262298583984375,
-0.036956787109375,
-0.046356201171875,
0.033447265625,
-0.04229736328125,
-0.00585174560546875,
0.0186004638671875,
-0.0261993408203125,
0.05352783203125,
-0.01348114013671875,
-0.0013723373413085938,
-0.0099334716796875,
-0.031158447265625,
0.05792236328125,
-0.01255035400390625,
0.0173797607421875,
0.02947998046875,
0.0233612060546875,
-0.039581298828125,
0.046844482421875,
-0.0189971923828125,
0.05023193359375,
0.054107666015625,
0.007221221923828125,
0.05126953125,
-0.012542724609375,
0.0037593841552734375,
0.00797271728515625,
-0.050323486328125,
0.0033817291259765625,
-0.044189453125,
0.01282501220703125,
-0.0311431884765625,
0.0038661956787109375,
-0.025909423828125,
-0.03900146484375,
0.05047607421875,
0.0323486328125,
0.0058441162109375,
-0.00878143310546875,
0.033843994140625,
0.050994873046875,
0.041290283203125,
0.01141357421875,
0.05340576171875,
0.031707763671875,
-0.05352783203125,
-0.0250244140625,
-0.040252685546875,
-0.050628662109375,
-0.0272369384765625,
-0.00704193115234375,
-0.0120086669921875,
-0.00847625732421875,
-0.05523681640625,
0.009307861328125,
0.01447296142578125,
-0.004344940185546875,
0.005062103271484375,
0.01629638671875,
-0.044708251953125,
0.005847930908203125,
-0.045166015625,
-0.01238250732421875,
-0.033782958984375,
0.0024566650390625,
-0.0296630859375,
0.036224365234375,
0.031890869140625,
-0.02703857421875,
-0.039947509765625,
0.02215576171875,
-0.01495361328125,
5.918741226196289e-05,
0.045928955078125,
-0.01947021484375,
0.0312347412109375,
0.0146636962890625,
-0.038787841796875,
-0.012054443359375,
0.026397705078125,
-0.046875,
0.0194854736328125,
0.044189453125,
-0.0016603469848632812,
0.042236328125,
-0.01904296875,
0.0166473388671875,
0.03936767578125,
-0.04248046875,
-0.0216217041015625,
-0.0214080810546875,
-0.049530029296875,
-0.022552490234375,
0.029571533203125,
-0.04010009765625,
0.0079193115234375,
-0.004764556884765625,
0.00923919677734375,
0.0262451171875,
-0.01427459716796875,
-0.0157318115234375,
0.05584716796875,
0.04058837890625,
0.037506103515625,
0.0254669189453125,
0.0165557861328125,
-0.0185089111328125,
0.047576904296875,
-0.009063720703125,
0.024169921875,
-0.0382080078125,
-0.023162841796875,
-0.020111083984375,
-0.00641632080078125,
-0.0293426513671875,
-0.027801513671875,
0.017303466796875,
0.00263214111328125,
0.044403076171875,
0.01294708251953125,
-0.01348876953125,
0.00234222412109375,
-0.0309295654296875,
0.047760009765625,
-0.01361846923828125,
0.031707763671875,
-0.00598907470703125,
-0.0003638267517089844,
0.045562744140625,
-0.04931640625,
0.03717041015625,
-0.0050506591796875,
-0.01029205322265625,
0.005084991455078125,
0.00988006591796875,
-0.035247802734375,
0.0022373199462890625,
0.021942138671875,
-0.0384521484375,
-0.05615234375,
-0.0261383056640625,
0.04217529296875,
0.0042877197265625,
0.018951416015625,
0.0198211669921875,
-0.045379638671875,
-0.038055419921875,
-0.0026950836181640625,
0.03570556640625,
-0.01523590087890625,
-0.05908203125,
0.0189361572265625,
-0.01171112060546875,
-0.0184173583984375,
0.0413818359375,
-0.016082763671875,
0.0266876220703125,
0.002655029296875,
-0.0291748046875,
0.0197601318359375,
-0.04730224609375,
-0.04412841796875,
-0.034271240234375,
0.0183563232421875,
-0.05328369140625,
-0.0009131431579589844,
0.03631591796875,
0.0252532958984375,
-0.0533447265625,
-0.04833984375,
-0.028167724609375,
0.030426025390625,
-0.00632476806640625,
0.008544921875,
0.0157470703125,
-0.0247039794921875,
-0.01474761962890625,
0.0307464599609375,
0.04046630859375,
0.0219268798828125,
-0.00780487060546875,
-0.03118896484375,
0.038421630859375,
0.04693603515625,
0.022003173828125,
0.044921875,
-0.0111846923828125,
-0.03619384765625,
1.33514404296875e-05,
0.0087432861328125,
0.040008544921875,
0.006908416748046875,
0.0285186767578125,
-0.005283355712890625,
-0.0134429931640625,
-0.035491943359375,
-0.0230712890625,
0.035064697265625,
-0.00963592529296875,
0.04071044921875,
0.019561767578125,
0.039276123046875,
-0.050811767578125,
-0.0401611328125,
-0.00438690185546875,
-0.015045166015625,
-0.042205810546875,
-0.0009169578552246094,
-0.040496826171875,
-0.044189453125,
0.0225830078125,
-0.04754638671875,
-0.0121002197265625,
-0.019775390625,
0.036102294921875,
-0.0224456787109375,
0.04351806640625,
0.0229034423828125,
-0.033233642578125,
-0.0206298828125,
0.0221710205078125,
0.03875732421875,
-0.0186767578125,
0.035369873046875,
-0.0033092498779296875,
0.0247039794921875,
0.00974273681640625,
-0.038238525390625,
-0.0085296630859375,
0.0297698974609375,
-0.041229248046875,
-0.0261688232421875,
-0.0272674560546875,
0.0184326171875,
-0.0013227462768554688,
0.01776123046875,
0.049072265625,
-0.03399658203125,
-0.003604888916015625,
0.0361328125,
-0.0302886962890625,
0.021148681640625,
0.0215301513671875,
0.029541015625,
-0.00446319580078125,
0.0238189697265625,
-0.0217742919921875,
0.004634857177734375,
-0.0220947265625,
-0.011810302734375,
-0.0372314453125,
-0.027252197265625,
-0.001621246337890625,
0.04736328125,
-0.01247406005859375,
-0.02996826171875,
0.0012559890747070312,
-0.004467010498046875,
0.0244140625,
0.004787445068359375,
0.0177154541015625,
0.035675048828125,
0.013153076171875,
0.007595062255859375,
-0.00701141357421875,
0.003963470458984375,
-0.0299530029296875,
0.054290771484375,
0.032867431640625,
0.032196044921875,
0.022552490234375,
0.041168212890625,
-0.041595458984375,
-0.04827880859375,
-0.003673553466796875,
-0.041961669921875,
0.0069580078125,
-0.028411865234375,
0.00687408447265625,
0.041656494140625,
-0.03448486328125,
-0.006046295166015625,
-0.02117919921875,
0.02392578125,
0.047943115234375,
-0.0126800537109375,
0.003887176513671875,
0.0234222412109375,
0.0257415771484375,
-0.05584716796875,
-0.016357421875,
-0.028533935546875,
0.008270263671875,
-0.0295257568359375,
0.0260467529296875,
-0.03009033203125,
0.014678955078125,
0.0179595947265625,
-0.0491943359375,
0.0065765380859375,
-0.04046630859375,
-0.045654296875,
-0.003173828125,
0.01094818115234375,
-0.02587890625,
-0.0384521484375,
-0.02996826171875,
-0.013671875,
0.0245819091796875,
-0.039825439453125,
-0.0240936279296875,
0.001102447509765625,
-0.01006317138671875,
0.03125,
0.0005640983581542969,
-0.0008220672607421875,
0.017974853515625,
0.006259918212890625,
-0.019134521484375,
0.03009033203125,
-0.0021991729736328125,
-0.0166168212890625,
-0.01323699951171875,
0.0426025390625,
0.01303863525390625,
-0.015228271484375,
-0.01751708984375,
0.027008056640625,
0.0175018310546875,
-0.0408935546875,
-0.004486083984375,
0.01145172119140625,
-0.049163818359375,
0.01103973388671875,
0.035614013671875,
0.03570556640625,
-0.00327301025390625,
-0.0244293212890625,
0.00836944580078125,
0.0150146484375,
-0.012908935546875,
0.02423095703125,
0.0257415771484375,
0.029693603515625,
-0.036773681640625,
-0.045074462890625,
0.016143798828125,
-0.0080413818359375,
-0.004314422607421875,
0.0469970703125,
0.0215606689453125,
0.04034423828125,
0.00977325439453125,
0.0105438232421875,
-0.015533447265625,
-0.0299835205078125,
0.01041412353515625,
0.0214385986328125,
-0.044342041015625,
0.0186767578125,
-0.002376556396484375,
-0.0228729248046875,
-0.00798797607421875,
-0.0169219970703125,
-0.052459716796875,
0.034912109375,
0.005779266357421875,
0.020050048828125,
-0.0182342529296875,
-0.050048828125,
-0.049285888671875,
-0.003139495849609375,
0.0302581787109375,
-0.00814056396484375,
0.008819580078125,
0.0013837814331054688,
0.0200042724609375,
-0.0018663406372070312,
0.053985595703125,
-0.0010919570922851562,
0.03900146484375,
-0.00975799560546875,
-0.005634307861328125,
0.03582763671875,
-0.0004563331604003906,
0.004894256591796875,
0.01715087890625,
0.006103515625,
-0.03778076171875,
-0.0212249755859375,
0.047119140625,
0.04766845703125,
0.036468505859375,
0.04193115234375,
-0.00203704833984375,
-0.037200927734375,
0.0172882080078125,
-0.00844573974609375,
0.037994384765625,
-0.0330810546875,
0.031707763671875,
0.0350341796875,
0.0216217041015625,
0.0290069580078125,
0.00981903076171875,
-0.052215576171875,
0.01126861572265625,
-0.0254974365234375,
-0.0124053955078125,
0.03289794921875,
0.039520263671875,
0.007205963134765625,
0.040191650390625,
-0.0197906494140625,
-0.0135040283203125,
-0.0025177001953125,
0.04083251953125,
-0.0212860107421875,
-0.038055419921875,
0.013458251953125,
0.01947021484375,
-0.0257568359375,
0.0171966552734375,
-0.038848876953125,
0.033203125,
0.00885009765625,
0.028167724609375,
0.00025963783264160156,
-0.02978515625,
0.0360107421875,
0.024932861328125,
-0.042266845703125,
-0.0214385986328125,
-0.0064697265625,
-0.053009033203125,
-0.005519866943359375,
-0.0185089111328125,
0.0257415771484375,
0.03668212890625,
-0.0113067626953125,
-0.019683837890625,
-0.00971221923828125,
0.053253173828125,
-0.020050048828125,
0.053802490234375,
-0.03216552734375,
0.03326416015625,
0.0328369140625,
-0.024505615234375,
0.007720947265625,
-0.01409149169921875,
-0.023834228515625,
0.047821044921875,
0.0233154296875,
0.04522705078125,
-0.01153564453125,
0.036376953125,
0.018585205078125,
-0.0205078125,
0.01497650146484375,
0.03326416015625,
0.044464111328125,
0.0009002685546875,
-0.056915283203125,
-0.0263214111328125,
0.03472900390625,
0.0092010498046875,
0.0302886962890625,
-0.0261688232421875,
0.01065826416015625,
0.046112060546875,
0.036712646484375,
-0.004058837890625,
-0.042236328125,
0.040618896484375,
-0.007640838623046875,
-0.05535888671875,
0.050201416015625,
-0.0281524658203125,
0.0401611328125,
-0.0185699462890625,
-0.02880859375,
-0.023284912109375,
0.049530029296875,
-0.007595062255859375,
0.03369140625,
0.033538818359375,
-0.025177001953125,
0.0303955078125,
-0.0229644775390625,
0.03497314453125,
0.0240020751953125,
0.038818359375,
-0.00618743896484375,
0.0171356201171875,
-0.01059722900390625,
0.0285186767578125,
0.00963592529296875,
-0.007350921630859375,
0.031341552734375,
0.0020656585693359375,
-0.0165863037109375,
-0.02117919921875,
0.0233306884765625,
0.00370025634765625,
0.0279388427734375,
0.03729248046875,
0.007427215576171875,
-0.043426513671875,
-0.00885009765625,
-0.03790283203125,
-0.0218505859375,
-0.0275115966796875,
0.0239410400390625,
-0.04156494140625,
-0.01129913330078125,
0.01187896728515625,
0.04058837890625,
0.045379638671875,
-0.00714111328125,
-0.012481689453125,
-0.00572967529296875,
-0.0010271072387695312,
-0.01378631591796875,
0.04986572265625,
-0.0192413330078125,
-0.020751953125,
-0.0433349609375,
-0.03875732421875,
-0.040008544921875,
-0.056854248046875,
0.017547607421875,
0.002902984619140625,
0.01227569580078125,
0.031646728515625,
-0.03277587890625,
0.03411865234375,
-0.033935546875,
0.015960693359375,
-0.041229248046875,
0.035186767578125,
-0.0124664306640625,
0.036865234375,
0.03387451171875,
-0.0211029052734375,
-0.007965087890625,
-0.039520263671875,
-0.043731689453125,
0.0036468505859375,
-0.01898193359375,
0.04412841796875,
0.0294952392578125,
-0.00029158592224121094,
-0.0174560546875,
-0.0107879638671875,
0.00720977783203125,
0.0304412841796875,
-0.0055999755859375,
0.041717529296875,
0.0002827644348144531,
0.005153656005859375,
0.0237274169921875,
-0.0419921875,
-0.0164642333984375,
0.0216827392578125,
0.01219940185546875,
0.013824462890625,
2.485513687133789e-05,
-0.0296478271484375,
0.021331787109375,
-0.00040721893310546875,
0.00782012939453125,
-0.03509521484375,
-0.0357666015625,
0.0276336669921875,
0.002193450927734375,
-0.02532958984375,
0.029754638671875,
-0.00811004638671875,
0.0021209716796875,
0.0157318115234375,
0.0106658935546875,
0.024505615234375,
0.006763458251953125,
-0.051788330078125,
-0.0232696533203125,
-0.044097900390625,
0.0009665489196777344,
0.0207672119140625,
-0.0017528533935546875,
0.0272674560546875,
0.010589599609375,
0.0008454322814941406,
-0.017120361328125,
-0.0284881591796875,
0.0240020751953125,
-0.0223236083984375,
0.006816864013671875,
-0.036376953125,
0.014312744140625,
-0.026580810546875,
-0.00719451904296875,
-0.0058441162109375,
0.0278167724609375,
0.025634765625,
-0.0537109375,
-0.044342041015625,
0.00696563720703125,
-0.041412353515625,
0.05389404296875,
-0.018157958984375,
0.035736083984375,
-0.036590576171875,
0.048614501953125,
-0.0457763671875,
0.0081024169921875,
0.030548095703125,
0.03448486328125,
-0.028228759765625,
-0.019134521484375,
-0.026885986328125,
0.020477294921875,
-0.0083160400390625,
-0.0241851806640625,
-0.01435089111328125,
0.00688934326171875,
-0.010650634765625,
0.00826263427734375,
0.01180267333984375,
-0.030975341796875,
0.0277862548828125,
-0.020599365234375,
0.040618896484375,
-0.0072021484375,
-0.0034580230712890625,
-0.033172607421875,
0.019134521484375,
-0.0233001708984375,
-0.026458740234375,
0.031341552734375,
-0.0225982666015625,
0.021392822265625,
-0.0007271766662597656,
-0.0133819580078125,
-0.00968170166015625,
-0.041290283203125,
-0.00102996826171875,
-0.01959228515625,
-0.042449951171875,
0.019317626953125,
-0.01448822021484375,
-0.0364990234375,
-0.0177459716796875,
-0.038360595703125,
0.004329681396484375,
0.0123291015625,
0.042938232421875,
-0.0172119140625,
-0.0391845703125,
0.01812744140625,
-0.047882080078125,
0.0027866363525390625,
-0.01001739501953125,
-0.033203125,
-0.002044677734375,
0.00595855712890625,
0.004459381103515625,
0.01678466796875,
-0.015655517578125,
0.0169525146484375,
0.0212860107421875,
0.004840850830078125,
0.0303497314453125,
0.0273590087890625,
0.031768798828125,
-0.038726806640625,
0.0113525390625,
-0.0438232421875,
-0.0294342041015625,
0.035675048828125,
-0.045745849609375,
0.015716552734375,
0.008941650390625,
0.00750732421875,
-0.0555419921875,
-0.00435638427734375,
-0.004547119140625,
-0.01556396484375,
-0.002079010009765625,
-0.054473876953125,
-0.0295257568359375,
0.048248291015625,
-0.030059814453125,
0.00423431396484375,
-0.026611328125,
0.0070037841796875,
-0.03033447265625,
0.015411376953125,
0.019775390625,
0.040252685546875,
0.0226898193359375,
2.8908252716064453e-05,
0.031494140625,
0.006011962890625,
-0.0124969482421875,
0.0018415451049804688,
-0.054962158203125,
-0.04620361328125,
0.04266357421875,
-0.0200042724609375,
-0.0538330078125,
0.0285797119140625,
-0.049835205078125,
0.0254974365234375,
-0.037689208984375,
-0.05975341796875,
0.00965118408203125,
0.044525146484375,
-0.0214996337890625,
-0.0489501953125,
-0.01267242431640625,
-0.031463623046875,
0.01099395751953125,
0.0281982421875,
-0.044830322265625,
0.035858154296875,
-0.0085906982421875,
-0.0391845703125,
0.028106689453125,
-0.041015625,
-0.0282745361328125,
-0.00989532470703125,
-0.0249786376953125,
-0.033538818359375,
0.01995849609375,
0.04376220703125,
0.032073974609375,
0.031982421875,
-0.00508880615234375,
0.0301513671875,
0.019439697265625,
-0.0340576171875,
0.0254058837890625,
-0.0009603500366210938,
-0.012237548828125,
-0.0330810546875,
-0.01898193359375,
-0.042633056640625,
-0.045745849609375,
-0.0267181396484375,
-0.011810302734375,
-0.0694580078125,
-0.052154541015625,
-0.0166473388671875,
-0.0163726806640625,
0.0019063949584960938,
0.0596923828125,
-0.0426025390625,
-0.01010894775390625,
0.039947509765625,
-0.0029144287109375,
0.001369476318359375,
0.0037021636962890625,
0.046356201171875,
0.00098419189453125,
-0.04364013671875,
-0.050811767578125,
-0.01309967041015625,
-0.00800323486328125,
-0.0256500244140625,
0.0154571533203125,
-0.07568359375,
0.05133056640625,
-0.04071044921875,
0.04559326171875,
0.037933349609375,
-0.02459716796875,
0.06793212890625,
-0.0229644775390625,
-0.0386962890625,
-0.028076171875,
0.0341796875,
-0.014495849609375,
0.01035308837890625,
-0.01444244384765625,
-0.038604736328125,
0.0003719329833984375,
0.038848876953125,
0.0218963623046875,
0.01549530029296875,
-0.065185546875,
-0.04827880859375,
-0.0181121826171875,
-0.0016469955444335938,
0.0170745849609375,
-0.035888671875,
-0.00037860870361328125,
0.004703521728515625,
0.03704833984375,
0.03826904296875,
0.029632568359375,
0.0011014938354492188,
0.00482177734375,
-0.0037899017333984375,
-0.0418701171875,
-0.0197906494140625,
-0.047576904296875,
-0.01544952392578125,
-0.006244659423828125,
0.007965087890625,
0.050140380859375,
0.057861328125,
0.0307464599609375,
-0.056884765625,
-0.0416259765625,
0.0233001708984375,
0.08673095703125,
0.02825927734375,
-0.050628662109375,
0.00611114501953125,
0.00399017333984375,
-0.008880615234375,
0.01100921630859375,
0.05865478515625,
0.0278778076171875,
-0.0372314453125,
0.0079193115234375,
-0.0589599609375,
-0.023193359375,
0.02069091796875,
0.033111572265625,
0.050537109375,
-0.01116180419921875,
-0.039093017578125,
0.00042748451232910156,
-0.02862548828125,
-0.035247802734375,
-0.036773681640625,
-0.005069732666015625,
-0.0045318603515625,
-0.06585693359375,
0.01239776611328125,
-0.0022735595703125,
-0.018951416015625,
0.05303955078125,
-0.03607177734375,
-0.01629638671875,
-0.03778076171875,
0.017791748046875,
-0.001220703125,
-0.05548095703125,
-0.00664520263671875,
-0.007480621337890625,
-0.0035419464111328125,
-0.017669677734375,
-0.0241851806640625,
0.046234130859375,
-0.02081298828125,
0.0421142578125,
-0.007049560546875,
-0.02166748046875,
-0.026885986328125,
0.0244903564453125,
0.03912353515625,
0.0079803466796875,
0.0318603515625,
0.0693359375,
-0.0078277587890625,
-0.0604248046875,
-0.0445556640625,
-0.0306243896484375,
0.08758544921875,
-0.0014867782592773438,
0.00806427001953125,
0.0283355712890625,
0.067626953125,
0.0263824462890625,
0.007617950439453125,
0.04132080078125,
0.048065185546875,
0.0182647705078125,
-0.0467529296875,
0.027130126953125,
0.00843048095703125,
0.024627685546875,
-0.033660888671875,
0.0411376953125,
0.041900634765625,
-0.047637939453125,
-0.031524658203125,
0.055450439453125,
0.031982421875,
0.0164337158203125,
-0.041717529296875,
-0.0305328369140625,
0.070556640625,
0.006748199462890625,
0.0599365234375,
0.017822265625,
0.0148773193359375,
0.056549072265625,
0.0199432373046875,
0.059967041015625,
0.009521484375,
0.037078857421875,
-0.0227508544921875,
0.006649017333984375,
0.01151275634765625,
-0.00815582275390625,
-0.04205322265625,
0.0270233154296875,
-0.0082244873046875,
-0.02252197265625,
-0.022064208984375,
-0.048095703125,
-0.045166015625,
-0.0033550262451171875,
0.029449462890625,
0.01611328125,
0.004215240478515625,
0.036041259765625,
0.0263671875,
-0.013214111328125,
0.0189208984375,
0.058197021484375,
0.0462646484375,
0.0113677978515625,
-0.01277923583984375,
-0.07257080078125,
0.0153350830078125,
-0.0120391845703125,
0.003017425537109375,
0.06866455078125,
0.01666259765625,
-0.0010614395141601562,
-0.006317138671875,
0.021697998046875,
0.042144775390625,
-0.044158935546875,
0.042083740234375,
0.050750732421875,
-0.01401519775390625,
-0.0120697021484375,
-0.052764892578125,
0.0032176971435546875,
0.0222015380859375,
0.06512451171875,
0.0533447265625,
-0.0699462890625,
0.02996826171875,
0.058135986328125,
0.01800537109375,
-0.03369140625,
0.03570556640625,
0.00720977783203125,
0.027130126953125,
-0.081787109375,
-0.024078369140625,
-0.0074920654296875,
0.029052734375,
-0.0166778564453125,
0.0016508102416992188,
-0.0233917236328125,
0.05072021484375,
0.02288818359375,
-0.027496337890625,
0.03106689453125,
0.0008072853088378906,
-0.059234619140625,
-0.048583984375,
0.0121917724609375,
0.04107666015625,
-0.0239715576171875,
0.0199127197265625,
0.0297088623046875,
0.040283203125,
-0.021392822265625,
0.0770263671875,
-0.023040771484375,
0.00390625,
-0.014617919921875,
-0.0201263427734375,
-0.0279388427734375,
-0.047515869140625,
0.004375457763671875,
-0.046051025390625,
-0.06927490234375,
0.03619384765625,
0.048614501953125,
0.00440216064453125,
-0.00801849365234375,
0.0029754638671875,
-0.015869140625,
0.043426513671875,
-0.0206756591796875,
0.0082550048828125,
0.00569915771484375,
-0.020782470703125,
0.02899169921875,
0.051177978515625,
0.044342041015625,
0.04583740234375,
-0.04547119140625,
-0.00308990478515625,
-0.057098388671875,
-0.03826904296875,
0.06982421875,
-0.05194091796875,
0.0228424072265625,
0.03759765625,
0.065185546875,
0.032440185546875,
0.044586181640625,
-0.0266571044921875,
-0.0009331703186035156,
0.0053863525390625,
0.032684326171875,
0.0167236328125,
-0.0203704833984375,
0.007480621337890625,
-0.0198974609375,
-0.059326171875,
-0.016693115234375,
-0.0538330078125,
-0.06610107421875,
-0.01200103759765625,
0.015869140625,
0.0528564453125,
0.047210693359375,
-0.01203155517578125,
-0.031494140625,
0.038970947265625,
0.048095703125,
-0.00528717041015625,
0.01404571533203125,
0.01812744140625,
0.01154327392578125,
0.03704833984375,
0.052947998046875,
0.032073974609375,
-0.018463134765625,
0.0261688232421875,
0.02978515625,
0.019744873046875,
-0.05029296875,
0.0361328125,
0.01403045654296875,
0.052490234375,
0.030792236328125,
-0.025634765625,
0.0187530517578125,
-0.00787353515625,
0.05413818359375,
-0.0035724639892578125,
0.0245208740234375,
0.0120697021484375,
-0.049774169921875,
-0.037994384765625,
-0.040191650390625,
0.04095458984375,
-0.0114898681640625,
0.0252227783203125,
0.006687164306640625,
0.050872802734375,
-0.006015777587890625,
0.0227813720703125,
0.028778076171875,
0.0672607421875,
0.0306396484375,
0.01407623291015625,
-0.03131103515625,
0.01358795166015625,
0.053619384765625,
-0.018798828125,
0.03936767578125,
0.054290771484375,
0.050079345703125,
0.002178192138671875,
0.0305938720703125,
0.049072265625,
0.01247406005859375,
0.0235443115234375,
-0.038970947265625,
0.04278564453125,
0.04541015625,
-0.031036376953125,
0.005741119384765625,
-0.0190887451171875,
0.01178741455078125,
-0.04852294921875,
-0.0251617431640625,
-0.025299072265625,
0.0261077880859375,
-0.0201263427734375,
-0.039215087890625,
-9.846687316894531e-05,
0.05218505859375,
0.01131439208984375,
0.0426025390625,
0.0001653432846069336,
0.0660400390625,
-0.0017747879028320312,
0.044952392578125,
-0.0176544189453125,
-0.02203369140625,
-0.0386962890625,
-0.023040771484375,
0.003826141357421875,
0.0160064697265625,
0.0016183853149414062,
0.057708740234375,
0.06817626953125,
0.039947509765625,
-0.005123138427734375,
-0.042816162109375,
-0.036590576171875,
-0.040863037109375,
-0.029693603515625,
0.01488494873046875,
-0.00986480712890625,
0.0107421875,
-0.047271728515625,
0.040740966796875,
0.0250701904296875,
-0.009552001953125,
0.037139892578125,
-0.01073455810546875,
0.03460693359375,
0.039031982421875,
0.0870361328125,
0.12158203125,
0.0723876953125,
0.0230712890625,
-0.0469970703125,
-0.05230712890625,
0.00347137451171875,
0.0574951171875,
-0.044586181640625,
-0.039459228515625,
5.1081180572509766e-05,
0.00853729248046875,
0.0175018310546875,
0.028717041015625,
-0.03216552734375,
-0.04510498046875,
-0.007045745849609375,
0.005218505859375,
0.03228759765625,
-0.055450439453125,
0.031341552734375,
0.037017822265625,
0.018463134765625,
-0.0528564453125,
0.001651763916015625,
0.02264404296875,
-0.011993408203125,
0.0157928466796875,
-0.044219970703125,
0.0216217041015625,
-0.0241241455078125,
0.05712890625,
0.05938720703125,
0.01055908203125,
0.03955078125,
0.007373809814453125,
-0.011505126953125,
0.0511474609375,
0.0014104843139648438,
-0.04736328125,
-0.004688262939453125,
-0.05755615234375,
-0.0158843994140625,
-0.002513885498046875,
-0.0157318115234375,
0.04974365234375,
0.0244903564453125,
-0.001117706298828125,
0.059051513671875,
-0.040069580078125,
0.0273284912109375,
-0.042572021484375,
0.027099609375,
-0.044097900390625,
-0.0028514862060546875,
0.0256805419921875,
0.033416748046875,
-0.0426025390625,
0.008636474609375,
-0.007488250732421875,
0.04888916015625,
-0.031341552734375,
0.021728515625,
-0.040496826171875,
0.01104736328125,
-0.0255279541015625,
-0.058074951171875,
-0.03485107421875,
0.015380859375,
-0.00930023193359375,
-0.025390625,
0.00649261474609375,
0.0129852294921875,
0.001865386962890625,
-0.01334381103515625,
-0.005092620849609375,
-0.03509521484375,
0.027923583984375,
0.017181396484375,
-0.00931549072265625,
-0.040283203125,
0.01470184326171875,
0.015899658203125,
0.0012989044189453125,
-0.05535888671875,
-0.0175323486328125,
-0.037750244140625,
0.053466796875,
0.045684814453125,
-0.0117034912109375,
0.006580352783203125,
-0.058624267578125,
0.0423583984375,
0.03680419921875,
0.032989501953125,
0.03936767578125,
-0.05078125,
-0.021881103515625,
0.01006317138671875,
-0.011810302734375,
-0.00048160552978515625,
-0.007625579833984375,
0.04730224609375,
-0.01313018798828125,
-0.0056304931640625,
-0.006732940673828125,
0.040069580078125,
-0.0195159912109375,
-0.004627227783203125,
0.040679931640625,
-0.00011152029037475586,
-0.053863525390625,
-0.048309326171875,
-0.03155517578125,
0.046051025390625,
-0.007266998291015625,
0.02288818359375,
-0.0280303955078125,
0.0479736328125,
0.0117340087890625,
-0.031768798828125,
0.050262451171875,
-0.026123046875,
-0.0287322998046875,
-0.0469970703125,
0.0012865066528320312,
0.031494140625,
0.054931640625,
0.0287017822265625,
0.044464111328125,
0.05853271484375,
0.022216796875,
0.0198974609375,
0.036041259765625,
-0.0184783935546875,
-0.0130767822265625,
-0.007633209228515625,
0.0018205642700195312,
0.0260162353515625,
-0.037322998046875,
-0.0020465850830078125,
-0.00360107421875,
-0.01142120361328125,
-0.017852783203125,
0.041961669921875,
-0.03167724609375,
0.0004916191101074219,
-0.00092315673828125,
-0.0272674560546875,
0.0209197998046875,
-0.00037169456481933594,
0.0167236328125,
-0.009979248046875,
0.0131378173828125,
0.038970947265625,
-0.020782470703125,
-0.0020580291748046875,
0.04296875,
-0.0240478515625,
-0.04425048828125,
0.0298309326171875,
-0.003917694091796875,
-0.0269927978515625,
-0.0261383056640625,
-0.0296478271484375,
-0.0160675048828125,
0.01538848876953125,
0.0237274169921875,
0.046112060546875,
-0.04119873046875,
-0.039093017578125,
-0.0146942138671875,
0.01398468017578125,
-0.0182952880859375,
0.0258636474609375,
-0.007694244384765625,
0.044403076171875,
-0.039825439453125,
-0.03662109375,
-0.03985595703125,
-0.038055419921875,
0.02764892578125,
0.04437255859375,
0.01000213623046875,
0.0004987716674804688,
0.04779052734375,
0.006801605224609375,
-0.030609130859375,
0.03546142578125,
0.012420654296875,
-0.003936767578125,
0.007843017578125,
-0.006511688232421875,
0.035675048828125,
-0.0251922607421875,
-0.026214599609375,
0.054779052734375,
0.029266357421875,
-0.0208740234375,
-0.03997802734375,
-0.010894775390625,
0.005222320556640625,
-0.0180511474609375,
-0.039520263671875,
0.041900634765625,
0.00945281982421875,
-0.058258056640625,
-0.01490020751953125,
-0.0116424560546875,
-0.01861572265625,
0.042816162109375,
-0.0176849365234375,
0.052459716796875,
0.037384033203125,
-0.03369140625,
-0.0235137939453125,
0.023773193359375,
-0.0264892578125,
-0.0023097991943359375,
0.029052734375,
-0.033905029296875,
0.02569580078125,
0.03759765625,
0.038330078125,
0.050262451171875,
0.0374755859375,
0.01032257080078125,
-0.0117340087890625,
0.0209808349609375,
0.047515869140625,
-0.01617431640625,
0.0295867919921875,
0.045166015625,
0.034393310546875,
0.0201568603515625,
0.006519317626953125,
0.03790283203125,
0.045623779296875,
-0.047637939453125,
-0.02642822265625,
0.0296478271484375,
-0.03271484375,
-0.0170440673828125,
-0.0279388427734375,
0.004253387451171875,
0.034149169921875,
0.00954437255859375,
0.0413818359375,
0.006336212158203125,
0.0121307373046875,
0.00015664100646972656,
0.04638671875,
0.040435791015625,
-0.022369384765625,
0.04827880859375,
-0.02496337890625,
-0.0088348388671875,
-0.03271484375,
-0.047943115234375,
-0.03924560546875,
0.016510009765625,
0.000453948974609375,
-0.0173187255859375,
-0.03753662109375,
-0.03271484375,
-0.022430419921875,
0.0160064697265625,
-0.054107666015625,
-0.02374267578125,
0.04034423828125,
0.0224456787109375,
-0.002288818359375,
-0.0137939453125,
-0.0084991455078125,
-0.00910186767578125,
-0.0335693359375,
0.0038318634033203125,
0.00292205810546875,
-0.042999267578125,
-0.0178375244140625,
-0.039703369140625,
0.034881591796875,
-0.02362060546875,
0.040496826171875,
0.040435791015625,
-0.00557708740234375,
-0.0009350776672363281,
-0.046722412109375,
0.0384521484375,
0.0213775634765625,
-0.043426513671875,
0.0204925537109375,
-0.0014553070068359375,
0.0215606689453125,
-0.035797119140625,
0.004329681396484375,
-0.007598876953125,
0.039215087890625,
0.00039458274841308594,
-0.039825439453125,
-0.026275634765625,
-0.0221710205078125,
-0.04266357421875,
0.021484375,
-0.034454345703125,
0.01178741455078125,
-0.0016527175903320312,
-0.040557861328125,
0.0137176513671875,
0.00908660888671875,
-0.0338134765625,
-0.019500732421875,
-0.044281005859375,
-0.0418701171875,
-0.021697998046875,
0.023468017578125,
0.004695892333984375,
-0.032440185546875,
-0.00865936279296875,
-0.00968170166015625,
-0.012939453125,
0.056976318359375,
-0.00311279296875,
0.002410888671875,
0.057525634765625,
0.036590576171875,
0.0235443115234375,
0.01220703125,
-0.0209197998046875,
0.040374755859375,
-0.041107177734375,
0.0239715576171875,
0.04766845703125,
-0.01522064208984375,
0.0204620361328125,
-0.05267333984375,
-0.0472412109375,
-0.01430511474609375,
0.01345062255859375,
0.0267486572265625,
0.04833984375,
0.0308074951171875,
-0.024139404296875,
0.007305145263671875,
0.0224151611328125,
-0.0458984375,
0.002277374267578125,
-0.024322509765625,
0.044769287109375,
-0.032318115234375,
-0.00261688232421875,
0.0245819091796875,
-0.00322723388671875,
0.042083740234375,
-0.031951904296875,
-0.0006866455078125,
0.03662109375,
0.039215087890625,
0.015716552734375,
0.0258331298828125,
-0.00829315185546875,
0.023651123046875,
0.041015625,
0.003971099853515625,
0.01026153564453125,
0.028167724609375,
-0.052032470703125,
-0.054046630859375,
-3.546476364135742e-05,
0.00942230224609375,
0.0146026611328125,
-0.015411376953125,
0.035003662109375,
0.01617431640625,
-0.0019359588623046875,
-0.0166473388671875,
0.0138397216796875,
0.037689208984375,
-0.0088348388671875,
-0.0253448486328125,
-0.0133209228515625,
-0.0159454345703125,
-0.0153045654296875,
-0.0075531005859375,
-0.01739501953125,
-0.00019168853759765625,
0.0256195068359375,
-0.007343292236328125,
-0.0523681640625,
-0.04840087890625,
-0.006256103515625,
-0.02410888671875,
-0.0352783203125,
0.0050048828125,
0.0457763671875,
0.0455322265625,
-0.03271484375,
-0.05181884765625,
4.3392181396484375e-05,
0.038909912109375,
0.024566650390625,
0.04840087890625,
0.05169677734375,
-0.0811767578125,
-0.067138671875,
-0.01393890380859375,
0.00356292724609375,
0.058807373046875,
-0.0389404296875,
0.002246856689453125,
0.010162353515625,
0.0169830322265625,
0.04705810546875,
-0.0021381378173828125,
0.06488037109375,
0.0077972412109375,
-0.0019989013671875,
-0.030975341796875,
0.0174560546875,
0.01004791259765625,
-0.025634765625,
-0.003528594970703125,
0.0345458984375,
0.0005440711975097656,
0.0105133056640625,
0.0338134765625,
-0.0275115966796875,
0.002376556396484375,
-0.05035400390625,
0.0138397216796875,
0.0296478271484375,
0.029083251953125,
-0.0462646484375,
-0.0234222412109375,
-0.0482177734375,
-0.05767822265625,
0.006992340087890625,
0.007099151611328125,
0.027313232421875,
-0.0182037353515625,
-0.05963134765625,
-0.045318603515625,
0.0292510986328125,
-0.0138702392578125,
-0.069091796875,
-0.0002415180206298828,
-0.02801513671875,
-0.057952880859375,
0.0283355712890625,
0.03143310546875,
0.0142974853515625,
-0.006320953369140625,
-0.0584716796875,
-0.02203369140625,
0.070068359375,
0.0572509765625,
-0.021087646484375,
0.0024814605712890625,
0.057373046875,
0.029541015625,
0.034912109375,
0.0263214111328125,
0.007007598876953125,
0.0156402587890625,
-0.0716552734375,
-0.01178741455078125,
-0.01202392578125,
0.02008056640625,
-0.046234130859375,
0.02777099609375,
0.04852294921875,
0.050750732421875,
0.0170135498046875,
-0.0599365234375,
-0.024627685546875,
-0.01849365234375,
-0.04278564453125,
0.042236328125,
0.00865936279296875,
-0.044281005859375,
0.0254974365234375,
-0.04052734375,
0.04901123046875,
0.04571533203125,
0.06610107421875,
0.06964111328125,
-0.003566741943359375,
0.0184326171875,
0.05340576171875,
-0.0022125244140625,
-0.0275421142578125,
0.031158447265625,
0.04718017578125,
0.01398468017578125,
0.05255126953125,
-0.03564453125,
0.027374267578125,
0.0116119384765625,
-0.009429931640625,
0.048583984375,
0.0294189453125,
-0.05657958984375,
-0.0204010009765625,
-0.013946533203125,
0.0037174224853515625,
-0.04364013671875,
0.005672454833984375,
0.05072021484375,
-0.01123046875,
-0.040863037109375,
0.03167724609375,
0.01320648193359375,
0.0254974365234375,
-0.0265350341796875,
-0.04638671875,
0.0088958740234375,
-0.03717041015625,
0.045623779296875,
-0.0703125,
-0.0672607421875,
-0.0196685791015625,
0.037384033203125,
-0.0024089813232421875,
0.0201568603515625,
-0.0300445556640625,
0.061065673828125,
0.0173492431640625,
-0.010894775390625,
0.07769775390625,
-0.0151519775390625,
-0.0270538330078125,
-0.034210205078125,
-0.0438232421875,
0.0452880859375,
0.048614501953125,
0.0211334228515625,
-0.0222320556640625,
0.034515380859375,
-0.0069122314453125,
-0.004276275634765625,
0.0117645263671875,
-0.01113128662109375,
0.01425933837890625,
0.03228759765625,
0.00949859619140625,
-0.0384521484375,
-0.0252838134765625,
0.004276275634765625,
0.03179931640625,
0.01229095458984375,
-0.0621337890625,
-0.0191192626953125,
-0.0194549560546875,
-0.044281005859375,
0.049957275390625,
-0.01446533203125,
0.0306243896484375,
-0.06243896484375,
-0.01314544677734375,
0.018951416015625,
0.0253753662109375,
0.02203369140625,
-0.00504302978515625,
-0.0082244873046875,
-0.011993408203125,
-0.0189208984375,
-0.02716064453125,
-0.00894927978515625,
0.053436279296875,
0.044464111328125,
0.04595947265625,
-0.04217529296875,
0.0200042724609375,
0.00687408447265625,
-0.02362060546875,
-0.0303497314453125,
-0.033355712890625,
-0.0357666015625,
0.045196533203125,
0.0269927978515625,
0.05718994140625,
0.03289794921875,
0.00579833984375,
0.0099029541015625,
-0.019134521484375,
-0.0400390625,
0.016815185546875,
-0.01245880126953125,
0.0186920166015625,
-0.0036773681640625,
-0.0293731689453125,
-0.036041259765625,
-0.0059661865234375,
-0.025909423828125,
0.057647705078125,
-0.0260009765625,
0.0237884521484375,
-0.0031261444091796875,
-0.051025390625,
-0.03314208984375,
-0.0293426513671875,
0.001491546630859375,
-0.00010377168655395508,
-0.01477813720703125,
0.02288818359375,
-0.04345703125,
-0.01480865478515625,
-0.0307464599609375,
0.0264892578125,
0.029937744140625,
-0.055755615234375,
0.03106689453125,
0.021087646484375,
0.0212249755859375,
-0.0662841796875,
-0.06060791015625,
0.0028820037841796875,
0.0109100341796875,
0.0286102294921875,
0.01012420654296875,
0.0171966552734375,
0.00019681453704833984,
0.0180206298828125,
0.0309600830078125,
0.032806396484375,
-0.002475738525390625,
0.025848388671875,
0.01549530029296875,
-0.0020046234130859375,
-0.05474853515625,
-0.0018911361694335938,
-0.05633544921875,
-0.0022945404052734375,
0.0192718505859375,
-0.03265380859375,
-0.0447998046875,
0.0205841064453125,
-0.0208282470703125,
0.045562744140625,
0.02337646484375,
0.01421356201171875,
-0.052520751953125,
0.035736083984375,
0.01556396484375,
0.04486083984375,
0.0462646484375,
0.036468505859375,
0.01503753662109375,
-0.0254058837890625,
0.07452392578125,
-0.0158538818359375,
0.005481719970703125,
-0.0013027191162109375,
0.0113372802734375,
-0.0316162109375,
0.01476287841796875,
0.030731201171875,
0.04443359375,
0.0164337158203125,
-0.0200653076171875,
0.01910400390625,
-0.0179290771484375,
0.0100250244140625,
0.008331298828125,
0.0009427070617675781,
-0.026123046875,
-0.033203125,
0.043701171875,
0.0318603515625,
0.06085205078125,
0.0137786865234375,
0.00431060791015625,
-0.0296630859375,
0.0537109375,
0.0132293701171875,
0.024932861328125,
-0.0179595947265625,
-0.03863525390625,
0.0341796875,
-0.0183868408203125,
-0.037139892578125,
-0.0172119140625,
-0.0016660690307617188,
0.0582275390625,
-0.0252838134765625,
0.006488800048828125,
0.01514434814453125,
-0.005817413330078125,
0.06134033203125,
-0.0163421630859375,
-0.037750244140625,
-0.0197906494140625,
0.01036834716796875,
-0.0012149810791015625,
-0.034759521484375,
-0.03680419921875,
0.04541015625,
0.034149169921875,
-0.02337646484375,
-0.0235443115234375,
0.01168060302734375,
-0.0533447265625,
-0.05908203125,
-0.00982666015625,
-0.03680419921875,
0.00038242340087890625,
0.035491943359375,
0.030517578125,
0.0108795166015625,
0.0219879150390625,
-0.04925537109375,
0.008941650390625,
-0.039093017578125,
-0.034393310546875,
-0.005889892578125,
-0.039093017578125,
0.00803375244140625,
-0.018402099609375,
0.00833892822265625,
0.04144287109375,
-0.0196075439453125,
-0.0012426376342773438,
-0.01053619384765625,
0.043487548828125,
0.0187530517578125,
-0.026702880859375,
-0.04791259765625,
0.0291595458984375,
0.00661468505859375,
0.049224853515625,
0.06536865234375,
-0.034454345703125,
0.033599853515625,
-0.0074462890625,
-0.033111572265625,
0.0236053466796875,
0.01953125,
0.045562744140625,
0.03387451171875,
0.01212310791015625,
-0.0146331787109375,
0.020111083984375,
-0.0380859375,
0.003284454345703125,
-0.01910400390625,
0.0021076202392578125,
-0.03521728515625,
0.00891876220703125,
0.04681396484375,
0.0098876953125,
0.045623779296875,
-0.014434814453125,
0.031646728515625,
0.0243682861328125,
0.00791168212890625,
0.02044677734375,
-0.00487518310546875,
0.0251007080078125,
-0.0004343986511230469,
0.035552978515625,
-0.01116943359375,
0.0222320556640625,
-0.03143310546875,
0.0010099411010742188,
0.02874755859375,
-0.01251220703125,
0.0296478271484375,
0.00957489013671875,
0.01116943359375,
0.008544921875,
-0.016204833984375,
-0.0088958740234375,
-0.033111572265625,
-0.04766845703125,
0.052520751953125,
-0.03509521484375,
0.0330810546875,
-0.0009965896606445312,
-0.063232421875,
-0.00411224365234375,
-0.035888671875,
0.00962066650390625,
-0.003032684326171875,
-0.033905029296875,
0.0146331787109375,
-0.013824462890625,
-0.01457977294921875,
-0.03704833984375,
0.040679931640625,
0.0262451171875,
0.043548583984375,
-0.022247314453125,
0.043304443359375,
-0.0165863037109375,
0.0142974853515625,
-0.04779052734375,
0.0285186767578125,
-0.0183868408203125,
0.0382080078125,
0.0240020751953125,
0.036407470703125,
0.001163482666015625,
-0.030303955078125,
-0.03277587890625,
0.0209197998046875,
0.01116180419921875,
0.012969970703125,
-0.0279083251953125,
0.00044918060302734375,
-0.0283355712890625,
0.0036907196044921875,
0.003204345703125,
-0.01541900634765625,
-0.016876220703125,
0.0227813720703125,
0.013580322265625,
0.04986572265625,
0.0296478271484375,
0.002391815185546875,
0.037322998046875,
0.008819580078125,
0.00794219970703125,
-0.05316162109375,
-0.0019063949584960938,
-0.0271759033203125,
-0.048583984375,
-0.044921875,
0.04290771484375,
0.0092010498046875,
0.00945281982421875,
-0.00646209716796875,
0.022552490234375,
0.0246429443359375,
-0.004161834716796875,
0.0272979736328125,
-0.0188140869140625,
-0.024169921875,
0.0089263916015625,
-0.01039886474609375,
0.0006570816040039062,
-0.0120391845703125,
0.00966644287109375,
0.0311737060546875,
-0.046966552734375,
0.01357269287109375,
-0.01483154296875,
0.0034427642822265625,
-0.0301361083984375,
0.008697509765625,
-0.0089569091796875,
-0.027374267578125,
-0.00013315677642822266,
-0.02337646484375,
-0.01287078857421875,
-0.037322998046875,
0.030609130859375,
0.00989532470703125,
0.0194854736328125,
0.047607421875,
0.04290771484375,
0.05035400390625,
0.0192718505859375,
0.0484619140625,
0.019439697265625,
-0.0210418701171875,
0.0452880859375,
-0.034423828125,
0.004688262939453125,
0.02862548828125,
0.032623291015625,
-0.017913818359375,
0.0341796875,
0.02642822265625,
0.0394287109375,
-0.03167724609375,
-0.0280303955078125,
-0.00331878662109375,
-0.048492431640625,
-0.0206298828125,
-0.040130615234375,
-0.0009946823120117188,
-0.021728515625,
-0.0452880859375,
-0.007415771484375,
-0.01061248779296875,
-0.002040863037109375,
-0.006793975830078125,
0.013763427734375,
0.041290283203125,
-0.01076507568359375,
-0.03759765625,
0.01215362548828125,
0.0021228790283203125,
-0.0206756591796875,
-0.007221221923828125,
-0.04632568359375,
-0.0207061767578125,
-0.006885528564453125,
-0.045745849609375,
-0.050323486328125,
-0.001216888427734375,
-0.016265869140625,
0.017669677734375,
0.00855255126953125,
0.0279388427734375,
0.025299072265625,
0.0207977294921875,
0.035919189453125,
-0.02783203125,
-0.007251739501953125,
0.0242767333984375,
-0.03424072265625,
0.0307769775390625,
-0.0458984375,
0.034027099609375,
0.035919189453125,
-0.02716064453125,
-0.01346588134765625,
0.040496826171875,
0.0152435302734375,
0.0059356689453125,
0.0271453857421875,
0.049530029296875,
0.042694091796875,
-0.037322998046875,
-0.021209716796875,
-0.047576904296875,
0.042816162109375,
-0.045135498046875,
-0.021331787109375,
-0.03363037109375,
-0.0203704833984375,
-0.0037059783935546875,
0.04705810546875,
-0.01148223876953125,
-0.041229248046875,
0.0023632049560546875,
0.050018310546875,
-0.0284271240234375,
0.01425933837890625,
0.018157958984375,
-0.043609619140625,
-0.0283966064453125,
-0.0028362274169921875,
0.0246734619140625,
0.050750732421875,
-0.0175628662109375,
0.010833740234375,
0.04937744140625,
-0.042083740234375,
0.031890869140625,
-0.030853271484375,
0.0306396484375,
-0.03594970703125,
-0.046478271484375,
0.039154052734375,
-0.044036865234375,
0.0194854736328125,
-0.0189056396484375,
-0.033782958984375,
0.027587890625,
0.04473876953125,
-0.022186279296875,
0.0308685302734375,
-0.01458740234375,
0.0171661376953125,
0.04583740234375,
0.031829833984375,
-0.037078857421875,
-0.035675048828125,
-0.0296173095703125,
0.02752685546875,
-0.014617919921875,
-0.02618408203125,
-0.006214141845703125,
-0.0413818359375,
0.004016876220703125,
-0.0146331787109375,
0.03759765625,
0.048431396484375,
-0.0126953125,
-0.004444122314453125,
0.013153076171875,
-0.03216552734375,
0.02545166015625,
0.00997161865234375,
-0.0311279296875,
0.03643798828125,
0.0174407958984375,
-0.0178375244140625,
0.0389404296875,
0.018035888671875,
-0.035980224609375,
0.0303192138671875,
0.03948974609375,
0.04461669921875,
0.0206146240234375,
-0.04852294921875,
0.044097900390625,
-0.007541656494140625,
-0.0154876708984375,
-0.038604736328125,
-0.043792724609375,
0.04388427734375,
0.004703521728515625,
-0.0408935546875,
0.0262908935546875,
0.0380859375,
0.04351806640625,
-0.0215606689453125,
0.0224456787109375,
-0.041778564453125,
-0.02783203125,
-0.0244598388671875,
-0.026336669921875,
0.01629638671875,
0.01290130615234375,
0.024993896484375,
0.00888824462890625,
-0.008270263671875,
-0.041534423828125,
-0.0141754150390625,
-0.043731689453125,
0.038970947265625,
0.0310821533203125,
0.0015850067138671875,
-0.05029296875,
-0.048553466796875,
-0.00907135009765625,
0.013916015625,
0.04742431640625,
-0.0010805130004882812,
-0.044677734375,
-0.01360321044921875,
0.01415252685546875,
-0.0301666259765625,
-0.05010986328125,
0.026336669921875,
-0.0140228271484375,
-0.016143798828125,
0.05010986328125,
-0.0209197998046875,
0.039093017578125,
-0.037384033203125,
0.0100250244140625,
0.0034008026123046875,
-0.0119476318359375,
0.0020618438720703125,
0.005123138427734375,
-0.0253143310546875,
-0.01081085205078125,
-0.04693603515625,
0.0291900634765625,
0.0265045166015625,
0.050079345703125,
-0.0294189453125,
0.043853759765625,
-0.020416259765625,
-0.02288818359375,
-0.044525146484375,
-0.0210418701171875,
-0.0043487548828125,
-0.008148193359375,
0.0002677440643310547,
-0.038604736328125,
0.009246826171875,
0.03070068359375,
0.005390167236328125,
-0.0222320556640625,
-0.0111083984375,
-0.03887939453125,
0.050018310546875,
0.033050537109375,
-0.0278472900390625,
-0.00632476806640625,
0.00823211669921875,
0.0030364990234375,
-0.0086822509765625,
0.016693115234375,
0.04315185546875,
-0.01378631591796875,
-0.00591278076171875,
-0.0296478271484375,
0.0224761962890625,
0.030303955078125,
0.03802490234375,
0.0151214599609375,
0.0061492919921875,
0.045257568359375,
0.01395416259765625,
-0.047210693359375,
0.0015439987182617188,
-0.0302581787109375,
-0.005588531494140625,
0.021636962890625,
-0.034698486328125,
0.0333251953125,
-0.045684814453125,
0.02069091796875,
0.040802001953125,
0.046905517578125,
0.032745361328125,
-0.0153656005859375,
-0.007442474365234375,
-0.005664825439453125,
-0.0276947021484375,
-0.021697998046875,
-0.0068206787109375,
-0.0020847320556640625,
0.00672149658203125,
0.02569580078125,
0.028594970703125,
0.04498291015625,
-0.005535125732421875,
-0.045989990234375,
0.0421142578125,
0.04736328125,
0.0012416839599609375,
0.034637451171875,
0.0164337158203125,
-0.0027294158935546875,
-0.03033447265625,
-0.020660400390625,
-0.038116455078125,
0.012969970703125,
-0.04754638671875,
0.01409149169921875,
0.016754150390625,
0.01739501953125,
-0.04425048828125,
-0.0477294921875,
0.048614501953125,
-0.044891357421875,
-0.044219970703125,
0.020416259765625,
-0.043975830078125,
-0.0291595458984375,
-0.00778961181640625,
0.02325439453125,
0.04180908203125,
-0.035491943359375,
0.011749267578125,
-0.044525146484375,
-0.04754638671875,
0.048919677734375,
-0.036102294921875,
0.0038356781005859375,
0.0113525390625,
-0.01526641845703125,
-0.043548583984375,
-0.041595458984375,
0.024139404296875,
-0.031890869140625,
-0.0330810546875,
-0.0184173583984375,
-0.01125335693359375,
-0.0135650634765625,
0.046722412109375,
0.008331298828125,
0.037933349609375,
0.044708251953125,
-0.040252685546875,
-0.00838470458984375,
-0.004390716552734375,
0.027374267578125,
-0.036346435546875,
-0.040191650390625,
-0.024444580078125,
0.020477294921875,
0.006214141845703125,
-0.024078369140625,
-0.03948974609375,
-0.043212890625,
0.026702880859375,
-0.01025390625,
-0.027435302734375,
0.036468505859375,
0.0296173095703125,
-0.04376220703125,
-0.004077911376953125,
0.029998779296875,
-0.048187255859375,
0.01306915283203125,
-0.02178955078125,
0.032623291015625,
-0.0280914306640625,
-0.028839111328125,
0.04437255859375,
0.0194549560546875,
0.036224365234375,
0.0306854248046875,
-0.00748443603515625,
-0.0347900390625,
0.03070068359375,
0.0489501953125,
0.0216217041015625,
-0.03509521484375,
0.02783203125,
-0.011962890625,
-0.01519012451171875,
-0.019256591796875,
-0.047393798828125,
0.0112762451171875,
0.00693511962890625,
-0.0121307373046875,
0.005535125732421875,
0.04437255859375,
-0.03839111328125,
0.044677734375,
0.0477294921875,
0.01219940185546875,
-0.041717529296875,
0.0237579345703125,
0.035064697265625,
0.0051422119140625,
-0.03857421875,
-0.01522064208984375,
-0.02825927734375,
0.0007648468017578125,
0.0222320556640625,
-0.0260162353515625,
0.0133819580078125,
-0.040008544921875,
-0.00019466876983642578,
0.031982421875,
0.0290069580078125,
0.04132080078125,
0.0023937225341796875,
-0.0291290283203125,
0.02484130859375,
0.01446533203125,
-0.00011366605758666992,
0.0267486572265625,
-0.021270751953125,
-0.028961181640625,
0.0072021484375,
0.0250701904296875,
0.005889892578125,
-0.0026760101318359375,
0.036651611328125,
-0.023406982421875,
-0.0027313232421875,
-0.03564453125,
0.0248260498046875,
-0.051544189453125,
-0.007373809814453125,
0.0202178955078125,
0.0020008087158203125,
-0.0273590087890625,
-0.00469207763671875,
-0.0293426513671875,
0.03350830078125,
-0.0137786865234375,
-0.039947509765625,
-0.022003173828125,
0.04296875,
-0.01824951171875,
-0.029510498046875,
0.0227813720703125,
0.0181121826171875,
-0.0284423828125,
-0.00412750244140625,
0.044403076171875,
0.0007653236389160156,
-0.01715087890625,
0.0013027191162109375,
-0.03375244140625,
-0.040924072265625,
0.043853759765625,
0.0162506103515625,
-0.012115478515625,
-0.0289764404296875,
0.0304718017578125,
0.0188751220703125,
0.0264892578125,
0.03594970703125,
0.0191650390625,
-0.0474853515625,
0.019012451171875,
-0.03253173828125,
0.0018939971923828125,
-0.0203399658203125,
0.01287841796875,
-0.00079345703125,
0.01071929931640625,
-0.0030345916748046875,
-0.0186614990234375,
0.01398468017578125,
0.013458251953125,
-0.022247314453125,
0.039306640625,
-0.03997802734375,
0.041748046875,
0.042633056640625,
-0.006175994873046875,
-0.04534912109375,
-0.0032367706298828125,
-0.046722412109375,
0.012237548828125,
0.00848388671875,
0.0413818359375,
-0.022674560546875,
0.0003960132598876953,
-0.01129150390625,
0.049560546875,
0.047821044921875,
0.03857421875,
-0.041351318359375,
-0.0304412841796875,
0.00243377685546875,
0.040740966796875,
0.030517578125,
-0.046722412109375,
-0.038726806640625,
-0.04461669921875,
0.0357666015625,
-0.032440185546875,
-0.04083251953125,
0.004608154296875,
0.004047393798828125,
-0.011383056640625,
0.038787841796875,
-0.0162200927734375,
0.0310516357421875,
0.01300811767578125,
0.028076171875,
-0.0037174224853515625,
0.007030487060546875,
-0.00531768798828125,
0.0223846435546875,
-0.0018987655639648438,
0.04022216796875,
-0.0298309326171875,
-0.03802490234375,
-0.0038623809814453125,
0.005908966064453125,
0.040985107421875,
-0.0086669921875,
-0.0182647705078125,
0.037261962890625,
-0.031341552734375,
0.032135009765625,
0.046417236328125,
0.0193939208984375,
0.028533935546875,
0.032073974609375,
-0.029083251953125,
0.006336212158203125,
-0.0033321380615234375,
0.044219970703125,
-0.049530029296875,
0.006839752197265625,
-0.02716064453125,
-0.0127716064453125,
0.009185791015625,
-0.03900146484375,
0.0421142578125,
-0.0206756591796875,
-0.0188140869140625,
0.0309600830078125,
-0.046417236328125,
-0.042877197265625,
0.0369873046875,
0.045684814453125,
-0.0185394287109375,
-0.034271240234375,
0.0170135498046875,
0.03857421875,
-0.04827880859375,
-0.03717041015625,
-0.003955841064453125,
-0.041259765625,
0.039337158203125,
-0.042236328125,
-0.0294342041015625,
0.01500701904296875,
0.0203704833984375,
-0.0404052734375,
-0.012939453125,
-0.046539306640625,
0.00341796875,
-0.0011510848999023438,
-0.0018062591552734375,
-0.021331787109375,
0.049652099609375,
0.046844482421875,
-0.03277587890625,
-0.0265350341796875,
-0.0203704833984375,
0.0166015625,
-0.0240478515625,
0.02703857421875,
0.043548583984375,
0.039459228515625,
-0.0031528472900390625,
0.0004489421844482422,
-0.04345703125,
0.03253173828125,
0.02496337890625,
-0.0271148681640625,
-0.0169830322265625,
-0.04693603515625,
0.040130615234375,
0.031829833984375,
-0.0242156982421875,
-0.003131866455078125,
-0.01300811767578125,
-0.0283660888671875,
0.022003173828125,
0.04779052734375,
-0.03021240234375,
-0.01312255859375,
-0.04132080078125,
-0.025421142578125,
-0.00396728515625,
-0.0210113525390625,
0.0007891654968261719,
-0.0013713836669921875,
0.03826904296875,
0.0297698974609375,
-0.0133056640625,
-0.019012451171875,
-0.0230865478515625,
-0.020843505859375,
-0.015350341796875,
0.04541015625,
-0.01009368896484375,
-0.024810791015625,
-0.02508544921875,
-0.039337158203125,
0.03448486328125,
-0.0382080078125,
0.008544921875,
-0.031890869140625,
0.013397216796875,
-0.042816162109375,
-0.0330810546875,
-0.043548583984375,
-0.0352783203125,
0.0178375244140625,
0.01129913330078125,
0.044189453125,
0.0311279296875,
-0.0016727447509765625,
-0.045135498046875,
0.0125732421875,
0.0380859375,
0.0101318359375,
-0.021728515625,
0.0012979507446289062,
0.03314208984375,
-0.046966552734375,
0.00383758544921875,
0.0101776123046875,
-0.01690673828125,
-0.041351318359375,
0.0259857177734375,
-0.03424072265625,
0.0257415771484375,
-0.00847625732421875,
-0.033935546875,
-0.049560546875,
0.0174713134765625,
-0.0266265869140625,
0.0162353515625,
-0.01166534423828125,
0.0106658935546875,
-0.035308837890625,
-0.037841796875,
0.045074462890625,
-0.00481414794921875,
0.03277587890625,
-0.0179901123046875,
0.002002716064453125,
-0.0039215087890625,
-0.0238494873046875,
0.0247650146484375,
0.01473236083984375,
0.03314208984375,
-0.019500732421875,
-0.030975341796875,
-0.0214691162109375,
0.00917816162109375,
0.01910400390625,
-0.020477294921875,
-0.007442474365234375,
-0.021148681640625,
-0.0316162109375,
-0.0282135009765625,
0.0098724365234375,
0.020050048828125,
0.0122528076171875,
0.006900787353515625,
-0.0153045654296875,
-0.01486968994140625,
-0.004085540771484375,
-0.0215911865234375,
0.0031833648681640625,
0.0035552978515625,
0.031036376953125,
-0.024017333984375,
-0.0152435302734375,
-0.0158233642578125,
-0.041656494140625,
-0.049072265625,
0.0023403167724609375,
-0.0181427001953125,
-0.01360321044921875,
0.0009512901306152344,
0.0281219482421875,
-0.0177764892578125,
-0.0225372314453125,
-0.034698486328125,
0.00431060791015625,
-0.040130615234375,
-0.050689697265625,
0.04571533203125,
-0.01073455810546875,
0.033905029296875,
0.0034332275390625,
-0.007167816162109375,
-0.04779052734375,
0.023468017578125,
0.007320404052734375,
-0.040771484375,
0.0021419525146484375,
0.04608154296875,
-0.033416748046875,
-0.0293121337890625,
0.042877197265625,
0.050689697265625,
0.027923583984375,
-0.007740020751953125,
-0.0306396484375,
-0.008026123046875,
-0.0096588134765625,
-0.00785064697265625,
-0.0025730133056640625,
-0.0482177734375,
0.0013303756713867188,
-0.034332275390625,
-0.02996826171875,
0.030792236328125,
0.00019633769989013672,
0.0121307373046875,
-0.01165008544921875,
0.0188751220703125,
-0.040863037109375,
-0.039031982421875,
-0.03387451171875,
-0.04443359375,
-0.0321044921875,
-0.04730224609375,
0.0218505859375,
-0.0002675056457519531,
0.01174163818359375,
-0.022491455078125,
0.02978515625,
-0.01084136962890625,
0.03143310546875,
0.002086639404296875,
0.010894775390625,
-0.0211639404296875,
-0.031768798828125,
-0.0297088623046875,
0.049957275390625,
0.01519012451171875,
-0.00981903076171875,
0.043609619140625,
0.032867431640625,
-0.0076141357421875,
0.0416259765625,
-0.034210205078125,
0.01111602783203125,
0.0004711151123046875,
-0.0218048095703125,
-0.036956787109375,
0.041900634765625,
0.0015811920166015625,
0.01079559326171875,
0.0316162109375,
-0.0271759033203125,
-0.024566650390625,
0.00620269775390625,
0.036529541015625,
0.048675537109375,
-0.0088958740234375,
0.0209808349609375,
-0.03790283203125,
0.0504150390625,
0.03204345703125,
-0.024871826171875,
0.00078582763671875,
-0.0244293212890625,
-0.002223968505859375,
-0.04302978515625,
0.033050537109375,
0.048675537109375,
-0.0142822265625,
-0.0262451171875,
0.038330078125,
-0.0160980224609375,
-0.0258941650390625,
-0.00244903564453125,
0.019683837890625,
0.006618499755859375,
-0.035797119140625,
-0.0113983154296875,
0.00521087646484375,
0.0285797119140625,
-0.030059814453125,
0.034576416015625,
0.01174163818359375,
0.06353759765625,
-0.0023956298828125,
0.0038204193115234375,
0.0771484375,
0.0888671875,
0.0758056640625,
0.0003781318664550781,
0.02337646484375,
0.038604736328125,
0.0105133056640625,
-0.0091400146484375,
-0.038604736328125,
0.034759521484375,
0.033843994140625,
0.0022182464599609375,
-0.0595703125,
-0.0321044921875,
0.039093017578125,
0.06298828125,
0.07952880859375,
-0.0589599609375,
0.0361328125,
-0.002330780029296875,
-0.029327392578125,
0.0908203125,
0.034820556640625,
-0.05474853515625,
-0.0259857177734375,
0.01349639892578125,
0.0013036727905273438,
-0.0021572113037109375,
0.051239013671875,
0.041656494140625,
0.05682373046875,
-0.03131103515625,
-0.0153350830078125,
0.0005774497985839844,
-0.026519775390625,
0.03521728515625,
-0.03167724609375,
0.0016298294067382812,
0.07275390625,
-0.032562255859375,
0.0516357421875,
0.0165557861328125,
0.00684356689453125,
-0.034454345703125,
0.0203704833984375,
0.055999755859375,
0.060150146484375,
-0.0180816650390625,
-0.0275115966796875,
-0.0170745849609375,
0.0496826171875,
-0.06829833984375,
-0.042083740234375,
-0.046783447265625,
-0.0027332305908203125,
-0.048248291015625,
-0.004947662353515625,
-0.003482818603515625,
-0.01528167724609375,
-0.00203704833984375,
0.0025634765625,
0.03924560546875,
0.039886474609375,
0.0389404296875,
-0.053009033203125,
-0.04815673828125,
-0.09088134765625,
0.037689208984375,
0.0860595703125,
-0.01641845703125,
-0.014007568359375,
-0.011383056640625,
-0.003391265869140625,
0.0511474609375,
0.0282745361328125,
-0.01064300537109375,
0.0004105567932128906,
0.0266265869140625,
-0.0284576416015625,
-0.0037097930908203125,
-0.00740814208984375,
0.0205841064453125,
-0.0006895065307617188,
0.0063934326171875,
-0.003147125244140625,
-0.047393798828125,
0.017730712890625,
0.0660400390625,
-0.0115203857421875,
-0.0120391845703125,
0.03875732421875,
-0.037384033203125,
-0.036895751953125,
-0.046844482421875,
0.03912353515625,
0.0024776458740234375,
0.03839111328125,
-0.01044464111328125,
-0.0146331787109375,
0.07037353515625,
-0.003955841064453125,
0.0167694091796875,
0.049591064453125,
0.0283355712890625,
0.0134429931640625,
0.0374755859375,
0.051239013671875,
0.058502197265625,
0.00930023193359375,
0.048126220703125,
0.03070068359375,
0.0084075927734375,
-0.0013895034790039062,
0.0167694091796875,
-0.052337646484375,
0.01340484619140625,
-0.05755615234375,
0.00399017333984375,
-0.0020751953125,
0.012603759765625,
0.028900146484375,
-0.07122802734375,
-0.00910186767578125,
-0.02264404296875,
-0.024200439453125,
-0.06707763671875,
-0.06512451171875,
-0.054962158203125,
0.0165557861328125,
0.00981903076171875,
-0.05718994140625,
0.045135498046875,
-0.071533203125,
0.032379150390625,
-0.0076141357421875,
0.01401519775390625,
0.06396484375,
0.000637054443359375,
-0.00833892822265625,
0.045440673828125,
-0.0207672119140625,
-0.03631591796875,
0.0341796875,
0.01079559326171875,
-0.041534423828125,
-0.0118865966796875,
0.006893157958984375,
-0.00656890869140625,
-0.037353515625,
0.0152587890625,
-0.078125,
-0.07159423828125,
-0.017120361328125,
-0.07012939453125,
-0.0198974609375,
-0.042266845703125,
-0.038848876953125,
-0.038665771484375,
-0.061004638671875,
-0.004138946533203125,
0.01271820068359375,
0.057037353515625,
0.0182647705078125,
-0.0302734375,
-0.037353515625,
-0.0169525146484375,
-0.038543701171875,
0.038330078125,
-0.03240966796875,
0.00974273681640625,
-0.01519775390625,
-0.01363372802734375,
0.006534576416015625,
0.01369476318359375,
-0.02337646484375,
0.0362548828125,
-0.005283355712890625,
-0.037322998046875,
0.0267181396484375,
-0.029327392578125,
-0.0017671585083007812,
0.032623291015625,
-0.050323486328125,
0.047821044921875,
0.01335906982421875,
-0.023529052734375,
0.0340576171875,
-0.01153564453125,
-0.01410675048828125,
0.0133056640625,
-0.043792724609375,
-0.034759521484375,
0.027313232421875,
0.0180511474609375,
-0.01371002197265625,
-0.022064208984375,
-0.021575927734375,
0.055023193359375,
0.0212249755859375,
-0.0269012451171875,
-0.05596923828125,
-0.0291595458984375,
0.014495849609375,
-0.02349853515625,
-0.0587158203125,
-0.005367279052734375,
0.033416748046875,
-0.05401611328125,
-0.102294921875,
-0.020263671875,
0.0294952392578125,
0.07867431640625,
0.03497314453125,
-0.035858154296875,
0.01250457763671875,
-0.00608062744140625,
0.013702392578125,
-0.00476837158203125,
-0.038787841796875,
-0.06494140625,
-0.050750732421875,
-0.11541748046875,
0.05859375,
0.030059814453125,
0.017486572265625,
-0.006069183349609375,
-0.0517578125,
0.0264892578125,
0.06781005859375,
-0.0249176025390625,
-0.06964111328125,
-0.0252838134765625,
-0.03509521484375,
-0.057830810546875,
-0.0253753662109375,
-0.00372314453125,
0.0167083740234375,
0.0303497314453125,
0.0180816650390625,
-0.032806396484375,
0.046722412109375,
0.007610321044921875,
0.033203125,
0.0650634765625,
0.01410675048828125,
0.0254974365234375,
0.025970458984375,
-0.013763427734375,
0.02935791015625,
-0.00795745849609375,
-0.03009033203125,
-0.0189056396484375,
0.0460205078125,
0.043182373046875,
0.00907135009765625,
0.016204833984375,
-0.005130767822265625,
0.0372314453125,
0.047515869140625,
-0.01076507568359375,
0.05450439453125,
0.004207611083984375,
0.004566192626953125,
0.01302337646484375,
-0.051055908203125,
-0.08502197265625,
0.004573822021484375,
0.00494384765625,
-0.01027679443359375,
-0.03570556640625,
-0.034820556640625,
0.028900146484375,
0.03155517578125,
0.035308837890625,
-0.0379638671875,
0.061553955078125,
0.04083251953125,
0.05072021484375,
-0.025787353515625,
0.02496337890625,
0.040863037109375,
-0.01708984375,
0.0182952880859375,
-0.03857421875,
-0.037109375,
-0.041961669921875,
-0.034454345703125,
-0.05169677734375,
-0.044586181640625,
0.011627197265625,
0.01546478271484375,
-0.0267333984375,
-0.01178741455078125,
-0.01050567626953125,
0.034881591796875,
0.003643035888671875,
-0.0076141357421875,
0.029998779296875,
-0.02276611328125,
0.04742431640625,
0.02978515625,
-0.04156494140625,
-0.0188140869140625,
-0.018035888671875,
-0.00475311279296875,
-0.0192413330078125,
-0.006134033203125,
-0.056671142578125,
-0.042510986328125,
0.028778076171875,
0.034759521484375,
0.004772186279296875,
-0.0174102783203125,
-0.0311737060546875,
0.03314208984375,
0.042327880859375,
-0.00763702392578125,
0.0021533966064453125,
-0.040283203125,
0.03173828125,
0.0377197265625,
-0.027313232421875,
-0.0382080078125,
-0.011871337890625,
0.050079345703125,
-0.0268096923828125,
-0.055145263671875,
0.0075836181640625,
0.00391387939453125,
0.03546142578125,
-0.006633758544921875,
-0.0287628173828125,
0.005664825439453125,
-0.0245513916015625,
-0.01128387451171875,
0.01352691650390625,
-0.008697509765625,
0.0302581787109375,
-0.03936767578125,
0.0408935546875,
0.027313232421875,
-0.0004570484161376953,
0.04071044921875,
0.0231781005859375,
0.012115478515625,
-0.0445556640625,
0.04827880859375,
0.0231475830078125,
-0.034942626953125,
0.01169586181640625,
0.032989501953125,
0.031829833984375,
-0.04217529296875,
0.006366729736328125,
0.050323486328125,
0.00319671630859375,
-0.0175628662109375,
-0.058441162109375,
-0.00666046142578125,
0.0182952880859375,
-0.00665283203125,
-0.019317626953125,
-0.0060882568359375,
-0.04345703125,
0.0233001708984375,
-0.0489501953125,
-0.044769287109375,
0.0596923828125,
0.032684326171875,
-0.004901885986328125,
0.009796142578125,
0.05279541015625,
0.04193115234375,
0.048980712890625,
-0.01395416259765625,
0.0748291015625,
-0.0127716064453125,
-0.04083251953125,
0.0171966552734375,
0.08831787109375,
-0.0285186767578125,
-0.022125244140625,
0.009521484375,
0.01309967041015625,
-0.0219268798828125,
-0.07470703125,
-0.0648193359375,
-0.01308441162109375,
0.018768310546875,
-0.049560546875,
-0.001728057861328125,
-0.015625,
-0.051544189453125,
0.0224151611328125,
-0.032012939453125,
-0.02996826171875,
0.0435791015625,
0.0088043212890625,
0.042724609375,
0.0007939338684082031,
0.050994873046875,
-0.0178985595703125,
-0.01371002197265625,
0.011199951171875,
0.0231475830078125,
0.04510498046875,
0.0211029052734375,
-0.0203857421875,
0.0106353759765625,
0.0022830963134765625,
0.00603485107421875,
-0.004573822021484375,
-0.050048828125,
-0.053741455078125,
-0.0130767822265625,
0.0289306640625,
0.048614501953125,
0.00182342529296875,
-0.019073486328125,
-0.02239990234375,
-0.0211944580078125,
0.050811767578125,
-0.05096435546875,
-0.053680419921875,
-0.05413818359375,
0.035064697265625,
0.0271759033203125,
0.007640838623046875,
0.016082763671875,
0.0271759033203125,
-0.049346923828125,
-0.06988525390625,
0.027313232421875,
0.0185394287109375,
-0.038909912109375,
0.0230865478515625,
-0.00536346435546875,
-0.0213623046875,
0.052978515625,
-0.01153564453125,
-0.007312774658203125,
0.059600830078125,
0.03497314453125,
-0.044281005859375,
0.0257110595703125,
-0.03155517578125,
0.0161285400390625,
-0.055450439453125,
-0.04302978515625,
-0.028106689453125,
-0.03875732421875,
0.04193115234375,
0.01125335693359375,
0.03924560546875,
0.031646728515625,
0.023681640625,
0.0220794677734375,
0.005527496337890625,
-0.044830322265625,
0.025238037109375,
0.04742431640625,
-0.03326416015625,
0.0227813720703125,
-0.02032470703125,
0.021728515625,
-0.0218658447265625,
0.04150390625,
0.052490234375,
0.068359375,
0.038360595703125,
0.04888916015625,
0.0182647705078125,
0.0496826171875,
-0.01502227783203125,
0.01483917236328125,
0.02374267578125,
-0.02880859375,
0.0281219482421875,
0.021270751953125,
0.0433349609375,
-0.0175323486328125,
0.0252838134765625,
0.04669189453125,
0.01496124267578125,
0.037384033203125,
0.03582763671875,
-0.023773193359375,
-0.00122833251953125,
-0.0028400421142578125,
0.03179931640625,
-0.030242919921875,
-0.0265960693359375,
-0.0184326171875,
-0.03662109375,
-0.042877197265625,
0.019866943359375,
-0.0287017822265625,
0.00496673583984375,
0.01105499267578125,
-0.044525146484375,
-0.038818359375,
-0.041473388671875,
-0.040863037109375,
0.0265350341796875,
0.04931640625,
0.002410888671875,
0.0271148681640625,
0.044586181640625,
0.02703857421875,
-0.010833740234375,
0.0199432373046875,
0.04571533203125,
0.01428985595703125,
0.06365966796875,
0.0124969482421875,
0.061553955078125,
0.0673828125,
0.05462646484375,
0.01372528076171875,
0.0419921875,
-0.0273284912109375,
-0.0236968994140625,
0.0200042724609375,
0.00266265869140625,
0.0245361328125,
-0.03802490234375,
0.0125732421875,
0.0269775390625,
-0.003444671630859375,
-0.050445556640625,
-0.0267181396484375,
0.0028324127197265625,
-0.019439697265625,
-0.0160980224609375,
0.02374267578125,
-0.04461669921875,
-0.0100860595703125,
-0.02044677734375,
0.00806427001953125,
0.0027828216552734375,
0.0296173095703125,
0.003986358642578125,
0.01934814453125,
-0.00653839111328125,
-0.00201416015625,
0.0198516845703125,
-0.0193634033203125,
0.035308837890625,
0.0010175704956054688,
-0.009246826171875,
-0.0281524658203125,
-0.051513671875,
0.033966064453125,
-0.0112152099609375,
0.046356201171875,
0.021270751953125,
0.0018205642700195312,
0.034515380859375,
0.0245513916015625,
0.0148773193359375,
-0.0298309326171875,
0.0316162109375,
0.03753662109375,
0.0311737060546875,
-0.00843048095703125,
0.044097900390625,
0.05401611328125,
-0.03765869140625,
0.04388427734375,
0.02001953125,
0.03558349609375,
0.045684814453125,
-0.045440673828125,
-0.0167694091796875,
0.0181732177734375,
-0.016387939453125,
0.043975830078125,
0.00598907470703125,
0.0009212493896484375,
0.035064697265625,
-0.024810791015625,
-0.046142578125,
-0.0196685791015625,
-0.017852783203125,
-0.03143310546875,
0.052032470703125,
-0.0182342529296875,
0.02935791015625,
0.0103302001953125,
0.072265625,
-0.01265716552734375,
-0.038543701171875,
-0.0218505859375,
0.00804901123046875,
0.0469970703125,
-0.0021686553955078125,
-0.01262664794921875,
0.053314208984375,
0.0633544921875,
0.03668212890625,
-0.0361328125,
-0.039581298828125,
-0.03424072265625,
0.06353759765625,
0.05096435546875,
0.0008873939514160156,
-0.04766845703125,
0.03753662109375,
-0.025421142578125,
-0.02056884765625,
0.020782470703125,
0.058197021484375,
-0.042816162109375,
0.00963592529296875,
-0.0008177757263183594,
0.04815673828125,
-0.0231475830078125,
0.015594482421875,
0.034759521484375,
-0.0042724609375,
-0.0338134765625,
0.011444091796875,
-0.0218658447265625,
0.00030517578125,
0.008941650390625,
-0.033050537109375,
0.0163116455078125,
0.00852203369140625,
-0.028533935546875,
0.031524658203125,
0.03485107421875,
0.0211639404296875,
0.0019931793212890625,
-0.0016069412231445312,
0.0034332275390625,
0.00872802734375,
0.024566650390625,
-0.0036182403564453125,
-0.0263671875,
-0.017822265625,
0.00978851318359375,
0.0191650390625,
0.046661376953125,
-0.010345458984375,
0.038726806640625,
0.055999755859375,
0.0027179718017578125,
0.05908203125,
-0.0237274169921875,
0.04351806640625,
-0.006023406982421875,
-0.0190277099609375,
0.0220947265625,
-0.01342010498046875,
0.054229736328125,
0.035491943359375,
0.027923583984375,
0.00949859619140625,
0.039886474609375,
0.0125274658203125,
0.046905517578125,
-0.032318115234375,
0.00977325439453125,
-0.038604736328125,
-0.0498046875,
-0.0038585662841796875,
0.01287078857421875,
0.047454833984375,
-0.0321044921875,
-0.05352783203125,
0.028472900390625,
0.0230560302734375,
0.02716064453125,
0.05828857421875,
-0.0078277587890625,
0.037994384765625,
0.059661865234375,
-0.018829345703125,
-0.04547119140625,
0.03369140625,
0.01654052734375,
-0.0080108642578125,
0.0352783203125,
-0.051025390625,
0.051605224609375,
-0.0367431640625,
-0.05413818359375,
-0.03802490234375,
-0.022430419921875,
0.0361328125,
-0.03863525390625,
-0.0234222412109375,
-0.018310546875,
-0.007457733154296875,
0.037078857421875,
-0.013397216796875,
0.024688720703125,
-0.0002951622009277344,
-0.02691650390625,
0.03326416015625,
0.0274505615234375,
0.049468994140625,
0.049407958984375,
0.0032253265380859375,
0.038299560546875,
-0.0147552490234375,
0.0168609619140625,
-0.034637451171875,
0.008819580078125,
0.01751708984375,
-0.0110321044921875,
0.01678466796875,
0.04345703125,
-0.0219879150390625,
0.01422882080078125,
-0.03961181640625,
0.023895263671875,
-0.0229644775390625,
0.003173828125,
0.004413604736328125,
0.037872314453125,
0.017425537109375,
-0.029449462890625,
0.005123138427734375,
0.0216522216796875,
0.04541015625,
-0.0062713623046875,
-0.031890869140625,
0.0187225341796875,
-0.003520965576171875,
0.01531219482421875,
-0.041412353515625,
0.05328369140625,
0.031158447265625,
0.041290283203125,
0.0467529296875,
0.0048828125,
-0.047943115234375,
0.027618408203125,
-0.01702880859375,
0.031463623046875,
-0.01812744140625,
0.05230712890625,
0.033599853515625,
0.035003662109375,
0.021209716796875,
0.00778961181640625,
-4.1604042053222656e-05,
-0.01100921630859375,
0.003406524658203125,
-0.01043701171875,
0.04962158203125,
0.04327392578125,
-0.01448822021484375,
0.024932861328125,
0.0192413330078125,
-0.036285400390625,
0.038177490234375,
0.01039886474609375,
0.01145172119140625,
-0.01922607421875,
0.05126953125,
0.027587890625,
-0.0101318359375,
-0.05950927734375,
-0.03997802734375,
-0.033599853515625,
0.03289794921875,
-0.01488494873046875,
0.045928955078125,
-0.021697998046875,
-0.04052734375,
0.022705078125,
0.0341796875,
-0.0112152099609375,
-0.0255279541015625,
0.021392822265625,
0.0361328125,
0.013427734375,
0.0089874267578125,
-0.00029754638671875,
0.03485107421875,
-0.031463623046875,
0.01497650146484375,
0.005615234375,
-0.003200531005859375,
-0.046112060546875,
0.033782958984375,
-0.0161895751953125,
0.0347900390625,
-0.01274871826171875,
-0.00893402099609375,
-0.0008044242858886719,
0.01194000244140625,
0.0662841796875,
0.0061187744140625,
0.028076171875,
-0.020843505859375,
0.00815582275390625,
-0.01276397705078125,
-0.005596160888671875,
0.0127105712890625,
0.01471710205078125,
-0.039093017578125,
0.045013427734375,
0.03131103515625,
-0.01064300537109375,
-0.009246826171875,
0.016143798828125,
0.0245208740234375,
0.04559326171875,
0.030914306640625,
-0.0171356201171875,
0.06304931640625,
0.07940673828125,
-0.00107574462890625,
0.04058837890625,
0.012176513671875,
0.0276031494140625,
0.061553955078125,
-0.034210205078125,
0.059112548828125,
0.0179443359375,
0.04620361328125,
0.04180908203125,
-0.0170745849609375,
-0.046844482421875,
-0.0255889892578125,
0.0404052734375,
0.020050048828125,
-0.014617919921875,
0.057952880859375,
0.01512908935546875,
0.00945281982421875,
0.051605224609375,
0.001361846923828125,
-0.0303497314453125,
0.0106964111328125,
0.0220489501953125,
-0.00959014892578125,
-0.0006361007690429688,
-0.01433563232421875,
-0.0228424072265625,
0.0321044921875,
0.0111846923828125,
0.0174713134765625,
0.0190277099609375,
0.036956787109375,
0.01236724853515625,
-0.0233001708984375,
-0.059295654296875,
-0.01044464111328125,
0.03759765625,
0.037078857421875,
-0.017974853515625,
-0.0021114349365234375,
0.05279541015625,
-0.004302978515625,
0.0408935546875,
0.0220184326171875,
0.0096435546875,
-0.02838134765625,
0.0071868896484375,
-0.004459381103515625,
0.0362548828125,
0.03521728515625,
-0.0301513671875,
0.0126190185546875,
-0.0219879150390625,
0.00426483154296875,
0.06903076171875,
-0.0002741813659667969,
0.031341552734375,
-0.0276641845703125,
-0.045318603515625,
-0.0016374588012695312,
0.02032470703125,
-0.027679443359375,
-0.0009822845458984375,
0.00740814208984375,
-0.045562744140625,
-0.019012451171875,
0.05084228515625,
0.049041748046875,
-0.0135498046875,
-0.01557159423828125,
-0.054840087890625,
0.0097808837890625,
0.0989990234375,
0.00795745849609375,
0.05975341796875,
0.03424072265625,
0.052764892578125,
0.0355224609375,
0.08038330078125,
-0.0040740966796875,
-0.0144805908203125,
0.01035308837890625,
0.01462554931640625,
-0.0271453857421875,
0.004245758056640625,
0.0111846923828125,
-0.00214385986328125,
0.0229339599609375,
0.02099609375,
0.04571533203125,
0.0102996826171875,
0.052459716796875,
0.0200958251953125,
0.09576416015625,
0.006038665771484375,
0.0262908935546875,
0.00995635986328125,
0.030364990234375,
-0.037811279296875,
-0.0677490234375,
-0.07269287109375,
0.0037364959716796875,
-0.04571533203125,
-0.009124755859375,
-0.0109405517578125,
-0.039031982421875,
-0.009521484375,
-0.04010009765625,
0.0243988037109375,
0.0369873046875,
-0.042938232421875,
-0.0286102294921875,
0.045257568359375,
-0.05010986328125,
-0.004756927490234375,
-0.039794921875,
0.00537109375,
-0.0357666015625,
-0.029510498046875,
0.017852783203125,
-0.057525634765625,
-0.052642822265625,
-0.035064697265625,
-0.0103607177734375,
-0.049285888671875,
-0.06622314453125,
-0.0221099853515625,
-0.0144500732421875,
0.0122222900390625,
-0.0309295654296875,
-0.018341064453125,
-0.04241943359375,
-0.074951171875,
0.000522613525390625,
-0.0282745361328125,
0.016143798828125,
-0.004878997802734375,
-0.021636962890625,
-0.0220489501953125,
0.03826904296875,
-0.0146942138671875,
0.060333251953125,
0.0197906494140625,
-0.006755828857421875,
-0.05523681640625,
-0.026519775390625,
0.056976318359375,
0.03485107421875,
-0.02252197265625,
-0.00981903076171875,
0.00934600830078125,
-0.0108795166015625,
0.0418701171875,
0.0284881591796875,
0.030548095703125,
-0.037200927734375,
-0.005329132080078125,
0.032806396484375,
-0.0401611328125,
0.03009033203125,
0.00638580322265625,
-0.002643585205078125,
-0.028717041015625,
0.01239776611328125,
0.05340576171875,
-0.046600341796875,
0.0029506683349609375,
-0.026092529296875,
0.004825592041015625,
0.034912109375,
-0.0005478858947753906,
-0.0266571044921875,
0.004062652587890625,
0.01324462890625,
-0.0941162109375,
-0.04083251953125,
-0.01016998291015625,
0.048004150390625,
-0.037506103515625,
-0.026519775390625,
0.0173797607421875,
-0.055938720703125,
-0.034271240234375,
0.0689697265625,
-0.0277862548828125,
0.0089111328125,
0.0080718994140625,
0.01023101806640625,
0.04327392578125,
-0.039520263671875,
0.01953125,
-0.033416748046875,
-0.040374755859375,
-0.0197296142578125,
-0.04278564453125,
-0.05108642578125,
0.058441162109375,
-0.035369873046875,
-0.050628662109375,
-0.01010894775390625,
-0.04888916015625,
0.0263214111328125,
0.00818634033203125,
-0.048583984375,
-0.0273895263671875,
-0.0126495361328125,
-0.0384521484375,
0.009124755859375,
0.026947021484375,
-0.007297515869140625,
-0.01026153564453125,
0.0038089752197265625,
0.040130615234375,
-0.042327880859375,
-0.0014181137084960938,
-0.0011510848999023438,
-0.0267181396484375,
0.059814453125,
-0.0022125244140625,
-0.0311126708984375,
-0.016265869140625,
0.0107879638671875,
0.0302276611328125,
-0.031402587890625,
-0.018707275390625,
-0.01018524169921875,
-0.025177001953125,
-0.01561737060546875,
0.0004525184631347656,
0.00669097900390625,
0.0589599609375,
-0.01544952392578125,
-0.019195556640625,
0.0011425018310546875,
0.0316162109375,
0.0013217926025390625,
0.00494384765625,
0.036346435546875,
-0.032501220703125,
0.0017557144165039062,
0.01702880859375,
-0.01474761962890625,
0.0482177734375,
0.04443359375,
-0.0350341796875,
0.03466796875,
-0.041107177734375,
0.01153564453125,
-0.0272674560546875,
-0.0091094970703125,
-0.01568603515625,
-0.03472900390625,
0.0208587646484375,
-0.004917144775390625,
-0.021728515625,
-9.334087371826172e-05,
0.040252685546875,
0.01178741455078125,
0.0496826171875,
0.049163818359375,
0.0281829833984375,
0.043670654296875,
0.01824951171875,
-0.039703369140625,
-0.0269775390625,
-0.0297088623046875,
0.06146240234375,
0.02532958984375,
-0.047149658203125,
-0.05352783203125,
-0.0230255126953125,
0.01470947265625,
-0.03240966796875,
0.0185699462890625,
0.0205535888671875,
-0.0107574462890625,
-0.0478515625,
0.037322998046875,
-0.0389404296875,
-0.01297760009765625,
-0.00836181640625,
-0.023590087890625,
-0.04888916015625,
0.066162109375,
0.01287841796875,
0.014923095703125,
-0.01189422607421875,
0.04754638671875,
0.05157470703125,
-0.043243408203125,
-0.005420684814453125,
0.07318115234375,
0.049041748046875,
0.042266845703125,
-0.00782012939453125,
-0.0455322265625,
-0.01042938232421875,
0.040008544921875,
0.0364990234375,
0.00879669189453125,
-0.037384033203125,
0.037200927734375,
-0.03350830078125,
-0.026092529296875,
0.035400390625,
0.006900787353515625,
0.008087158203125,
-0.005462646484375,
0.02215576171875,
-0.05224609375,
0.0038928985595703125,
0.027679443359375,
-0.002197265625,
0.023406982421875,
-0.0276641845703125,
0.054595947265625,
0.006175994873046875,
0.0443115234375,
0.022064208984375,
-0.0016460418701171875,
0.03448486328125,
0.026458740234375,
0.033660888671875,
0.01885986328125,
0.0447998046875,
-0.0245513916015625,
-0.0178680419921875,
0.04766845703125,
-0.0447998046875,
-0.04180908203125,
-0.006786346435546875,
-0.0273284912109375,
-0.05548095703125,
-0.00868988037109375,
-0.0389404296875,
0.01486968994140625,
-0.0199127197265625,
0.041229248046875,
-0.03765869140625,
0.0025539398193359375,
0.0026111602783203125,
0.045654296875,
0.0008568763732910156,
0.030364990234375,
0.05810546875,
0.052642822265625,
0.006252288818359375,
0.0017576217651367188,
-0.0061492919921875,
0.062347412109375,
0.0024471282958984375,
0.0006337165832519531,
0.04669189453125,
0.033966064453125,
-0.01708984375,
0.055389404296875,
0.0106201171875,
0.0229949951171875,
-0.0272216796875,
-0.01641845703125,
0.03436279296875,
-0.02880859375,
-0.028656005859375,
-0.045745849609375,
-0.0633544921875,
0.03106689453125,
-0.01200103759765625,
0.065673828125,
0.0635986328125,
0.047576904296875,
0.01436614990234375,
0.00815582275390625,
-0.00458526611328125,
-0.02008056640625,
-0.0216522216796875,
0.021728515625,
-0.00897216796875,
0.04498291015625,
0.057342529296875,
0.0101318359375,
-0.00763702392578125,
0.057464599609375,
0.026123046875,
-0.042083740234375,
-0.01148223876953125,
0.0033092498779296875,
0.044342041015625,
0.014129638671875,
-0.037261962890625,
0.022186279296875,
0.05059814453125,
-0.050262451171875,
-0.01959228515625,
-0.06072998046875,
-0.00847625732421875,
-0.002994537353515625,
-0.0252685546875,
0.06719970703125,
0.0902099609375,
0.06292724609375,
0.0294342041015625,
0.08416748046875,
0.068603515625,
0.06793212890625,
0.006305694580078125,
-0.019989013671875,
0.051788330078125,
0.08251953125,
-0.006134033203125,
0.0188751220703125,
0.04107666015625,
0.0262298583984375,
0.0189056396484375,
-0.00513458251953125,
0.040557861328125,
0.0672607421875,
0.03887939453125,
-0.012725830078125,
-0.059173583984375,
0.011505126953125,
0.0190582275390625,
-0.0263214111328125,
-0.01032257080078125,
0.049530029296875,
0.0129547119140625,
-0.051727294921875,
0.0032806396484375,
-0.03582763671875,
-0.0184173583984375,
-0.025787353515625,
-0.034576416015625,
0.038818359375,
-0.0061492919921875,
0.0175933837890625,
0.0750732421875,
0.045440673828125,
0.03997802734375,
-0.00498199462890625,
0.0214080810546875,
-0.016754150390625,
0.03759765625,
-0.01861572265625,
0.0220489501953125,
-0.03570556640625,
-0.029754638671875,
-0.0247955322265625,
-0.01371002197265625,
0.0018711090087890625,
-0.0355224609375,
-0.02203369140625,
0.0023212432861328125,
-0.049468994140625,
0.002735137939453125,
-0.00562286376953125,
0.0129852294921875,
-0.013214111328125,
-0.035980224609375,
-0.056243896484375,
0.0292205810546875,
-0.0229034423828125,
-0.040740966796875,
-0.0280914306640625,
-0.0087738037109375,
-0.0293426513671875,
0.006618499755859375,
-0.01434326171875,
0.033599853515625,
0.00531005859375,
-0.0125579833984375,
-0.03375244140625,
0.0201263427734375,
0.0418701171875,
0.024688720703125,
0.00414276123046875,
0.014495849609375,
0.019195556640625,
0.045989990234375,
0.049224853515625,
-0.0216522216796875,
0.045440673828125,
0.021392822265625,
0.0264129638671875,
0.0176544189453125,
-0.019256591796875,
0.053924560546875,
0.06939697265625,
0.00640106201171875,
0.04022216796875,
-0.0188751220703125,
0.057098388671875,
0.07147216796875,
-0.017822265625,
-0.01473236083984375,
0.03314208984375,
0.0377197265625,
0.012115478515625,
0.006561279296875,
0.019012451171875,
-0.046142578125,
-0.00485992431640625,
-0.040008544921875,
-0.0382080078125,
-0.05694580078125,
0.0164642333984375,
0.039947509765625,
0.0062255859375,
-0.0599365234375,
-0.0014514923095703125,
-0.0185546875,
-0.00817108154296875,
0.027618408203125,
0.0221405029296875,
-0.0269012451171875,
0.046630859375,
-0.036407470703125,
0.039459228515625,
-0.00879669189453125,
-0.008514404296875,
0.0511474609375,
0.05810546875,
0.050811767578125,
-0.01482391357421875,
-0.01296234130859375,
-0.06451416015625,
0.007488250732421875,
-0.01352691650390625,
-0.028045654296875,
0.0099945068359375,
-0.046478271484375,
0.04638671875,
-0.004596710205078125,
-0.049224853515625,
0.024139404296875,
0.019683837890625,
0.00849151611328125,
-0.042205810546875,
-0.00786590576171875,
-0.054229736328125,
-0.0112152099609375,
0.032196044921875,
0.0093841552734375,
-0.016448974609375,
0.01065826416015625,
-0.0101318359375,
0.059478759765625,
-0.0157470703125,
-0.001415252685546875,
0.00884246826171875,
-0.0115814208984375,
-0.0528564453125,
-0.0189666748046875,
-0.0318603515625,
-0.0182647705078125,
0.02752685546875,
0.027069091796875,
0.0284423828125,
-0.03662109375,
0.0364990234375,
0.0009737014770507812,
-0.01389312744140625,
-0.0007529258728027344,
0.0384521484375,
-0.030731201171875,
0.039581298828125,
0.0220794677734375,
0.048858642578125,
-0.0369873046875,
0.0011882781982421875,
-0.0131378173828125,
0.0494384765625,
0.054595947265625,
-0.02496337890625,
-0.0015153884887695312,
-0.064208984375,
0.0157928466796875,
-0.0189971923828125,
0.02703857421875,
-0.0797119140625,
-0.0275115966796875,
0.037384033203125,
-0.0227813720703125,
-0.06878662109375,
0.00630950927734375,
-0.05657958984375,
0.004116058349609375,
-0.00295257568359375,
0.0161285400390625,
-0.0270843505859375,
-0.012664794921875,
0.0054931640625,
0.0005588531494140625,
0.00978851318359375,
-0.042449951171875,
0.03289794921875,
-0.0003867149353027344,
-0.0009107589721679688,
-0.048187255859375,
-0.007232666015625,
-0.066162109375,
-0.044342041015625,
0.0076141357421875,
0.0296173095703125,
-0.0460205078125,
0.0027179718017578125,
0.0191497802734375,
0.00217437744140625,
0.02398681640625,
0.038421630859375,
0.00021719932556152344,
0.041046142578125,
0.004058837890625,
-0.043609619140625,
-0.052490234375,
-0.0041656494140625,
0.0230560302734375,
0.00873565673828125,
-0.021240234375,
-0.04107666015625,
-0.00246429443359375,
-0.0217742919921875,
-0.0037822723388671875,
0.0167388916015625,
-0.01611328125,
-0.01007843017578125,
-0.00339508056640625,
0.053070068359375,
0.0242156982421875,
-0.0015020370483398438,
-0.0271453857421875,
0.0255279541015625,
-0.0015535354614257812,
0.056121826171875,
0.005634307861328125,
0.049346923828125,
-0.028594970703125,
0.03912353515625,
-0.0239410400390625,
-0.030029296875,
-0.042694091796875,
0.050201416015625,
-0.045074462890625,
-0.00498199462890625,
0.016204833984375,
0.0084075927734375,
0.026031494140625,
0.029205322265625,
0.004596710205078125,
0.0213623046875,
-0.0186614990234375,
0.0010776519775390625,
0.002979278564453125,
-0.0220794677734375,
-0.024658203125,
-0.0352783203125,
0.021484375,
-0.0253448486328125,
-0.0223388671875,
-0.0163421630859375,
-0.007297515869140625,
0.049468994140625,
0.0266265869140625,
-0.0413818359375,
-0.0253143310546875,
0.0229034423828125,
0.05889892578125,
0.0009937286376953125,
0.034271240234375,
-0.035614013671875,
-0.041717529296875,
0.06610107421875,
0.058319091796875,
-0.0206451416015625,
-0.00030541419982910156,
-0.029571533203125,
0.0309295654296875,
0.034393310546875,
-0.0095977783203125,
0.03533935546875,
-0.0458984375,
-0.048431396484375,
-0.033782958984375,
0.029144287109375,
0.0181427001953125,
-0.0325927734375,
-0.042694091796875,
0.054534912109375,
-0.045318603515625,
-0.0245208740234375,
-0.005672454833984375,
0.043670654296875,
0.04595947265625,
-0.00104522705078125,
0.0210723876953125,
0.038330078125,
-0.0120697021484375,
-0.0030689239501953125,
-0.034698486328125,
0.0330810546875,
0.0408935546875,
-0.043701171875,
0.02484130859375,
0.04315185546875,
0.03619384765625,
-0.04132080078125,
0.015350341796875,
0.0171966552734375,
0.05609130859375,
0.04443359375,
-0.031524658203125,
0.0179901123046875,
0.046844482421875,
-0.039886474609375,
0.0211029052734375,
0.02423095703125,
0.0008230209350585938,
-0.0219879150390625,
0.0196075439453125,
-0.001911163330078125,
0.00963592529296875,
0.017822265625,
-0.036773681640625,
0.054901123046875,
0.04638671875,
-0.051727294921875,
0.004299163818359375,
-0.02899169921875,
0.05462646484375,
0.032806396484375,
-0.0166168212890625,
0.0035762786865234375,
0.0185394287109375,
0.022430419921875,
-0.0272674560546875,
-0.00905609130859375,
0.050384521484375,
-0.04022216796875,
-0.036895751953125,
0.04296875,
-0.033843994140625,
-0.03485107421875,
-0.025177001953125,
-0.0472412109375,
0.0295867919921875,
-0.056427001953125,
0.027984619140625,
0.002704620361328125,
-0.00273895263671875,
0.0302886962890625,
0.036712646484375,
-0.018096923828125,
0.038238525390625,
0.0572509765625,
0.03424072265625,
0.0184326171875,
-0.005428314208984375,
-0.045654296875,
-0.036041259765625,
0.0699462890625,
0.0662841796875,
0.053314208984375,
0.02197265625,
-0.0305023193359375,
-0.038543701171875,
-0.0195465087890625,
-0.0186920166015625,
-0.013214111328125,
0.041778564453125,
0.0103759765625,
-0.032318115234375,
-0.0458984375,
-0.0396728515625,
-0.0347900390625,
-0.02691650390625,
0.01555633544921875,
0.0025730133056640625,
0.03253173828125,
0.023651123046875,
-0.038238525390625,
0.0017690658569335938,
-0.046905517578125,
0.0116119384765625,
0.030731201171875,
0.0126190185546875,
-0.0506591796875,
-0.01177215576171875,
-0.01308441162109375,
0.0419921875,
0.03790283203125,
-0.029876708984375,
-0.07928466796875,
-0.0239410400390625,
-0.02978515625,
-0.0281829833984375,
-0.10089111328125,
-0.0012502670288085938,
0.053924560546875,
-0.0271759033203125,
0.032379150390625,
-0.0601806640625,
-0.0026988983154296875,
-0.01568603515625,
0.050933837890625,
-0.0023784637451171875,
0.03125,
0.0171661376953125,
-0.037994384765625,
0.05560302734375,
0.04144287109375,
0.08038330078125,
0.021697998046875,
0.01354217529296875,
0.0034580230712890625,
0.0689697265625,
0.07330322265625,
0.018218994140625,
0.0235137939453125,
0.0174407958984375,
-0.05352783203125,
0.022705078125,
-0.0726318359375,
-0.04315185546875,
-0.056640625,
0.0347900390625,
0.0105743408203125,
0.03631591796875,
0.026763916015625,
0.01145172119140625,
0.041839599609375,
-0.017791748046875,
0.033447265625,
-0.045013427734375,
0.023284912109375,
-0.0210418701171875,
0.01094818115234375,
-0.01343536376953125,
0.032928466796875,
0.0006422996520996094,
-0.06866455078125,
-0.002811431884765625,
0.01261138916015625,
-0.023712158203125,
0.062408447265625,
-0.0169219970703125,
0.0565185546875,
0.01265716552734375,
-0.05126953125,
0.0300140380859375,
-0.0406494140625,
0.01654052734375,
-0.0099029541015625,
0.03564453125,
0.0089111328125,
-0.0130615234375,
0.0272216796875,
0.0465087890625,
0.004634857177734375,
-0.035797119140625,
-0.046905517578125,
0.053192138671875,
0.0684814453125,
-0.0355224609375,
0.036834716796875,
0.0078125,
-0.01288604736328125,
0.0073699951171875,
-0.047515869140625,
0.04180908203125,
-0.08502197265625,
0.0270843505859375,
0.0222930908203125,
-0.001628875732421875,
-0.012908935546875,
-0.031768798828125,
-0.003482818603515625,
-0.024932861328125,
0.035980224609375,
0.0057525634765625,
-0.032928466796875,
0.013824462890625,
-0.0523681640625,
-0.0055389404296875,
-0.006893157958984375,
0.04827880859375,
0.0196685791015625,
-0.0094146728515625,
0.005832672119140625,
0.01393890380859375,
0.08001708984375,
0.02191162109375,
-0.061248779296875,
0.051239013671875,
0.01435089111328125,
0.06768798828125,
0.01059722900390625,
-0.003936767578125,
-0.0228424072265625,
-0.037353515625,
0.01438140869140625,
-0.023681640625,
0.033050537109375,
-0.0439453125,
-0.016326904296875,
0.046417236328125,
-0.019134521484375,
-0.007305145263671875,
0.006275177001953125,
0.005283355712890625,
0.0135040283203125,
-0.0673828125,
0.037139892578125,
0.0239410400390625,
-0.054443359375,
-0.01433563232421875,
-0.0518798828125,
0.069091796875,
0.0181121826171875,
-0.006336212158203125,
-0.042327880859375,
0.0298309326171875,
0.05584716796875,
0.038970947265625,
0.01171112060546875,
0.00428009033203125,
-0.0216522216796875,
-0.005840301513671875,
0.040313720703125,
-0.002166748046875,
-0.00931549072265625,
0.036407470703125,
0.01806640625,
-0.005584716796875,
-0.06365966796875,
-0.035888671875,
-0.0528564453125,
0.0290985107421875,
-0.0201873779296875,
0.00653076171875,
-0.08306884765625,
-0.0013885498046875,
0.0662841796875,
-0.007171630859375,
0.018890380859375,
0.02716064453125,
0.09063720703125,
0.045501708984375,
-0.0280914306640625,
-0.01995849609375,
-0.019744873046875,
-0.032867431640625,
0.023406982421875,
0.035675048828125,
0.005237579345703125,
-0.0215911865234375,
0.03045654296875,
0.032012939453125,
-0.0241546630859375,
0.01169586181640625,
-0.0183563232421875,
-0.0184478759765625,
-0.032501220703125,
0.046234130859375,
0.025360107421875,
-0.052947998046875,
0.03179931640625,
0.00606536865234375,
-0.043121337890625,
0.01189422607421875,
-0.04962158203125,
-0.020172119140625,
-0.059051513671875,
-0.038818359375,
0.0304107666015625,
-0.0411376953125,
-0.00563812255859375,
-0.0679931640625,
0.047271728515625,
-0.0148468017578125,
-0.01239776611328125,
-0.005809783935546875,
0.0654296875,
0.029693603515625,
-0.0227813720703125,
-0.01450347900390625,
0.025604248046875,
0.0167694091796875,
0.0291290283203125,
0.026092529296875,
-0.022857666015625,
-0.0992431640625,
0.0472412109375,
0.04705810546875,
-0.044921875,
-0.00695037841796875,
0.11090087890625,
0.028106689453125,
-0.002651214599609375,
0.029571533203125,
0.0255584716796875,
-0.037994384765625,
0.01349639892578125,
0.0004544258117675781,
-0.0223388671875,
-0.013031005859375,
0.01438140869140625,
-0.01319122314453125,
0.040313720703125,
-0.0309600830078125,
0.00739288330078125,
0.01629638671875,
0.0210723876953125,
0.03631591796875,
-0.00555419921875,
-0.07891845703125,
-0.0285186767578125,
-0.023590087890625,
0.027191162109375,
-0.019805908203125,
-0.0137939453125,
-0.004169464111328125,
0.00922393798828125,
0.0118408203125,
-0.0264129638671875,
0.01104736328125,
0.0119781494140625,
0.0677490234375,
-0.0244140625,
0.038482666015625,
-0.0240325927734375,
-0.042022705078125,
0.007656097412109375,
-0.0204315185546875,
0.0440673828125,
0.030303955078125,
0.01131439208984375,
0.019500732421875,
0.0394287109375,
0.039886474609375,
-0.06396484375,
-0.01232147216796875,
0.0166778564453125,
-0.0195465087890625,
-0.03936767578125,
-0.0706787109375,
0.0032444000244140625,
-0.0168609619140625,
0.052276611328125,
0.0149688720703125,
-0.057373046875,
-0.059661865234375,
0.032684326171875,
-0.0002589225769042969,
0.0302734375,
-0.052276611328125,
-0.02008056640625,
0.05865478515625,
0.049530029296875,
0.0240936279296875,
-0.0245208740234375,
-0.040191650390625,
0.04095458984375,
0.0275115966796875,
0.047760009765625,
-0.01279449462890625,
-0.004913330078125,
0.03472900390625,
-0.002040863037109375,
-0.00897979736328125,
-0.01727294921875,
0.042999267578125,
0.01861572265625,
0.01541900634765625,
0.00388336181640625,
-0.040435791015625,
-0.00283050537109375,
-0.028900146484375,
0.0396728515625,
0.0280303955078125,
-0.061920166015625,
-0.054840087890625,
0.03302001953125,
0.05230712890625,
0.044158935546875,
0.0218353271484375,
0.005214691162109375,
-0.006809234619140625,
0.075439453125,
0.0211944580078125,
-0.01222991943359375,
-0.039398193359375,
-0.040496826171875,
0.06658935546875,
-0.055694580078125,
-0.030975341796875,
0.00946807861328125,
-0.0023345947265625,
0.017059326171875,
0.032501220703125,
0.01013946533203125,
-0.01507568359375,
-0.043609619140625,
0.047332763671875,
0.045562744140625,
0.00018298625946044922,
0.043975830078125,
0.0063323974609375,
-0.011260986328125,
-0.0005011558532714844,
-0.00711822509765625,
0.0026760101318359375,
-0.0338134765625,
0.0222015380859375,
-0.0152740478515625,
-0.046417236328125,
-0.07073974609375,
0.005016326904296875,
0.033905029296875,
-0.039825439453125,
-0.064697265625,
0.0004086494445800781,
0.042510986328125,
0.02239990234375,
0.0263824462890625,
-0.01007843017578125,
0.0140380859375,
0.0110015869140625,
-0.004337310791015625,
0.0189056396484375,
0.0033206939697265625,
-0.0022735595703125,
-0.0004622936248779297,
0.0156097412109375,
0.01459503173828125,
-0.007061004638671875,
-0.0008053779602050781,
0.07818603515625,
-0.0252532958984375,
0.03594970703125,
-0.063232421875,
-0.01520538330078125,
0.042877197265625,
-0.041412353515625,
0.03668212890625,
-0.05560302734375,
-0.018951416015625,
-0.06207275390625,
-0.0006098747253417969,
-0.003597259521484375,
-0.0157318115234375,
-0.035858154296875,
0.05914306640625,
0.052581787109375,
0.0548095703125,
0.06298828125,
-0.028106689453125,
0.046051025390625,
0.0210723876953125,
-0.01493072509765625,
0.056610107421875,
0.052886962890625,
0.018646240234375,
-0.006244659423828125,
0.024993896484375,
0.046966552734375,
0.032958984375,
0.016265869140625,
0.01146697998046875,
-0.0215301513671875,
-0.0482177734375,
0.01117706298828125,
0.034149169921875,
0.010711669921875,
-0.0033626556396484375,
-0.05072021484375,
0.0006365776062011719,
0.02850341796875,
-0.0223846435546875,
-0.015350341796875,
0.02850341796875,
0.01702880859375,
0.02880859375,
-0.0247955322265625,
-0.039764404296875,
-0.01154327392578125,
-0.0224609375,
-0.03265380859375,
0.0026702880859375,
-0.0013179779052734375,
-0.00879669189453125,
0.03375244140625,
-0.032012939453125,
-0.01210784912109375,
-0.054534912109375,
-0.03594970703125,
-0.0014066696166992188,
-0.00833892822265625,
0.055511474609375,
-0.00323486328125,
0.03204345703125,
-0.0518798828125,
-0.031646728515625,
-0.010955810546875,
0.03765869140625,
0.004558563232421875,
-0.046783447265625,
0.0421142578125,
0.020233154296875,
-0.0193023681640625,
0.0118560791015625,
0.020477294921875,
0.07330322265625,
0.0168609619140625,
0.020416259765625,
-0.01236724853515625,
0.03314208984375,
-0.032379150390625,
-0.01361083984375,
0.043182373046875,
0.0101165771484375,
0.0277099609375,
-0.048736572265625,
-0.0662841796875,
0.042144775390625,
-0.00958251953125,
0.050933837890625,
-0.004070281982421875,
0.0266265869140625,
0.0124664306640625,
-0.0278778076171875,
-0.0260162353515625,
-0.036407470703125,
-0.0038299560546875,
0.0010890960693359375,
0.028411865234375,
0.00667572021484375,
0.0242462158203125,
0.050079345703125,
-0.006805419921875,
0.03277587890625,
0.05120849609375,
-0.004985809326171875,
0.04730224609375,
-0.037811279296875,
0.06365966796875,
-0.00019443035125732422,
0.00014138221740722656,
-0.033782958984375,
-6.198883056640625e-06,
0.0176544189453125,
0.0310821533203125,
0.035552978515625,
-0.01849365234375,
-0.03802490234375,
0.03955078125,
-0.05169677734375,
-0.00257110595703125,
0.0283660888671875,
-0.017303466796875,
-0.036407470703125,
-0.01837158203125,
-0.041961669921875,
-0.0170135498046875,
0.028411865234375,
0.038238525390625,
0.03375244140625,
0.00226593017578125,
-0.028472900390625,
-0.013031005859375,
-0.0176239013671875,
-0.0256195068359375,
-0.0023403167724609375,
-0.0019483566284179688,
-0.023529052734375,
-0.0635986328125,
0.0234832763671875,
-0.0165557861328125,
0.032623291015625,
-0.033905029296875,
-0.00046539306640625,
-0.049346923828125,
0.044586181640625,
-0.032867431640625,
0.04913330078125,
-0.005035400390625,
-0.01166534423828125,
0.00141143798828125,
0.038909912109375,
0.0225677490234375,
0.036102294921875,
0.0108184814453125,
-0.039642333984375,
0.0165557861328125,
-0.0285797119140625,
0.048065185546875,
-0.053070068359375,
0.012298583984375,
-0.022796630859375,
0.01161956787109375,
0.033233642578125,
0.0255279541015625,
-0.031982421875,
0.0235443115234375,
0.047515869140625,
-0.0279083251953125,
-0.01439666748046875,
0.069580078125,
0.00635528564453125,
0.030609130859375,
-0.022613525390625,
-0.037322998046875,
0.05316162109375,
-0.00830841064453125,
-0.056182861328125,
0.02154541015625,
0.035247802734375,
0.034820556640625,
0.036041259765625,
0.02532958984375,
0.0179290771484375,
0.00885009765625,
0.0275421142578125,
0.01032257080078125,
0.01861572265625,
-0.0024127960205078125,
0.058624267578125,
0.039306640625,
0.021209716796875,
0.038787841796875,
0.033294677734375,
-0.0165252685546875,
0.006946563720703125,
0.0160064697265625,
-0.0223846435546875,
-0.037933349609375,
0.040283203125,
-0.040313720703125,
0.0236053466796875,
0.005687713623046875,
-0.0665283203125,
0.031707763671875,
-0.0021877288818359375,
0.02154541015625,
-0.04559326171875,
-0.0090179443359375,
0.0213165283203125,
0.0333251953125,
-0.0280303955078125,
-0.02667236328125,
-0.0213623046875,
0.01215362548828125,
0.0281524658203125,
-0.0017957687377929688,
0.04254150390625,
-0.0218658447265625,
0.0218353271484375,
0.043121337890625,
0.0096893310546875,
0.0372314453125,
-0.009979248046875,
0.019500732421875,
0.0286102294921875,
-0.031585693359375,
0.0085601806640625,
0.037109375,
0.05303955078125,
-0.018157958984375,
0.017425537109375,
0.0062103271484375,
0.01410675048828125,
-0.033477783203125,
-0.052581787109375,
-0.016387939453125,
0.021820068359375,
-0.0278472900390625,
0.03387451171875,
0.0758056640625,
0.0740966796875,
-0.0007791519165039062,
0.04193115234375,
-0.0235595703125,
0.0428466796875,
-0.01000213623046875,
-0.00933837890625,
-0.041168212890625,
-0.07330322265625,
0.0467529296875,
-0.06365966796875,
-0.01556396484375,
-0.0255126953125,
-0.016143798828125,
0.00485992431640625,
-0.03692626953125,
-0.01230621337890625,
0.0148162841796875,
0.080078125,
-0.003108978271484375,
0.017364501953125,
0.024658203125,
0.029541015625,
0.01409912109375,
-0.0002658367156982422,
0.03369140625,
0.002590179443359375,
-0.0345458984375,
-0.048095703125,
0.023223876953125,
0.0015058517456054688,
-0.0031528472900390625,
0.01407623291015625,
0.0007100105285644531,
-0.022430419921875,
-0.025299072265625,
0.0111846923828125,
0.006793975830078125,
0.01531219482421875,
-0.0232086181640625,
0.00980377197265625,
-0.035186767578125,
-0.062469482421875,
0.058685302734375,
0.045654296875,
0.00769805908203125,
-0.039398193359375,
0.0040130615234375,
0.005603790283203125,
-0.0272064208984375,
-0.016845703125,
0.00533294677734375,
0.036041259765625,
0.031158447265625,
0.040985107421875,
0.0025177001953125,
-0.041595458984375,
0.046844482421875,
0.02740478515625,
-0.01387786865234375,
0.034759521484375,
0.00022840499877929688,
-0.01092529296875,
-0.040496826171875,
-0.0152435302734375,
0.032562255859375,
0.0273284912109375,
-0.03192138671875,
0.038604736328125,
0.0413818359375,
0.0406494140625,
0.022613525390625,
-0.01015472412109375,
-0.01169586181640625,
-0.0229949951171875,
0.0169830322265625,
0.038665771484375,
-0.0007200241088867188,
-0.05230712890625,
-0.01435089111328125,
0.0095672607421875,
0.036956787109375,
-0.006572723388671875,
0.01788330078125,
0.03143310546875,
0.0006036758422851562,
-0.02783203125,
0.00861358642578125,
-0.00926971435546875,
0.0283966064453125,
0.040679931640625,
0.02545166015625,
-0.02972412109375,
-0.02374267578125,
0.0216217041015625,
0.012847900390625,
-0.03204345703125,
-0.0134124755859375,
-0.03955078125,
0.04388427734375,
-0.004985809326171875,
-0.006755828857421875,
-0.0306549072265625,
-0.0252838134765625,
0.048858642578125,
-0.0092010498046875,
-0.01016998291015625,
0.02703857421875,
0.00951385498046875,
0.0390625,
-0.007770538330078125,
-0.0232696533203125,
0.00830841064453125,
-0.052093505859375,
-0.042877197265625,
-0.004901885986328125,
-0.02667236328125,
-0.0118560791015625,
0.0185699462890625,
-0.025115966796875,
0.02972412109375,
0.022064208984375,
0.024078369140625,
-0.0555419921875,
-0.0193939208984375,
-0.0170745849609375,
-0.02581787109375,
0.0726318359375,
0.020294189453125,
-0.006702423095703125,
-0.0021839141845703125,
0.044677734375,
-0.0009002685546875,
0.057403564453125,
-0.0019683837890625,
0.0552978515625,
0.03857421875,
0.0123748779296875,
0.038055419921875,
0.03668212890625,
-0.01038360595703125,
-0.047821044921875,
-0.048492431640625,
-0.027191162109375,
0.01474761962890625,
-0.033966064453125,
0.044403076171875,
-0.0091705322265625,
-0.04443359375,
-0.051513671875,
0.0164642333984375,
-0.041046142578125,
-0.007232666015625,
0.0016002655029296875,
0.0237274169921875,
0.043792724609375,
-0.039947509765625,
-0.0477294921875,
-0.00031638145446777344,
0.04229736328125,
-0.002468109130859375,
-0.0406494140625,
-0.0028667449951171875,
0.037017822265625,
0.04913330078125,
-0.0135955810546875,
-0.03399658203125,
-0.048370361328125,
0.017181396484375,
0.0229644775390625,
0.030487060546875,
-0.044158935546875,
-0.044769287109375,
-0.05596923828125,
-0.03375244140625,
0.03717041015625,
0.0343017578125,
0.0516357421875,
-0.016693115234375,
-0.048431396484375,
-0.0413818359375,
0.04132080078125,
0.022979736328125,
0.07513427734375,
0.04486083984375,
0.028900146484375,
-0.0113677978515625,
-0.020172119140625,
0.054962158203125,
0.0118865966796875,
0.02020263671875,
-0.029296875,
-0.0207366943359375,
0.03253173828125,
-0.0228118896484375,
0.021331787109375,
-0.01611328125,
0.048583984375,
0.0477294921875,
-0.047760009765625,
-0.0143890380859375,
-0.0384521484375,
-0.0274505615234375,
0.0281829833984375,
-0.0345458984375,
0.019439697265625,
0.04095458984375,
-0.0252838134765625,
0.034881591796875,
0.017059326171875,
-0.009857177734375,
-0.03668212890625,
0.0214080810546875,
-0.03656005859375,
0.00794219970703125,
-0.044189453125,
0.0163726806640625,
0.004512786865234375,
0.02801513671875,
0.010040283203125,
0.04827880859375,
0.01428985595703125,
0.03460693359375,
-0.0411376953125,
-0.0071868896484375,
-0.00830841064453125,
0.01302337646484375,
-0.0277862548828125,
0.01050567626953125,
-0.0299530029296875,
-0.047393798828125,
-0.0018129348754882812,
0.020263671875,
-0.0200347900390625,
0.021942138671875,
-0.04962158203125,
-0.040557861328125,
-0.0517578125,
-0.001857757568359375,
-0.005130767822265625,
0.039825439453125,
-0.007694244384765625,
-0.034881591796875,
-0.01241302490234375,
0.039306640625,
-0.0419921875,
-0.04510498046875,
-0.006076812744140625,
0.031524658203125,
0.0151824951171875,
-0.0426025390625,
0.041900634765625,
-0.008392333984375,
-0.043304443359375,
-0.0228118896484375,
-0.0113983154296875,
-0.028778076171875,
-0.027679443359375,
0.0252838134765625,
0.003955841064453125,
-0.00832366943359375,
-0.0078887939453125,
0.00394439697265625,
-0.01519012451171875,
-0.030670166015625,
-0.0201416015625,
-0.01422882080078125,
-0.027740478515625,
-0.015869140625,
-0.048065185546875,
0.005603790283203125,
-0.03131103515625,
-0.032196044921875,
-0.043212890625,
0.0096588134765625,
0.01806640625,
-0.036865234375,
0.01224517822265625,
-0.021240234375,
-0.01275634765625,
-0.01145172119140625,
0.005706787109375,
0.029327392578125,
-0.0213165283203125,
0.019378662109375,
-0.013946533203125,
-0.01103973388671875,
0.00977325439453125,
0.04150390625,
-0.019195556640625,
0.0019159317016601562,
0.00726318359375,
-0.0167999267578125,
-0.0183868408203125,
0.00800323486328125,
0.047760009765625,
-0.01261138916015625,
0.048583984375,
-0.01326751708984375,
0.0080413818359375,
0.00710296630859375,
-0.0085296630859375,
0.0183563232421875,
-0.0311126708984375,
-0.0277099609375,
-0.0312042236328125,
-0.040313720703125,
0.033905029296875,
0.02655029296875,
-0.0303955078125,
0.0241241455078125,
-0.048065185546875,
0.008331298828125,
-0.0450439453125,
0.0179290771484375,
0.0268707275390625,
0.00815582275390625,
0.023406982421875,
0.037994384765625,
0.04534912109375,
0.01329803466796875,
0.042999267578125,
0.01160430908203125,
-0.045928955078125,
-0.004283905029296875,
0.0439453125,
0.0406494140625,
0.0008420944213867188,
0.0008568763732910156,
-0.0134429931640625,
0.0296630859375,
0.034576416015625,
0.0084686279296875,
0.00832366943359375,
0.0225830078125,
-0.022003173828125,
-0.026153564453125,
0.0210418701171875,
-0.0014352798461914062,
-0.0218505859375,
-0.0157318115234375,
-0.03900146484375,
-0.0308380126953125,
0.04168701171875,
-0.040496826171875,
0.0199127197265625,
0.01216888427734375,
0.041534423828125,
0.0120697021484375,
-0.00244140625,
-0.024688720703125,
0.030487060546875,
-0.004940032958984375,
-0.007732391357421875,
-0.04547119140625,
-0.031097412109375,
0.01294708251953125,
0.040435791015625,
0.0283050537109375,
0.003757476806640625,
0.03759765625,
0.0089111328125,
0.0169677734375,
-0.0017795562744140625,
0.005977630615234375,
-0.006137847900390625,
-0.017913818359375,
-0.0209808349609375,
0.041748046875,
0.0117034912109375,
0.01126861572265625,
0.03704833984375,
-0.050567626953125,
-0.034332275390625,
0.032806396484375,
0.0047607421875,
-0.022064208984375,
0.038482666015625,
0.04827880859375,
-0.0012273788452148438,
0.0162506103515625,
0.0103302001953125,
0.00521087646484375,
-0.012847900390625,
0.04705810546875,
-0.016845703125,
-0.04351806640625,
0.0242919921875,
0.01275634765625,
-0.019622802734375,
-0.02386474609375,
0.0195465087890625,
-0.03656005859375,
-0.0283050537109375,
-0.0028629302978515625,
0.01849365234375,
0.0099029541015625,
-0.0193023681640625,
-0.01629638671875,
-0.03912353515625,
-0.0021877288818359375,
0.0272369384765625,
-0.0014715194702148438,
-0.042449951171875,
-0.007114410400390625,
-0.0309295654296875,
0.046905517578125,
-0.01273345947265625,
0.040130615234375,
-0.0455322265625,
0.0172271728515625,
0.04144287109375,
-0.048126220703125,
-0.0380859375,
-0.048797607421875,
0.0156402587890625,
-0.004611968994140625,
-0.046173095703125,
0.040069580078125,
0.04296875,
0.00897979736328125,
-0.0254364013671875,
0.00789642333984375,
0.0018157958984375,
0.043212890625,
-0.006763458251953125,
0.00907135009765625,
-0.0003566741943359375,
0.026824951171875,
0.007511138916015625,
-0.00824737548828125,
0.006694793701171875,
0.030059814453125,
-0.04925537109375,
-0.032562255859375,
0.0081024169921875,
0.0029449462890625,
0.00992584228515625,
0.04815673828125,
0.03594970703125,
-0.03558349609375,
0.0185699462890625,
0.0316162109375,
0.0173797607421875,
0.041748046875,
0.0279388427734375,
0.00859832763671875,
-0.01464080810546875,
0.0374755859375,
0.0078582763671875,
0.00510406494140625,
-0.0084228515625,
-0.01282501220703125,
-0.03857421875,
-0.0037479400634765625,
0.01617431640625,
0.0193328857421875,
0.0399169921875,
-0.0166778564453125,
-0.0295562744140625,
0.0004992485046386719,
-0.0152435302734375,
-0.05029296875,
0.02081298828125,
0.04461669921875,
0.02777099609375,
-0.0279388427734375,
-0.01092529296875,
-0.0087127685546875,
-0.016510009765625,
0.007049560546875,
0.00923919677734375,
0.015777587890625,
-0.00623321533203125,
0.02386474609375,
-0.0433349609375,
-0.007106781005859375,
-0.0234527587890625,
-0.00457000732421875,
0.01482391357421875,
-0.00063323974609375,
0.0181884765625,
-0.0140380859375,
0.034210205078125,
-0.049591064453125,
0.046234130859375,
-0.038116455078125,
-0.038360595703125,
0.046661376953125,
0.04718017578125,
-0.036895751953125,
0.048248291015625,
0.027099609375,
0.0249176025390625,
0.0305633544921875,
0.0199737548828125,
-0.0306854248046875,
-0.01256561279296875,
0.0175628662109375,
-0.0123138427734375,
-0.017120361328125,
-0.0311431884765625,
0.01422119140625,
0.0020599365234375,
0.03399658203125,
-0.033843994140625,
0.019683837890625,
0.03680419921875,
0.01971435546875,
0.030517578125,
0.042083740234375,
-0.0238800048828125,
0.039306640625,
-0.0237274169921875,
-0.01122283935546875,
0.0039215087890625,
0.01157379150390625,
0.010406494140625,
0.0418701171875,
0.0090789794921875,
-0.0250701904296875,
0.0440673828125,
-0.031646728515625,
-0.04638671875,
-0.026336669921875,
-0.0404052734375,
0.04296875,
-0.00833892822265625,
-0.031341552734375,
-0.0290374755859375,
-0.020050048828125,
0.003528594970703125,
0.038055419921875,
0.0099029541015625,
0.020660400390625,
-0.046630859375,
0.00682830810546875,
-0.041717529296875,
-0.049468994140625,
-0.03729248046875,
-0.044891357421875,
-0.035614013671875,
0.0041351318359375,
0.042724609375,
-0.04974365234375,
-0.0438232421875,
-0.041229248046875,
0.00632476806640625,
-0.02496337890625,
-0.0272369384765625,
-0.005401611328125,
-0.031280517578125,
0.026458740234375,
0.0030841827392578125,
0.0211181640625,
-0.029876708984375,
-0.023895263671875,
-0.00799560546875,
-0.006328582763671875,
-0.0352783203125,
-0.045196533203125,
0.034393310546875,
-0.04736328125,
0.0005140304565429688,
0.0241546630859375,
-0.0377197265625,
0.0428466796875,
-0.00226593017578125,
-0.043060302734375,
0.0300750732421875,
-0.032196044921875,
-0.02679443359375,
-0.042083740234375,
0.034088134765625,
0.02899169921875,
-0.0239105224609375,
-0.0086212158203125,
-0.034576416015625,
-0.038482666015625,
0.039306640625,
0.02203369140625,
0.01751708984375,
-0.0390625,
0.046295166015625,
-0.02642822265625,
0.0201568603515625,
0.043182373046875,
0.0233917236328125,
0.033050537109375,
-0.0190887451171875,
-0.03900146484375,
0.039825439453125,
-0.0087432861328125,
-0.043304443359375,
-0.033416748046875,
-0.022857666015625,
-0.0268096923828125,
0.0180206298828125,
0.040008544921875,
-0.015625,
-0.0390625,
-0.0467529296875,
-0.00855255126953125,
-0.0138092041015625,
0.01526641845703125,
-0.01678466796875,
0.042724609375,
-0.00977325439453125,
0.02032470703125,
-0.04986572265625,
-0.0027294158935546875,
0.040252685546875,
0.041656494140625,
0.00713348388671875,
-0.0152130126953125,
-0.03924560546875,
0.0255126953125,
0.04766845703125,
-0.0204620361328125,
0.0386962890625,
0.0020294189453125,
0.033966064453125,
0.0085906982421875,
-0.0302276611328125,
0.03326416015625,
-0.033447265625,
0.02471923828125,
0.0257415771484375,
-0.032623291015625,
0.0234222412109375,
0.04388427734375,
-0.05029296875,
-0.006916046142578125,
-0.0390625,
0.05126953125,
0.00894927978515625,
-0.003185272216796875,
-0.0010995864868164062,
-0.026092529296875,
0.0408935546875,
0.03717041015625,
0.03460693359375,
0.0219879150390625,
-0.0465087890625,
-0.01438140869140625,
0.035919189453125,
0.04290771484375,
0.02984619140625,
0.044525146484375,
-0.049346923828125,
-0.01035308837890625,
-0.0267333984375,
-0.03253173828125,
-0.03985595703125,
0.03564453125,
0.045806884765625,
-0.035797119140625,
-0.0219879150390625,
-0.00911712646484375,
0.022247314453125,
0.04254150390625,
-0.01006317138671875,
0.0321044921875,
-0.0165863037109375,
0.03363037109375,
-0.01018524169921875,
0.008880615234375,
0.0276031494140625,
-0.044952392578125,
-0.0265045166015625,
0.0219573974609375,
-0.0200042724609375,
-0.00798797607421875,
0.035186767578125,
0.00441741943359375,
0.01248931884765625,
-0.03631591796875,
-0.047149658203125,
0.0020275115966796875,
0.04718017578125,
-0.00701904296875,
0.0088958740234375,
0.0032062530517578125,
0.012542724609375,
0.0251922607421875,
-0.0295257568359375,
-0.00384521484375,
-0.047149658203125,
-0.03717041015625,
0.046844482421875,
0.046417236328125,
-0.029510498046875,
-0.042999267578125,
0.00635528564453125,
0.01555633544921875,
-0.035614013671875,
-0.0064239501953125,
0.0261993408203125,
-0.013397216796875,
0.0257415771484375,
-0.008087158203125,
-0.006130218505859375,
0.044952392578125,
-0.0237274169921875,
-0.0004410743713378906,
-0.0010938644409179688,
0.044281005859375,
-0.0205841064453125,
0.04388427734375,
-0.04718017578125,
0.022796630859375,
-0.0138702392578125,
0.042022705078125,
0.029052734375,
-0.0447998046875,
-0.041778564453125,
0.048065185546875,
-0.027374267578125,
-0.031707763671875,
0.01042938232421875,
-0.0239715576171875,
0.038543701171875,
-0.016815185546875,
0.02557373046875,
0.0330810546875,
0.02227783203125,
0.045135498046875,
-0.0450439453125,
0.0173492431640625,
-0.031707763671875,
0.043060302734375,
-0.0012731552124023438,
-0.0194549560546875,
0.01059722900390625,
-0.0027904510498046875,
-0.016265869140625,
-0.0215301513671875,
0.01122283935546875,
-0.02471923828125,
-0.01328277587890625,
0.0400390625,
0.0379638671875,
0.01360321044921875,
0.006175994873046875,
-0.0232391357421875,
0.00991058349609375,
-0.0308837890625,
-0.01373291015625,
0.00917816162109375,
-0.048614501953125,
0.0214996337890625,
0.009918212890625,
-0.041259765625,
-0.009765625,
-0.048919677734375,
-0.027252197265625,
-0.039398193359375,
0.044158935546875,
-0.041748046875,
0.0489501953125,
-0.0019121170043945312,
0.01016998291015625,
0.0155181884765625,
-0.039764404296875,
-0.01372528076171875,
-0.01197052001953125,
-0.0188751220703125,
0.032440185546875,
-0.0283355712890625,
0.019378662109375,
-0.03302001953125,
0.007030487060546875,
0.0218963623046875,
-0.0255126953125,
-0.0008349418640136719,
0.0421142578125,
0.0199127197265625,
0.0279998779296875,
0.0046234130859375,
0.032379150390625,
0.01483154296875,
0.01031494140625,
0.01308441162109375,
0.042938232421875,
0.047393798828125,
0.00443267822265625,
0.0118865966796875,
-0.048583984375,
0.009124755859375,
-0.00664520263671875,
0.03460693359375,
0.047210693359375,
-0.04949951171875,
-0.023529052734375,
0.0243377685546875,
-0.047576904296875,
0.0256195068359375,
-0.0345458984375,
-0.0137786865234375,
0.047027587890625,
0.00785064697265625,
0.0054931640625,
-0.0333251953125,
-0.0253753662109375,
0.0308837890625,
-0.04302978515625,
-0.0237884521484375,
-0.010711669921875,
-0.029876708984375,
-0.0103759765625,
0.050384521484375,
-0.044403076171875,
-0.007568359375,
-0.0203857421875,
-0.048797607421875,
-0.00939178466796875,
0.049224853515625,
0.00870513916015625,
0.0200042724609375,
0.01629638671875,
-0.0491943359375,
-0.01261138916015625,
0.04803466796875,
-0.01462554931640625,
0.0294036865234375,
0.03033447265625,
0.0341796875,
-0.03363037109375,
0.0297698974609375,
-0.0030670166015625,
-0.0155792236328125,
0.041473388671875,
-0.03546142578125,
0.042449951171875,
0.017120361328125,
0.042724609375,
0.0228118896484375,
-0.043243408203125,
-0.032562255859375,
-0.044769287109375,
-0.033416748046875,
0.043701171875,
0.0293121337890625,
-0.03497314453125,
-0.041595458984375,
-0.03515625,
-0.037994384765625,
-0.022308349609375,
0.001270294189453125,
-0.038055419921875,
0.0244293212890625,
0.0265045166015625,
-0.035552978515625,
-0.018463134765625,
-0.037078857421875,
-0.007965087890625,
0.001888275146484375,
-0.041107177734375,
-0.00847625732421875,
-0.032470703125,
-0.047760009765625,
-0.0193939208984375,
0.0281219482421875,
0.044158935546875,
-0.043365478515625,
-0.0222930908203125,
-0.0290069580078125,
0.02825927734375,
0.01389312744140625,
-0.03009033203125,
-0.00432586669921875,
0.0015697479248046875,
-0.046356201171875,
0.0187225341796875,
-0.0108642578125,
0.02294921875,
0.023162841796875,
0.005031585693359375,
-0.0079498291015625,
-0.044158935546875,
0.0014562606811523438,
-0.031280517578125,
-0.023712158203125,
0.0017995834350585938,
0.03741455078125,
0.043609619140625,
-0.044464111328125,
-0.04412841796875,
-0.01216888427734375,
-0.005847930908203125,
-0.038848876953125,
-0.0257110595703125,
0.03216552734375,
-0.00928497314453125,
-0.03167724609375,
-0.0027256011962890625,
-0.010467529296875,
0.0458984375,
-0.04736328125,
-0.007686614990234375,
-0.0262603759765625,
0.00940704345703125,
-0.0102386474609375,
0.01654052734375,
-0.0099029541015625,
-0.0110321044921875,
0.0187530517578125,
0.01371002197265625,
-0.0482177734375,
-0.0361328125,
-0.0196380615234375,
-0.01306915283203125,
-0.041778564453125,
-0.044952392578125,
0.03082275390625,
-0.026031494140625,
-0.01372528076171875,
0.0168914794921875,
-0.031402587890625,
-0.04052734375,
0.03472900390625,
0.03857421875,
0.0007123947143554688,
0.0343017578125,
-0.0225372314453125,
0.03466796875,
-0.005237579345703125,
0.046844482421875,
0.03033447265625,
-0.01442718505859375,
-0.02850341796875,
-0.00817108154296875,
0.0504150390625,
0.0455322265625,
0.03900146484375,
0.01349639892578125,
0.045318603515625,
-0.041595458984375,
0.02374267578125,
-0.0322265625,
-0.0496826171875,
-0.05029296875,
-0.04052734375,
-0.00959014892578125,
0.0166473388671875,
-0.0236053466796875,
-0.0291900634765625,
0.01276397705078125,
0.041229248046875,
-0.0128936767578125,
-0.029541015625,
0.0190887451171875,
-0.0352783203125,
-0.04815673828125,
-0.006832122802734375,
-0.024017333984375,
-0.0011110305786132812,
-0.0088958740234375,
-0.0088653564453125,
-0.03179931640625,
-0.0002448558807373047,
0.0355224609375,
0.0010881423950195312,
-0.0250396728515625,
-0.018218994140625,
-0.007904052734375,
-0.0460205078125,
-0.0206451416015625,
-0.0014410018920898438,
0.0250091552734375,
-0.0209197998046875,
0.0156707763671875,
-0.04034423828125,
-0.045196533203125,
-0.04669189453125,
0.009490966796875,
0.0028057098388671875,
0.0206146240234375,
-0.0161590576171875,
0.0008816719055175781,
-0.033050537109375,
0.0085601806640625,
-0.0206146240234375,
0.049560546875,
-0.0321044921875,
0.0102691650390625,
0.01091766357421875,
0.0361328125,
0.033050537109375,
-0.034912109375,
0.03240966796875,
-0.044189453125,
0.0232086181640625,
-0.0115814208984375,
0.00838470458984375,
0.0009984970092773438,
0.00830078125,
0.03826904296875,
0.03131103515625,
-0.0156402587890625,
0.006267547607421875,
0.07818603515625,
-0.02911376953125,
-0.00571441650390625,
-0.059906005859375,
0.01654052734375,
-0.0462646484375,
-0.0254364013671875,
-0.004558563232421875,
-0.030242919921875,
0.047149658203125,
0.020904541015625,
-0.023101806640625,
0.0601806640625,
0.052947998046875,
0.021453857421875,
-0.039520263671875,
0.028656005859375,
-0.0291290283203125,
0.04840087890625,
-0.03631591796875,
0.082763671875,
0.09783935546875,
0.0552978515625,
0.04205322265625,
-0.035919189453125,
0.036163330078125,
0.045867919921875,
0.0802001953125,
-0.009552001953125,
0.04669189453125,
0.037017822265625,
-0.0057830810546875,
0.01172637939453125,
-0.0024623870849609375,
0.04327392578125,
-0.0033092498779296875,
0.055572509765625,
0.0159759521484375,
0.0400390625,
0.031219482421875,
0.037567138671875,
0.0166778564453125,
0.0153961181640625,
-0.035797119140625,
-0.033599853515625,
-0.0484619140625,
-0.037994384765625,
-0.026153564453125,
-0.05816650390625,
0.0179901123046875,
0.0222625732421875,
-0.000164031982421875,
-0.007190704345703125,
-0.03485107421875,
0.037506103515625,
-0.03033447265625,
0.06890869140625,
0.055999755859375,
-0.003704071044921875,
0.01213836669921875,
0.0023403167724609375,
0.070068359375,
0.05743408203125,
0.048187255859375,
-0.0221710205078125,
0.03192138671875,
-0.0555419921875,
-0.04693603515625,
-0.03045654296875,
0.032501220703125,
-0.01523590087890625,
-0.01444244384765625,
-0.026336669921875,
-0.00942230224609375,
0.042205810546875,
-0.058746337890625,
-0.01096343994140625,
0.01483154296875,
-0.01806640625,
-0.016937255859375,
-0.01056671142578125,
0.032012939453125,
-0.0093841552734375,
-0.024261474609375,
-0.024322509765625,
0.0243377685546875,
0.0158843994140625,
0.01146697998046875,
0.011474609375,
0.019378662109375,
-0.017364501953125,
-0.01110076904296875,
-0.0117950439453125,
-0.0205078125,
0.01007843017578125,
-0.018096923828125,
0.0238189697265625,
0.0137481689453125,
-0.00609588623046875,
0.037689208984375,
0.02392578125,
0.060333251953125,
-0.0009551048278808594,
0.01245880126953125,
-0.0074920654296875,
-0.0311126708984375,
0.04644775390625,
0.04937744140625,
0.02032470703125,
-0.003185272216796875,
-0.03240966796875,
0.035797119140625,
0.0034351348876953125,
0.041107177734375,
0.056182861328125,
-0.021636962890625,
0.03350830078125,
0.0170440673828125,
0.023956298828125,
-0.004863739013671875,
-0.027191162109375,
-0.0129241943359375,
-0.048187255859375,
-0.059051513671875,
-0.04412841796875,
-0.027984619140625,
-0.008819580078125,
-0.0077972412109375,
0.003204345703125,
0.0164947509765625,
-0.0628662109375,
-0.004383087158203125,
-0.02972412109375,
-0.0011034011840820312,
-0.004730224609375,
0.01239013671875,
-0.023223876953125,
0.0248260498046875,
-0.0218505859375,
-0.0196685791015625,
-0.003200531005859375,
-0.0258331298828125,
0.0193023681640625,
0.06488037109375,
0.033935546875,
-0.048248291015625,
0.012420654296875,
-0.07940673828125,
-0.02105712890625,
0.02587890625,
-0.04522705078125,
-0.0712890625,
-0.016998291015625,
0.0182037353515625,
-0.02166748046875,
0.02825927734375,
-0.005725860595703125,
0.035125732421875,
-0.017425537109375,
-0.005702972412109375,
-0.01406097412109375,
0.0190887451171875,
0.03228759765625,
-0.034515380859375,
-0.00522613525390625,
-0.022705078125,
-0.048431396484375,
-0.0653076171875,
0.031524658203125,
0.0391845703125,
0.060638427734375,
-0.0160980224609375,
0.01561737060546875,
-0.01219940185546875,
-0.0032253265380859375,
-0.04290771484375,
-0.017120361328125,
0.02984619140625,
0.04388427734375,
-0.028778076171875,
0.044219970703125,
-0.0186309814453125,
0.042327880859375,
0.043212890625,
0.04217529296875,
0.025604248046875,
0.05316162109375,
0.046173095703125,
0.054290771484375,
-0.0084075927734375,
-0.014892578125,
0.01392364501953125,
0.032623291015625,
0.0312042236328125,
0.0294342041015625,
0.031768798828125,
-0.052886962890625,
-0.007904052734375,
-0.041046142578125,
0.01470184326171875,
-0.0035228729248046875,
-0.075927734375,
-0.001102447509765625,
0.039520263671875,
0.056549072265625,
-0.015869140625,
-0.01593017578125,
0.017333984375,
-0.0007414817810058594,
0.0244140625,
0.032196044921875,
-0.0303955078125,
0.0092315673828125,
-0.042266845703125,
0.0101165771484375,
-0.00701904296875,
0.05133056640625,
-0.01165008544921875,
-0.04046630859375,
0.0245208740234375,
-0.028411865234375,
-0.04083251953125,
0.0204010009765625,
-0.005382537841796875,
-0.03424072265625,
-0.03338623046875,
-0.045623779296875,
-0.042816162109375,
0.030303955078125,
-0.013824462890625,
-0.01190185546875,
-0.0189666748046875,
0.015350341796875,
-0.0186920166015625,
-0.004344940185546875,
0.03582763671875,
0.051177978515625,
0.0253143310546875,
-0.046142578125,
0.032867431640625,
-0.0007433891296386719,
-0.0229949951171875,
0.01397705078125,
0.04327392578125,
-0.0004935264587402344,
0.05767822265625,
0.006900787353515625,
0.0270538330078125,
0.0261383056640625,
-0.025543212890625,
0.029296875,
0.01800537109375,
0.0069580078125,
0.0191650390625,
-0.02764892578125,
-0.0254974365234375,
-0.0116424560546875,
-0.0171051025390625,
0.0273590087890625,
-0.037109375,
0.0531005859375,
0.0159454345703125,
-0.038238525390625,
0.020660400390625,
0.037872314453125,
0.013702392578125,
-0.032257080078125,
0.001739501953125,
0.01305389404296875,
-0.0333251953125,
0.036895751953125,
0.0020694732666015625,
-0.049530029296875,
0.0085601806640625,
-0.005847930908203125,
0.0265045166015625,
-0.004180908203125,
0.0531005859375,
0.0025424957275390625,
-0.01201629638671875,
-0.0022182464599609375,
0.041290283203125,
0.009765625,
-0.025238037109375,
-0.039520263671875,
0.0028133392333984375,
0.028472900390625,
0.041290283203125,
0.035614013671875,
-0.0018815994262695312,
0.0325927734375,
-0.0139923095703125,
0.0260467529296875,
0.0379638671875,
-0.0230865478515625,
-0.0262451171875,
0.034637451171875,
-0.025970458984375,
-0.030914306640625,
0.029693603515625,
-0.0438232421875,
0.02154541015625,
-0.017425537109375,
-0.04498291015625,
0.0024700164794921875,
-0.01165008544921875,
0.02947998046875,
-0.0124053955078125,
-0.01654052734375,
0.020111083984375,
-0.0276336669921875,
0.034454345703125,
0.055023193359375,
-0.03936767578125,
-0.0295562744140625,
0.0653076171875,
0.012237548828125,
-0.001163482666015625,
-0.0036258697509765625,
0.0484619140625,
-0.00556182861328125,
0.050628662109375,
0.055877685546875,
0.0430908203125,
0.01030731201171875,
0.0200958251953125,
-0.014923095703125,
0.0274200439453125,
-0.03704833984375,
0.0027446746826171875,
0.00519561767578125,
-0.0015325546264648438,
-0.004108428955078125,
0.048065185546875,
0.006450653076171875,
0.0322265625,
-0.0318603515625,
-0.0176239013671875,
0.019500732421875,
0.051788330078125,
0.042877197265625,
0.0350341796875,
0.0226287841796875,
-0.01297760009765625,
0.04058837890625,
0.005626678466796875,
0.00792694091796875,
-0.0244293212890625,
0.0150909423828125,
-0.0355224609375,
0.013275146484375,
0.034149169921875,
-0.021240234375,
-0.015869140625,
0.035003662109375,
0.00705718994140625,
-0.0355224609375,
0.0034885406494140625,
-0.01183319091796875,
0.006565093994140625,
0.0261077880859375,
0.00502777099609375,
0.0265655517578125,
0.00847625732421875,
0.01036834716796875,
0.039825439453125,
-0.019866943359375,
-0.00930023193359375,
-0.0006279945373535156,
-0.005352020263671875,
0.03656005859375,
0.035125732421875,
0.006168365478515625,
0.035491943359375,
0.0625,
0.02789306640625,
0.04815673828125,
0.0194854736328125,
0.049560546875,
0.02874755859375,
0.0316162109375,
-0.024322509765625,
0.040802001953125,
0.027801513671875,
0.032989501953125,
-0.042877197265625,
-0.023162841796875,
-0.0306854248046875,
0.004451751708984375,
-0.0213470458984375,
0.052154541015625,
-0.016632080078125,
-0.00605010986328125,
-0.0552978515625,
-0.0119781494140625,
0.016204833984375,
-0.01143646240234375,
0.0679931640625,
0.00995635986328125,
-0.0106658935546875,
-0.0300140380859375,
-0.0221710205078125,
0.0208282470703125,
0.0085906982421875,
-0.03564453125,
-0.0296478271484375,
-0.050506591796875,
-0.03045654296875,
-0.0091705322265625,
-0.012908935546875,
0.0040283203125,
0.018035888671875,
0.034454345703125,
-0.0175018310546875,
0.02789306640625,
-0.01372528076171875,
-0.02294921875,
0.01110076904296875,
-0.00757598876953125,
0.01470947265625,
0.0243682861328125,
0.07196044921875,
0.006763458251953125,
0.0033397674560546875,
-0.057159423828125,
-0.030181884765625,
0.03704833984375,
-0.01549530029296875,
0.0193634033203125,
0.016937255859375,
0.0284881591796875,
-0.0007843971252441406,
-0.041473388671875,
-0.06744384765625,
-0.0596923828125,
0.013092041015625,
-0.0218048095703125,
0.0009603500366210938,
-0.0168914794921875,
-0.04107666015625,
-0.0008902549743652344,
-0.05145263671875,
0.0192413330078125,
0.018646240234375,
-0.048187255859375,
0.0312042236328125,
-0.0243072509765625,
0.017364501953125,
0.0181427001953125,
0.00894927978515625,
-0.0087890625,
-0.0279083251953125,
-0.0133819580078125,
-0.001720428466796875,
-0.028228759765625,
-0.0218658447265625,
0.03924560546875,
0.04052734375,
-0.01251983642578125,
0.0226898193359375,
-0.0258636474609375,
0.011444091796875,
0.00893402099609375,
0.00457000732421875,
0.05352783203125,
-0.04010009765625,
0.045867919921875,
-0.029083251953125,
0.03387451171875,
-0.0214385986328125,
-0.01409912109375,
-0.0268096923828125,
0.0352783203125,
0.067138671875,
0.0509033203125,
-0.031829833984375,
-0.045684814453125,
0.0244598388671875,
0.06787109375,
0.07489013671875,
-0.01393890380859375,
-0.0169830322265625,
-0.023834228515625,
-0.0193939208984375,
0.01934814453125,
0.02490234375,
-0.03192138671875,
0.058685302734375,
0.023223876953125,
-0.028594970703125,
0.031005859375,
-0.0295257568359375,
0.010040283203125,
-0.015838623046875,
-0.01354217529296875,
0.04681396484375,
-0.015960693359375,
-0.0108489990234375,
0.033905029296875,
0.0010118484497070312,
0.0164031982421875,
0.0196075439453125,
0.032958984375,
0.004566192626953125,
-0.0236968994140625,
0.0170135498046875,
-0.0694580078125,
-0.0292816162109375,
-0.052215576171875,
-0.05059814453125,
-0.0178985595703125,
-0.01032257080078125,
-0.0107574462890625,
-0.044708251953125,
-0.00795745849609375,
0.01540374755859375,
-0.00649261474609375,
-0.02410888671875,
-0.07159423828125,
-0.048675537109375,
-0.03668212890625,
0.027618408203125,
0.0216217041015625,
-0.01236724853515625,
-0.0204925537109375,
-0.03955078125,
-0.04095458984375,
0.027313232421875,
0.05194091796875,
0.0855712890625,
0.0401611328125,
-0.021514892578125,
-0.0267181396484375,
0.04071044921875,
0.0273284912109375,
0.056396484375,
0.0254364013671875,
0.05352783203125,
0.00433349609375,
-0.01432037353515625,
0.0294647216796875,
0.042572021484375,
0.050506591796875,
-0.038177490234375,
0.05413818359375,
0.027587890625,
0.0097503662109375,
0.0296478271484375,
-0.06494140625,
0.053924560546875,
0.0086517333984375,
-0.037384033203125,
0.02392578125,
-0.0220184326171875,
0.0003542900085449219,
0.0237884521484375,
0.036529541015625,
0.0158843994140625,
0.007656097412109375,
0.0183258056640625,
0.0157928466796875,
0.022186279296875,
-0.0313720703125,
0.006587982177734375,
0.0288848876953125,
0.01522064208984375,
0.0714111328125,
0.00027441978454589844,
0.0085601806640625,
-0.0095672607421875,
-0.0204620361328125,
0.0010128021240234375,
-0.034271240234375,
0.005565643310546875,
0.037933349609375,
0.044342041015625,
-0.039886474609375,
0.04351806640625,
-0.0234222412109375,
0.038787841796875,
-0.0123138427734375,
0.0537109375,
-0.03546142578125,
0.042144775390625,
-0.0006451606750488281,
-0.0097503662109375,
-0.04656982421875,
0.00565338134765625,
-0.0282440185546875,
0.00031566619873046875,
0.02032470703125,
-0.03326416015625,
0.01380157470703125,
0.0209197998046875,
0.0226898193359375,
0.017791748046875,
-0.058197021484375,
0.02728271484375,
0.03631591796875,
0.0244293212890625,
-0.00274658203125,
-0.064208984375,
0.028533935546875,
0.01183319091796875,
-0.0006175041198730469,
-0.0167694091796875,
0.055450439453125,
0.06451416015625,
-0.01494598388671875,
0.02105712890625,
0.024749755859375,
0.0160369873046875,
0.00217437744140625,
0.033599853515625,
0.025115966796875,
0.04400634765625,
0.01141357421875,
0.02728271484375,
0.02899169921875,
0.004451751708984375,
-0.0275421142578125,
-0.0108489990234375,
-0.045623779296875,
-0.040863037109375,
-0.0046234130859375,
0.01436614990234375,
-0.0025768280029296875,
0.0186767578125,
0.050323486328125,
0.009063720703125,
0.040374755859375,
-0.004894256591796875,
-0.0292816162109375,
0.018035888671875,
0.04913330078125,
-0.01372528076171875,
-0.0032939910888671875,
0.051727294921875,
0.0232086181640625,
-0.00604248046875,
0.01490020751953125,
0.053497314453125,
0.0218658447265625,
-0.0015916824340820312,
-0.0171051025390625,
0.029449462890625,
0.0254058837890625,
-0.021087646484375,
0.058807373046875,
0.029022216796875,
0.038818359375,
0.0232696533203125,
0.032073974609375,
0.0292816162109375,
0.056396484375,
-0.0005245208740234375,
0.01091766357421875,
-0.057098388671875,
-0.01212310791015625,
0.05645751953125,
-0.0204925537109375,
-0.0386962890625,
-0.0029315948486328125,
0.03814697265625,
0.04949951171875,
-0.04425048828125,
0.00965118408203125,
-0.0186767578125,
-0.0188751220703125,
-0.052337646484375,
-0.046630859375,
-0.0672607421875,
-0.0283050537109375,
-0.01013946533203125,
0.08673095703125,
-0.011077880859375,
-0.0264739990234375,
0.06634521484375,
0.02252197265625,
-0.0238189697265625,
-0.0382080078125,
0.015777587890625,
0.004791259765625,
0.0066375732421875,
-0.0162506103515625,
-0.0194549560546875,
-0.00832366943359375,
-0.00499725341796875,
0.007160186767578125,
-0.0204925537109375,
-0.0084381103515625,
0.03704833984375,
-0.0088653564453125,
0.0170440673828125,
0.053985595703125,
-0.0298309326171875,
-0.00492095947265625,
-0.05645751953125,
0.0108642578125,
-0.0171356201171875,
-0.0282135009765625,
-0.00048613548278808594,
-0.030303955078125,
-0.0305938720703125,
0.058929443359375,
0.01085662841796875,
-0.011077880859375,
0.05059814453125,
-0.04461669921875,
-0.035675048828125,
-0.0208740234375,
-0.0440673828125,
0.03729248046875,
-0.034149169921875,
0.023223876953125,
0.0457763671875,
-0.0231781005859375,
0.040435791015625,
0.053985595703125,
0.0501708984375,
0.0208282470703125,
0.005451202392578125,
0.027008056640625,
0.0188140869140625,
-0.0221710205078125,
0.0440673828125,
0.005733489990234375,
-0.04913330078125,
-0.047637939453125,
0.04254150390625,
-0.01174163818359375,
0.0523681640625,
0.033477783203125,
0.057373046875,
0.037689208984375,
0.0126953125,
0.06146240234375,
0.02276611328125,
0.048370361328125,
-0.0223388671875,
-0.015960693359375,
-0.041107177734375,
-0.004638671875,
-0.0008678436279296875,
0.0137939453125,
0.01776123046875,
-0.003612518310546875,
0.0014638900756835938,
0.038543701171875,
0.0224151611328125,
0.0518798828125,
0.0308074951171875,
0.0001621246337890625,
0.029449462890625,
0.060516357421875,
0.026458740234375,
-0.0236968994140625,
-0.0047760009765625,
-0.003498077392578125,
0.005123138427734375,
0.0194091796875,
0.0244598388671875,
-0.007244110107421875,
0.035858154296875,
-0.0005035400390625,
0.025360107421875,
-0.003192901611328125,
0.00020754337310791016,
-0.031890869140625,
-0.0037593841552734375,
0.05548095703125,
0.0008721351623535156,
-0.0268096923828125,
0.04656982421875,
0.0516357421875,
-0.029449462890625,
-0.02349853515625,
-0.00567626953125,
0.0531005859375,
0.00982666015625,
-0.0046234130859375,
-0.0506591796875,
-0.0158538818359375,
-0.0155487060546875,
0.0172271728515625,
-0.04083251953125,
0.00637054443359375,
-0.0110015869140625,
-0.015350341796875,
0.0178680419921875,
0.038818359375,
-0.0107574462890625,
-0.04095458984375,
-0.005298614501953125,
0.03692626953125,
0.0033206939697265625,
0.00919342041015625,
0.0221405029296875,
-0.06256103515625,
0.034027099609375,
0.024322509765625,
0.00803375244140625,
0.039276123046875,
0.00574493408203125,
0.0310516357421875,
0.041168212890625,
-0.01465606689453125,
0.047088623046875,
0.058990478515625,
0.03564453125,
0.048309326171875,
-0.06475830078125,
-0.0279388427734375,
0.0841064453125,
0.032470703125,
0.051666259765625,
0.055633544921875,
0.029571533203125,
0.054351806640625,
-0.0245819091796875,
0.014495849609375,
-0.058074951171875,
-0.00954437255859375,
0.08514404296875,
0.05316162109375,
0.045318603515625,
-0.0462646484375,
-0.039947509765625,
0.02197265625,
0.0155792236328125,
-0.027252197265625,
0.041778564453125,
0.00823211669921875,
0.049285888671875,
0.06744384765625,
-0.049346923828125,
-0.0059356689453125,
0.0231170654296875,
0.0015716552734375,
-0.00780487060546875,
-0.0063934326171875,
0.0005679130554199219,
0.022918701171875,
0.063232421875,
0.0115966796875,
0.000560760498046875,
-0.023223876953125,
0.04119873046875,
-0.01168060302734375,
0.0190887451171875,
-0.0291595458984375,
-0.049591064453125,
0.02716064453125,
0.003177642822265625,
-0.018218994140625,
-0.014801025390625,
-0.020111083984375,
-0.031951904296875,
-0.0213775634765625,
0.0008602142333984375,
-0.044677734375,
-0.0182952880859375,
-0.0065460205078125,
-0.037017822265625,
0.035736083984375,
-0.058074951171875,
0.03033447265625,
0.059112548828125,
-0.025115966796875,
-0.01934814453125,
-0.051300048828125,
0.043701171875,
-0.01218414306640625,
0.01194000244140625,
-0.102783203125,
0.04144287109375,
0.045135498046875,
0.0374755859375,
-0.0077362060546875,
0.0092315673828125,
-0.029693603515625,
0.0572509765625,
0.0307159423828125,
0.052215576171875,
-0.041748046875,
0.0182342529296875,
0.005645751953125,
-0.018890380859375,
0.033966064453125,
0.0308074951171875,
0.046234130859375,
-0.01206207275390625,
-0.040435791015625,
0.018035888671875,
-0.037139892578125,
-0.0251007080078125,
-0.00887298583984375,
-0.0089569091796875,
0.0509033203125,
0.055755615234375,
-0.01453399658203125,
0.0100555419921875,
0.05096435546875,
0.003997802734375,
0.07672119140625,
0.03936767578125,
0.060028076171875,
0.0654296875,
0.049468994140625,
0.0789794921875,
-0.024444580078125,
-0.002605438232421875,
-0.001499176025390625,
-0.009429931640625,
-0.0283050537109375,
0.0266571044921875,
0.0016393661499023438,
0.09808349609375,
0.057464599609375,
-0.0016946792602539062,
-0.0005235671997070312,
0.07098388671875,
-0.0347900390625,
-0.061767578125,
-0.0188751220703125,
-0.0211944580078125,
-0.00034618377685546875,
-0.0009250640869140625,
-0.0545654296875,
-0.072265625,
0.0271148681640625,
0.007213592529296875,
0.0248260498046875,
-0.041961669921875,
-0.030029296875,
-0.002910614013671875,
0.04052734375,
0.031524658203125,
-0.032928466796875,
-0.0692138671875,
-0.062744140625,
0.043426513671875,
-0.01873779296875,
-0.0218505859375,
-0.0274200439453125,
0.0162506103515625,
0.0296173095703125,
0.005817413330078125,
-0.0278472900390625,
-0.03271484375,
-0.01480865478515625,
0.033843994140625,
-0.06549072265625,
-0.03448486328125,
-0.00803375244140625,
0.031646728515625,
0.004199981689453125,
0.011810302734375,
-0.037506103515625,
-0.034759521484375,
-0.058990478515625,
-0.054351806640625,
0.0121002197265625,
0.001918792724609375,
-0.03314208984375,
0.0294952392578125,
-0.029998779296875,
-0.0188751220703125,
-0.0263824462890625,
0.03759765625,
-0.03515625,
0.01666259765625,
-0.031158447265625,
-0.04132080078125,
-0.02752685546875,
0.025787353515625,
-0.03466796875,
-0.0289764404296875,
-0.00722503662109375,
0.01529693603515625,
-0.0104827880859375,
-0.005298614501953125,
0.0183563232421875,
-0.024932861328125,
-0.053314208984375,
0.032135009765625,
0.0195465087890625,
-0.0119171142578125,
0.0369873046875,
-0.01378631591796875,
-0.0484619140625,
0.0166168212890625,
-0.0498046875,
0.0002655982971191406,
0.0181732177734375,
-0.04608154296875,
0.0113525390625,
0.03887939453125,
0.0009431838989257812,
-0.0028705596923828125,
0.040069580078125,
0.0249176025390625,
0.0225067138671875,
-0.04400634765625,
-0.060516357421875,
0.0186004638671875,
-0.042694091796875,
0.0161895751953125,
-0.0018711090087890625,
-0.016357421875,
-0.043670654296875,
-0.01611328125,
-0.015960693359375,
-0.054351806640625,
0.00467681884765625,
0.03094482421875,
0.0093994140625,
-0.038299560546875,
-0.11029052734375,
-0.0241851806640625,
-0.01885986328125,
0.001064300537109375,
0.038055419921875,
-0.02655029296875,
0.01424407958984375,
0.0213775634765625,
-0.00341796875,
-0.036163330078125,
-0.0828857421875,
-0.0614013671875,
0.051971435546875,
0.038848876953125,
0.004077911376953125,
-0.04443359375,
-0.0709228515625,
0.0166168212890625,
0.01346588134765625,
-0.052764892578125,
0.0222625732421875,
-0.045074462890625,
-0.053802490234375,
-0.0203857421875,
-0.07574462890625,
-0.0849609375,
0.0289154052734375,
-0.049713134765625,
0.047332763671875,
-0.00970458984375,
-0.043670654296875,
0.0301513671875,
-0.0145111083984375,
0.0191192626953125,
0.005619049072265625,
0.034515380859375,
-0.0289306640625,
0.0131988525390625,
0.0080108642578125,
0.0521240234375,
0.033233642578125,
0.0312347412109375,
-0.0028667449951171875,
0.072509765625,
0.037506103515625,
0.00746917724609375,
0.034332275390625,
0.0224151611328125,
0.072998046875,
-0.0167388916015625,
-0.003932952880859375,
0.01258087158203125,
-0.02484130859375,
0.0274810791015625,
-0.0157623291015625,
-0.060394287109375,
-0.07977294921875,
0.045135498046875,
0.0533447265625,
0.032318115234375,
0.0051727294921875,
0.01320648193359375,
-0.03521728515625,
0.058135986328125,
0.031402587890625,
-0.0229034423828125,
0.007358551025390625,
0.028167724609375,
0.0031337738037109375,
0.0189971923828125,
-0.04205322265625,
0.05926513671875,
0.05621337890625,
-0.01031494140625,
-0.0806884765625,
-0.03424072265625,
-0.01629638671875,
0.0196075439453125,
0.025970458984375,
0.003932952880859375,
0.0066680908203125,
-0.028167724609375,
0.0018777847290039062,
-0.0234222412109375,
0.0128173828125,
0.01190948486328125,
-0.06915283203125,
0.0190887451171875,
0.0226898193359375,
0.061920166015625,
-0.0208892822265625,
-0.043182373046875,
0.0206756591796875,
-0.021148681640625,
0.00597381591796875,
0.0092315673828125,
0.01119232177734375,
-0.0243377685546875,
-0.0287933349609375,
-0.02874755859375,
0.0325927734375,
0.016693115234375,
-0.06170654296875,
-0.002277374267578125,
-0.022857666015625,
0.025634765625,
0.05859375,
0.0290374755859375,
0.0360107421875,
0.0058746337890625,
-0.006824493408203125,
0.0019311904907226562,
0.0338134765625,
0.0212249755859375,
0.01544189453125,
0.025360107421875,
0.02227783203125,
0.004039764404296875,
-0.054656982421875,
0.0458984375,
0.0135498046875,
-0.0256195068359375,
-0.01129913330078125,
0.031585693359375,
0.048065185546875,
0.01122283935546875,
0.0439453125,
-0.035552978515625,
-0.0222320556640625,
0.028564453125,
0.050018310546875,
0.0357666015625,
0.00749969482421875,
0.050262451171875,
-0.0004436969757080078,
-0.0235748291015625,
-0.0408935546875,
-0.04437255859375,
-0.00252532958984375,
0.059417724609375,
-0.037261962890625,
0.0323486328125,
-0.01042938232421875,
0.034149169921875,
0.05743408203125,
0.011566162109375,
0.03082275390625,
0.039398193359375,
0.02630615234375,
0.0285186767578125,
-0.0116424560546875,
0.026611328125,
-0.052398681640625,
-0.00872039794921875,
-0.026824951171875,
-0.03460693359375,
-0.0208892822265625,
-0.013641357421875,
0.0012464523315429688,
-0.041351318359375,
0.04541015625,
0.0640869140625,
-0.0352783203125,
0.039764404296875,
0.010955810546875,
0.039520263671875,
0.06536865234375,
-0.0033054351806640625,
0.0077056884765625,
0.04034423828125,
-0.0203857421875,
0.0166015625,
0.04156494140625,
0.0297698974609375,
0.037506103515625,
-0.027496337890625,
-0.034271240234375,
0.0261077880859375,
-0.039337158203125,
0.052398681640625,
0.042388916015625,
-0.0146636962890625,
0.0362548828125,
-0.0150299072265625,
-0.020965576171875,
0.0084075927734375,
-0.04974365234375,
0.00804901123046875,
-0.043975830078125,
-0.0711669921875,
-0.044647216796875,
-0.017669677734375,
0.014312744140625,
0.004955291748046875,
-0.0150146484375,
-0.003650665283203125,
0.0093994140625,
-0.012664794921875,
0.026763916015625,
-0.019439697265625,
-0.0020008087158203125,
0.0025043487548828125,
-0.03350830078125,
-0.056549072265625,
-0.07470703125,
-0.0565185546875,
-0.00982666015625,
-0.00800323486328125,
0.0145721435546875,
-0.064697265625,
0.032135009765625,
-0.0309295654296875,
-0.044677734375,
0.04901123046875,
0.04046630859375,
0.055511474609375,
-0.028411865234375,
-0.0008645057678222656,
0.0350341796875,
-0.0280914306640625,
-0.02838134765625,
-0.0285186767578125,
-0.0350341796875,
-0.06146240234375,
0.0401611328125,
-0.0482177734375,
0.018646240234375,
0.0017490386962890625,
-0.05535888671875,
-0.0516357421875,
-0.046539306640625,
0.0227813720703125,
-0.06732177734375,
-0.032928466796875,
0.0174407958984375,
0.04595947265625,
0.066650390625,
-0.006183624267578125,
-0.0002646446228027344,
-0.034515380859375,
0.032379150390625,
0.00975799560546875,
-0.04132080078125,
-0.061279296875,
0.007595062255859375,
-0.0081024169921875,
-0.016387939453125,
0.02020263671875,
0.0589599609375,
0.04833984375,
-0.06378173828125,
-0.04608154296875,
-0.0177001953125,
-0.0002491474151611328,
-0.016937255859375,
-0.05029296875,
-0.016571044921875,
0.0174102783203125,
0.036346435546875,
0.05908203125,
0.01131439208984375,
-0.00506591796875,
0.036346435546875,
0.01369476318359375,
0.05859375,
0.045806884765625,
-0.051788330078125,
0.021697998046875,
0.01495361328125,
0.033294677734375,
-0.03167724609375,
-0.083251953125,
-0.0311431884765625,
-0.0242767333984375,
-0.0023059844970703125,
-0.0019969940185546875,
-0.0457763671875,
-0.0269775390625,
0.0360107421875,
0.035369873046875,
0.033233642578125,
-0.042449951171875,
-0.031036376953125,
-0.052337646484375,
-0.0117034912109375,
-0.0240936279296875,
-0.0159912109375,
-0.048614501953125,
0.0170135498046875,
0.0091705322265625,
0.0290374755859375,
0.032135009765625,
-0.0121612548828125,
0.049346923828125,
-0.0287322998046875,
-0.01751708984375,
0.035675048828125,
-0.015869140625,
-0.0111236572265625,
0.023956298828125,
-0.01197052001953125,
0.01263427734375,
0.0208587646484375,
0.045654296875,
0.0377197265625,
0.044921875,
0.003620147705078125,
-0.0106048583984375,
0.06756591796875,
-0.0204315185546875,
0.0430908203125,
0.032135009765625,
-0.035003662109375,
0.047271728515625,
-0.005870819091796875,
-0.0179290771484375,
-0.02520751953125,
-0.01153564453125,
0.037322998046875,
0.00981903076171875,
-0.046112060546875,
-0.06671142578125,
0.00396728515625,
0.0732421875,
-0.032073974609375,
-0.065185546875,
-0.03570556640625,
-0.01152801513671875,
0.0447998046875,
0.03857421875,
-0.01678466796875,
-0.024169921875,
-0.0367431640625,
0.01422882080078125,
-0.021636962890625,
0.0245361328125,
0.05780029296875,
-0.0159912109375,
0.010498046875,
0.038726806640625,
-0.0074462890625,
0.045379638671875,
0.007526397705078125,
-0.00945281982421875,
0.031585693359375,
0.0406494140625,
-0.0562744140625,
0.01178741455078125,
-0.0017261505126953125,
0.06414794921875,
-0.016845703125,
0.017913818359375,
-0.04345703125,
0.031280517578125,
0.0261688232421875,
-0.02008056640625,
0.06048583984375,
0.018402099609375,
-0.00910186767578125,
0.0116729736328125,
-0.021514892578125,
0.0253448486328125,
-0.043243408203125,
0.0274200439453125,
0.00727081298828125,
-0.0401611328125,
-0.05291748046875,
-0.0169830322265625,
0.004924774169921875,
0.041168212890625,
-0.033416748046875,
-0.039703369140625,
-0.0205078125,
-0.037261962890625,
-0.01092529296875,
-0.084228515625,
-0.046417236328125,
-0.040557861328125,
0.0102081298828125,
0.01190185546875,
0.06781005859375,
-0.031951904296875,
0.0047454833984375,
-0.023834228515625,
-0.0007658004760742188,
0.043304443359375,
0.037261962890625,
-0.0180511474609375,
0.0016164779663085938,
0.03125,
-0.007114410400390625,
0.046112060546875,
0.029388427734375,
-4.7087669372558594e-05,
0.0438232421875,
0.07025146484375,
-0.041595458984375,
-0.03485107421875,
0.031829833984375,
0.023468017578125,
0.0299224853515625,
-0.055877685546875,
0.01023101806640625,
0.0222625732421875,
0.06890869140625,
0.047027587890625,
-0.0264892578125,
-0.04986572265625,
0.0684814453125,
0.08319091796875,
0.0083160400390625,
-0.0024700164794921875,
-0.0242156982421875,
-0.0022487640380859375,
0.01091766357421875,
0.0235748291015625,
0.00814056396484375,
0.038330078125,
0.045562744140625,
0.058258056640625,
0.033599853515625,
-0.02716064453125,
0.0282440185546875,
-0.0283355712890625,
0.0413818359375,
-0.055328369140625,
-0.042755126953125,
-0.0166015625,
-0.035247802734375,
-0.0288543701171875,
0.00606536865234375,
-0.00518035888671875,
-0.033538818359375,
0.070068359375,
-0.0036754608154296875,
0.041534423828125,
-0.05230712890625,
-0.04656982421875,
0.038238525390625,
-0.0284271240234375,
0.0276641845703125,
-0.061920166015625,
0.0208892822265625,
0.0191192626953125,
0.01129913330078125,
0.002025604248046875,
-0.0031375885009765625,
-0.00507354736328125,
-0.031219482421875,
-0.007442474365234375,
0.01776123046875,
-0.052215576171875,
-0.0259857177734375,
-0.01654052734375,
0.0006909370422363281,
-0.025482177734375,
-0.032989501953125,
-0.0270233154296875,
-0.048126220703125,
-0.03594970703125,
0.0303955078125,
0.020263671875,
-0.039306640625,
-0.0097198486328125,
0.049072265625,
0.009796142578125,
-0.022613525390625,
-0.0303955078125,
-0.01293182373046875,
0.0172576904296875,
-0.03387451171875,
-0.0386962890625,
0.0196685791015625,
0.0262603759765625,
0.055633544921875,
-0.041229248046875,
-0.039215087890625,
-0.03265380859375,
0.033294677734375,
0.0660400390625,
-0.0303955078125,
0.007724761962890625,
0.03594970703125,
0.0243072509765625,
-0.005344390869140625,
0.06036376953125,
-0.0049896240234375,
-0.032928466796875,
-0.002262115478515625,
-0.02838134765625,
0.0511474609375,
0.035369873046875,
0.0218963623046875,
0.0269775390625,
-0.0341796875,
0.01020050048828125,
-0.0276336669921875,
-0.0186920166015625,
-0.046844482421875,
0.042572021484375,
0.0006017684936523438,
0.0272064208984375,
-0.026458740234375,
0.02874755859375,
0.0394287109375,
-0.0013875961303710938,
-0.003810882568359375,
0.020416259765625,
0.032135009765625,
0.0285491943359375,
0.003509521484375,
0.00655364990234375,
0.009063720703125,
0.01274871826171875,
0.0684814453125,
0.037017822265625,
-0.04058837890625,
0.050811767578125,
-0.0253753662109375,
0.006381988525390625,
0.0195770263671875,
-0.0268707275390625,
-0.0274810791015625,
-0.0587158203125,
-0.0235748291015625,
0.0296783447265625,
-0.0271148681640625,
-0.005481719970703125,
-0.01210784912109375,
-0.05450439453125,
-0.0212860107421875,
-0.018280029296875,
0.00429534912109375,
-0.01216888427734375,
0.06463623046875,
0.00021517276763916016,
-0.0225372314453125,
-0.0218658447265625,
-0.033355712890625,
0.0389404296875,
-0.0184783935546875,
0.0011816024780273438,
0.016632080078125,
-0.020416259765625,
0.0273590087890625,
0.0162506103515625,
-0.0201416015625,
-0.0103912353515625,
0.016204833984375,
0.03424072265625,
-0.01129150390625,
-0.0657958984375,
-0.032379150390625,
-0.02264404296875,
-0.02203369140625,
-0.033721923828125,
-0.04425048828125,
-0.045806884765625,
-0.0284271240234375,
-0.0144805908203125,
0.0283050537109375,
0.01216888427734375,
0.02337646484375,
-0.01396942138671875,
0.0577392578125,
-0.033233642578125,
-0.0106353759765625,
-0.0183868408203125,
-0.0179443359375,
0.003971099853515625,
0.0205535888671875,
-0.01177215576171875,
0.0465087890625,
-0.05535888671875,
0.021697998046875,
0.0675048828125,
0.0021152496337890625,
-0.0523681640625,
0.019134521484375,
0.048431396484375,
0.056365966796875,
-0.021270751953125,
-0.05364990234375,
-0.004581451416015625,
-0.00472259521484375,
0.0478515625,
-0.03076171875,
-0.005062103271484375,
-0.0587158203125,
0.02655029296875,
-0.051177978515625,
-0.033111572265625,
0.055023193359375,
0.038787841796875,
-0.0303955078125,
0.002422332763671875,
-0.05279541015625,
0.004245758056640625,
0.01226806640625,
-0.002063751220703125,
-0.0237274169921875,
-0.0191192626953125,
-0.0218353271484375,
-0.0164337158203125,
0.045074462890625,
0.002178192138671875,
0.0044097900390625,
-0.01396942138671875,
0.05340576171875,
0.050048828125,
-0.004405975341796875,
0.0225830078125,
0.038665771484375,
0.0080413818359375,
0.015655517578125,
0.0254364013671875,
-0.0171051025390625,
-0.04461669921875,
-0.007335662841796875,
0.02838134765625,
-0.006206512451171875,
0.0399169921875,
0.0036296844482421875,
-0.0350341796875,
-0.0221405029296875,
0.044921875,
-0.003498077392578125,
0.042327880859375,
0.049072265625,
0.0723876953125,
0.06475830078125,
-0.01267242431640625,
0.0305633544921875,
-0.0075836181640625,
-0.0496826171875,
-0.06915283203125,
-0.0731201171875,
-0.0173492431640625,
-0.01141357421875,
-0.07757568359375,
-0.0292510986328125,
-0.04913330078125,
-0.0284881591796875,
-0.0167388916015625,
-0.0244293212890625,
-0.03668212890625,
0.051605224609375,
-0.03961181640625,
0.052642822265625,
0.061676025390625,
0.0533447265625,
0.05975341796875,
-0.0178985595703125,
0.033355712890625,
0.06427001953125,
-0.006610870361328125,
0.001861572265625,
-0.004474639892578125,
0.03131103515625,
0.048309326171875,
-0.045196533203125,
-0.00860595703125,
-0.0158538818359375,
0.017425537109375,
0.0223846435546875,
0.045135498046875,
-0.0024318695068359375,
-0.045257568359375,
-0.055145263671875,
-0.009735107421875,
0.046173095703125,
0.0284576416015625,
0.0118560791015625,
0.0362548828125,
-0.0246734619140625,
0.017974853515625,
-0.0176849365234375,
0.006565093994140625,
-0.0272064208984375,
-0.0234832763671875,
0.03192138671875,
-0.024810791015625,
-0.0289459228515625,
-0.030517578125,
0.024078369140625,
0.00777435302734375,
0.0184326171875,
-0.049468994140625,
0.010040283203125,
0.027313232421875,
0.0130615234375,
-0.0131683349609375,
0.0273590087890625,
0.01800537109375,
-0.0016508102416992188,
0.0232086181640625,
-0.0115509033203125,
0.06280517578125,
0.07525634765625,
0.06878662109375,
-0.010345458984375,
-0.0226593017578125,
0.051849365234375,
0.07293701171875,
0.048187255859375,
-0.0919189453125,
0.01708984375,
-0.0171356201171875,
0.067626953125,
-0.035552978515625,
-0.032806396484375,
-0.0911865234375,
-0.023956298828125,
0.04168701171875,
-0.0743408203125,
-0.054443359375,
-0.023468017578125,
-0.07415771484375,
0.0015363693237304688,
-0.03302001953125,
0.00960540771484375,
0.01201629638671875,
-0.044403076171875,
-0.01959228515625,
-0.040313720703125,
0.0611572265625,
-0.030120849609375,
0.0135345458984375,
-0.016204833984375,
-0.0208740234375,
-0.01107025146484375,
0.0008730888366699219,
-0.040557861328125,
-0.0347900390625,
0.006748199462890625,
-0.0232086181640625,
-0.0008907318115234375,
0.033477783203125,
-0.06744384765625,
0.00501251220703125,
-0.01428985595703125,
0.04705810546875,
-0.01297760009765625,
-0.013763427734375,
-0.0026760101318359375,
0.054107666015625,
0.0005612373352050781,
-0.0296478271484375,
-0.052490234375,
-0.0272064208984375,
0.03997802734375,
-0.00811004638671875,
0.0673828125,
0.04217529296875,
0.0089874267578125,
-0.040130615234375,
-0.01470184326171875,
0.0221099853515625,
0.0206146240234375,
-0.05316162109375,
-0.0262908935546875,
-0.06268310546875,
-0.01079559326171875,
-0.0013885498046875,
-0.0017242431640625,
-0.05328369140625,
0.021209716796875,
-0.062469482421875,
0.0283355712890625,
0.01447296142578125,
0.03924560546875,
-0.037445068359375,
0.04345703125,
-0.019378662109375,
0.051055908203125,
0.06573486328125,
0.04595947265625,
0.0085906982421875,
-0.004486083984375,
0.03814697265625,
0.045013427734375,
-0.0450439453125,
-0.0050201416015625,
-0.032867431640625,
0.057037353515625,
-0.01328277587890625,
-0.042755126953125,
0.04150390625,
-0.05596923828125,
0.04132080078125,
0.0250244140625,
0.0176849365234375,
-0.0308990478515625,
-0.0579833984375,
0.0102386474609375,
-0.0333251953125,
0.05364990234375,
-0.0305938720703125,
0.0067291259765625,
-0.0014638900756835938,
-0.02374267578125,
-0.0117645263671875,
-0.011322021484375,
0.035247802734375,
-0.039947509765625,
-0.0706787109375,
0.0303955078125,
-0.0047149658203125,
-0.006496429443359375,
-0.01470947265625,
-0.0276031494140625,
-0.039215087890625,
0.044921875,
0.061065673828125,
-0.049346923828125,
0.036407470703125,
-0.039276123046875,
-0.0091552734375,
0.053192138671875,
-0.032867431640625,
0.0206146240234375,
0.0272674560546875,
-0.010589599609375,
0.035430908203125,
0.01250457763671875,
0.015838623046875,
0.029541015625,
0.06719970703125,
0.047576904296875,
0.041473388671875,
-0.02008056640625,
-0.049896240234375,
0.017730712890625,
0.0016565322875976562,
0.0335693359375,
0.0193328857421875,
0.0214385986328125,
-0.007633209228515625,
-0.03558349609375,
-0.062469482421875,
-0.06427001953125,
0.00914764404296875,
-0.0142669677734375,
0.0120849609375,
-0.04266357421875,
-0.03302001953125,
0.024749755859375,
-0.01091766357421875,
0.028289794921875,
-0.0149078369140625,
-0.017852783203125,
-0.0089874267578125,
-0.040771484375,
-0.00655364990234375,
0.0180511474609375,
-0.007389068603515625,
0.03424072265625,
-0.0256500244140625,
-0.056610107421875,
-0.0027332305908203125,
0.00830841064453125,
0.005306243896484375,
0.0017423629760742188,
0.0137786865234375,
-0.0151519775390625,
0.059173583984375,
-0.019989013671875,
0.0124969482421875,
0.0288848876953125,
-0.015716552734375,
0.029754638671875,
0.00312042236328125,
-0.007472991943359375,
-0.072265625,
0.0153045654296875,
0.0609130859375,
0.040863037109375,
-0.01910400390625,
-0.01036834716796875,
0.03729248046875,
0.056549072265625,
-0.017364501953125,
0.0194091796875,
-0.02423095703125,
0.08575439453125,
0.03955078125,
-0.06640625,
0.027130126953125,
-0.031951904296875,
0.03485107421875,
0.031829833984375,
0.022247314453125,
-0.0626220703125,
-0.03497314453125,
-0.007366180419921875,
-0.0208282470703125,
0.04815673828125,
-0.05914306640625,
-0.03179931640625,
-0.0650634765625,
0.03228759765625,
-0.022308349609375,
0.018585205078125,
0.0209503173828125,
0.03118896484375,
-0.00811004638671875,
-0.0300140380859375,
0.028961181640625,
-0.04144287109375,
0.0224609375,
-0.004093170166015625,
-0.0679931640625,
-0.037384033203125,
-0.046417236328125,
0.033966064453125,
-0.045562744140625,
0.04254150390625,
-0.027557373046875,
-0.047088623046875,
-0.046234130859375,
-0.035858154296875,
0.0107574462890625,
-0.0008845329284667969,
-0.0284423828125,
-0.0249481201171875,
0.04498291015625,
-0.0157470703125,
-0.01551055908203125,
0.015960693359375,
0.0245819091796875,
0.016693115234375,
-0.0008792877197265625,
0.026214599609375,
0.0159454345703125,
-0.022735595703125,
-0.0011386871337890625,
0.01363372802734375,
-0.0182037353515625,
-0.01146697998046875,
-0.044464111328125,
-0.074951171875,
-0.006465911865234375,
-0.036712646484375,
0.02655029296875,
0.0241241455078125,
0.04205322265625,
0.04412841796875,
-0.032379150390625,
-0.0307159423828125,
0.0628662109375,
0.0151519775390625,
0.047332763671875,
-0.0182952880859375,
0.0650634765625,
0.0280914306640625,
0.059600830078125,
0.059478759765625,
-0.007678985595703125,
0.06549072265625,
-0.05670166015625,
-0.036895751953125,
-0.0269012451171875,
0.040985107421875,
0.0028591156005859375,
-0.054046630859375,
0.0079803466796875,
-0.053375244140625,
0.0164642333984375,
-0.057647705078125,
0.03717041015625,
0.035125732421875,
-0.0258331298828125,
0.004634857177734375,
-0.014923095703125,
0.029876708984375,
5.14984130859375e-05,
-0.00917816162109375,
-0.014251708984375,
-0.03302001953125,
-0.0361328125,
0.02154541015625,
-0.026397705078125,
-0.05072021484375,
0.00946807861328125,
0.03302001953125,
-0.0189971923828125,
0.027862548828125,
-0.007205963134765625,
0.06671142578125,
0.07244873046875,
0.05731201171875,
0.00586700439453125,
0.075439453125,
-0.0185546875,
0.03143310546875,
0.04351806640625,
0.057525634765625,
0.02691650390625,
0.00817108154296875,
-0.053558349609375,
2.7298927307128906e-05,
-0.0615234375,
-0.04791259765625,
0.03564453125,
0.02142333984375,
-0.0309295654296875,
0.036041259765625,
0.00323486328125,
-0.00039124488830566406,
0.015289306640625,
-0.02752685546875,
-0.0191497802734375,
-0.0171966552734375,
0.0023593902587890625,
-0.0281524658203125,
0.06268310546875,
-0.0248565673828125,
-0.01557159423828125,
0.03192138671875,
0.01568603515625,
-0.002864837646484375,
-0.02093505859375,
-0.032379150390625,
0.0167999267578125,
-0.023223876953125,
-0.021453857421875,
0.0132293701171875,
-0.006885528564453125,
-0.0284423828125,
0.021392822265625,
0.05780029296875,
0.0033664703369140625,
-0.0192108154296875,
0.049468994140625,
-0.0160369873046875,
0.081787109375,
0.062744140625,
0.006084442138671875,
0.0283203125,
0.0439453125,
0.032501220703125,
0.01922607421875,
-0.042877197265625,
-0.028472900390625,
0.051788330078125,
0.034423828125,
0.040985107421875,
0.00879669189453125,
-0.01512908935546875,
0.0298004150390625,
0.056549072265625,
-0.0272369384765625,
-0.0428466796875,
-0.0264129638671875,
0.050567626953125,
0.05413818359375,
0.0350341796875,
0.06329345703125,
0.02093505859375,
0.007671356201171875,
-0.044891357421875,
-0.016204833984375,
0.005218505859375,
0.051300048828125,
0.053070068359375,
0.037567138671875,
0.04241943359375,
0.0264892578125,
0.039337158203125,
-0.0225067138671875,
0.05218505859375,
0.0298309326171875,
0.03271484375,
-0.01494598388671875,
-0.040130615234375,
-0.0025234222412109375,
0.023681640625,
-0.0015821456909179688,
-0.0423583984375,
0.038970947265625,
0.03851318359375,
0.04345703125,
-0.05523681640625,
-0.0207366943359375,
0.018218994140625,
0.00039768218994140625,
0.033843994140625,
0.0301055908203125,
-0.0294189453125,
-0.0037403106689453125,
-0.007297515869140625,
0.051055908203125,
0.018829345703125,
0.049896240234375,
0.0347900390625,
-0.045989990234375,
0.0233917236328125,
0.0065460205078125,
0.054290771484375,
-0.00438690185546875,
0.046356201171875,
0.006717681884765625,
0.035888671875,
0.01282501220703125,
-0.04473876953125,
-0.020294189453125,
0.03387451171875,
0.0477294921875,
0.04632568359375,
0.0295867919921875,
0.060394287109375,
-0.012786865234375,
0.00033020973205566406,
0.018218994140625,
0.0005869865417480469,
0.0065155029296875,
-0.04827880859375,
-0.030059814453125,
0.00537872314453125,
-0.04803466796875,
0.0394287109375,
0.0102996826171875,
0.0145416259765625,
-0.04296875,
-0.0152587890625,
-0.0199127197265625,
0.039398193359375,
-0.039825439453125,
-0.04541015625,
-0.04510498046875,
0.01187896728515625,
0.01806640625,
-0.01568603515625,
0.005725860595703125,
-0.05682373046875,
0.005771636962890625,
0.00498199462890625,
-0.04034423828125,
-0.0223846435546875,
-0.055816650390625,
-0.044281005859375,
-0.0244598388671875,
0.0249786376953125,
-0.07147216796875,
0.0268402099609375,
0.0022296905517578125,
0.0037841796875,
-0.0147857666015625,
-0.07373046875,
0.01424407958984375,
0.0538330078125,
0.01457977294921875,
0.03436279296875,
0.034454345703125,
-0.00638580322265625,
-0.01517486572265625,
-0.020355224609375,
0.03131103515625,
0.036285400390625,
0.00959014892578125,
-0.0063323974609375,
-0.003467559814453125,
-0.046966552734375,
0.021331787109375,
-0.005523681640625,
-0.030242919921875,
0.0005369186401367188,
0.0352783203125,
-0.00774383544921875,
0.032989501953125,
-0.039947509765625,
0.02935791015625,
-0.035186767578125,
0.040679931640625,
-0.027557373046875,
-0.006755828857421875,
-0.03961181640625,
-0.047149658203125,
-0.062103271484375,
0.032196044921875,
0.01325225830078125,
-0.042205810546875,
-0.005767822265625,
0.058868408203125,
-0.033538818359375,
-0.0292510986328125,
-0.0266265869140625,
0.0285491943359375,
0.049530029296875,
-0.044830322265625,
-0.05975341796875,
0.0308837890625,
-0.020477294921875,
-0.049072265625,
0.003902435302734375,
-0.0007915496826171875,
0.037109375,
-0.04229736328125,
-0.0596923828125,
-0.00894927978515625,
-0.002777099609375,
0.05560302734375,
0.047088623046875,
-0.060089111328125,
-0.0171661376953125,
-0.043853759765625,
-0.026031494140625,
-0.03387451171875,
0.0306396484375,
-0.0242156982421875,
0.00698089599609375,
-0.013275146484375,
0.055633544921875,
0.035400390625,
0.041748046875,
-0.02386474609375,
-0.0181427001953125,
0.03656005859375,
-0.01788330078125,
0.0025615692138671875,
0.01393890380859375,
0.035491943359375,
0.022796630859375,
-0.0284576416015625,
-0.03265380859375,
-0.00982666015625,
0.07159423828125,
0.037078857421875,
-0.0240936279296875,
0.06268310546875,
0.0249786376953125,
0.00145721435546875,
-0.03228759765625,
0.004688262939453125,
0.02801513671875,
-0.004924774169921875,
0.037322998046875,
-0.05181884765625,
-0.0048980712890625,
-0.0260772705078125,
0.041839599609375,
-0.0005431175231933594,
-0.02886962890625,
0.044891357421875,
0.0215911865234375,
0.048370361328125,
0.01580810546875,
-0.0036716461181640625,
0.0662841796875,
-0.003833770751953125,
0.039215087890625,
-0.0322265625,
-0.01418304443359375,
-0.01274871826171875,
-0.005176544189453125,
0.01104736328125,
-0.0499267578125,
-0.045318603515625,
0.042205810546875,
-0.033477783203125,
0.03363037109375,
0.0013055801391601562,
-0.0026836395263671875,
-0.00925445556640625,
-0.022308349609375,
0.037078857421875,
-0.0115814208984375,
0.0281524658203125,
-0.01210784912109375,
0.0308837890625,
0.04107666015625,
0.018646240234375,
-0.0323486328125,
-0.01532745361328125,
-0.061676025390625,
-0.00812530517578125,
-0.059814453125,
0.016510009765625,
-0.06658935546875,
-0.04559326171875,
-0.00958251953125,
0.0239410400390625,
0.019744873046875,
-0.043487548828125,
0.03656005859375,
0.03424072265625,
0.043243408203125,
-0.0227203369140625,
0.00682830810546875,
0.02099609375,
0.037139892578125,
0.03155517578125,
0.01284027099609375,
-0.0206146240234375,
0.01042938232421875,
-0.045867919921875,
0.028167724609375,
0.02349853515625,
-0.0006775856018066406,
-0.037841796875,
-0.0035114288330078125,
0.0587158203125,
-0.046844482421875,
0.007205963134765625,
-0.04193115234375,
0.029510498046875,
0.0127410888671875,
-0.037994384765625,
0.01200103759765625,
0.042266845703125,
0.049102783203125,
-0.019195556640625,
-0.048309326171875,
0.0008835792541503906,
0.0291290283203125,
0.010589599609375,
-0.01776123046875,
-0.035064697265625,
0.0236663818359375,
-0.00783538818359375,
-0.06689453125,
0.0036182403564453125,
0.0430908203125,
-0.0178070068359375,
-0.039825439453125,
-0.00832366943359375,
-0.01507568359375,
0.03704833984375,
0.00516510009765625,
-0.036651611328125,
0.004611968994140625,
0.01959228515625,
-0.0380859375,
0.06268310546875,
0.022857666015625,
0.0166778564453125,
-0.006275177001953125,
0.01617431640625,
0.0516357421875,
0.0301666259765625,
0.01236724853515625,
-0.01654052734375,
0.031494140625,
-0.0416259765625,
0.03155517578125,
0.01446533203125,
0.00042366981506347656,
0.00618743896484375,
0.005573272705078125,
0.01282501220703125,
0.023529052734375,
0.002857208251953125,
0.0286865234375,
0.034454345703125,
0.006076812744140625,
0.00762939453125,
0.005138397216796875,
0.038665771484375,
0.05322265625,
0.03265380859375,
0.0347900390625,
-0.0256805419921875,
0.0283966064453125,
0.004718780517578125,
-0.0252685546875,
0.049713134765625,
0.006866455078125,
-0.02960205078125,
0.059814453125,
0.010467529296875,
-0.0222930908203125,
-0.011383056640625,
0.016845703125,
0.0416259765625,
-0.0194854736328125,
-0.041259765625,
-0.04449462890625,
0.0258331298828125,
0.0085601806640625,
0.0195159912109375,
0.0195465087890625,
0.04547119140625,
-0.0222320556640625,
0.0467529296875,
-0.01148223876953125,
0.04736328125,
-0.044891357421875,
-0.03277587890625,
-0.039764404296875,
-0.03472900390625,
0.04022216796875,
0.0200958251953125,
0.045318603515625,
0.046112060546875,
0.007335662841796875,
0.038330078125,
-0.01175689697265625,
0.01512908935546875,
-0.01519012451171875,
-0.0165557861328125,
0.04449462890625,
-0.0098876953125,
0.005359649658203125,
0.0180816650390625,
-0.0164947509765625,
0.0261688232421875,
0.024505615234375,
-0.033203125,
0.0114898681640625,
-0.043060302734375,
0.0078887939453125,
0.032196044921875,
-0.04888916015625,
0.005245208740234375,
-0.015594482421875,
-0.031951904296875,
-0.006511688232421875,
0.01183319091796875,
0.014495849609375,
-0.00885772705078125,
-0.00908660888671875,
0.0186309814453125,
0.00531768798828125,
0.005786895751953125,
0.03277587890625,
0.004268646240234375,
0.00690460205078125,
0.032073974609375,
0.0418701171875,
-0.047576904296875,
0.018035888671875,
-0.0008783340454101562,
-0.0433349609375,
-0.01476287841796875,
-0.0269775390625,
-0.0379638671875,
0.045166015625,
-0.025787353515625,
-0.00799560546875,
-0.044677734375,
0.0028667449951171875,
0.03375244140625,
0.00916290283203125,
-0.033843994140625,
-0.0292816162109375,
-0.00970458984375,
-0.03533935546875,
-0.0001462697982788086,
-0.03973388671875,
-0.016876220703125,
-0.017913818359375,
-0.00453948974609375,
0.0269012451171875,
-0.04425048828125,
-0.006244659423828125,
0.0255126953125,
-0.016937255859375,
-0.0024013519287109375,
-0.0281829833984375,
-0.03656005859375,
0.0086212158203125,
0.02227783203125,
-0.0259246826171875,
-0.04913330078125,
-0.046966552734375,
-0.043212890625,
0.047637939453125,
0.0003440380096435547,
0.01552581787109375,
-0.01409912109375,
-0.01654052734375,
0.045623779296875,
0.044189453125,
0.043792724609375,
-0.004924774169921875,
-0.041015625,
-0.04742431640625,
-0.035247802734375,
0.01506805419921875,
-0.00756072998046875,
0.031585693359375,
0.04180908203125,
-0.01540374755859375,
0.03887939453125,
0.024444580078125,
-0.0223846435546875,
-0.024200439453125,
-0.037933349609375,
0.016998291015625,
0.04315185546875,
-0.00945281982421875,
-0.01641845703125,
-0.03253173828125,
0.0104827880859375,
-0.029510498046875,
-0.036834716796875,
-0.0086517333984375,
-0.0293426513671875,
-0.0167999267578125,
-0.0272064208984375,
-0.0058441162109375,
-0.0079193115234375,
-0.004161834716796875,
-0.047515869140625,
0.0032634735107421875,
0.022216796875,
-0.033599853515625,
0.0391845703125,
0.045440673828125,
-0.01483154296875,
0.031829833984375,
0.03857421875,
0.04144287109375,
-0.0310821533203125,
-0.0250244140625,
-0.043182373046875,
-0.01549530029296875,
-0.032562255859375,
-0.035125732421875,
0.0026645660400390625,
0.0014276504516601562,
0.01983642578125,
0.004520416259765625,
0.0194244384765625,
0.0335693359375,
-0.0192108154296875,
0.00962066650390625,
-0.030853271484375,
-0.0278167724609375,
0.024566650390625,
-0.00127410888671875,
-0.0205535888671875,
0.0010938644409179688,
-0.003421783447265625,
-0.0181427001953125,
0.048095703125,
-0.0195465087890625,
-0.031890869140625,
-0.0487060546875,
-0.0002720355987548828,
0.0115966796875,
-0.02703857421875,
-0.02911376953125,
-0.0103912353515625,
-0.016082763671875,
-0.0369873046875,
0.042388916015625,
-0.04150390625,
-0.045196533203125,
0.020111083984375,
0.0209503173828125,
0.03717041015625,
-0.0217132568359375,
-0.041778564453125,
-0.005619049072265625,
0.042816162109375,
0.0273284912109375,
0.0276031494140625,
-0.0094146728515625,
-0.0174102783203125,
-0.043792724609375,
0.005397796630859375,
-0.0184478759765625,
0.00653076171875,
0.016937255859375,
0.004314422607421875,
-0.032257080078125,
0.0259246826171875,
0.026824951171875,
0.0014781951904296875,
0.001171112060546875,
-0.0310211181640625,
0.01654052734375,
-0.0034275054931640625,
0.044830322265625,
-0.03631591796875,
0.0198974609375,
0.04949951171875,
0.040771484375,
0.0178375244140625,
-0.00623321533203125,
-0.035003662109375,
-0.0369873046875,
-0.0285186767578125,
-0.0241546630859375,
-0.01285552978515625,
0.009735107421875,
0.0113983154296875,
-0.00923919677734375,
-0.016571044921875,
0.032379150390625,
0.034637451171875,
-0.024169921875,
0.0214691162109375,
0.0067138671875,
-0.045166015625,
-0.047393798828125,
-0.043548583984375,
0.0177001953125,
-0.0201416015625,
-0.037017822265625,
0.0338134765625,
-0.0198822021484375,
-0.00540924072265625,
-0.040252685546875,
-0.044464111328125,
0.03387451171875,
-0.036376953125,
-0.0428466796875,
0.01392364501953125,
0.0194854736328125,
-0.0138092041015625,
0.038177490234375,
-0.0478515625,
-0.025299072265625,
-0.0210418701171875,
-0.01904296875,
-0.040435791015625,
-0.04986572265625,
0.046600341796875,
0.01551055908203125,
-0.04669189453125,
-0.00475311279296875,
0.048614501953125,
-0.033538818359375,
-0.011505126953125,
0.02337646484375,
0.0218963623046875,
0.0396728515625,
-0.045989990234375,
-0.037322998046875,
-0.030853271484375,
0.005725860595703125,
-0.030303955078125,
0.007205963134765625,
-0.030853271484375,
0.04534912109375,
-0.0208587646484375,
-0.0113372802734375,
-0.011566162109375,
-0.014068603515625,
-0.041351318359375,
-0.044769287109375,
-0.0038852691650390625,
-0.038055419921875,
0.0430908203125,
-0.04217529296875,
0.01666259765625,
-0.0100555419921875,
0.02545166015625,
0.03704833984375,
-0.046356201171875,
0.005191802978515625,
0.00882720947265625,
0.0462646484375,
-0.044586181640625,
-0.0282440185546875,
-0.042816162109375,
0.047393798828125,
-0.038299560546875,
-0.01849365234375,
0.01012420654296875,
-0.01556396484375,
0.001270294189453125,
-0.048614501953125,
-0.0443115234375,
0.04278564453125,
-0.023773193359375,
0.0049591064453125,
0.0208587646484375,
-0.0264739990234375,
0.032318115234375,
0.0022602081298828125,
-0.039093017578125,
0.0261383056640625,
-0.0222320556640625,
-0.0496826171875,
-0.00861358642578125,
0.0305023193359375,
0.017364501953125,
0.023529052734375,
-0.045806884765625,
0.03875732421875,
-0.04388427734375,
-0.034027099609375,
0.00273895263671875,
0.0189971923828125,
0.0180816650390625,
-0.0180816650390625,
0.0249176025390625,
-0.044281005859375,
0.025604248046875,
0.0293121337890625,
0.04241943359375,
0.0360107421875,
0.046051025390625,
-0.044647216796875,
-0.037322998046875,
0.0008115768432617188,
0.0183868408203125,
0.00374603271484375,
0.0023479461669921875,
0.0165863037109375,
0.01419830322265625,
0.0167388916015625,
0.03717041015625,
-0.022308349609375,
0.03631591796875,
0.0259246826171875,
0.04510498046875,
0.0028972625732421875,
-0.016143798828125,
0.03253173828125,
0.032012939453125,
0.02215576171875,
0.033233642578125,
0.00788116455078125,
0.0008959770202636719,
-0.0017108917236328125,
0.00667572021484375,
0.0340576171875,
0.036956787109375,
0.0406494140625,
-0.0228424072265625,
0.0016508102416992188,
-0.0438232421875,
0.0251312255859375,
-0.04779052734375,
-0.0181884765625,
0.0284271240234375,
0.04656982421875,
-0.032440185546875,
-0.0499267578125,
0.0026454925537109375,
0.0268402099609375,
0.0226287841796875,
-0.028076171875,
0.0460205078125,
-0.047454833984375,
0.01039886474609375,
-0.035797119140625,
0.043548583984375,
0.03057861328125,
-0.0292510986328125,
-0.0379638671875,
-0.0038776397705078125,
0.044158935546875,
-0.006786346435546875,
-0.049072265625,
-0.0178985595703125,
-0.045166015625,
-0.0447998046875,
0.0175628662109375,
0.009490966796875,
0.045257568359375,
0.0171356201171875,
-0.030059814453125,
0.021728515625,
0.04168701171875,
-0.011383056640625,
-0.040069580078125,
-0.01128387451171875,
0.043243408203125,
-0.032196044921875,
-0.029052734375,
0.00021147727966308594,
-0.0095062255859375,
-0.0073394775390625,
0.0240478515625,
0.0261993408203125,
-0.002655029296875,
-0.047698974609375,
0.0413818359375,
-0.046356201171875,
-0.002315521240234375,
0.0215911865234375,
0.0423583984375,
-0.053558349609375,
-0.06707763671875,
-0.041900634765625,
-0.01153564453125,
0.02288818359375,
-0.04107666015625,
0.0396728515625,
-0.00952911376953125,
-0.0237274169921875,
-0.0183563232421875,
0.050201416015625,
0.027191162109375,
-0.007659912109375,
-0.004993438720703125,
0.0068359375,
-0.020477294921875,
0.035064697265625,
0.03887939453125,
0.03802490234375,
0.060760498046875,
0.04791259765625,
0.045806884765625,
-0.029296875,
0.0265350341796875,
-0.03289794921875,
0.015472412109375,
0.01461029052734375,
0.0294342041015625,
0.0496826171875,
0.040191650390625,
0.048065185546875,
0.01145172119140625,
-0.0308685302734375,
-0.01041412353515625,
0.020172119140625,
0.06671142578125,
0.049468994140625,
0.0262603759765625,
0.01959228515625,
0.0240325927734375,
0.036224365234375,
-0.004058837890625,
0.0221099853515625,
-0.07501220703125,
-0.048095703125,
0.0565185546875,
0.06353759765625,
-0.01406097412109375,
-0.0203094482421875,
-0.019317626953125,
0.0014133453369140625,
-0.029693603515625,
-0.01605224609375,
0.0293121337890625,
-0.0302276611328125,
0.0008401870727539062,
0.054443359375,
-0.01136016845703125,
0.0231781005859375,
-0.0258331298828125,
-0.023590087890625,
-0.06103515625,
0.0418701171875,
-0.0009565353393554688,
0.01311492919921875,
-0.03863525390625,
-0.016632080078125,
0.0018711090087890625,
0.009674072265625,
-0.01207733154296875,
-0.045654296875,
-0.034942626953125,
0.034698486328125,
0.0023136138916015625,
0.049835205078125,
-0.037322998046875,
0.0187835693359375,
0.0038623809814453125,
0.0018415451049804688,
0.036346435546875,
-0.037109375,
0.01532745361328125,
-0.0216827392578125,
-0.040374755859375,
-0.02752685546875,
-0.034881591796875,
0.0218963623046875,
0.01488494873046875,
-0.048583984375,
0.015350341796875,
0.0087432861328125,
-0.0345458984375,
0.0266265869140625,
-0.01107025146484375,
-0.00582122802734375,
-0.02862548828125,
-0.045074462890625,
0.00860595703125,
0.0177001953125,
0.025054931640625,
0.03289794921875,
-0.0545654296875,
0.0195465087890625,
-0.004116058349609375,
-0.047393798828125,
0.043792724609375,
0.05059814453125,
-0.04345703125,
-0.019378662109375,
-0.0128326416015625,
0.0294189453125,
0.05084228515625,
0.01617431640625,
-0.00820159912109375,
-0.051055908203125,
0.04718017578125,
0.058990478515625,
0.040771484375,
0.028167724609375,
0.022735595703125,
0.06341552734375,
-0.009429931640625,
0.078857421875,
-0.0026302337646484375,
0.0306243896484375,
0.0031261444091796875,
0.045379638671875,
0.039520263671875,
-0.0301055908203125,
-0.01180267333984375,
-0.02117919921875,
-0.004749298095703125,
0.0112762451171875,
-0.00981903076171875,
0.021881103515625,
-0.0268402099609375,
-0.0231170654296875,
0.0506591796875,
-0.0031280517578125,
-0.052276611328125,
0.004058837890625,
-0.01496124267578125,
0.06640625,
-0.0333251953125,
0.023712158203125,
-0.049774169921875,
-0.007274627685546875,
-0.005741119384765625,
0.047698974609375,
-0.0149383544921875,
0.04925537109375,
-0.0225067138671875,
0.0260009765625,
0.0107269287109375,
-0.022735595703125,
0.0169677734375,
-0.032928466796875,
-0.06378173828125,
-0.0013475418090820312,
-0.007633209228515625,
-0.060272216796875,
-0.043670654296875,
-0.016632080078125,
0.045013427734375,
0.01212310791015625,
0.01499176025390625,
-0.0204010009765625,
-0.01015472412109375,
0.03082275390625,
0.0421142578125,
0.01312255859375,
-0.00046896934509277344,
0.01171112060546875,
0.04833984375,
0.0309906005859375,
-0.024688720703125,
0.037841796875,
-6.812810897827148e-05,
0.0450439453125,
-0.052093505859375,
-0.025665283203125,
0.025848388671875,
0.0179901123046875,
-0.032318115234375,
0.0399169921875,
-0.022064208984375,
-0.0333251953125,
0.01390838623046875,
-0.049163818359375,
-0.0283203125,
0.02154541015625,
-0.05194091796875,
0.0307464599609375,
0.0321044921875,
0.0361328125,
-0.03521728515625,
-0.00470733642578125,
-0.028717041015625,
0.020965576171875,
0.0281524658203125,
-0.00921630859375,
-0.024627685546875,
-0.017425537109375,
-0.0322265625,
0.0164642333984375,
-0.042205810546875,
-0.03277587890625,
0.0263824462890625,
0.0276336669921875,
-0.01611328125,
-0.004505157470703125,
-0.0102996826171875,
-0.06268310546875,
0.011077880859375,
0.054473876953125,
0.030914306640625,
0.0265350341796875,
-0.030548095703125,
0.052520751953125,
0.025482177734375,
0.005405426025390625,
0.052459716796875,
-0.07073974609375,
0.004856109619140625,
-0.0513916015625,
0.051849365234375,
-0.07086181640625,
-0.05560302734375,
0.00461578369140625,
-0.005435943603515625,
-0.00913238525390625,
-0.0298004150390625,
-0.0239410400390625,
0.020782470703125,
-0.05535888671875,
-0.0254669189453125,
-0.0287322998046875,
0.0521240234375,
0.044708251953125,
-0.033172607421875,
0.039581298828125,
-0.047637939453125,
0.033935546875,
0.035186767578125,
0.018341064453125,
-0.008392333984375,
0.0030193328857421875,
0.007007598876953125,
0.01947021484375,
0.043792724609375,
-0.04833984375,
-0.0195465087890625,
-0.01447296142578125,
0.015594482421875,
0.043609619140625,
0.04046630859375,
0.036285400390625,
0.06353759765625,
0.01291656494140625,
-0.033233642578125,
-0.0162200927734375,
0.0360107421875,
0.0292816162109375,
0.03912353515625,
0.0247039794921875,
0.0019359588623046875,
0.00803375244140625,
0.0112457275390625,
0.005786895751953125,
0.01331329345703125,
0.0205230712890625,
-0.01434326171875,
0.038330078125,
-0.03814697265625,
0.06964111328125,
0.038299560546875,
0.0021820068359375,
-0.048583984375,
0.03533935546875,
-0.036865234375,
0.04486083984375,
-0.0130615234375,
-0.0088043212890625,
0.007228851318359375,
-0.0180511474609375,
-0.0292816162109375,
0.05413818359375,
0.003261566162109375,
-0.01568603515625,
0.0250091552734375,
0.027862548828125,
-0.052001953125,
-2.2709369659423828e-05,
0.0280303955078125,
0.046600341796875,
0.0294952392578125,
-0.038482666015625,
-0.0247955322265625,
0.0303497314453125,
0.002838134765625,
-0.043975830078125,
0.0256805419921875,
-0.024810791015625,
-0.0011072158813476562,
-0.03363037109375,
0.004276275634765625,
-0.0277099609375,
-0.043487548828125,
-0.032440185546875,
-0.035919189453125,
-0.0465087890625,
-0.0478515625,
0.016510009765625,
-0.03546142578125,
0.026885986328125,
0.0006384849548339844,
0.042266845703125,
-0.0247955322265625,
0.029205322265625,
0.051666259765625,
0.03082275390625,
0.04266357421875,
0.0284423828125,
-0.018768310546875,
-0.0244293212890625,
0.030853271484375,
0.0233917236328125,
-0.039642333984375,
-0.031585693359375,
-0.0004525184631347656,
0.0005488395690917969,
0.00786590576171875,
-0.02630615234375,
-0.048919677734375,
-0.0177154541015625,
0.02197265625,
0.0218658447265625,
-0.00439453125,
-0.06817626953125,
-0.0281524658203125,
0.04345703125,
0.043609619140625,
0.0423583984375,
-0.058837890625,
-0.044342041015625,
0.0252227783203125,
0.040679931640625,
-0.0296173095703125,
0.041015625,
0.058685302734375,
0.041107177734375,
0.01593017578125,
-0.01458740234375,
0.03985595703125,
0.0054779052734375,
-0.0175933837890625,
-0.0274200439453125,
-0.036468505859375,
-0.01070404052734375,
0.038055419921875,
-0.05596923828125,
-0.023590087890625,
-0.004352569580078125,
0.017852783203125,
-0.0167083740234375,
-0.014251708984375,
0.035491943359375,
0.035980224609375,
-0.0400390625,
-0.0374755859375,
-0.047760009765625,
-0.0361328125,
0.0010128021240234375,
0.005970001220703125,
0.0418701171875,
-0.023651123046875,
-0.06378173828125,
0.04986572265625,
-0.0027561187744140625,
-0.0066986083984375,
0.00395965576171875,
0.0640869140625,
0.014801025390625,
-0.0004038810729980469,
-0.00045752525329589844,
-0.0233154296875,
0.0288238525390625,
0.0095062255859375,
-0.0206756591796875,
0.0286102294921875,
0.0557861328125,
-0.01934814453125,
-0.035369873046875,
-0.07794189453125,
-0.0239715576171875,
-0.01763916015625,
-0.033935546875,
-0.022491455078125,
-0.0014104843139648438,
-0.0152587890625,
0.01409149169921875,
-0.0016889572143554688,
-0.0120391845703125,
0.02783203125,
0.01313018798828125,
-0.002384185791015625,
-0.009429931640625,
0.050262451171875,
0.00482177734375,
0.026336669921875,
-0.00962066650390625,
0.041717529296875,
0.07916259765625,
0.037811279296875,
0.0195770263671875,
0.005451202392578125,
0.038818359375,
-0.0121307373046875,
-0.0267181396484375,
-0.03009033203125,
-0.004657745361328125,
-0.0079345703125,
-0.00017344951629638672,
0.057220458984375,
0.042205810546875,
-0.027008056640625,
0.00759124755859375,
-0.027801513671875,
-0.034027099609375,
-0.01861572265625,
-0.0201263427734375,
-0.054718017578125,
0.00742340087890625,
0.0051116943359375,
-0.0280303955078125,
-0.0023822784423828125,
0.04217529296875,
0.00896453857421875,
0.029266357421875,
0.02099609375,
0.00640869140625,
-0.034637451171875,
-0.019622802734375,
0.06060791015625,
0.02471923828125,
0.006420135498046875,
0.03216552734375,
-0.0135650634765625,
0.0290069580078125,
0.023651123046875,
0.02496337890625,
-0.048370361328125,
-0.028350830078125,
0.0237579345703125,
-0.0338134765625,
-0.01190185546875,
-0.023223876953125,
-0.04681396484375,
0.0135345458984375,
0.0009984970092773438,
-0.00453948974609375,
-0.00728607177734375,
-0.026092529296875,
0.0021762847900390625,
-0.03704833984375,
-0.0002065896987915039,
-0.0343017578125,
0.01334381103515625,
0.02874755859375,
0.007312774658203125,
-0.044464111328125,
-0.006069183349609375,
-0.00479888916015625,
-0.006805419921875,
-0.0097808837890625,
-0.031341552734375,
-0.00443267822265625,
-0.03662109375,
0.015716552734375,
0.0204010009765625,
-0.039306640625,
0.0010929107666015625,
-0.00359344482421875,
-0.0133209228515625,
0.016510009765625,
0.03363037109375,
0.00821685791015625,
0.039825439453125,
0.0135345458984375,
0.03472900390625,
0.06658935546875,
0.057586669921875,
0.012603759765625,
0.0183868408203125,
0.034332275390625,
-0.0025482177734375,
-0.0413818359375,
-0.0426025390625,
-0.035186767578125,
0.0625,
-0.046295166015625,
-0.07421875,
0.021759033203125,
0.004322052001953125,
-0.0030574798583984375,
-0.042999267578125,
-0.0548095703125,
-0.061370849609375,
-0.0389404296875,
0.053314208984375,
0.045379638671875,
0.050750732421875,
0.040985107421875,
-0.01439666748046875,
0.025787353515625,
-0.03143310546875,
-0.0006256103515625,
-0.04278564453125,
0.01473236083984375,
0.01120758056640625,
0.033599853515625,
0.0130767822265625,
-0.0321044921875,
-0.00948333740234375,
-0.01561737060546875,
-0.01800537109375,
0.068603515625,
-0.006855010986328125,
0.04901123046875,
-0.043853759765625,
0.0042572021484375,
0.00647735595703125,
-0.044281005859375,
-0.0833740234375,
0.02703857421875,
-0.01190948486328125,
-0.01050567626953125,
-0.0174407958984375,
-0.037689208984375,
-0.01219940185546875,
0.0494384765625,
-0.00232696533203125,
0.0023059844970703125,
0.0015134811401367188,
-0.0206451416015625,
-0.027130126953125,
-0.0213165283203125,
0.016326904296875,
-0.045379638671875,
-0.008270263671875,
0.034393310546875,
0.0421142578125,
-0.01430511474609375,
0.012542724609375,
0.0226593017578125,
-0.030242919921875,
0.006046295166015625,
-0.035430908203125,
0.019378662109375,
-0.0272674560546875,
0.034423828125,
0.0004343986511230469,
-0.0291595458984375,
-0.045989990234375,
0.0273590087890625,
0.0182647705078125,
0.0394287109375,
-0.0211334228515625,
0.0155487060546875,
-0.0123443603515625,
0.043243408203125,
0.018035888671875,
0.03289794921875,
0.02789306640625,
-0.0289764404296875,
-0.0482177734375,
-0.0036373138427734375,
0.0345458984375,
0.0477294921875,
-0.01263427734375,
0.05230712890625,
0.0244903564453125,
0.0022449493408203125,
0.00502777099609375,
0.023681640625,
0.0295867919921875,
-0.01503753662109375,
0.007472991943359375,
-0.03497314453125,
-0.037353515625,
0.01690673828125,
0.01493072509765625,
-0.0377197265625,
0.0021076202392578125,
-0.0168609619140625,
-0.0101776123046875,
-0.01309967041015625,
-0.00852203369140625,
0.01529693603515625,
0.0190887451171875,
0.0290679931640625,
0.06829833984375,
0.03240966796875,
-0.027435302734375,
0.0135650634765625,
0.0022296905517578125,
-0.007061004638671875,
-0.035247802734375,
-0.031951904296875,
0.0229644775390625,
0.044189453125,
-0.00921630859375,
-0.05963134765625,
-0.002948760986328125,
0.03594970703125,
0.002330780029296875,
-0.069580078125,
-0.033172607421875,
0.01053619384765625,
0.0145111083984375,
-0.03826904296875,
0.023193359375,
0.0031642913818359375,
0.00046443939208984375,
-0.08856201171875,
0.0233001708984375,
-0.01065826416015625,
0.0273590087890625,
-0.00830841064453125,
-0.0094757080078125,
-0.0286407470703125,
0.0712890625,
0.01519775390625,
0.035736083984375,
0.0258636474609375,
0.012176513671875,
0.026824951171875,
0.0238189697265625,
0.0582275390625,
0.023773193359375,
-0.049652099609375,
-0.0347900390625,
-0.01922607421875,
-0.032684326171875,
0.055755615234375,
-0.0460205078125,
-0.03900146484375,
-0.013916015625,
-0.03466796875,
-0.009796142578125,
0.00041961669921875,
0.0009293556213378906,
0.00543212890625,
0.0308074951171875,
-0.025299072265625,
0.05242919921875,
-0.011138916015625,
-0.036041259765625,
-0.01861572265625,
-0.019287109375,
0.0214996337890625,
0.0098724365234375,
-0.029632568359375,
-0.0198974609375,
0.03546142578125,
0.0411376953125,
0.033416748046875,
0.0190582275390625,
0.0302581787109375,
0.0056304931640625,
-0.0338134765625,
0.0275115966796875,
-0.050811767578125,
-0.03936767578125,
0.0216522216796875,
0.051727294921875,
-0.0026912689208984375,
0.005840301513671875,
-0.049530029296875,
-0.0016012191772460938,
-0.00959014892578125,
-0.0169525146484375,
-0.060882568359375,
-0.02655029296875,
0.06988525390625,
-0.042388916015625,
-0.009796142578125,
-0.027740478515625,
-0.031829833984375,
0.02154541015625,
-0.01995849609375,
0.0232696533203125,
-0.032470703125,
-0.0474853515625,
-0.0159454345703125,
-0.0295562744140625,
0.0296478271484375,
0.0036792755126953125,
-0.03369140625,
0.004886627197265625,
-0.0245208740234375,
-0.0222625732421875,
0.004413604736328125,
0.0380859375,
0.02447509765625,
-0.0219879150390625,
0.03948974609375,
0.0209503173828125,
0.0292510986328125,
0.0020294189453125,
0.04486083984375,
-0.0004477500915527344,
-0.041168212890625,
0.03314208984375,
0.0186004638671875,
0.01641845703125,
-0.0189666748046875,
0.0218048095703125,
0.03497314453125,
-0.0080108642578125,
0.039398193359375,
0.0080108642578125,
-0.04608154296875,
-0.0262603759765625,
-0.03350830078125,
-0.0087890625,
-0.06378173828125,
-0.0302734375,
0.048980712890625,
-0.049591064453125,
-0.047149658203125,
0.016204833984375,
0.037109375,
-0.039794921875,
-0.0188140869140625,
0.0023250579833984375,
0.0015878677368164062,
0.035736083984375,
0.0123291015625,
0.0019464492797851562,
0.0313720703125,
0.041168212890625,
-0.04736328125,
-0.00963592529296875,
-0.034332275390625,
0.0531005859375,
-0.038299560546875,
0.03265380859375,
0.06842041015625,
-0.00373077392578125,
0.004459381103515625,
-0.0169219970703125,
0.0089111328125,
-0.0066375732421875,
0.04571533203125,
0.01410675048828125,
-0.0254058837890625,
-0.04803466796875,
0.006282806396484375,
-0.0266571044921875,
0.0046844482421875,
0.028228759765625,
0.033233642578125,
0.019073486328125,
-0.02716064453125,
-0.00478363037109375,
0.0169219970703125,
0.0211029052734375,
-0.019378662109375,
0.0133819580078125,
0.040618896484375,
-0.0261993408203125,
0.039703369140625,
0.019775390625,
0.0672607421875,
-0.04864501953125,
-0.01247406005859375,
-0.008392333984375,
0.05010986328125,
0.00469970703125,
-0.06072998046875,
0.0004489421844482422,
0.034271240234375,
-0.05731201171875,
-0.04583740234375,
0.02667236328125,
-0.044769287109375,
0.02374267578125,
0.00536346435546875,
0.0077972412109375,
0.020416259765625,
0.00798797607421875,
0.032135009765625,
0.0538330078125,
-0.00460052490234375,
0.045745849609375,
0.054412841796875,
0.05712890625,
0.08514404296875,
0.0274200439453125,
-0.08380126953125,
-0.04864501953125,
0.01158905029296875,
0.043731689453125,
0.062408447265625,
0.007007598876953125,
0.0138092041015625,
0.0075836181640625,
0.03741455078125,
0.06298828125,
-0.0033397674560546875,
0.047515869140625,
0.0367431640625,
0.051910400390625,
0.0273895263671875,
0.0182647705078125,
-0.01375579833984375,
-0.041656494140625,
-0.031036376953125,
0.01284027099609375,
0.0111083984375,
0.042816162109375,
0.039642333984375,
0.00437164306640625,
-0.037994384765625,
-0.03662109375,
-0.049346923828125,
-0.01488494873046875,
-0.00870513916015625,
0.02447509765625,
-0.0159759521484375,
-0.01291656494140625,
-0.004154205322265625,
0.0193023681640625,
0.0024242401123046875,
-0.056915283203125,
-0.055419921875,
-0.043426513671875,
0.0298614501953125,
0.0213165283203125,
-0.036712646484375,
-0.01544189453125,
-0.026702880859375,
0.0251007080078125,
-0.0001856088638305664,
0.047332763671875,
0.035675048828125,
-0.041839599609375,
-0.0080718994140625,
-0.0509033203125,
-0.01128387451171875,
-0.0369873046875,
0.046173095703125,
0.0296630859375,
0.0279388427734375,
0.0267791748046875,
0.0362548828125,
-0.01525115966796875,
0.04852294921875,
-0.0313720703125,
-0.039459228515625,
-0.07794189453125,
0.0222320556640625,
-0.01457977294921875,
0.0256500244140625,
-0.036834716796875,
-0.061431884765625,
0.054290771484375,
0.0298614501953125,
0.031005859375,
0.00804901123046875,
-0.04071044921875,
0.0240631103515625,
-0.043060302734375,
-0.038330078125,
0.0209503173828125,
-0.0343017578125,
0.00634765625,
-0.0533447265625,
0.03546142578125,
0.027740478515625,
0.034149169921875,
0.024749755859375,
0.0280609130859375,
0.062408447265625,
0.07757568359375,
-0.01351165771484375,
-0.04522705078125,
0.01226043701171875,
0.06439208984375,
0.03875732421875,
0.0125579833984375,
-0.051483154296875,
-0.021942138671875,
0.0221099853515625,
-0.0035381317138671875,
0.06390380859375,
0.01788330078125,
-0.0589599609375,
-0.0148162841796875,
0.0249481201171875,
0.00453948974609375,
-0.01316070556640625,
-0.039825439453125,
0.025360107421875,
-0.08331298828125,
-0.05914306640625,
-0.00722503662109375,
0.002826690673828125,
0.039031982421875,
0.0256500244140625,
0.0025691986083984375,
-0.0161895751953125,
0.01204681396484375,
0.06207275390625,
-0.0433349609375,
0.0024166107177734375,
0.0151519775390625,
0.0088043212890625,
-0.01812744140625,
-0.022674560546875,
-0.056243896484375,
0.014739990234375,
-0.01922607421875,
0.01082611083984375,
0.056243896484375,
0.07623291015625,
0.0570068359375,
0.058135986328125,
0.01392364501953125,
0.026031494140625,
-0.004177093505859375,
0.0261688232421875,
-0.048736572265625,
-0.07183837890625,
0.06573486328125,
0.046783447265625,
-0.03363037109375,
-0.03912353515625,
-0.01177215576171875,
-0.031982421875,
0.0187530517578125,
-0.0177001953125,
-0.0263214111328125,
-0.028961181640625,
0.0003540515899658203,
-0.0236663818359375,
0.031463623046875,
0.0016231536865234375,
-0.057708740234375,
-0.014404296875,
0.0870361328125,
0.002307891845703125,
0.0287933349609375,
-0.0021209716796875,
0.0283050537109375,
0.00457000732421875,
-0.052459716796875,
0.03009033203125,
-0.057769775390625,
0.04852294921875,
0.0462646484375,
-0.03411865234375,
-0.041961669921875,
-0.05108642578125,
0.00952911376953125,
0.04925537109375,
0.0297088623046875,
0.0284423828125,
-0.007740020751953125,
-0.0141754150390625,
-0.019500732421875,
-0.049530029296875,
0.007343292236328125,
-0.03643798828125,
-0.02099609375,
0.025665283203125,
-0.006977081298828125,
0.032470703125,
0.0355224609375,
0.004856109619140625,
-0.0185089111328125,
0.0093231201171875,
0.01025390625,
0.0204925537109375,
-0.030670166015625,
0.04180908203125,
0.01165008544921875,
-0.02252197265625,
-0.0233612060546875,
-0.031585693359375,
0.017974853515625,
0.050994873046875,
0.03570556640625,
0.01983642578125,
-0.059356689453125,
0.03631591796875,
-0.0158538818359375,
0.004528045654296875,
0.0006546974182128906,
0.06048583984375,
0.05047607421875,
0.00933074951171875,
-0.0589599609375,
-0.0443115234375,
0.054473876953125,
0.036468505859375,
0.021728515625,
-0.036956787109375,
-0.037689208984375,
0.03839111328125,
0.01436614990234375,
0.046966552734375,
0.00315093994140625,
-0.0027713775634765625,
0.034149169921875,
-0.0178375244140625,
0.01438140869140625,
0.0174713134765625,
0.06756591796875,
0.045623779296875,
0.019927978515625,
-0.08087158203125,
0.01483917236328125,
-0.0318603515625,
-0.0306549072265625,
-0.00572967529296875,
-0.044219970703125,
-0.04986572265625,
0.004474639892578125,
-0.0148162841796875,
-0.005321502685546875,
0.055877685546875,
-0.019561767578125,
-0.033477783203125,
0.0066070556640625,
0.062255859375,
0.0242462158203125,
-0.01387786865234375,
0.034820556640625,
-0.029998779296875,
0.05810546875,
-0.00559234619140625,
-0.005466461181640625,
-0.02691650390625,
0.00562286376953125,
0.0357666015625,
0.0008559226989746094,
-0.06060791015625,
-0.004123687744140625,
0.028045654296875,
0.004413604736328125,
0.04461669921875,
0.0287017822265625,
0.002532958984375,
0.0419921875,
0.051666259765625,
0.033050537109375,
0.00482177734375,
0.0357666015625,
0.0335693359375,
0.06756591796875,
-0.037933349609375,
0.032135009765625,
0.038818359375,
0.0134429931640625,
0.039337158203125,
-0.0238800048828125,
-0.026641845703125,
0.0086517333984375,
-0.041229248046875,
0.06365966796875,
0.04156494140625,
-0.00366973876953125,
0.03265380859375,
0.05743408203125,
0.005001068115234375,
-0.04022216796875,
-0.0794677734375,
0.026519775390625,
0.00696563720703125,
0.037506103515625,
-0.0070648193359375,
-0.02728271484375,
0.038116455078125,
-0.0250396728515625,
-0.00823211669921875,
0.0260772705078125,
0.028839111328125,
0.01006317138671875,
0.0396728515625,
-0.04150390625,
-0.0665283203125,
-0.036712646484375,
0.020965576171875,
0.0097198486328125,
-0.0309295654296875,
-0.031341552734375,
-0.0242156982421875,
-0.04583740234375,
0.0036525726318359375,
0.009033203125,
0.048919677734375,
-0.036468505859375,
0.0064544677734375,
0.015777587890625,
0.0018520355224609375,
0.03717041015625,
0.005710601806640625,
0.00489044189453125,
-0.00044727325439453125,
-0.01165771484375,
0.035491943359375,
-0.045989990234375,
0.01666259765625,
0.03582763671875,
-0.00611114501953125,
0.064453125,
-0.0205230712890625,
0.01528167724609375,
0.0127105712890625,
0.0290985107421875,
0.0006189346313476562,
-0.051788330078125,
0.03436279296875,
-0.0703125,
0.015716552734375,
0.0635986328125,
-0.0256195068359375,
0.039215087890625,
-0.060546875,
-0.00286865234375,
-0.0060577392578125,
0.01407623291015625,
0.0032863616943359375,
0.049041748046875,
0.01352691650390625,
-0.039215087890625,
-0.046142578125,
0.048828125,
0.044158935546875,
0.0158538818359375,
-0.044952392578125,
-0.0204620361328125,
-0.037078857421875,
-0.033721923828125,
-0.006134033203125,
0.04034423828125,
0.025787353515625,
-0.0452880859375,
0.0178680419921875,
0.01558685302734375,
0.0081024169921875,
0.0015153884887695312,
-0.032989501953125,
-0.023468017578125,
0.0203094482421875,
-0.03680419921875,
-0.0108795166015625,
0.033477783203125,
0.046112060546875,
0.0208282470703125,
0.0078887939453125,
0.005924224853515625,
0.0014429092407226562,
-0.007686614990234375,
0.035400390625,
-0.0216522216796875,
0.041107177734375,
-0.0039043426513671875,
0.020477294921875,
0.04345703125,
0.052490234375,
0.027435302734375,
0.0057373046875,
-0.041351318359375,
-0.0200653076171875,
0.0175323486328125,
0.02679443359375,
0.01305389404296875,
0.01219940185546875,
0.0287628173828125,
-0.044464111328125,
0.02301025390625,
0.006748199462890625,
0.017730712890625,
2.4139881134033203e-05,
-0.00748443603515625,
0.01361846923828125,
-0.0176239013671875,
-0.009979248046875,
0.00998687744140625,
-0.015228271484375,
0.0220947265625,
-0.07940673828125,
-0.021331787109375,
0.0238494873046875,
-1.615285873413086e-05,
0.06634521484375,
0.01103973388671875,
-0.037384033203125,
-0.03167724609375,
-0.006137847900390625,
0.04534912109375,
0.0307159423828125,
-0.03314208984375,
-0.0455322265625,
-0.0313720703125,
0.0113372802734375,
0.035369873046875,
-0.00095367431640625,
-0.0504150390625,
-0.01454925537109375,
0.044158935546875,
0.049072265625,
-0.014190673828125,
-0.0355224609375,
-0.01244354248046875,
0.05877685546875,
0.0169525146484375,
-0.0264892578125,
0.037506103515625,
0.049224853515625,
0.07208251953125,
0.01947021484375,
0.02691650390625,
0.048583984375,
0.052337646484375,
-0.00226593017578125,
0.0222625732421875,
0.009796142578125,
0.056304931640625,
0.055816650390625,
0.035064697265625,
0.017059326171875,
-0.0156402587890625,
-0.01296234130859375,
0.04705810546875,
-0.0209197998046875,
0.0509033203125,
0.0211334228515625,
0.00667572021484375,
-0.003765106201171875,
-0.039398193359375,
-0.030181884765625,
-0.0360107421875,
-0.0204620361328125,
-0.01508331298828125,
-0.025909423828125,
-0.02001953125,
0.018646240234375,
0.0716552734375,
-0.0185394287109375,
-0.0184326171875,
-0.06829833984375,
0.00893402099609375,
0.0340576171875,
-0.024566650390625,
0.056060791015625,
0.037628173828125,
-0.0187530517578125,
0.0567626953125,
0.00966644287109375,
0.044647216796875,
0.0271148681640625,
-0.007213592529296875,
-0.00934600830078125,
0.0136260986328125,
0.044342041015625,
0.0107421875,
0.01043701171875,
-0.020904541015625,
0.0039215087890625,
0.04266357421875,
-0.01560211181640625,
-0.0014657974243164062,
-0.033721923828125,
0.04510498046875,
-0.0255279541015625,
0.0067138671875,
0.031341552734375,
-0.02099609375,
-0.03497314453125,
0.003597259521484375,
-0.04840087890625,
0.0165557861328125,
-0.0185394287109375,
0.0161590576171875,
0.0101318359375,
-0.041961669921875,
-0.051422119140625,
0.0006694793701171875,
0.0537109375,
0.0148162841796875,
-0.0029544830322265625,
-0.030853271484375,
-0.0249176025390625,
0.0008058547973632812,
0.022979736328125,
0.06109619140625,
-0.00084686279296875,
-0.0347900390625,
-0.0174102783203125,
-0.0173187255859375,
-0.017913818359375,
0.0249786376953125,
0.0330810546875,
-0.0291595458984375,
0.03155517578125,
-0.0489501953125,
0.0472412109375,
0.0340576171875,
-0.0615234375,
0.052978515625,
0.017242431640625,
-0.0001226663589477539,
0.0252532958984375,
-0.0003094673156738281,
0.031005859375,
0.031585693359375,
0.04510498046875,
0.07440185546875,
0.0183563232421875,
0.0010128021240234375,
-0.012542724609375,
0.0020847320556640625,
0.0249176025390625,
-0.041412353515625,
0.0426025390625,
-0.034149169921875,
0.0028476715087890625,
-0.0166473388671875,
0.050994873046875,
0.043670654296875,
0.0616455078125,
-0.042938232421875,
-0.005523681640625,
0.007450103759765625,
0.003330230712890625,
0.0496826171875,
-0.0076141357421875,
0.03814697265625,
-0.0199432373046875,
0.0111083984375,
0.035125732421875,
-0.04168701171875,
0.031646728515625,
0.02996826171875,
-0.01131439208984375,
0.019012451171875,
-0.04962158203125,
-0.0018148422241210938,
-0.043670654296875,
-0.0235595703125,
0.007793426513671875,
-0.03729248046875,
0.0284423828125,
0.022552490234375,
0.048095703125,
-0.0253143310546875,
0.03656005859375,
-0.045562744140625,
0.01319122314453125,
0.01181793212890625,
0.00487518310546875,
-0.01375579833984375,
-0.01904296875,
0.004077911376953125,
-0.0244293212890625,
0.02618408203125,
0.029632568359375,
0.00824737548828125,
-0.0097808837890625,
0.022125244140625,
0.0287322998046875,
0.053070068359375,
0.0291595458984375,
0.01372528076171875,
0.036529541015625,
-0.05584716796875,
0.0343017578125,
0.0312042236328125,
0.0236358642578125,
0.032623291015625,
-5.960464477539062e-07,
-0.0133209228515625,
-0.043914794921875,
0.00885009765625,
-0.01995849609375,
-0.01519775390625,
-0.030426025390625,
-0.0208892822265625,
0.016754150390625,
0.0261077880859375,
0.06683349609375,
-0.0172576904296875,
0.0244598388671875,
0.02850341796875,
0.0811767578125,
0.01021575927734375,
0.0007090568542480469,
-0.08050537109375,
-0.01739501953125,
-0.0066986083984375,
0.0177154541015625,
-0.0232696533203125,
-0.060516357421875,
0.0408935546875,
-0.01898193359375,
0.0037078857421875,
0.00627899169921875,
0.018280029296875,
-0.0175018310546875,
0.041290283203125,
0.0115509033203125,
0.01540374755859375,
-0.02001953125,
0.0303192138671875,
0.04742431640625,
0.00023114681243896484,
-0.01052093505859375,
-0.03924560546875,
-0.030792236328125,
-0.057769775390625,
0.048858642578125,
0.03143310546875,
-0.029205322265625,
-0.0295867919921875,
0.012054443359375,
0.0008411407470703125,
-0.0289764404296875,
-0.06121826171875,
-0.046234130859375,
0.00975799560546875,
0.0031528472900390625,
0.038818359375,
0.005977630615234375,
0.0265045166015625,
-0.05694580078125,
0.02587890625,
0.01131439208984375,
0.0455322265625,
-0.00870513916015625,
-0.041412353515625,
-0.0421142578125,
-0.0472412109375,
-0.018951416015625,
-0.0179595947265625,
0.01438140869140625,
0.039459228515625,
0.0592041015625,
0.0205535888671875,
-0.018768310546875,
0.036956787109375,
0.04632568359375,
-0.01085662841796875,
-0.062347412109375,
0.05084228515625,
-0.02252197265625,
-0.028839111328125,
-0.03118896484375,
0.0007448196411132812,
0.07171630859375,
0.021331787109375,
0.025726318359375,
0.00872039794921875,
0.0105438232421875,
0.028289794921875,
-0.02197265625,
0.055206298828125,
0.01309967041015625,
0.0157623291015625,
0.01348876953125,
0.0276031494140625,
0.07427978515625,
-0.024200439453125,
-0.042816162109375,
0.03863525390625,
0.1116943359375,
0.0428466796875,
-0.027252197265625,
-0.00623321533203125,
-0.023162841796875,
0.00627899169921875,
-0.04840087890625,
-0.0404052734375,
-0.0321044921875,
0.016387939453125,
-0.0106964111328125,
-0.0192413330078125,
-0.00400543212890625,
0.00998687744140625,
0.039398193359375,
-0.024566650390625,
0.001789093017578125,
0.036224365234375,
0.04400634765625,
-0.044769287109375,
0.056610107421875,
0.0286712646484375,
-0.00243377685546875,
-0.00823974609375,
0.035797119140625,
-0.0054168701171875,
-0.013458251953125,
-0.005519866943359375,
-0.004711151123046875,
-0.021453857421875,
0.0162200927734375,
-0.0205841064453125,
0.0157012939453125,
0.018402099609375,
-0.0338134765625,
0.034393310546875,
-0.00946807861328125,
-0.01001739501953125,
-0.015777587890625,
0.04833984375,
-0.02227783203125,
-0.032470703125,
-0.037872314453125,
0.0297393798828125,
0.0129547119140625,
-0.046112060546875,
-0.019378662109375,
0.0195465087890625,
0.04107666015625,
-0.020782470703125,
-0.008819580078125,
-0.01873779296875,
0.0335693359375,
-0.014862060546875,
-0.0110015869140625,
-0.05059814453125,
-0.0144805908203125,
-0.0167083740234375,
-0.06060791015625,
-0.0305023193359375,
0.032623291015625,
-0.05267333984375,
0.01036834716796875,
0.035736083984375,
0.024810791015625,
0.019073486328125,
-0.05242919921875,
0.05096435546875,
-0.038848876953125,
0.01236724853515625,
-0.0033588409423828125,
0.0285186767578125,
0.03424072265625,
0.0224609375,
0.044525146484375,
-0.00971221923828125,
-0.019134521484375,
0.00342559814453125,
0.0196380615234375,
0.0121307373046875,
0.031036376953125,
0.027984619140625,
-0.0264739990234375,
-0.007129669189453125,
-0.01093292236328125,
-0.031005859375,
0.0212554931640625,
0.00994873046875,
0.016357421875,
0.058837890625,
-0.00395965576171875,
0.033172607421875,
-0.0178680419921875,
0.010101318359375,
0.031951904296875,
0.0125885009765625,
0.0478515625,
0.044525146484375,
0.0098114013671875,
0.05548095703125,
0.03631591796875,
0.004497528076171875,
0.061920166015625,
0.032196044921875,
0.00719451904296875,
-0.0159149169921875,
-0.004779815673828125,
-0.025787353515625,
0.040802001953125,
-0.0258026123046875,
-0.03643798828125,
-0.0176849365234375,
0.033721923828125,
-0.01004791259765625,
-0.032745361328125,
0.01287841796875,
-0.0267333984375,
-0.03106689453125,
-0.05364990234375,
-0.0021610260009765625,
-0.03863525390625,
0.037811279296875,
0.061004638671875,
0.008087158203125,
0.05059814453125,
-0.0034942626953125,
0.011383056640625,
-0.01409149169921875,
-0.0029621124267578125,
-0.049774169921875,
-0.0264739990234375,
-0.037933349609375,
0.0271148681640625,
0.01325225830078125,
0.01245880126953125,
-0.035125732421875,
-0.02239990234375,
-0.0438232421875,
-0.0633544921875,
-0.0616455078125,
-0.048736572265625,
-0.040924072265625,
-0.046142578125,
0.0423583984375,
-0.019622802734375,
0.059356689453125,
0.06884765625,
0.04107666015625,
-0.04931640625,
-0.0021038055419921875,
-0.03533935546875,
-0.00026035308837890625,
0.0281219482421875,
0.01013946533203125,
-0.034698486328125,
0.01479339599609375,
-0.0140533447265625,
-0.019927978515625,
0.022369384765625,
0.0169525146484375,
0.01605224609375,
0.051544189453125,
0.035797119140625,
0.04010009765625,
-0.04461669921875,
0.0227813720703125,
0.0190277099609375,
-0.02459716796875,
-0.0172119140625,
0.01155853271484375,
0.031951904296875,
0.0241241455078125,
-0.0187225341796875,
-9.697675704956055e-05,
-0.0181427001953125,
0.033294677734375,
0.062286376953125,
-0.01113128662109375,
0.0183868408203125,
-0.00981903076171875,
0.0173187255859375,
-0.032073974609375,
0.0271453857421875,
-0.0274505615234375,
-0.05322265625,
-0.006183624267578125,
0.030731201171875,
-0.01363372802734375,
0.0125274658203125,
-0.0026416778564453125,
0.004337310791015625,
0.0394287109375,
-0.0292816162109375,
-0.0228729248046875,
-0.023773193359375,
0.029083251953125,
0.0166473388671875,
-0.030548095703125,
0.03863525390625,
-0.0012369155883789062,
-0.02801513671875,
-0.0384521484375,
0.0042572021484375,
0.0289306640625,
0.0341796875,
-0.0197601318359375,
-0.0350341796875,
-0.05865478515625,
-0.052459716796875,
-0.0016984939575195312,
0.05413818359375,
-0.043487548828125,
-0.024444580078125,
-0.01349639892578125,
0.00910186767578125,
-0.04266357421875,
0.0207061767578125,
-0.008331298828125,
-0.0014638900756835938,
0.0194854736328125,
0.00011712312698364258,
-0.0025768280029296875,
-0.04736328125,
0.022186279296875,
0.057220458984375,
0.02008056640625,
0.006763458251953125,
-0.020172119140625,
0.03436279296875,
0.00576019287109375,
-0.0172576904296875,
-0.041107177734375,
-0.0255584716796875,
0.04351806640625,
0.03076171875,
0.032379150390625,
0.0164337158203125,
5.614757537841797e-05,
-0.055633544921875,
-0.0158843994140625,
-0.031890869140625,
0.03955078125,
0.01247406005859375,
0.024627685546875,
0.037322998046875,
-0.0159149169921875,
-0.008544921875,
0.0281524658203125,
0.0240631103515625,
0.03204345703125,
-0.002613067626953125,
-0.02703857421875,
-0.0183868408203125,
0.059539794921875,
0.02423095703125,
-0.0369873046875,
-0.056884765625,
0.01407623291015625,
0.0232391357421875,
-0.0706787109375,
0.056243896484375,
-0.01235198974609375,
0.038360595703125,
0.04315185546875,
-0.01157379150390625,
0.061614990234375,
0.006282806396484375,
-0.020904541015625,
0.016082763671875,
0.0435791015625,
0.04327392578125,
-0.0435791015625,
-0.032562255859375,
0.0225982666015625,
-0.0201568603515625,
0.0128936767578125,
-0.03326416015625,
0.003902435302734375,
-0.0159454345703125,
-0.0377197265625,
0.00572967529296875,
0.020660400390625,
0.0233306884765625,
0.005970001220703125,
-0.01361846923828125,
-0.05511474609375,
0.021453857421875,
-0.04022216796875,
-0.0175933837890625,
-0.06317138671875,
-0.0037021636962890625,
0.031982421875,
0.045867919921875,
0.01885986328125,
0.023712158203125,
0.03680419921875,
-0.020416259765625,
0.00439453125,
0.044708251953125,
0.06280517578125,
0.031951904296875,
-0.0260162353515625,
0.024383544921875,
-4.601478576660156e-05,
0.00788116455078125,
-0.00839996337890625,
-0.006511688232421875,
0.009185791015625,
0.050140380859375,
-0.0191802978515625,
0.0282440185546875,
-0.026947021484375,
0.00417327880859375,
0.046417236328125,
0.03564453125,
0.053314208984375,
0.0157623291015625,
-0.01424407958984375,
-0.036895751953125,
-0.0168609619140625,
0.0247344970703125,
0.044677734375,
-0.0114593505859375,
0.007904052734375,
0.03363037109375,
-0.003612518310546875,
0.0308837890625,
0.043182373046875,
-0.01285552978515625,
0.01090240478515625,
-0.058563232421875,
-0.01165008544921875,
0.0249786376953125,
-0.0093994140625,
-0.041900634765625,
-0.07708740234375,
0.057220458984375,
-0.008819580078125,
0.0037899017333984375,
0.032012939453125,
0.021484375,
0.02569580078125,
-0.020233154296875,
0.01488494873046875,
0.0104217529296875,
0.0176239013671875,
-0.0171051025390625,
-0.0196380615234375,
0.0146942138671875,
0.005725860595703125,
0.01482391357421875,
-0.007106781005859375,
-0.00368499755859375,
0.016448974609375,
0.016632080078125,
0.007488250732421875,
-0.039215087890625,
0.0254364013671875,
-0.00838470458984375,
-0.054473876953125,
-0.0289306640625,
0.00968170166015625,
-0.034637451171875,
-0.02313232421875,
-0.0377197265625,
-0.00045108795166015625,
0.0146026611328125,
-0.00537109375,
-0.02392578125,
0.058441162109375,
-0.034393310546875,
0.00399017333984375,
0.0177001953125,
0.038177490234375,
-0.030517578125,
-0.0206756591796875,
0.0016126632690429688,
0.01495361328125,
-0.0306396484375,
-0.01497650146484375,
-0.00736236572265625,
-0.0251617431640625,
-0.0263671875,
-0.03179931640625,
0.005268096923828125,
0.046905517578125,
0.009979248046875,
0.031982421875,
-0.0316162109375,
0.04534912109375,
0.02838134765625,
-0.002567291259765625,
-0.021453857421875,
-0.04803466796875,
0.034332275390625,
0.058624267578125,
0.0225677490234375,
0.0113525390625,
0.06512451171875,
0.01513671875,
-0.07049560546875,
-0.05889892578125,
-0.0216827392578125,
-0.028411865234375,
0.01042938232421875,
-0.03924560546875,
-0.02044677734375,
-0.01256561279296875,
-0.00734710693359375,
-0.01395416259765625,
-0.062286376953125,
-0.04766845703125,
-0.06982421875,
-0.046356201171875,
-0.0212554931640625,
-0.0270233154296875,
0.05096435546875,
0.01561737060546875,
-0.03912353515625,
0.0206756591796875,
-0.00026869773864746094,
0.00754547119140625,
0.01297760009765625,
0.03289794921875,
-0.0019741058349609375,
-0.02386474609375,
0.00959014892578125,
0.0260772705078125,
0.0289459228515625,
0.06005859375,
5.257129669189453e-05,
-0.0303802490234375,
0.003726959228515625,
0.0081787109375,
0.03192138671875,
0.0037975311279296875,
0.052215576171875,
0.0275115966796875,
0.0304412841796875,
0.0209503173828125,
0.012603759765625,
-0.0160369873046875,
0.021820068359375,
-0.0121917724609375,
0.00386810302734375,
0.00203704833984375,
0.0135040283203125,
-0.01464080810546875,
-0.0131378173828125,
-0.0033721923828125,
0.0516357421875,
0.053802490234375,
0.0024623870849609375,
-0.0263519287109375,
0.0020465850830078125,
-0.005298614501953125,
0.01155853271484375,
-0.031097412109375,
-0.00667572021484375,
0.035552978515625,
-0.0192413330078125,
0.0168609619140625,
-0.029937744140625,
0.011474609375,
-0.037261962890625,
0.049774169921875,
0.0487060546875,
0.00344085693359375,
-0.02850341796875,
-0.0018815994262695312,
0.07598876953125,
0.0233001708984375,
-0.01458740234375,
-0.0185089111328125,
-0.00017380714416503906,
-0.029541015625,
0.03875732421875,
-0.035888671875,
-0.0033206939697265625,
-0.0308685302734375,
0.036468505859375,
-0.028167724609375,
0.006656646728515625,
0.0097808837890625,
-0.024658203125,
-0.048553466796875,
0.0439453125,
-0.010284423828125,
-0.03851318359375,
0.026123046875,
0.042572021484375,
0.03106689453125,
-0.0287017822265625,
-0.001068115234375,
-0.010711669921875,
-0.0204925537109375,
0.00045180320739746094,
0.0614013671875,
0.0120849609375,
0.036102294921875,
-0.0016794204711914062,
-0.06536865234375,
-0.042205810546875,
0.005947113037109375,
0.01079559326171875,
0.0419921875,
0.0263214111328125,
-0.007686614990234375,
0.01026153564453125,
0.00200653076171875,
-0.0252685546875,
0.0163116455078125,
-0.04669189453125,
-0.06048583984375,
-0.04559326171875,
0.05303955078125,
0.005199432373046875,
0.0582275390625,
-0.0296173095703125,
0.02532958984375,
0.06402587890625,
-0.025909423828125,
0.021148681640625,
0.057708740234375,
-0.004642486572265625,
-0.0055694580078125,
-0.004177093505859375,
-0.00754547119140625,
-0.005352020263671875,
0.0182647705078125,
0.04461669921875,
-0.0238189697265625,
-0.0335693359375,
-0.032958984375,
-0.07415771484375,
0.006130218505859375,
-0.04736328125,
0.01280975341796875,
0.019256591796875,
-0.045989990234375,
-0.0117340087890625,
0.049774169921875,
-0.061065673828125,
0.014251708984375,
0.0230255126953125,
-0.01236724853515625,
-0.0355224609375,
-0.0167236328125,
-0.0273284912109375,
-0.0285491943359375,
-0.061981201171875,
0.025970458984375,
-0.0102386474609375,
0.058074951171875,
0.053192138671875,
0.01064300537109375,
-0.0203094482421875,
-0.0028820037841796875,
-0.033843994140625,
0.026824951171875,
0.00798797607421875,
-0.01364898681640625,
-0.006359100341796875,
-0.01462554931640625,
-0.015869140625,
-0.00667572021484375,
-0.00182342529296875,
0.052154541015625,
0.045989990234375,
0.078857421875,
-0.024688720703125,
0.0291290283203125,
-0.031158447265625,
-0.0211944580078125,
-0.0181732177734375,
0.0413818359375,
0.041717529296875,
-0.0229339599609375,
0.030853271484375,
-0.040374755859375,
-0.01279449462890625,
0.0307769775390625,
-0.02691650390625,
-0.027069091796875,
0.025543212890625,
-0.07427978515625,
-0.03143310546875,
0.00603485107421875,
-0.001491546630859375,
-0.010833740234375,
0.0416259765625,
-0.058837890625,
0.01088714599609375,
0.08074951171875,
0.0301513671875,
0.004314422607421875,
0.00661468505859375,
-0.040313720703125,
-0.012481689453125,
0.07330322265625,
-0.01418304443359375,
-0.033721923828125,
-0.0218505859375,
-0.01433563232421875,
0.0113525390625,
-0.010345458984375,
-0.07098388671875,
0.0083160400390625,
0.009033203125,
-0.0181732177734375,
-0.036956787109375,
-0.07781982421875,
-0.0157470703125,
0.0276641845703125,
0.045654296875,
0.00193023681640625,
-0.03887939453125,
0.044586181640625,
-0.01526641845703125,
0.0556640625,
-0.0020751953125,
0.0079345703125,
0.032440185546875,
0.005126953125,
-0.0170745849609375,
0.046478271484375,
0.0103759765625,
-0.03875732421875,
-0.0146026611328125,
0.0034694671630859375,
0.0382080078125,
-0.0225830078125,
0.05413818359375,
0.0572509765625,
0.0164794921875,
-0.03302001953125,
0.041351318359375,
-0.0159759521484375,
0.043975830078125,
-0.02020263671875,
-0.0190277099609375,
0.0413818359375,
0.0028171539306640625,
0.0138702392578125,
0.0030422210693359375,
0.05633544921875,
0.032257080078125,
-0.057159423828125,
0.03173828125,
-0.0223541259765625,
-0.00469970703125,
0.017852783203125,
-0.027435302734375,
0.00952911376953125,
0.043609619140625,
-0.033111572265625,
-0.043670654296875,
-0.0706787109375,
-0.0187225341796875,
0.0223541259765625,
0.05853271484375,
-0.037628173828125,
-0.045867919921875,
-0.01262664794921875,
0.0135650634765625,
0.0386962890625,
0.006511688232421875,
0.0511474609375,
0.071044921875,
0.06890869140625,
-0.03741455078125,
-0.0165557861328125,
-0.03924560546875,
-0.052459716796875,
-0.0220947265625,
-0.00673675537109375,
0.0240325927734375,
-0.005939483642578125,
0.021636962890625,
-0.01044464111328125,
-0.0016078948974609375,
0.050994873046875,
0.0202178955078125,
-0.023529052734375,
0.0227203369140625,
0.0117340087890625,
-0.04132080078125,
0.022674560546875,
0.02899169921875,
-0.0242462158203125,
0.035675048828125,
-0.081787109375,
-0.0006442070007324219,
0.032440185546875,
0.0885009765625,
-0.056640625,
-0.0704345703125,
-0.03851318359375,
-0.038177490234375,
0.025848388671875,
0.023040771484375,
-0.0171051025390625,
-0.064453125,
0.038970947265625,
0.05352783203125,
-0.0606689453125,
-0.0060577392578125,
0.0072174072265625,
-0.018341064453125,
-0.0178375244140625,
-0.00519561767578125,
-0.068115234375,
-0.0350341796875,
-0.042816162109375,
0.01447296142578125,
-0.03448486328125,
-0.0447998046875,
0.053009033203125,
-0.002704620361328125,
0.01251220703125,
-0.048126220703125,
0.022369384765625,
-0.0184173583984375,
0.0012674331665039062,
0.03387451171875,
-0.0249786376953125,
0.056976318359375,
-0.045806884765625,
-0.01245880126953125,
0.0261993408203125,
-0.016143798828125,
0.04266357421875,
-0.0419921875,
0.0241546630859375,
0.0168304443359375,
-0.00072479248046875,
-0.0291290283203125,
0.029296875,
-0.019744873046875,
0.0693359375,
0.059600830078125,
-0.057098388671875,
0.030853271484375,
-0.0285491943359375,
0.08770751953125,
-0.007350921630859375,
-0.00870513916015625,
0.0153961181640625,
-0.023406982421875,
-0.0196685791015625,
-0.04058837890625,
0.02239990234375,
0.042266845703125,
-0.0030307769775390625,
0.0184478759765625,
-0.0170440673828125,
0.021331787109375,
-0.040740966796875,
-0.00716400146484375,
0.06158447265625,
-0.024200439453125,
0.03546142578125,
-0.038818359375,
-0.01409149169921875,
0.062225341796875,
0.01210784912109375,
-0.033050537109375,
0.01702880859375,
-0.0305328369140625,
0.024261474609375,
-0.03338623046875,
0.040283203125,
0.00823211669921875,
-0.032257080078125,
-0.02166748046875,
0.0457763671875,
-0.0069427490234375,
-0.038787841796875,
-0.05694580078125,
0.0025043487548828125,
-0.013031005859375,
0.0251007080078125,
0.01247406005859375,
0.04248046875,
0.039642333984375,
-0.031707763671875,
-0.057281494140625,
0.036834716796875,
-0.0224456787109375,
0.0703125,
-0.03570556640625,
-0.0167999267578125,
-0.0036258697509765625,
-0.00621795654296875,
0.0372314453125,
0.00850677490234375,
-0.048797607421875,
0.0140533447265625,
-0.00661468505859375,
-0.004444122314453125,
-0.038330078125,
0.051971435546875,
-0.0166015625,
-0.0024394989013671875,
0.0321044921875,
0.050018310546875,
0.021881103515625,
-0.046844482421875,
-0.03619384765625,
-0.0180816650390625,
-0.0399169921875,
0.0116119384765625,
0.030059814453125,
0.029876708984375,
0.0028209686279296875,
-0.01373291015625,
-0.07147216796875,
0.00762939453125,
0.002910614013671875,
0.01190185546875,
-0.037933349609375,
-0.00811767578125,
-0.033660888671875,
0.035736083984375,
0.01776123046875,
0.034210205078125,
-0.039520263671875,
-0.0439453125,
-0.01319122314453125,
0.031280517578125,
0.00717926025390625,
-0.043853759765625,
-0.05224609375,
0.0073089599609375,
0.03668212890625,
0.00739288330078125,
0.00038313865661621094,
0.01039886474609375,
-0.007640838623046875,
-0.0293426513671875,
0.054107666015625,
-0.004344940185546875,
0.00958251953125,
-0.00572967529296875,
-0.01218414306640625,
0.060394287109375,
0.0096893310546875,
-0.020263671875,
-0.017730712890625,
-0.033538818359375,
-0.0209503173828125,
0.03240966796875,
-0.0304718017578125,
0.0070648193359375,
0.0246734619140625,
-0.033660888671875,
-0.012481689453125,
0.0164337158203125,
0.009002685546875,
-0.0421142578125,
0.0303497314453125,
-0.045196533203125,
-0.01250457763671875,
-0.0177001953125,
-0.0294952392578125,
0.07794189453125,
-0.03619384765625,
-0.036041259765625,
-0.06719970703125,
0.0244293212890625,
0.0135040283203125,
-0.031982421875,
-0.037872314453125,
0.034027099609375,
0.05267333984375,
-0.04803466796875,
-0.054107666015625,
-0.00936126708984375,
0.0157318115234375,
0.049713134765625,
-0.024139404296875,
-0.01157379150390625,
-0.005214691162109375,
0.045074462890625,
-0.04107666015625,
0.0074615478515625,
-0.06671142578125,
0.03643798828125,
0.05255126953125,
0.0253448486328125,
-0.00801849365234375,
-0.0289154052734375,
0.04302978515625,
0.05792236328125,
0.037506103515625,
-0.08294677734375,
-0.03387451171875,
0.002887725830078125,
0.03326416015625,
0.057525634765625,
0.007572174072265625,
-0.068359375,
-0.0167694091796875,
0.046356201171875,
0.04254150390625,
0.03070068359375,
-0.004985809326171875,
-0.062042236328125,
-0.0233154296875,
-0.01445770263671875,
-0.059967041015625,
-0.07135009765625,
0.02008056640625,
0.0391845703125,
0.023345947265625,
0.0272979736328125,
0.042022705078125,
0.02392578125,
-0.03973388671875,
-0.002887725830078125,
-0.017303466796875,
0.054534912109375,
0.0202484130859375,
0.01250457763671875,
0.0219879150390625,
0.04937744140625,
0.0013484954833984375,
0.01239776611328125,
0.00751495361328125,
-0.05487060546875,
0.007904052734375,
-0.0188140869140625,
0.027740478515625,
-0.0310821533203125,
-0.0836181640625,
-0.0322265625,
-0.0193328857421875,
-0.006969451904296875,
-0.046661376953125,
-0.0199127197265625,
-0.034820556640625,
-0.0072174072265625,
0.0280303955078125,
-0.01299285888671875,
-0.06549072265625,
0.04339599609375,
0.0008816719055175781,
-0.025390625,
0.010955810546875,
-0.0738525390625,
-0.08038330078125,
-0.037506103515625,
-0.05084228515625,
0.00478363037109375,
-0.0308074951171875,
0.0341796875,
0.0202789306640625,
-0.0006628036499023438,
-0.01380157470703125,
0.0225982666015625,
0.048248291015625,
0.03009033203125,
0.0102691650390625,
0.041168212890625,
0.06646728515625,
0.046905517578125,
0.004467010498046875,
-0.00684356689453125,
-0.021270751953125,
-0.0465087890625,
-0.016845703125,
-0.005092620849609375,
-0.01081085205078125,
0.01148223876953125,
-0.048065185546875,
-0.01441192626953125,
0.04327392578125,
-0.04278564453125,
0.0455322265625,
0.0266265869140625,
0.0083465576171875,
0.040191650390625,
-0.01165008544921875,
0.02252197265625,
0.039581298828125,
-0.00030159950256347656,
0.0041351318359375,
0.03778076171875,
0.04150390625,
0.01427459716796875,
-0.0596923828125,
0.0299835205078125,
0.0100860595703125,
-0.0258941650390625,
-0.0419921875,
-0.068603515625,
0.01332855224609375,
-0.0037136077880859375,
-0.033050537109375,
0.04205322265625,
0.0013904571533203125,
-0.03277587890625,
0.00923919677734375,
0.041259765625,
0.046661376953125,
0.041046142578125,
0.051361083984375,
0.0054473876953125,
0.0149383544921875,
-0.01134490966796875,
0.0223846435546875,
0.02301025390625,
-0.039703369140625,
-0.004383087158203125,
-0.0010776519775390625,
-0.0124664306640625,
-0.01085662841796875,
-0.01001739501953125,
-0.01374053955078125,
0.04071044921875,
-0.003299713134765625,
-0.0086517333984375,
0.0357666015625,
0.06634521484375,
0.047637939453125,
0.0819091796875,
0.018829345703125,
-0.0595703125,
0.04986572265625,
-0.04656982421875,
0.0538330078125,
0.0276947021484375,
-0.0198516845703125,
-0.040863037109375,
-0.0191497802734375,
-0.034332275390625,
0.0239105224609375,
-0.038909912109375,
-0.0044708251953125,
-0.021453857421875,
-0.0174407958984375,
-0.047088623046875,
-0.0166778564453125,
-0.04669189453125,
-0.050994873046875,
-0.03619384765625,
0.024871826171875,
-0.006862640380859375,
0.0217742919921875,
-0.0191650390625,
-0.04974365234375,
-0.039764404296875,
-0.0165252685546875,
0.0183868408203125,
0.018524169921875,
0.02520751953125,
-0.00847625732421875,
-0.0181884765625,
0.034942626953125,
0.004299163818359375,
-0.01806640625,
0.018951416015625,
0.0211639404296875,
-0.01552581787109375,
0.0225067138671875,
0.0187225341796875,
-0.04425048828125,
-0.052520751953125,
0.05780029296875,
0.0283355712890625,
-0.031890869140625,
0.0032958984375,
-0.0171356201171875,
-0.0538330078125,
-0.00916290283203125,
-0.03961181640625,
0.016998291015625,
0.02862548828125,
0.0552978515625,
0.039825439453125,
-0.0016736984252929688,
-0.018157958984375,
0.00119781494140625,
0.04681396484375,
0.0264129638671875,
0.016998291015625,
0.0232086181640625,
-0.00568389892578125,
0.0249786376953125,
0.041534423828125,
0.0171966552734375,
0.0228118896484375,
0.0323486328125,
0.060150146484375,
0.031585693359375,
0.05450439453125,
0.006099700927734375,
-0.022705078125,
-0.01486968994140625,
-0.0182952880859375,
0.01280975341796875,
0.06036376953125,
0.045379638671875,
-0.0179290771484375,
0.01303863525390625,
0.0007128715515136719,
0.027801513671875,
-0.040802001953125,
0.0220794677734375,
0.013214111328125,
-0.043182373046875,
-0.014495849609375,
0.0185394287109375,
-0.048309326171875,
0.021942138671875,
-0.0232391357421875,
-0.03564453125,
0.046783447265625,
-0.0304718017578125,
0.038330078125,
0.0175933837890625,
-0.0662841796875,
-0.0037994384765625,
-0.042633056640625,
-0.05047607421875,
0.014862060546875,
-0.01739501953125,
0.0194091796875,
-0.0186920166015625,
-0.007526397705078125,
0.0286102294921875,
-0.02215576171875,
0.01806640625,
0.0021648406982421875,
-0.0107269287109375,
-0.005950927734375,
-0.0298004150390625,
-0.05078125,
-0.0180206298828125,
-0.040679931640625,
-0.0244140625,
-0.0266876220703125,
-0.0435791015625,
0.01157379150390625,
0.09210205078125,
-0.0064849853515625,
-0.0308380126953125,
0.0438232421875,
-0.0379638671875,
-0.050811767578125,
0.002223968505859375,
-0.028228759765625,
0.02569580078125,
0.0135955810546875,
0.020477294921875,
-0.050445556640625,
-0.01216888427734375,
0.0611572265625,
0.031524658203125,
-0.0166473388671875,
0.0149688720703125,
-0.035858154296875,
0.05096435546875,
-0.0257720947265625,
-0.060211181640625,
-0.006984710693359375,
-0.01262664794921875,
-0.045623779296875,
0.01434326171875,
0.02545166015625,
-0.0203857421875,
-0.0002830028533935547,
-0.03173828125,
-0.0246429443359375,
0.0114593505859375,
0.06231689453125,
-0.0238800048828125,
-0.0291748046875,
-0.01488494873046875,
0.035980224609375,
0.01395416259765625,
-0.0006871223449707031,
0.049346923828125,
0.007572174072265625,
-0.01079559326171875,
-0.0239410400390625,
-0.0216522216796875,
0.03155517578125,
0.03912353515625,
-0.02264404296875,
0.0166473388671875,
-0.01236724853515625,
-0.065673828125,
-0.06658935546875,
0.0228118896484375,
-0.06988525390625,
-0.0291748046875,
0.046478271484375,
0.036956787109375,
-0.0150604248046875,
0.0163116455078125,
0.01849365234375,
0.04840087890625,
0.042388916015625,
-0.0003752708435058594,
0.0010232925415039062,
-0.0218353271484375,
0.01064300537109375,
-0.031402587890625,
-0.01062774658203125,
-0.001979827880859375,
0.04168701171875,
0.051116943359375,
-0.0384521484375,
-0.005199432373046875,
0.01555633544921875,
-0.057403564453125,
0.0153045654296875,
-0.00665283203125,
-0.0185546875,
0.01090240478515625,
-0.029449462890625,
-0.056976318359375,
-0.0285491943359375,
-0.0021495819091796875,
-0.024627685546875,
0.00013744831085205078,
-0.0222320556640625,
0.0234375,
-0.031463623046875,
-0.0152740478515625,
0.027496337890625,
0.0239410400390625,
0.06005859375,
0.05560302734375,
0.008697509765625,
0.041015625,
-0.05548095703125,
0.0194549560546875,
-0.013397216796875,
0.0408935546875,
0.018646240234375,
-0.0086517333984375,
-0.01448822021484375,
0.021728515625,
0.0389404296875,
-0.037200927734375,
-0.038787841796875,
0.047149658203125,
0.021453857421875,
0.0272979736328125,
0.004268646240234375,
0.00811767578125,
-0.033538818359375,
0.025390625,
-0.01446533203125,
-0.03173828125,
0.0250396728515625,
0.01007843017578125,
0.0023040771484375,
-0.01055145263671875,
-0.0066375732421875,
0.0096435546875,
-0.029632568359375,
-0.06427001953125,
0.01409149169921875,
0.01552581787109375,
0.0037479400634765625,
-0.0270843505859375,
-0.033447265625,
0.016326904296875,
0.01568603515625,
0.0161590576171875,
-0.037384033203125,
0.021087646484375,
-0.038360595703125,
-0.0008525848388671875,
0.0377197265625,
-0.006290435791015625,
0.0310516357421875,
-0.0002930164337158203,
0.0214080810546875,
0.0296478271484375,
0.01203155517578125,
0.0648193359375,
-0.0034084320068359375,
0.01248931884765625,
-0.038360595703125,
0.02105712890625,
-0.02752685546875,
-0.0193023681640625,
-0.030303955078125,
-0.0301513671875,
-0.00519561767578125,
-0.015716552734375,
-0.007076263427734375,
-0.01384735107421875,
0.0196685791015625,
-0.023223876953125,
-0.051239013671875,
-0.0615234375,
0.00843048095703125,
-0.044891357421875,
0.00998687744140625,
0.0012140274047851562,
-0.0072479248046875,
0.01971435546875,
0.0687255859375,
0.01291656494140625,
-0.0343017578125,
-0.01172637939453125,
-0.0113525390625,
0.051727294921875,
0.0272979736328125,
-0.0173187255859375,
0.034423828125,
0.00550079345703125,
-0.07562255859375,
-0.0209503173828125,
-0.05133056640625,
-0.055938720703125,
-0.02960205078125,
-0.032501220703125,
-0.024200439453125,
0.04718017578125,
-0.042510986328125,
-0.0250701904296875,
-0.016082763671875,
0.001224517822265625,
-0.03717041015625,
-0.0222930908203125,
-0.0204925537109375,
0.01467132568359375,
0.0188140869140625,
0.009552001953125,
-0.044525146484375,
-0.01064300537109375,
-0.0494384765625,
-0.021331787109375,
-0.0108489990234375,
-0.050628662109375,
0.0247039794921875,
-0.0036296844482421875,
-0.031280517578125,
0.00475311279296875,
0.02392578125,
-0.0096588134765625,
-0.04266357421875,
0.031646728515625,
0.0253143310546875,
-0.049163818359375,
0.0119476318359375,
0.04962158203125,
0.0306854248046875,
-0.0082244873046875,
-0.0102386474609375,
-0.048553466796875,
-0.0260162353515625,
-0.0176544189453125,
0.0286102294921875,
0.0258331298828125,
-0.02410888671875,
-0.0239105224609375,
0.046295166015625,
0.036956787109375,
-0.0426025390625,
0.04144287109375,
-0.0179595947265625,
-0.036865234375,
-0.0244140625,
0.0296173095703125,
-0.01385498046875,
0.03753662109375,
0.0171966552734375,
0.0029506683349609375,
0.017303466796875,
0.030853271484375,
-0.036163330078125,
0.00968170166015625,
-0.0290985107421875,
0.042724609375,
0.031585693359375,
-0.0090179443359375,
0.00852203369140625,
0.031951904296875,
-0.037384033203125,
-0.0167083740234375,
-0.00261688232421875,
-0.04345703125,
0.0382080078125,
-0.036834716796875,
0.00989532470703125,
0.035125732421875,
-0.033843994140625,
-0.046783447265625,
0.0307159423828125,
0.05352783203125,
0.0009775161743164062,
0.00563812255859375,
-0.00809478759765625,
0.031982421875,
-0.017913818359375,
-0.0247955322265625,
0.039276123046875,
-0.0170440673828125,
-0.04425048828125,
0.027008056640625,
-0.03363037109375,
0.01409149169921875,
0.040069580078125,
0.018218994140625,
-0.037261962890625,
-0.037445068359375,
0.035797119140625,
0.029632568359375,
0.0273284912109375,
-0.049224853515625,
-0.049468994140625,
-0.0197296142578125,
0.029083251953125,
-0.00847625732421875,
0.0221710205078125,
-0.0290374755859375,
-0.0225067138671875,
0.0014133453369140625,
-0.0291748046875,
-0.028106689453125,
-0.04693603515625,
0.04052734375,
-0.01282501220703125,
0.03265380859375,
-0.03863525390625,
0.03424072265625,
-0.034454345703125,
0.038848876953125,
0.0191192626953125,
-0.0174560546875,
0.03851318359375,
-0.041046142578125,
0.0130157470703125,
-0.009521484375,
0.043548583984375,
-0.0221099853515625,
-0.0113372802734375,
-0.0193328857421875,
0.0064239501953125,
0.01050567626953125,
0.0009589195251464844,
-0.0225372314453125,
-0.04315185546875,
-0.018768310546875,
0.00958251953125,
-0.0187835693359375,
0.004215240478515625,
-0.02655029296875,
-0.042999267578125,
0.0220184326171875,
-0.0195770263671875,
0.0491943359375,
0.015777587890625,
0.0009083747863769531,
-0.03912353515625,
-0.0216064453125,
0.01453399658203125,
-0.013214111328125,
0.00145721435546875,
-0.040679931640625,
0.02069091796875,
-0.0155792236328125,
-0.035064697265625,
-0.03167724609375,
0.01678466796875,
-0.04168701171875,
-0.00035834312438964844,
-0.04656982421875,
0.05035400390625,
-0.015594482421875,
-0.01126861572265625,
-0.0290679931640625,
0.04510498046875,
0.02874755859375,
0.0306854248046875,
0.016326904296875,
0.0212249755859375,
0.0404052734375,
0.0401611328125,
0.037353515625,
-0.0212860107421875,
0.0161895751953125,
0.041900634765625,
0.01155853271484375,
0.00734710693359375,
-0.0205535888671875,
0.0418701171875,
-0.01861572265625,
0.03240966796875,
0.047882080078125,
0.04949951171875,
0.0443115234375,
0.046417236328125,
-0.0201416015625,
0.024627685546875,
0.04278564453125,
-0.04412841796875,
-0.04229736328125,
0.024627685546875,
-0.01081085205078125,
0.017974853515625,
0.044281005859375,
0.0181121826171875,
0.02880859375,
-0.044403076171875,
-0.00033664703369140625,
-0.0297393798828125,
-0.00841522216796875,
-0.0214385986328125,
0.052886962890625,
-0.00244903564453125,
-0.043914794921875,
-0.0242156982421875,
0.0261993408203125,
0.037628173828125,
0.047698974609375,
0.00942230224609375,
0.0103302001953125,
0.03387451171875,
0.006084442138671875,
-0.04266357421875,
0.043487548828125,
-0.00414276123046875,
0.047698974609375,
0.00540924072265625,
-0.03424072265625,
-0.04803466796875,
-0.0269012451171875,
0.0029888153076171875,
-0.051971435546875,
0.00466156005859375,
-0.004833221435546875,
0.04229736328125,
-0.034271240234375,
-0.03521728515625,
-0.044677734375,
-0.0257415771484375,
-0.054840087890625,
-0.03961181640625,
-0.015350341796875,
-0.047119140625,
-0.03521728515625,
-0.0158843994140625,
-0.017822265625,
0.041717529296875,
0.041717529296875,
0.00586700439453125,
0.031768798828125,
-0.0103607177734375,
-0.0085296630859375,
0.0116424560546875,
-0.003726959228515625,
-0.0266876220703125,
0.01151275634765625,
0.01140594482421875,
0.01384735107421875,
0.0026760101318359375,
-0.050140380859375,
0.04254150390625,
0.01074981689453125,
0.030792236328125,
-0.037078857421875,
0.01271820068359375,
-0.04345703125,
0.00740814208984375,
-0.02325439453125,
0.020965576171875,
-0.01175689697265625,
-0.0210113525390625,
-0.0309600830078125,
0.0450439453125,
0.038360595703125,
-0.023284912109375,
0.038177490234375,
-0.052337646484375,
0.00516510009765625,
0.033294677734375,
0.032562255859375,
-0.04473876953125,
0.034271240234375,
-0.0268096923828125,
-0.004467010498046875,
0.001934051513671875,
-0.03228759765625,
-0.02947998046875,
0.007083892822265625,
0.04498291015625,
-0.035186767578125,
0.0059814453125,
-0.0243682861328125,
0.0297698974609375,
-0.051605224609375,
0.03851318359375,
0.054779052734375,
0.004329681396484375,
-0.044403076171875,
0.0011749267578125,
0.010101318359375,
0.0191802978515625,
0.00505828857421875,
-0.0079498291015625,
-0.047515869140625,
0.0487060546875,
0.01107025146484375,
-0.010833740234375,
0.04791259765625,
-0.0192108154296875,
0.024383544921875,
0.00516510009765625,
0.03125,
-0.0310211181640625,
-0.04296875,
-0.036285400390625,
0.004669189453125,
-0.00780487060546875,
-0.019317626953125,
-0.0162506103515625,
-0.035125732421875,
0.0181427001953125,
-0.03289794921875,
-0.0033245086669921875,
0.042022705078125,
-0.00719451904296875,
-0.0300750732421875,
0.00844573974609375,
0.02764892578125,
0.00768280029296875,
0.02349853515625,
-0.0352783203125,
-0.0523681640625,
0.04022216796875,
0.033203125,
-0.003116607666015625,
-0.004261016845703125,
-0.030548095703125,
0.023834228515625,
-0.02447509765625,
0.041900634765625,
-0.0097503662109375,
0.0081634521484375,
-0.0181427001953125,
0.049072265625,
-0.03790283203125,
-0.022125244140625,
-0.046661376953125,
0.031005859375,
-0.039215087890625,
-0.0350341796875,
-0.0169219970703125,
0.027984619140625,
0.04766845703125,
-0.0289306640625,
-0.01540374755859375,
-0.0222015380859375,
0.013702392578125,
0.040985107421875,
0.042633056640625,
0.0195465087890625,
-0.0162353515625,
-0.016693115234375,
0.0229339599609375,
0.0484619140625,
0.0129852294921875,
0.019744873046875,
-2.7000904083251953e-05,
0.0389404296875,
0.02301025390625,
0.035797119140625,
-0.0440673828125,
0.031524658203125,
0.00684356689453125,
-0.0277862548828125,
-0.04241943359375,
-0.033233642578125,
0.029022216796875,
0.005260467529296875,
0.025665283203125,
0.0225677490234375,
0.00962066650390625,
-0.01800537109375,
0.042236328125,
-0.052001953125,
0.03253173828125,
-0.0262451171875,
-0.0165557861328125,
0.0325927734375,
0.012176513671875,
-0.013092041015625,
0.044403076171875,
0.00350189208984375,
-0.013427734375,
-0.00011169910430908203,
0.005779266357421875,
-0.0031871795654296875,
0.0209808349609375,
0.032135009765625,
0.0011196136474609375,
-0.01282501220703125,
-0.02056884765625,
0.0343017578125,
-0.01215362548828125,
0.0022716522216796875,
-0.0260162353515625,
-0.0276336669921875,
0.002773284912109375,
0.050384521484375,
0.015625,
-0.0499267578125,
0.021392822265625,
0.0296783447265625,
0.020172119140625,
0.023712158203125,
-0.0262908935546875,
0.010345458984375,
-0.0080718994140625,
0.01439666748046875,
0.03912353515625,
0.048370361328125,
0.010589599609375,
0.04815673828125,
0.048126220703125,
0.00482940673828125,
0.017120361328125,
-0.0178985595703125,
0.03607177734375,
-0.049285888671875,
0.00928497314453125,
-0.0288543701171875,
-0.023834228515625,
0.0193939208984375,
-0.017852783203125,
-0.044921875,
0.021881103515625,
-0.037994384765625,
-0.0072174072265625,
0.00335693359375,
0.0306549072265625,
0.0085296630859375,
0.0265655517578125,
-0.0127716064453125,
-0.028472900390625,
0.017791748046875,
0.016510009765625,
-0.00917816162109375,
-0.01268768310546875,
-0.03314208984375,
-0.003875732421875,
-0.0144500732421875,
-0.00792694091796875,
-0.0264129638671875,
-0.03814697265625,
0.02520751953125,
-0.033355712890625,
0.007022857666015625,
0.0142822265625,
0.0262298583984375,
0.006572723388671875,
0.048004150390625,
-0.0040740966796875,
-0.038909912109375,
-0.031890869140625,
0.0023956298828125,
0.034088134765625,
-0.0014553070068359375,
0.046356201171875,
0.005764007568359375,
0.024871826171875,
0.030792236328125,
-0.0240936279296875,
-0.0185089111328125,
-0.02313232421875,
0.017608642578125,
-0.012420654296875,
0.0382080078125,
-0.0308380126953125,
-0.0005135536193847656,
0.020599365234375,
-0.003749847412109375,
0.050750732421875,
0.019622802734375,
-0.04254150390625,
0.0308990478515625,
0.0099639892578125,
-0.025634765625,
-0.02032470703125,
0.00899505615234375,
-0.0316162109375,
0.005390167236328125,
-0.02825927734375,
-0.02923583984375,
-0.036407470703125,
-0.047760009765625,
0.0400390625,
-0.00879669189453125,
-0.053741455078125,
-0.0452880859375,
-0.0210723876953125,
0.0316162109375,
0.006214141845703125,
0.01284027099609375,
0.01081085205078125,
-0.0014820098876953125,
-0.01085662841796875,
-0.04388427734375,
0.0258026123046875,
0.02734375,
-0.037017822265625,
-0.0107879638671875,
-0.0004837512969970703,
0.0017290115356445312,
-0.045166015625,
0.01727294921875,
0.02630615234375,
-0.05169677734375,
0.006378173828125,
0.011566162109375,
-0.046539306640625,
-0.046722412109375,
0.0333251953125,
0.035430908203125,
-0.02398681640625,
-0.03143310546875,
0.0019664764404296875,
-0.0056915283203125,
-0.0271148681640625,
-0.046417236328125,
0.007755279541015625,
0.0262603759765625,
-0.0167236328125,
0.040069580078125,
-0.0361328125,
-0.044708251953125,
0.03411865234375,
0.048583984375,
0.0030956268310546875,
-0.045166015625,
0.044281005859375,
0.00897979736328125,
0.00023674964904785156,
0.0168609619140625,
0.0250244140625,
-0.0426025390625,
0.023895263671875,
-0.0172271728515625,
-0.014190673828125,
0.0203857421875,
-0.00937652587890625,
-0.02294921875,
0.01490020751953125,
0.0124359130859375,
0.043609619140625,
0.0127716064453125,
-0.0201568603515625,
-0.046478271484375,
-0.0089263916015625,
0.005840301513671875,
-0.04534912109375,
0.045318603515625,
-0.0036945343017578125,
0.0301971435546875,
-0.01343536376953125,
-0.0423583984375,
-0.019195556640625,
-0.045867919921875,
-0.031707763671875,
0.04827880859375,
0.027099609375,
-0.0333251953125,
0.00888824462890625,
0.02386474609375,
-0.0271759033203125,
0.043487548828125,
-0.0011997222900390625,
0.00927734375,
0.020599365234375,
-0.03778076171875,
-0.01030731201171875,
0.0181732177734375,
0.017608642578125,
-0.008758544921875,
-0.0506591796875,
0.0031795501708984375,
-0.005146026611328125,
0.0208587646484375,
-0.0221099853515625,
0.0155029296875,
0.0107421875,
-0.0207977294921875,
0.006557464599609375,
0.040130615234375,
-0.0156402587890625,
-0.0077667236328125,
-0.0258331298828125,
0.0028591156005859375,
0.0276031494140625,
0.0167694091796875,
0.021392822265625,
-0.020233154296875,
-0.040802001953125,
-0.038299560546875,
-0.0047760009765625,
-0.0005826950073242188,
0.0016164779663085938,
-0.04541015625,
-0.041290283203125,
0.0140838623046875,
-0.00152587890625,
-0.006252288818359375,
-0.00457763671875,
0.0240631103515625,
-0.035003662109375,
0.00788116455078125,
0.01528167724609375,
0.031951904296875,
0.0290069580078125,
-0.0211639404296875,
-0.05047607421875,
0.042236328125,
0.044708251953125,
-0.03643798828125,
0.0335693359375,
-0.018890380859375,
0.0152740478515625,
0.00730133056640625,
-0.017730712890625,
-0.045745849609375,
-0.050750732421875,
-0.006565093994140625,
-0.043212890625,
0.030426025390625,
-0.01300811767578125,
-0.035736083984375,
0.00823211669921875,
-0.04248046875,
0.0389404296875,
-0.0260467529296875,
0.00670623779296875,
0.030303955078125,
-0.0277099609375,
-0.041961669921875,
0.0248870849609375,
-0.014739990234375,
-0.0097808837890625,
0.0254974365234375,
0.0249786376953125,
0.034820556640625,
-0.040679931640625,
-0.0036220550537109375,
0.038055419921875,
0.01245880126953125,
0.0216827392578125,
-0.028228759765625,
0.004650115966796875,
0.0196990966796875,
0.0245819091796875,
-0.0101470947265625,
0.04248046875,
-0.042694091796875,
-0.018035888671875,
-0.00246429443359375,
0.043426513671875,
0.04010009765625,
-0.0183258056640625,
-0.032958984375,
-0.03399658203125,
-0.01171112060546875,
0.0193023681640625,
-0.0205841064453125,
-0.02447509765625,
0.0264739990234375,
0.0014867782592773438,
-0.032989501953125,
-0.0075836181640625,
-0.0416259765625,
-0.0112762451171875,
-0.006832122802734375,
-0.045379638671875,
0.0235137939453125,
0.00423431396484375,
0.0169830322265625,
0.04180908203125,
0.02960205078125,
-0.0406494140625,
0.01904296875,
-0.0198974609375,
0.044158935546875,
-0.040313720703125,
-0.0163116455078125,
-0.029266357421875,
-0.003932952880859375,
-0.04425048828125,
0.0001049041748046875,
-0.0061492919921875,
-0.004993438720703125,
-0.01336669921875,
0.025848388671875,
0.0029926300048828125,
-0.040283203125,
0.0299224853515625,
-0.0118560791015625,
-0.025238037109375,
-0.0008950233459472656,
0.0204925537109375,
-0.0278167724609375,
-0.004192352294921875,
-0.0102386474609375,
0.022003173828125,
0.04620361328125,
0.012359619140625,
-0.02020263671875,
0.041595458984375,
0.00679779052734375,
0.0260772705078125,
-0.005512237548828125,
0.01318359375,
0.045135498046875,
-0.017120361328125,
0.00982666015625,
0.028533935546875,
0.044219970703125,
0.00724029541015625,
-0.02960205078125,
-0.026275634765625,
0.0158233642578125,
-0.00730133056640625,
-0.0209197998046875,
-0.0193023681640625,
0.02252197265625,
0.038421630859375,
0.006160736083984375,
0.0092620849609375,
0.043060302734375,
-0.0011320114135742188,
-0.00914764404296875,
-0.042236328125,
-0.042724609375,
0.01824951171875,
0.01155853271484375,
0.016387939453125,
0.0191192626953125,
0.04583740234375,
0.0200042724609375,
-0.0030727386474609375,
0.048553466796875,
-0.010589599609375,
0.007625579833984375,
0.0067291259765625,
0.0138092041015625,
-0.0306243896484375,
-0.02691650390625,
-0.01971435546875,
0.0009417533874511719,
-0.007843017578125,
-0.024627685546875,
0.04315185546875,
-0.00605010986328125,
0.00543212890625,
-0.0029087066650390625,
-0.0095977783203125,
-0.0216064453125,
0.0034084320068359375,
0.0300140380859375,
0.042694091796875,
-0.04071044921875,
-0.0161285400390625,
0.021942138671875,
-0.0032711029052734375,
-0.0275115966796875,
0.01629638671875,
0.005741119384765625,
-0.019744873046875,
0.0236663818359375,
-0.0396728515625,
0.033477783203125,
-0.013397216796875,
0.0064544677734375,
-0.0341796875,
0.00951385498046875,
-0.01171112060546875,
-0.02008056640625,
0.044647216796875,
0.00846099853515625,
0.03021240234375,
-0.020355224609375,
-0.0010423660278320312,
-0.034576416015625,
-0.025848388671875,
-0.051666259765625,
0.020416259765625,
-0.05047607421875,
0.0276947021484375,
-0.0177001953125,
0.04217529296875,
0.03228759765625,
0.0269927978515625,
0.04901123046875,
0.045928955078125,
-0.031585693359375,
0.00421905517578125,
0.038818359375,
-0.0137786865234375,
-0.0294342041015625,
-0.0237884521484375,
-0.0125579833984375,
0.01947021484375,
-0.0311279296875,
0.0132904052734375,
-0.03314208984375,
-0.017486572265625,
-0.045166015625,
0.01123809814453125,
0.03948974609375,
0.006679534912109375,
0.0243988037109375,
-0.04827880859375,
-0.057373046875,
0.0268402099609375,
0.0386962890625,
0.0089111328125,
0.0231170654296875,
-0.0291595458984375,
0.005123138427734375,
-0.0283355712890625,
0.0280914306640625,
0.0254974365234375,
-0.0006041526794433594,
0.067138671875,
-0.0217132568359375,
0.0058746337890625,
0.035675048828125,
0.0098724365234375,
0.0189208984375,
-0.00597381591796875,
0.031280517578125,
0.03912353515625,
-0.01593017578125,
-0.043426513671875,
-0.04364013671875,
-0.050018310546875,
0.045501708984375,
0.06097412109375,
-0.00039315223693847656,
-0.0204620361328125,
-0.00817108154296875,
0.01178741455078125,
0.03558349609375,
-0.04156494140625,
0.0300140380859375,
-0.021209716796875,
-0.0197906494140625,
-0.034423828125,
-0.0126495361328125,
-0.048004150390625,
-0.030059814453125,
9.554624557495117e-05,
-0.032073974609375,
0.0265655517578125,
0.00493621826171875,
-0.01273345947265625,
-0.0175323486328125,
0.0189666748046875,
-0.007678985595703125,
0.0255126953125,
0.00914764404296875,
0.03863525390625,
-0.03656005859375,
-0.04107666015625,
-0.007350921630859375,
0.04803466796875,
0.005649566650390625,
0.01302337646484375,
-0.06878662109375,
-0.04681396484375,
-0.061859130859375,
-0.045623779296875,
-0.0653076171875,
-0.048431396484375,
-0.006114959716796875,
-0.027069091796875,
-0.022491455078125,
0.062103271484375,
0.0013360977172851562,
0.05572509765625,
-0.017822265625,
0.0440673828125,
-0.01520538330078125,
0.01183319091796875,
0.00848388671875,
0.0328369140625,
0.038726806640625,
-0.0182647705078125,
0.028167724609375,
0.02081298828125,
-0.036865234375,
0.0330810546875,
-0.03594970703125,
0.031951904296875,
-0.00409698486328125,
-0.0169830322265625,
-0.033660888671875,
-0.004543304443359375,
-0.045654296875,
-0.033233642578125,
-0.0170745849609375,
0.033050537109375,
0.012786865234375,
-0.0132293701171875,
-0.002285003662109375,
0.03466796875,
-0.03851318359375,
0.03668212890625,
-0.01654052734375,
0.037689208984375,
0.0174102783203125,
-0.0197296142578125,
-0.037628173828125,
-0.0117950439453125,
-0.01140594482421875,
0.050262451171875,
0.0211029052734375,
0.037689208984375,
-0.015869140625,
-0.0243682861328125,
0.04058837890625,
-0.006366729736328125,
0.04638671875,
0.0301666259765625,
0.0210113525390625,
-0.007354736328125,
0.04815673828125,
0.04766845703125,
-0.0138397216796875,
-0.0222625732421875,
-0.0418701171875,
0.044403076171875,
-0.044647216796875,
-0.003387451171875,
0.013916015625,
0.036041259765625,
0.01543426513671875,
-0.045013427734375,
0.037689208984375,
-0.02239990234375,
-0.0031986236572265625,
0.0270538330078125,
-0.049468994140625,
-0.046875,
0.0229339599609375,
-0.04443359375,
-0.0281982421875,
-0.059417724609375,
0.01568603515625,
-0.0009379386901855469,
0.047027587890625,
-0.04205322265625,
0.0313720703125,
-0.0291900634765625,
-0.05230712890625,
0.00942230224609375,
0.02154541015625,
0.01371002197265625,
0.004901885986328125,
-0.002872467041015625,
0.035308837890625,
0.008056640625,
-0.044189453125,
-0.013153076171875,
0.01163482666015625,
-0.026031494140625,
-0.00799560546875,
-0.0601806640625,
-0.00919342041015625,
-0.002376556396484375,
-0.05267333984375,
0.0028247833251953125,
-0.0225982666015625,
0.0113067626953125,
0.0355224609375,
-0.02349853515625,
-0.018829345703125,
0.0225677490234375,
-0.0160369873046875,
0.029449462890625,
-0.0228729248046875,
0.03485107421875,
0.041351318359375,
-0.0302581787109375,
0.0022430419921875,
0.0262908935546875,
0.02734375,
0.03594970703125,
-0.045623779296875,
-0.0074462890625,
0.01270294189453125,
0.0181884765625,
0.0034503936767578125,
-0.005138397216796875,
0.01385498046875,
0.0299224853515625,
0.02679443359375,
-0.0244140625,
-0.02032470703125,
0.0312347412109375,
-0.04901123046875,
-0.0270843505859375,
-0.0216522216796875,
-0.00574493408203125,
0.024261474609375,
0.01202392578125,
0.0360107421875,
0.0282135009765625,
-0.01035308837890625,
0.05194091796875,
-0.0458984375,
-0.022613525390625,
0.037353515625,
-0.0255889892578125,
-0.04156494140625,
0.01418304443359375,
0.023681640625,
-0.04766845703125,
0.0030918121337890625,
0.026458740234375,
0.02032470703125,
0.052398681640625,
0.02435302734375,
-0.0199127197265625,
0.05035400390625,
0.047760009765625,
-0.00102996826171875,
-0.010467529296875,
0.032867431640625,
0.049468994140625,
0.0004601478576660156,
-0.033050537109375,
0.01409149169921875,
-0.0297088623046875,
0.011260986328125,
-0.01727294921875,
-0.0003192424774169922,
-0.043731689453125,
0.0670166015625,
-0.0276031494140625,
-0.0085906982421875,
0.03680419921875,
0.01507568359375,
0.055908203125,
-0.01305389404296875,
0.037811279296875,
-0.0028896331787109375,
-0.05377197265625,
0.0204925537109375,
0.00809478759765625,
-0.0153045654296875,
0.046173095703125,
-0.0211944580078125,
0.037841796875,
-0.040557861328125,
-0.026763916015625,
-0.045379638671875,
-0.01287841796875,
-0.059356689453125,
-0.03302001953125,
-0.002399444580078125,
0.034454345703125,
-0.06805419921875,
0.0305328369140625,
0.03631591796875,
-0.0168304443359375,
-0.0175628662109375,
-0.035980224609375,
-0.059783935546875,
0.0333251953125,
0.0302734375,
0.00370025634765625,
-0.0186004638671875,
0.0300445556640625,
0.028564453125,
-0.0260467529296875,
0.0362548828125,
0.0223236083984375,
0.0308380126953125,
-0.002735137939453125,
-0.04522705078125,
-0.00795745849609375,
0.025177001953125,
-0.032806396484375,
-0.0217132568359375,
0.0249176025390625,
-0.0007848739624023438,
-0.0245819091796875,
0.013671875,
-0.028472900390625,
-0.0487060546875,
-0.0163421630859375,
0.05682373046875,
0.054656982421875,
0.02874755859375,
-0.037384033203125,
0.027099609375,
0.00936126708984375,
0.03369140625,
0.013275146484375,
-0.0054168701171875,
-0.037506103515625,
-0.029571533203125,
-0.00685882568359375,
0.0341796875,
-0.047943115234375,
-0.01325225830078125,
0.0097808837890625,
-0.00974273681640625,
-0.03143310546875,
0.03057861328125,
0.043304443359375,
0.0196990966796875,
-0.00679779052734375,
0.0027027130126953125,
-0.045074462890625,
0.0233001708984375,
-0.037017822265625,
0.0103302001953125,
-0.004322052001953125,
-0.00858306884765625,
-0.043365478515625,
-0.040374755859375,
-0.049835205078125,
-0.01751708984375,
0.00426483154296875,
-0.044586181640625,
-0.0174713134765625,
-0.04132080078125,
0.0487060546875,
0.0220794677734375,
0.014068603515625,
-0.026824951171875,
0.05340576171875,
0.03839111328125,
-0.0214691162109375,
0.00695037841796875,
-0.0113983154296875,
0.026123046875,
0.04638671875,
-0.036224365234375,
0.007236480712890625,
0.013702392578125,
-0.0406494140625,
-0.029541015625,
0.0165557861328125,
-0.037261962890625,
0.0245208740234375,
-0.012847900390625,
-0.0438232421875,
0.0226898193359375,
0.03143310546875,
0.055908203125,
0.00835418701171875,
-0.044097900390625,
-0.03302001953125,
-0.023193359375,
0.039276123046875,
-0.0112457275390625,
0.0439453125,
-0.01230621337890625,
0.036346435546875,
0.0391845703125,
-0.0184478759765625,
-0.006420135498046875,
-0.041412353515625,
0.00933074951171875,
-0.0154266357421875,
-0.00687408447265625,
-0.033477783203125,
0.002780914306640625,
0.022705078125,
0.009765625,
-0.024932861328125,
0.0056915283203125,
0.035491943359375,
0.041259765625,
-0.01340484619140625,
-0.01041412353515625,
0.031890869140625,
0.04986572265625,
0.025146484375,
-0.0278778076171875,
0.01318359375,
0.03192138671875,
-0.0401611328125,
-0.035491943359375,
-0.0269622802734375,
0.07867431640625,
0.037994384765625,
-0.01727294921875,
0.001247406005859375,
-0.0579833984375,
0.027740478515625,
-0.03851318359375,
-0.0318603515625,
0.015167236328125,
-0.02276611328125,
-0.07720947265625,
-0.0308074951171875,
0.01861572265625,
-0.05322265625,
0.007396697998046875,
-0.047943115234375,
-0.032928466796875,
0.043701171875,
0.047637939453125,
0.058380126953125,
0.005832672119140625,
-0.0038585662841796875,
0.030853271484375,
0.00464630126953125,
0.045806884765625,
0.00511932373046875,
-0.006198883056640625,
-0.012847900390625,
0.01300048828125,
-0.032135009765625,
0.040252685546875,
0.028411865234375,
-0.01024627685546875,
0.035491943359375,
0.052581787109375,
-0.00077056884765625,
-0.04095458984375,
-0.002727508544921875,
-0.03509521484375,
0.0154571533203125,
0.019805908203125,
-0.0008678436279296875,
-0.055908203125,
-0.02069091796875,
0.0364990234375,
-0.02325439453125,
-0.01428985595703125,
0.00968170166015625,
0.005275726318359375,
0.01013946533203125,
-0.0084228515625,
-0.027435302734375,
-0.0252532958984375,
-0.0219879150390625,
0.0254974365234375,
0.0271759033203125,
0.02545166015625,
0.0039043426513671875,
0.01019287109375,
0.006786346435546875,
0.004619598388671875,
-0.03948974609375,
-0.004730224609375,
0.0308380126953125,
-0.04461669921875,
0.01324462890625,
-0.02783203125,
0.037200927734375,
-0.049346923828125,
0.0293426513671875,
0.03045654296875,
0.04229736328125,
-0.012420654296875,
-0.04345703125,
-0.047515869140625,
-0.037567138671875,
0.06048583984375,
0.061492919921875,
0.0181121826171875,
0.03631591796875,
0.023773193359375,
0.050537109375,
0.0145111083984375,
-0.049652099609375,
-0.01947021484375,
-0.002941131591796875,
0.048431396484375,
0.0289154052734375,
-0.036529541015625,
-0.016571044921875,
-0.01430511474609375,
0.039703369140625,
0.0131072998046875,
-0.02783203125,
-0.01557159423828125,
0.057464599609375,
0.049224853515625,
-0.038848876953125,
0.02093505859375,
-0.0299224853515625,
-0.050323486328125,
0.05096435546875,
-0.00457000732421875,
-0.0019969940185546875,
-0.0474853515625,
0.01479339599609375,
-0.03704833984375,
-0.0217437744140625,
-0.0125579833984375,
0.0205230712890625,
-0.01314544677734375,
-0.0162353515625,
-0.021026611328125,
-0.0220184326171875,
-0.03826904296875,
-0.0238494873046875,
-0.055419921875,
-0.029937744140625,
0.00229644775390625,
0.0229644775390625,
-0.016876220703125,
0.03851318359375,
-0.03179931640625,
-0.02557373046875,
-0.04638671875,
-0.0240020751953125,
0.045562744140625,
0.042724609375,
0.0311431884765625,
0.027984619140625,
-0.045074462890625,
-0.0007152557373046875,
-0.050750732421875,
-0.051055908203125,
0.0301513671875,
0.037200927734375,
0.0173797607421875,
-0.01381683349609375,
-0.038787841796875,
0.01654052734375,
0.045623779296875,
0.048431396484375,
-0.0196685791015625,
0.0316162109375,
-0.00384521484375,
-0.043182373046875,
0.0343017578125,
0.006954193115234375,
0.029571533203125,
-0.0267333984375,
-0.0264129638671875,
0.02691650390625,
0.055267333984375,
-0.004276275634765625,
0.005584716796875,
0.03143310546875,
0.05194091796875,
0.0177154541015625,
0.03265380859375,
-0.0298309326171875,
0.026947021484375,
-0.013580322265625,
0.00014340877532958984,
-0.046539306640625,
0.037689208984375,
0.0172576904296875,
-0.024932861328125,
-0.02685546875,
-0.037445068359375,
-0.031646728515625,
0.027496337890625,
0.0300140380859375,
0.00384521484375,
-0.038787841796875,
-0.0455322265625,
0.041961669921875,
0.0241851806640625,
0.05389404296875,
0.033447265625,
-0.017059326171875,
0.0396728515625,
0.0157623291015625,
-0.01024627685546875,
-0.0001575946807861328,
0.03704833984375,
0.0142822265625,
-0.0252838134765625,
0.042510986328125,
-0.050506591796875,
0.044403076171875,
-0.025360107421875,
-0.03436279296875,
-0.0233154296875,
-0.01435089111328125,
-0.0260009765625,
-0.0027008056640625,
-0.007129669189453125,
-0.017974853515625,
0.03143310546875,
0.032745361328125,
-0.0250701904296875,
-0.002227783203125,
0.02984619140625,
0.03717041015625,
-0.03662109375,
-0.020416259765625,
-0.0261688232421875,
0.045684814453125,
-0.037445068359375,
-0.005474090576171875,
-0.0126495361328125,
-0.007305145263671875,
-0.04541015625,
-0.04364013671875,
-0.02252197265625,
0.01715087890625,
-0.009490966796875,
0.0278167724609375,
-0.0297698974609375,
0.01280975341796875,
0.01531982421875,
0.042327880859375,
0.036346435546875,
0.02777099609375,
0.021881103515625,
0.023681640625,
-0.008087158203125,
-0.0289306640625,
-0.036407470703125,
-0.026336669921875,
0.021148681640625,
0.035186767578125,
-0.01496124267578125,
0.04168701171875,
-0.0210113525390625,
0.0258636474609375,
0.0299072265625,
0.041961669921875,
-0.005474090576171875,
0.0277557373046875,
0.004547119140625,
-0.0021419525146484375,
0.040130615234375,
-0.034698486328125,
-0.00750732421875,
0.034698486328125,
0.0101165771484375,
-0.02294921875,
-0.0144500732421875,
0.025909423828125,
-0.044189453125,
-0.0265960693359375,
-0.0305023193359375,
0.00952911376953125,
-0.002918243408203125,
0.034271240234375,
-0.012451171875,
-0.050323486328125,
-0.01213836669921875,
0.01983642578125,
0.00753021240234375,
-0.001125335693359375,
-0.029266357421875,
0.0460205078125,
-0.020721435546875,
-0.00922393798828125,
-0.0214385986328125,
-0.046661376953125,
0.010498046875,
-0.006618499755859375,
-0.0137176513671875,
-0.016998291015625,
-0.007083892822265625,
-0.01242828369140625,
-0.010711669921875,
-0.048065185546875,
-0.003326416015625,
-0.0163116455078125,
-0.03515625,
0.039520263671875,
-0.0352783203125,
0.0192413330078125,
-0.010345458984375,
-0.040374755859375,
-0.039337158203125,
-0.032958984375,
-0.046966552734375,
-0.0439453125,
-0.04180908203125,
0.04327392578125,
0.034637451171875,
0.0013780593872070312,
0.035552978515625,
-0.0200958251953125,
0.047393798828125,
0.0016508102416992188,
0.045562744140625,
-0.0264739990234375,
0.01137542724609375,
-0.042510986328125,
0.01483917236328125,
0.0186004638671875,
-0.045989990234375,
-0.0271453857421875,
-0.006877899169921875,
0.047271728515625,
0.020751953125,
-0.0283355712890625,
0.046905517578125,
-0.005245208740234375,
0.0219573974609375,
0.0034732818603515625,
-0.0523681640625,
0.0240325927734375,
0.0302734375,
-0.0055999755859375,
-0.024566650390625,
-0.04095458984375,
-0.0496826171875,
0.043701171875,
-0.0178070068359375,
-0.0301513671875,
0.0230255126953125,
-0.043304443359375,
-0.046173095703125,
-0.0017232894897460938,
0.00884246826171875,
-0.0052337646484375,
0.01309967041015625,
-0.04693603515625,
0.0199127197265625,
-0.01047515869140625,
0.0201263427734375,
0.047576904296875,
-0.0201568603515625,
-0.016998291015625,
0.00588226318359375,
-0.0235137939453125,
-0.04315185546875,
0.00749969482421875,
-0.033233642578125,
-0.036376953125,
0.0167236328125,
-0.016845703125,
-0.0462646484375,
-0.0210723876953125,
-0.019195556640625,
0.026641845703125,
-0.04217529296875,
0.041259765625,
0.0053253173828125,
-0.024627685546875,
0.009124755859375,
-0.0034198760986328125,
-0.043792724609375,
-0.018402099609375,
-0.01427459716796875,
0.05029296875,
0.04400634765625,
-0.0106048583984375,
-0.028778076171875,
0.0283966064453125,
0.020233154296875,
-0.040191650390625,
-0.0221710205078125,
-0.052703857421875,
-0.031982421875,
-0.04119873046875,
-0.0085906982421875,
-0.034515380859375,
0.042449951171875,
0.057708740234375,
-0.0224456787109375,
-0.02374267578125,
0.044342041015625,
0.0419921875,
0.048095703125,
0.0567626953125,
0.053985595703125,
0.0111541748046875,
-0.02020263671875,
-0.0235443115234375,
-0.0308074951171875,
-0.0216064453125,
0.0304718017578125,
0.0018911361694335938,
0.0195770263671875,
0.04345703125,
-0.0193939208984375,
0.035797119140625,
0.0309295654296875,
0.04827880859375,
0.01041412353515625,
-0.0178985595703125,
-0.039154052734375,
-0.038543701171875,
0.0109100341796875,
0.01338958740234375,
0.05157470703125,
-0.044891357421875,
-0.002040863037109375,
-0.039093017578125,
-0.036102294921875,
0.006832122802734375,
-0.00795745849609375,
0.006839752197265625,
0.035308837890625,
-0.004474639892578125,
-0.00579833984375,
0.0256500244140625,
0.01345062255859375,
0.024017333984375,
0.00745391845703125,
0.01270294189453125,
-0.049652099609375,
-0.057769775390625,
-0.00836181640625,
-0.0538330078125,
0.03668212890625,
0.0550537109375,
-0.018585205078125,
0.03228759765625,
0.05377197265625,
0.0140838623046875,
-0.004489898681640625,
0.0003101825714111328,
0.0118408203125,
0.044708251953125,
0.047210693359375,
-0.0007185935974121094,
-0.0092926025390625,
-0.046875,
-0.005962371826171875,
0.034271240234375,
0.0487060546875,
-0.0204620361328125,
0.022216796875,
-0.00205230712890625,
0.0093231201171875,
-0.03668212890625,
-0.020172119140625,
0.041595458984375,
0.01406097412109375,
-0.04425048828125,
-0.0303497314453125,
-0.017608642578125,
0.005664825439453125,
-0.0379638671875,
0.01183319091796875,
-0.024261474609375,
0.0313720703125,
0.00838470458984375,
-0.038818359375,
0.033721923828125,
0.01244354248046875,
0.03228759765625,
-0.01042938232421875,
-0.032684326171875,
0.0027904510498046875,
0.02435302734375,
-0.006725311279296875,
-0.049591064453125,
0.045379638671875,
-0.033905029296875,
-0.040679931640625,
-0.04571533203125,
-0.0161285400390625,
-0.030670166015625,
0.035491943359375,
0.0142669677734375,
-0.006961822509765625,
-0.00847625732421875,
-0.008453369140625,
-0.0091094970703125,
0.046783447265625,
-0.032958984375,
0.01557159423828125,
0.00974273681640625,
-0.004482269287109375,
0.043487548828125,
0.0303955078125,
-0.00667572021484375,
-0.038909912109375,
0.044891357421875,
-0.0300750732421875,
-0.0268402099609375,
0.045989990234375,
0.0318603515625,
-0.020050048828125,
0.0217437744140625,
0.0001596212387084961,
0.045928955078125,
-0.042938232421875,
0.006988525390625,
-0.01373291015625,
-0.035858154296875,
-0.027862548828125,
-0.009552001953125,
0.02197265625,
-0.0281829833984375,
-0.0347900390625,
-0.01678466796875,
-0.0212554931640625,
0.048797607421875,
0.015716552734375,
-0.009033203125,
0.0017108917236328125,
-0.0146026611328125,
0.043121337890625,
0.01544189453125,
-0.016204833984375,
-0.00879669189453125,
0.04742431640625,
0.036956787109375,
-0.039886474609375,
0.0262451171875,
-0.0262603759765625,
0.027557373046875,
0.03778076171875,
-0.043792724609375,
0.0496826171875,
-0.01042938232421875,
0.043792724609375,
0.01849365234375,
-0.04248046875,
0.038665771484375,
-0.009246826171875,
0.0426025390625,
0.023590087890625,
-0.032135009765625,
0.014678955078125,
0.0433349609375,
0.027679443359375,
0.0474853515625,
0.0129241943359375,
-0.044219970703125,
-0.035858154296875,
-0.0277557373046875,
-0.0268402099609375,
-0.00788116455078125,
-0.04559326171875,
0.01220703125,
0.0204925537109375,
0.042449951171875,
0.0182037353515625,
-0.0197601318359375,
-0.027191162109375,
-0.025360107421875,
0.0362548828125,
-0.0212554931640625,
-0.047637939453125,
0.006122589111328125,
-0.02056884765625,
-0.043975830078125,
0.01922607421875,
0.039306640625,
-0.018829345703125,
0.0159759521484375,
-0.0224609375,
-0.00830841064453125,
-0.041839599609375,
-0.0169677734375,
0.03948974609375,
-0.0209503173828125,
0.0119476318359375,
-0.0193939208984375,
-0.030242919921875,
0.0284576416015625,
-0.031982421875,
-0.025634765625,
-0.0280914306640625,
0.0242462158203125,
0.00040149688720703125,
-0.0241851806640625,
0.0155181884765625,
-0.04718017578125,
0.01021575927734375,
-0.0040130615234375,
0.004802703857421875,
0.0173187255859375,
0.0357666015625,
-0.02886962890625,
-0.022369384765625,
0.0177001953125,
-0.043670654296875,
0.00299835205078125,
-0.0153656005859375,
0.033538818359375,
0.0285491943359375,
-0.034149169921875,
-0.049591064453125,
0.0450439453125,
-0.040435791015625,
0.01348876953125,
0.00556182861328125,
0.04766845703125,
-0.01149749755859375,
-0.0300750732421875,
-0.044189453125,
-0.0136871337890625,
-0.0312347412109375,
0.01275634765625,
0.0211639404296875,
0.0137939453125,
-0.0012454986572265625,
0.046844482421875,
-0.004913330078125,
0.01216888427734375,
-0.0133209228515625,
-0.01448822021484375,
0.04620361328125,
-0.0484619140625,
-0.033111572265625,
0.01470184326171875,
0.0300140380859375,
-0.012542724609375,
-0.045928955078125,
-0.00833892822265625,
-0.047119140625,
0.0247344970703125,
-0.0216217041015625,
-0.0264434814453125,
-0.04315185546875,
-0.0181884765625,
0.046112060546875,
0.018829345703125,
-0.044036865234375,
0.037567138671875,
-0.005657196044921875,
0.03558349609375,
-0.0230712890625,
-0.0177764892578125,
0.0193328857421875,
0.0023365020751953125,
-0.02655029296875,
0.01165771484375,
-0.046539306640625,
0.043182373046875,
0.01580810546875,
-0.0278778076171875,
0.0265350341796875,
-0.0089569091796875,
-0.044677734375,
0.0183868408203125,
-0.040771484375,
-0.01375579833984375,
-0.04901123046875,
0.009796142578125,
-0.020416259765625,
-0.0469970703125,
0.0082550048828125,
0.0501708984375,
-0.0258941650390625,
-0.014129638671875,
-0.0250244140625,
-0.027801513671875,
0.0214385986328125,
0.0372314453125,
-0.0255279541015625,
0.004962921142578125,
-0.00287628173828125,
0.046356201171875,
-0.03759765625,
0.0379638671875,
0.0335693359375,
0.03533935546875,
0.036529541015625,
0.0274658203125,
-0.03778076171875,
-0.02703857421875,
-0.038604736328125,
-0.036468505859375,
0.01641845703125,
-0.02972412109375,
-0.048553466796875,
0.004730224609375,
-0.04730224609375,
0.048248291015625,
-0.009033203125,
0.044281005859375,
-0.01331329345703125,
-0.018646240234375,
0.01313018798828125,
-0.01300048828125,
-0.007022857666015625,
-0.022430419921875,
-0.017120361328125,
-0.037078857421875,
-0.01230621337890625,
-0.035614013671875,
-0.0225830078125,
0.04498291015625,
0.037841796875,
-0.0340576171875,
-0.037628173828125,
0.0007104873657226562,
0.035308837890625,
-0.01421356201171875,
-0.041473388671875,
-0.0156707763671875,
0.0294036865234375,
-0.030059814453125,
0.01186370849609375,
-0.0081024169921875,
-0.0204315185546875,
0.0223541259765625,
0.041656494140625,
0.0252685546875,
-0.006214141845703125,
0.036895751953125,
0.00687408447265625,
0.004383087158203125,
0.00402069091796875,
0.035369873046875,
-0.021331787109375,
0.0362548828125,
7.12275505065918e-05,
0.0257415771484375,
-0.04632568359375,
-0.00545501708984375,
0.0235748291015625,
-0.006046295166015625,
-0.04180908203125,
0.0279388427734375,
-0.024810791015625,
0.043975830078125,
-0.0233001708984375,
-0.011749267578125,
0.0265045166015625,
0.048309326171875,
-0.023193359375,
0.0015811920166015625,
-0.0355224609375,
-0.03076171875,
-0.0241851806640625,
0.01070404052734375,
0.00766754150390625,
-0.0176239013671875,
0.023345947265625,
0.034759521484375,
0.036865234375,
-0.044586181640625,
0.0288848876953125,
0.0140228271484375,
0.0291900634765625,
-0.01300048828125,
0.010498046875,
0.017181396484375,
-0.041168212890625,
0.0341796875,
-0.01042938232421875,
0.006496429443359375,
-0.01055908203125,
-0.03338623046875,
0.0254974365234375,
0.046539306640625,
-0.036376953125,
-0.04693603515625,
-0.0274200439453125,
-0.02972412109375,
0.0194244384765625,
-0.0011072158813476562,
-0.04180908203125,
-0.0164031982421875,
-0.0045623779296875,
0.026641845703125,
-0.03680419921875,
-0.022796630859375,
-0.0028820037841796875,
0.0235748291015625,
-0.0022373199462890625,
-0.011871337890625,
-0.006992340087890625,
-0.0298919677734375,
-0.01392364501953125,
-0.022247314453125,
0.0400390625,
0.0213470458984375,
0.032318115234375,
-0.003070831298828125,
0.03826904296875,
-0.031097412109375,
-0.032012939453125,
-0.041412353515625,
-0.0121307373046875,
-0.03460693359375,
-0.0157318115234375,
0.01442718505859375,
-0.01216888427734375,
-0.04595947265625,
0.0447998046875,
-0.0219573974609375,
0.01444244384765625,
0.0207672119140625,
0.025390625,
-0.0133056640625,
-0.031402587890625,
0.02880859375,
0.028289794921875,
0.0035877227783203125,
0.04541015625,
-0.005466461181640625,
-0.0203399658203125,
0.030242919921875,
-0.0300140380859375,
0.0139617919921875,
-0.0439453125,
-0.049560546875,
-0.0269927978515625,
0.0002636909484863281,
-0.01418304443359375,
0.0179443359375,
0.0182342529296875,
-0.032958984375,
-0.048095703125,
-0.020751953125,
-0.040771484375,
0.02545166015625,
0.0435791015625,
-0.040130615234375,
-0.00817108154296875,
0.04742431640625,
-0.038421630859375,
0.0091400146484375,
0.042694091796875,
0.0589599609375,
0.057159423828125,
0.04608154296875,
-0.00518798828125,
0.0302276611328125,
-0.0361328125,
-0.006542205810546875,
-0.0101318359375,
0.0537109375,
-0.042694091796875,
-0.046600341796875,
-0.008209228515625,
-0.04180908203125,
-0.07275390625,
-0.035247802734375,
-0.0382080078125,
0.038116455078125,
-0.04205322265625,
-0.05828857421875,
0.0262908935546875,
0.037811279296875,
-0.03558349609375,
-0.052978515625,
-0.04290771484375,
0.0261993408203125,
0.05169677734375,
0.07537841796875,
0.001678466796875,
-0.0501708984375,
0.034820556640625,
0.0673828125,
0.0157012939453125,
0.0311737060546875,
-0.0205841064453125,
-0.0014142990112304688,
-0.016357421875,
0.03338623046875,
-0.05499267578125,
-0.047332763671875,
0.031646728515625,
0.041748046875,
0.00499725341796875,
0.006916046142578125,
0.075927734375,
-0.021514892578125,
0.03924560546875,
-0.01549530029296875,
0.044921875,
-0.004459381103515625,
-0.0013666152954101562,
0.0013885498046875,
0.023712158203125,
-0.0229644775390625,
0.00551605224609375,
-0.0227813720703125,
0.054931640625,
-0.0255889892578125,
0.045745849609375,
-0.051666259765625,
0.044647216796875,
0.0262908935546875,
0.00360107421875,
-0.0222015380859375,
0.0182647705078125,
0.039215087890625,
-0.0418701171875,
-0.031646728515625,
-0.0302734375,
0.040924072265625,
0.0171051025390625,
-0.053558349609375,
-0.039642333984375,
-0.0225830078125,
0.00469207763671875,
-0.0249786376953125,
0.024017333984375,
0.01412200927734375,
0.06298828125,
0.08758544921875,
0.03656005859375,
-0.04345703125,
-0.017669677734375,
0.06585693359375,
0.08343505859375,
-0.0258636474609375,
0.0036373138427734375,
-0.06341552734375,
-0.01123809814453125,
-0.0216064453125,
0.03057861328125,
0.01172637939453125,
0.01739501953125,
0.01537322998046875,
-0.03582763671875,
0.0263519287109375,
-0.003040313720703125,
0.044281005859375,
-0.061248779296875,
-0.059661865234375,
0.0134429931640625,
-0.023529052734375,
0.06109619140625,
0.036346435546875,
0.022613525390625,
-0.003688812255859375,
0.0128631591796875,
0.016204833984375,
0.0458984375,
0.0201263427734375,
0.0004353523254394531,
-0.0196380615234375,
-0.0149078369140625,
-0.036956787109375,
-0.052581787109375,
-0.044158935546875,
-0.0234832763671875,
0.04046630859375,
-0.018341064453125,
0.010498046875,
-0.038238525390625,
0.01172637939453125,
-0.016448974609375,
-0.043975830078125,
-0.041656494140625,
-0.01617431640625,
0.00684356689453125,
0.0104522705078125,
0.01934814453125,
-0.034698486328125,
-0.043243408203125,
0.01751708984375,
0.0253448486328125,
0.055389404296875,
0.005290985107421875,
0.01422119140625,
0.042236328125,
0.03564453125,
0.06060791015625,
0.06414794921875,
0.030181884765625,
-0.033966064453125,
0.0006551742553710938,
0.033447265625,
0.04168701171875,
0.0245513916015625,
-0.00266265869140625,
0.062103271484375,
0.04351806640625,
0.0102996826171875,
-0.02032470703125,
-0.04620361328125,
-0.073974609375,
0.0033931732177734375,
0.01146697998046875,
-0.017059326171875,
0.045501708984375,
-0.030853271484375,
-0.0049896240234375,
-0.012115478515625,
-0.00986480712890625,
-0.0200347900390625,
0.0347900390625,
0.031890869140625,
0.00830078125,
0.057159423828125,
-0.0301666259765625,
-0.0506591796875,
0.055755615234375,
0.03973388671875,
-0.034881591796875,
-0.058349609375,
0.004619598388671875,
-0.0227203369140625,
-0.0059356689453125,
0.0258026123046875,
-0.034576416015625,
-0.045928955078125,
-0.032379150390625,
0.0004401206970214844,
0.05499267578125,
-0.010498046875,
-0.04931640625,
-0.0059967041015625,
0.051910400390625,
0.028076171875,
0.016082763671875,
-0.042724609375,
0.034698486328125,
0.06866455078125,
-0.0462646484375,
-0.051605224609375,
-0.0316162109375,
0.0501708984375,
0.010833740234375,
-0.045928955078125,
0.042205810546875,
-0.02093505859375,
-0.024169921875,
0.01495361328125,
0.039825439453125,
-0.033935546875,
0.01434326171875,
-0.018646240234375,
-0.01126861572265625,
-0.0238037109375,
-0.028656005859375,
0.00650787353515625,
0.0552978515625,
0.0697021484375,
-0.00023305416107177734,
-0.0029315948486328125,
0.058258056640625,
0.0277862548828125,
0.018829345703125,
0.047882080078125,
0.06109619140625,
0.007534027099609375,
0.0239105224609375,
0.0299530029296875,
-0.019927978515625,
-0.00284576416015625,
-0.0267486572265625,
0.046905517578125,
0.025360107421875,
-0.040740966796875,
-0.05303955078125,
-0.038238525390625,
-0.0285491943359375,
-0.0322265625,
-0.06903076171875,
-0.00943756103515625,
-0.037200927734375,
0.0285491943359375,
0.07403564453125,
-0.047698974609375,
0.003894805908203125,
0.004749298095703125,
0.061065673828125,
0.0111846923828125,
0.004688262939453125,
0.0045318603515625,
0.016387939453125,
-0.033721923828125,
0.0589599609375,
-0.0228271484375,
-0.0167999267578125,
-0.03656005859375,
-0.050933837890625,
-0.0286102294921875,
0.05224609375,
-0.01148223876953125,
0.029144287109375,
0.051361083984375,
0.0096435546875,
0.05804443359375,
-0.006595611572265625,
-0.030914306640625,
0.060699462890625,
0.0245208740234375,
0.045166015625,
-0.0175628662109375,
-0.0139007568359375,
0.026397705078125,
0.0648193359375,
0.019134521484375,
0.041259765625,
0.036041259765625,
0.040252685546875,
0.06524658203125,
0.0206451416015625,
0.047943115234375,
-0.01507568359375,
0.017059326171875,
-0.059234619140625,
-0.0399169921875,
-0.01180267333984375,
0.0183258056640625,
0.0156707763671875,
0.051544189453125,
-0.045135498046875,
-0.0296173095703125,
0.02490234375,
0.016876220703125,
-0.0245819091796875,
-0.019073486328125,
0.036407470703125,
0.0222320556640625,
0.0013713836669921875,
-0.017059326171875,
-0.01332855224609375,
-0.028228759765625,
-0.034027099609375,
-0.0264892578125,
0.02923583984375,
-0.0257568359375,
0.053070068359375,
-0.005107879638671875,
0.0311126708984375,
0.0202484130859375,
-0.04278564453125,
0.03814697265625,
0.0230712890625,
0.037933349609375,
-0.04376220703125,
-0.00933837890625,
0.030792236328125,
0.018798828125,
0.033935546875,
0.028289794921875,
0.0235443115234375,
0.0215606689453125,
0.05535888671875,
-0.03411865234375,
-0.02386474609375,
0.05633544921875,
0.056488037109375,
-0.02899169921875,
0.006439208984375,
-0.03143310546875,
0.028594970703125,
-0.039886474609375,
-0.03692626953125,
-0.023895263671875,
0.022064208984375,
-0.0176544189453125,
-0.01471710205078125,
0.0501708984375,
-0.0270233154296875,
-0.04522705078125,
0.007068634033203125,
0.00295257568359375,
-0.0445556640625,
0.052215576171875,
-0.0216217041015625,
0.0005316734313964844,
0.04833984375,
0.0511474609375,
0.049041748046875,
-0.0216827392578125,
-0.0207061767578125,
-0.021697998046875,
-0.0211029052734375,
-0.033538818359375,
0.0007658004760742188,
0.04583740234375,
-0.0225982666015625,
-0.053131103515625,
0.03387451171875,
-0.01263427734375,
0.05230712890625,
0.044097900390625,
0.010986328125,
0.0225677490234375,
0.005741119384765625,
0.00276947021484375,
0.027862548828125,
-0.0295562744140625,
0.0062713623046875,
-0.01108551025390625,
0.0260009765625,
-0.0181427001953125,
-0.01038360595703125,
0.0404052734375,
-0.02349853515625,
0.053466796875,
0.0599365234375,
0.0223236083984375,
0.044677734375,
0.040008544921875,
-0.02703857421875,
0.046539306640625,
-0.03546142578125,
-0.0209503173828125,
0.017486572265625,
0.04852294921875,
-0.036895751953125,
-0.0323486328125,
0.0421142578125,
0.0408935546875,
-0.073486328125,
-0.05047607421875,
-0.0361328125,
0.00634765625,
0.01464080810546875,
0.039520263671875,
-0.06146240234375,
-0.020965576171875,
-0.049072265625,
-0.0090484619140625,
-0.0115966796875,
0.031951904296875,
0.0733642578125,
0.0384521484375,
0.030120849609375,
-0.03057861328125,
-0.0146636962890625,
-0.0157928466796875,
0.0118560791015625,
-0.010589599609375,
0.050567626953125,
-0.00566864013671875,
0.034942626953125,
0.0024204254150390625,
-0.03912353515625,
-0.0426025390625,
0.031982421875,
-0.035614013671875,
0.0202484130859375,
0.0191497802734375,
-0.0038623809814453125,
0.01181793212890625,
-0.005275726318359375,
0.04278564453125,
0.0304718017578125,
0.0131378173828125,
-0.034881591796875,
-0.040802001953125,
0.0017557144165039062,
-0.0439453125,
-0.0357666015625,
-0.0181427001953125,
0.03997802734375,
-0.05072021484375,
-0.042816162109375,
-0.04296875,
0.0228424072265625,
-0.0238494873046875,
-0.0274505615234375,
-0.0285186767578125,
0.00859832763671875,
-0.06658935546875,
-0.017181396484375,
0.016021728515625,
-0.01094818115234375,
-0.00919342041015625,
0.01491546630859375,
0.0306243896484375,
0.00875091552734375,
0.0248565673828125,
-0.037353515625,
-0.0119476318359375,
-0.0304718017578125,
-0.01155853271484375,
0.035552978515625,
-0.01406097412109375,
-0.019989013671875,
0.047882080078125,
0.042083740234375,
-0.00716400146484375,
-0.01617431640625,
-0.004154205322265625,
-0.007694244384765625,
-0.00048065185546875,
-0.01227569580078125,
-0.03717041015625,
-0.03253173828125,
0.046112060546875,
-0.01525115966796875,
0.01445770263671875,
0.026214599609375,
0.006023406982421875,
0.0186309814453125,
0.023345947265625,
0.052093505859375,
0.0019445419311523438,
-0.0194549560546875,
-0.033172607421875,
0.03057861328125,
-0.015899658203125,
-0.051483154296875,
0.01122283935546875,
0.007843017578125,
-0.036285400390625,
0.04150390625,
0.03997802734375,
-0.043365478515625,
-0.0276031494140625,
-0.0246429443359375,
0.012420654296875,
-0.03173828125,
-0.046417236328125,
-0.042633056640625,
0.045501708984375,
0.050994873046875,
0.056549072265625,
0.0106658935546875,
0.0265960693359375,
0.0033397674560546875,
-0.0242919921875,
0.036468505859375,
0.06585693359375,
0.0297698974609375,
0.0025844573974609375,
-0.0179595947265625,
-0.036895751953125,
-0.032867431640625,
0.000614166259765625,
0.053741455078125,
-0.075439453125,
0.0433349609375,
0.035247802734375,
-0.0013532638549804688,
0.01450347900390625,
0.029022216796875,
-0.01285552978515625,
0.034881591796875,
0.0231170654296875,
-0.024505615234375,
-0.00838470458984375,
0.01096343994140625,
0.0008025169372558594,
0.0013666152954101562,
-0.050384521484375,
0.040283203125,
-0.0572509765625,
-0.041748046875,
-0.039215087890625,
-0.040191650390625,
-0.04742431640625,
-0.01788330078125,
-0.0252227783203125,
0.0207061767578125,
0.0251312255859375,
0.002246856689453125,
-0.02899169921875,
-0.019012451171875,
-0.022674560546875,
0.054840087890625,
0.06781005859375,
-8.273124694824219e-05,
0.01332855224609375,
-0.0252227783203125,
0.0625,
-0.0302276611328125,
-0.030242919921875,
0.0207366943359375,
0.0224456787109375,
0.0225677490234375,
0.0269622802734375,
0.02532958984375,
0.05584716796875,
-0.0005297660827636719,
-0.00988006591796875,
-0.0279388427734375,
0.012969970703125,
0.0297393798828125,
0.022003173828125,
-0.0201873779296875,
-0.0027332305908203125,
-0.01654052734375,
-0.01494598388671875,
0.0386962890625,
0.042388916015625,
0.06207275390625,
0.03192138671875,
0.00875091552734375,
0.04510498046875,
0.00936126708984375,
-0.005443572998046875,
0.00499725341796875,
0.044158935546875,
-0.03521728515625,
0.02435302734375,
0.01087188720703125,
0.010711669921875,
0.05889892578125,
0.0360107421875,
-0.01953125,
0.00598907470703125,
-0.046844482421875,
0.0025882720947265625,
-0.046875,
0.05059814453125,
0.01403045654296875,
0.01094818115234375,
0.0173187255859375,
0.02313232421875,
0.03277587890625,
0.039703369140625,
0.038055419921875,
-0.03717041015625,
0.005382537841796875,
-0.0261077880859375,
0.00499725341796875,
0.052947998046875,
0.00598907470703125,
0.0018339157104492188,
0.034637451171875,
0.046234130859375,
0.048492431640625,
-0.027923583984375,
-0.00678253173828125,
-0.01416015625,
-0.004604339599609375,
0.04150390625,
0.0182952880859375,
-0.0208740234375,
-0.006984710693359375,
0.0183563232421875,
0.0164947509765625,
0.04638671875,
0.06842041015625,
0.0701904296875,
-0.005649566650390625,
-0.038818359375,
0.0577392578125,
-0.006969451904296875,
0.04693603515625,
0.02850341796875,
0.048614501953125,
0.038848876953125,
0.0247650146484375,
0.00960540771484375,
-0.07073974609375,
0.00274658203125,
0.06243896484375,
0.02569580078125,
-0.032928466796875,
0.0167236328125,
-0.006389617919921875,
0.043975830078125,
-0.0191497802734375,
0.031280517578125,
0.0300140380859375,
-0.0011692047119140625,
0.040435791015625,
0.050811767578125,
-0.0126800537109375,
0.006877899169921875,
0.025360107421875,
-0.05718994140625,
0.06103515625,
0.0406494140625,
-0.03131103515625,
-0.0019168853759765625,
0.01464080810546875,
-0.0199737548828125,
-0.004428863525390625,
0.019500732421875,
-0.01149749755859375,
0.0538330078125,
0.04290771484375,
-0.00754547119140625,
-0.0103759765625,
0.05084228515625,
-0.0374755859375,
-0.0032253265380859375,
-0.0283966064453125,
0.002300262451171875,
-0.0153961181640625,
-0.00998687744140625,
0.033416748046875,
-0.0300750732421875,
0.030303955078125,
0.047210693359375,
-0.007076263427734375,
-0.007419586181640625,
0.04736328125,
0.00611114501953125,
0.045654296875,
-0.01605224609375,
0.0251922607421875,
0.034027099609375,
-0.002185821533203125,
-0.01375579833984375,
0.0015821456909179688,
0.00725555419921875,
0.0343017578125,
0.015960693359375,
0.038909912109375,
0.048004150390625,
0.00980377197265625,
-0.0245513916015625,
-0.051300048828125,
-0.0171356201171875,
0.02197265625,
0.048675537109375,
0.0247802734375,
-0.009857177734375,
-0.0109405517578125,
0.033477783203125,
-0.0229339599609375,
0.0169219970703125,
0.0081329345703125,
0.0251617431640625,
-0.036376953125,
-0.0171051025390625,
-0.04058837890625,
0.022430419921875,
0.04180908203125,
0.049957275390625,
0.03228759765625,
-0.04779052734375,
0.03778076171875,
0.033782958984375,
0.00445556640625,
0.031646728515625,
0.0289764404296875,
0.052764892578125,
0.016143798828125,
0.0599365234375,
0.0196685791015625,
-0.022216796875,
-0.05126953125,
0.017547607421875,
0.04412841796875,
-0.007602691650390625,
0.01273345947265625,
0.027191162109375,
0.00843048095703125,
0.04296875,
0.0258636474609375,
-0.03704833984375,
0.011688232421875,
0.0188446044921875,
0.040740966796875,
-0.016754150390625,
0.0276947021484375,
0.01282501220703125,
0.012054443359375,
-0.03515625,
-0.021820068359375,
0.045684814453125,
0.01036834716796875,
-0.00047516822814941406,
-0.0623779296875,
-0.0211181640625,
0.0274810791015625,
-0.028594970703125,
0.007358551025390625,
-0.044158935546875,
-0.026458740234375,
-0.037628173828125,
-0.04241943359375,
-0.0234527587890625,
-0.01995849609375,
-4.8041343688964844e-05,
-0.008697509765625,
0.014923095703125,
-0.0016469955444335938,
-0.048980712890625,
0.036102294921875,
-0.0009164810180664062,
0.025970458984375,
-0.038177490234375,
-0.04583740234375,
-0.009674072265625,
0.02734375,
-0.00818634033203125,
-0.0296630859375,
0.022613525390625,
0.0179443359375,
-0.017608642578125,
-0.04052734375,
-0.0263214111328125,
8.183717727661133e-05,
-0.005157470703125,
-0.03338623046875,
-0.0102996826171875,
0.06793212890625,
-0.01174163818359375,
0.0013017654418945312,
-0.026641845703125,
0.046722412109375,
-0.00322723388671875,
0.053802490234375,
-0.00872802734375,
0.05322265625,
0.0084075927734375,
-0.036285400390625,
0.00635528564453125,
0.0252227783203125,
0.0068206787109375,
0.038360595703125,
0.04345703125,
0.0002484321594238281,
0.0190887451171875,
-0.042236328125,
-0.061065673828125,
-0.04815673828125,
-0.05023193359375,
-0.0258331298828125,
0.01108551025390625,
-0.0256805419921875,
0.042144775390625,
-0.01629638671875,
0.0257568359375,
0.002719879150390625,
0.0521240234375,
-0.0012159347534179688,
-0.0136871337890625,
-0.0280609130859375,
-0.02850341796875,
0.0328369140625,
-0.052398681640625,
0.044158935546875,
0.030517578125,
-0.0015325546264648438,
0.033843994140625,
0.054840087890625,
-0.017333984375,
-0.039459228515625,
-0.0849609375,
-0.048614501953125,
0.007076263427734375,
0.0002875328063964844,
-0.045379638671875,
-0.045654296875,
0.022552490234375,
-0.00788116455078125,
-0.01428985595703125,
-0.0738525390625,
-0.064208984375,
0.042877197265625,
0.03369140625,
0.0218505859375,
-0.04296875,
-0.0428466796875,
-0.00749969482421875,
-0.0263519287109375,
-0.04071044921875,
-0.01971435546875,
-0.0144500732421875,
0.0231475830078125,
0.04351806640625,
-0.0291595458984375,
0.041015625,
-0.006072998046875,
0.0142974853515625,
-0.02532958984375,
0.0038547515869140625,
0.031829833984375,
-0.03955078125,
-0.01438140869140625,
0.0131683349609375,
0.01519775390625,
0.01467132568359375,
0.026824951171875,
-0.062469482421875,
-0.0118865966796875,
-0.00457763671875,
-0.044036865234375,
-0.0206756591796875,
-0.040313720703125,
0.061248779296875,
0.0164947509765625,
-0.027923583984375,
-0.0345458984375,
0.051116943359375,
-0.02447509765625,
0.03216552734375,
0.01209259033203125,
-0.007808685302734375,
0.008087158203125,
-0.04913330078125,
0.035552978515625,
0.0154571533203125,
-0.0301513671875,
-0.07421875,
0.0010089874267578125,
-0.0037631988525390625,
-0.0384521484375,
-0.021240234375,
0.0164947509765625,
-0.0511474609375,
-0.0108795166015625,
-0.0082550048828125,
-0.0010166168212890625,
0.03619384765625,
0.0721435546875,
0.00870513916015625,
0.04840087890625,
0.00029158592224121094,
0.0836181640625,
-0.0227203369140625,
-0.01111602783203125,
-0.0092315673828125,
-0.0204925537109375,
-0.01117706298828125,
0.00231170654296875,
-0.0294036865234375,
-0.056243896484375,
0.0428466796875,
0.0106658935546875,
0.02825927734375,
-0.0162506103515625,
-0.0188446044921875,
0.01425933837890625,
0.0043792724609375,
0.04150390625,
0.00528717041015625,
0.02886962890625,
-0.0146942138671875,
0.035064697265625,
0.0217742919921875,
-0.0050506591796875,
-0.0157470703125,
0.060028076171875,
0.015777587890625,
0.043731689453125,
0.045562744140625,
-0.028289794921875,
-0.01560211181640625,
-0.037078857421875,
-0.034942626953125,
0.0010747909545898438,
-0.0028438568115234375,
-0.0491943359375,
-0.052642822265625,
-0.0189971923828125,
0.0018205642700195312,
0.040985107421875,
0.041473388671875,
0.035736083984375,
-0.014007568359375,
-1.7881393432617188e-06,
-0.044403076171875,
-0.03021240234375,
-0.031494140625,
0.01155853271484375,
0.0645751953125,
-0.00010764598846435547,
0.01361083984375,
-0.034423828125,
-0.0164794921875,
-0.040283203125,
0.0289764404296875,
0.016998291015625,
-0.050628662109375,
0.031463623046875,
0.01134490966796875,
-0.03338623046875,
-0.03546142578125,
0.021697998046875,
-0.01953125,
-0.0180511474609375,
-0.0089263916015625,
0.048583984375,
0.023406982421875,
-0.045562744140625,
-0.0264892578125,
-0.030517578125,
-0.0192718505859375,
0.0231475830078125,
0.0316162109375,
-0.03753662109375,
-0.055450439453125,
0.0816650390625,
0.0181884765625,
-0.048828125,
0.033843994140625,
-0.006740570068359375,
0.0171661376953125,
-0.032073974609375,
-0.04315185546875,
0.033172607421875,
0.00769805908203125,
-0.034576416015625,
0.0218505859375,
-0.0280914306640625,
-0.0552978515625,
0.02716064453125,
-0.001987457275390625,
0.01197052001953125,
-0.021148681640625,
-0.023406982421875,
-0.03631591796875,
-0.014404296875,
0.01071929931640625,
-0.02978515625,
-0.0010013580322265625,
-0.06280517578125,
0.0090179443359375,
0.0246124267578125,
-0.04541015625,
-0.00763702392578125,
0.059783935546875,
0.012481689453125,
-0.0245513916015625,
0.0185699462890625,
-0.004817962646484375,
-0.0361328125,
-0.00830841064453125,
-0.056640625,
-0.0333251953125,
0.0458984375,
-0.032501220703125,
0.03790283203125,
0.036285400390625,
0.01421356201171875,
0.006343841552734375,
0.01380157470703125,
-0.0010700225830078125,
0.07379150390625,
0.0171966552734375,
0.01201629638671875,
0.023529052734375,
-0.007598876953125,
0.046112060546875,
0.038421630859375,
-0.020782470703125,
0.025604248046875,
-0.0257568359375,
0.06298828125,
0.021331787109375,
0.0118865966796875,
-0.007678985595703125,
-0.01226806640625,
0.0197601318359375,
-0.03863525390625,
-0.035430908203125,
-0.053558349609375,
0.01439666748046875,
-0.0167236328125,
-0.0005960464477539062,
-0.019073486328125,
-0.013336181640625,
-0.032623291015625,
0.01116943359375,
-0.0633544921875,
0.01390838623046875,
-0.0286407470703125,
-0.0238800048828125,
0.00716400146484375,
0.015625,
0.037628173828125,
0.0740966796875,
0.0187530517578125,
0.041290283203125,
0.039276123046875,
-0.0374755859375,
0.0283050537109375,
-0.032867431640625,
-0.02490234375,
-0.032562255859375,
0.02166748046875,
-0.01099395751953125,
-0.017333984375,
0.0202789306640625,
-0.0084075927734375,
-0.02203369140625,
-0.01148223876953125,
-0.032196044921875,
-0.0110626220703125,
-0.0169525146484375,
-0.039031982421875,
0.0067901611328125,
0.0222320556640625,
0.0384521484375,
0.050079345703125,
0.037384033203125,
0.03314208984375,
0.0254669189453125,
-0.01480865478515625,
-0.04840087890625,
0.02703857421875,
-0.0193634033203125,
-0.035919189453125,
-0.01024627685546875,
-0.0594482421875,
0.0248565673828125,
-0.00722503662109375,
0.0283355712890625,
-0.03387451171875,
0.01505279541015625,
0.0345458984375,
-0.0216522216796875,
-0.0162353515625,
0.0142822265625,
0.019989013671875,
0.0292205810546875,
0.0635986328125,
0.00629425048828125,
0.04620361328125,
0.05084228515625,
0.008819580078125,
-0.0004222393035888672,
-0.068603515625,
-0.0026721954345703125,
0.0238189697265625,
-0.003307342529296875,
0.04638671875,
-0.0227813720703125,
0.0144500732421875,
-0.03045654296875,
-0.01092529296875,
0.0014400482177734375,
0.01238250732421875,
-0.0421142578125,
-0.0308837890625,
-0.0086669921875,
-0.007167816162109375,
0.0421142578125,
0.050048828125,
-0.045684814453125,
-0.062255859375,
-0.038970947265625,
0.04803466796875,
0.053619384765625,
-0.00254058837890625,
-0.03411865234375,
-0.0244140625,
0.0061492919921875,
0.0697021484375,
0.00601959228515625,
0.00649261474609375,
-0.054351806640625,
-0.02459716796875,
-0.044219970703125,
0.00783538818359375,
0.0250244140625,
0.002468109130859375,
0.013671875,
0.052764892578125,
-0.0296783447265625,
-0.031982421875,
-0.0203704833984375,
-0.0160369873046875,
0.04498291015625,
-0.032501220703125,
-0.03179931640625,
-0.044586181640625,
-0.0020847320556640625,
-0.007167816162109375,
0.01323699951171875,
0.0462646484375,
-0.039215087890625,
0.004947662353515625,
-0.019744873046875,
0.035064697265625,
-0.05645751953125,
0.0014982223510742188,
0.0147857666015625,
-0.04620361328125,
-0.04547119140625,
-0.006351470947265625,
-0.0099029541015625,
0.011993408203125,
0.031463623046875,
0.054473876953125,
0.044647216796875,
0.0706787109375,
0.055145263671875,
-0.03564453125,
-0.0423583984375,
0.0246734619140625,
0.02935791015625,
0.0219268798828125,
0.072021484375,
0.01088714599609375,
0.0511474609375,
0.055877685546875,
0.00882720947265625,
0.01126861572265625,
-0.0289154052734375,
0.0318603515625,
-0.021209716796875,
-0.0029468536376953125,
0.00792694091796875,
-0.0031566619873046875,
0.040191650390625,
0.00534820556640625,
-0.017333984375,
0.031585693359375,
0.01462554931640625,
0.06024169921875,
-0.03021240234375,
0.04510498046875,
0.05291748046875,
0.0186614990234375,
0.07049560546875,
0.07012939453125,
0.07403564453125,
0.0008139610290527344,
-0.005596160888671875,
0.0462646484375,
0.032867431640625,
0.0343017578125,
-0.007007598876953125,
-0.045745849609375,
0.0191802978515625,
-0.0005507469177246094,
-0.0209197998046875,
-0.054931640625,
-0.0229034423828125,
-0.0394287109375,
-0.053192138671875,
-0.0164947509765625,
-0.046051025390625,
0.06298828125,
0.03106689453125,
-0.0162811279296875,
0.044464111328125,
0.0550537109375,
0.07421875,
0.0017137527465820312,
0.016754150390625,
-0.023193359375,
0.04815673828125,
-0.016754150390625,
0.04443359375,
-0.030548095703125,
-0.0017538070678710938,
0.0394287109375,
0.021270751953125,
0.002620697021484375,
0.0005955696105957031,
0.02947998046875,
-0.03680419921875,
-0.00553131103515625,
-0.01131439208984375,
-0.01389312744140625,
-0.0139312744140625,
0.044769287109375,
-0.0201263427734375,
-0.04937744140625,
0.009490966796875,
0.047943115234375,
-0.0253753662109375,
0.047637939453125,
0.00807952880859375,
0.04547119140625,
0.0200042724609375,
0.037261962890625,
-0.025238037109375,
-0.03326416015625,
0.0283966064453125,
-0.031951904296875,
0.049560546875,
-0.04571533203125,
-0.0011434555053710938,
-0.041107177734375,
-0.0093231201171875,
-0.03717041015625,
-0.005748748779296875,
-0.041015625,
-0.0250701904296875,
-0.006927490234375,
0.0120697021484375,
-0.01422882080078125,
0.0211029052734375,
0.032196044921875,
-0.00789642333984375,
0.048370361328125,
-0.01039886474609375,
-0.0435791015625,
-0.0360107421875,
0.043426513671875,
-0.004566192626953125,
0.03375244140625,
0.041412353515625,
-0.045013427734375,
0.047271728515625,
0.021209716796875,
-0.032379150390625,
0.03717041015625,
-0.0158233642578125,
0.04351806640625,
0.020721435546875,
-0.01561737060546875,
-0.0325927734375,
-0.0175018310546875,
-0.00749969482421875,
-0.00487518310546875,
-0.0191650390625,
-0.03668212890625,
0.019744873046875,
0.040679931640625,
-0.0203704833984375,
0.00536346435546875,
-0.0394287109375,
-0.0305633544921875,
0.007480621337890625,
0.041839599609375,
-0.0294647216796875,
0.03985595703125,
0.0095367431640625,
0.01039886474609375,
-0.0260162353515625,
-0.0201263427734375,
-0.0369873046875,
-0.006214141845703125,
-0.0169677734375,
0.0209197998046875,
-0.0214691162109375,
-0.038482666015625,
0.02783203125,
-0.044830322265625,
0.039520263671875,
-0.04486083984375,
-0.04302978515625,
-0.0310821533203125,
-0.049163818359375,
-0.03839111328125,
0.04925537109375,
-0.039093017578125,
0.0236053466796875,
-0.0026092529296875,
-0.049560546875,
-0.005496978759765625,
-0.0271148681640625,
-0.00841522216796875,
-0.025848388671875,
0.0257568359375,
-0.006717681884765625,
-0.039215087890625,
0.046539306640625,
0.0206146240234375,
-0.043365478515625,
0.029632568359375,
-0.01140594482421875,
0.042083740234375,
-0.035980224609375,
0.0294036865234375,
-0.01247406005859375,
0.0231781005859375,
0.033050537109375,
-0.043548583984375,
-0.0290069580078125,
0.02471923828125,
-0.046844482421875,
0.0386962890625,
0.004459381103515625,
0.04376220703125,
0.0245361328125,
0.028564453125,
0.045501708984375,
-0.03607177734375,
0.047332763671875,
-0.025421142578125,
0.03741455078125,
0.0017986297607421875,
0.0005221366882324219,
-0.031829833984375,
0.009002685546875,
-0.0291290283203125,
-0.0151824951171875,
-0.040985107421875,
0.026123046875,
-0.03564453125,
-0.038055419921875,
-0.018951416015625,
0.04962158203125,
0.0419921875,
0.01374053955078125,
-0.0382080078125,
-0.046295166015625,
-0.0242919921875,
0.0218048095703125,
-0.0328369140625,
0.021575927734375,
0.00678253173828125,
0.032684326171875,
0.047515869140625,
0.024200439453125,
-0.03277587890625,
0.0301055908203125,
0.0037078857421875,
0.0211029052734375,
-0.04669189453125,
-0.009735107421875,
0.043975830078125,
-0.0284271240234375,
0.042083740234375,
0.0034694671630859375,
0.0202789306640625,
0.038970947265625,
0.0127410888671875,
-0.04925537109375,
0.044647216796875,
0.0242919921875,
0.0303497314453125,
0.0200958251953125,
-0.0081329345703125,
0.033294677734375,
-0.04608154296875,
-0.042266845703125,
0.00724029541015625,
-0.028411865234375,
-0.0300750732421875,
0.002655029296875,
-0.01312255859375,
0.02935791015625,
0.034942626953125,
-0.030792236328125,
-0.00034499168395996094,
-0.001495361328125,
0.0245819091796875,
-0.0228271484375,
-0.0165863037109375,
0.035125732421875,
0.011474609375,
-0.026702880859375,
-0.0498046875,
-0.0294342041015625,
0.0279541015625,
0.008392333984375,
-0.007171630859375,
0.0367431640625,
0.042144775390625,
-0.0177001953125,
0.00209808349609375,
-0.0269317626953125,
0.03045654296875,
-0.0286102294921875,
-0.04779052734375,
-0.045684814453125,
-0.0208892822265625,
-0.04974365234375,
-0.0299224853515625,
0.00958251953125,
0.04888916015625,
0.02972412109375,
-0.0207977294921875,
0.002166748046875,
-0.042724609375,
-0.00681304931640625,
-0.026519775390625,
-0.0308380126953125,
-0.0273590087890625,
0.0175628662109375,
-0.0477294921875,
-0.037139892578125,
-0.041534423828125,
0.00705718994140625,
-0.02386474609375,
0.01407623291015625,
0.048858642578125,
0.0267181396484375,
-0.0308074951171875,
0.035614013671875,
-0.0435791015625,
0.0256500244140625,
0.005298614501953125,
0.0224609375,
-0.00835418701171875,
-0.00408935546875,
0.02850341796875,
-0.048858642578125,
-0.004245758056640625,
0.04400634765625,
0.036346435546875,
0.020660400390625,
-0.04010009765625,
-0.00904083251953125,
0.036346435546875,
-0.04022216796875,
0.047454833984375,
-0.0295867919921875,
-0.044281005859375,
0.027374267578125,
0.0143890380859375,
0.0005478858947753906,
0.0167236328125,
-0.046966552734375,
0.00615692138671875,
-0.02667236328125,
-0.04852294921875,
-0.04754638671875,
-0.04034423828125,
-0.0189361572265625,
0.028228759765625,
0.01357269287109375,
-0.0231475830078125,
-0.015777587890625,
0.027313232421875,
-0.0360107421875,
0.042022705078125,
0.009307861328125,
-0.043670654296875,
-0.045379638671875,
-0.0013971328735351562,
-0.0280609130859375,
0.045074462890625,
-0.025665283203125,
0.01702880859375,
-0.043609619140625,
-0.048095703125,
0.045135498046875,
-0.0242462158203125,
-0.0118865966796875,
0.0031070709228515625,
-0.048187255859375,
0.006816864013671875,
-0.006427764892578125,
-0.038543701171875,
0.03668212890625,
-0.042266845703125,
-0.01485443115234375,
0.00531005859375,
0.021881103515625,
0.0204925537109375,
-0.04833984375,
0.0200653076171875,
-0.037841796875,
-0.0450439453125,
0.03936767578125,
-0.04595947265625,
0.0226287841796875,
0.04254150390625,
1.5079975128173828e-05,
-0.030242919921875,
-0.017730712890625,
-0.0109100341796875,
0.0303497314453125,
0.03485107421875,
-0.047454833984375,
0.0496826171875,
-0.042633056640625,
0.0225372314453125,
0.0030651092529296875,
0.0162506103515625,
-0.0166473388671875,
-0.002758026123046875,
0.0262908935546875,
-0.009002685546875,
-0.039398193359375,
0.01439666748046875,
-0.0002281665802001953,
0.0401611328125,
0.027435302734375,
0.0270538330078125,
-0.0025768280029296875,
0.028472900390625,
-0.006885528564453125,
-0.04913330078125,
0.0261993408203125,
0.038848876953125,
-0.0330810546875,
0.03204345703125,
0.0078582763671875,
0.0416259765625,
-0.01378631591796875,
-0.032745361328125,
0.027435302734375,
-0.0487060546875,
-0.047698974609375,
0.0094451904296875,
-0.006313323974609375,
0.0192108154296875,
-0.019378662109375,
0.01499176025390625,
0.00772857666015625,
-0.0165252685546875,
-0.011932373046875,
0.0241851806640625,
0.01422882080078125,
-0.03729248046875,
0.02532958984375,
-0.04766845703125,
-0.0156707763671875,
0.027496337890625,
0.022674560546875,
-0.003971099853515625,
-0.042388916015625,
0.028839111328125,
0.026763916015625,
0.0012521743774414062,
-0.037933349609375,
-0.016387939453125,
0.0238189697265625,
-0.005527496337890625,
-0.042816162109375,
0.0374755859375,
-0.0161895751953125,
-0.035064697265625,
0.028961181640625,
0.0007991790771484375,
0.0184478759765625,
0.00435638427734375,
0.04840087890625,
0.047760009765625,
-0.016204833984375,
0.031768798828125,
0.0146026611328125,
-0.0182952880859375,
-0.02191162109375,
0.004749298095703125,
-0.0494384765625,
-0.004119873046875,
-0.0067901611328125,
-0.040252685546875,
-0.037261962890625,
0.0281982421875,
-0.034515380859375,
-0.00982666015625,
-0.04095458984375,
0.0088043212890625,
0.00946044921875,
-0.0265350341796875,
0.0214996337890625,
0.0295867919921875,
-0.0251922607421875,
-0.0079345703125,
-0.0389404296875,
0.038909912109375,
0.032562255859375,
0.0110321044921875,
-0.04522705078125,
0.00957489013671875,
-0.0112152099609375,
0.0018186569213867188,
-0.0207061767578125,
-0.0084075927734375,
0.047576904296875,
0.030029296875,
0.0002562999725341797,
0.0250396728515625,
0.050140380859375,
-0.0173187255859375,
0.03204345703125,
-0.0019140243530273438,
-0.00811004638671875,
-0.04400634765625,
0.01641845703125,
0.05328369140625,
-0.0404052734375,
-0.05548095703125,
-0.05517578125,
-0.023162841796875,
-0.007904052734375,
-0.051544189453125,
-0.00829315185546875,
0.065673828125,
-0.0238037109375,
-0.02972412109375,
0.038604736328125,
-0.0253143310546875,
0.0184478759765625,
0.049957275390625,
0.049835205078125,
-0.04632568359375,
0.0148162841796875,
-0.0594482421875,
0.0189208984375,
0.041961669921875,
0.046844482421875,
0.041168212890625,
-0.03582763671875,
0.0185699462890625,
0.0323486328125,
-0.04840087890625,
-0.0186614990234375,
-0.0177154541015625,
0.022918701171875,
0.02557373046875,
-0.0231781005859375,
0.040557861328125,
-0.04583740234375,
-0.004207611083984375,
0.01251220703125,
-0.0228118896484375,
0.0018968582153320312,
-0.0260467529296875,
0.0165252685546875,
-0.0733642578125,
0.020355224609375,
-0.00649261474609375,
-0.009735107421875,
-0.0328369140625,
0.02557373046875,
-0.055755615234375,
-0.0311737060546875,
0.034912109375,
0.0158233642578125,
-0.0310516357421875,
-0.0248565673828125,
-0.02337646484375,
0.0250091552734375,
0.055267333984375,
0.029083251953125,
0.0283203125,
0.042877197265625,
-0.04168701171875,
0.049072265625,
-0.022613525390625,
0.04638671875,
0.050048828125,
-0.0011682510375976562,
0.0274810791015625,
-0.053985595703125,
-0.031890869140625,
0.04010009765625,
-0.0200653076171875,
-0.040008544921875,
-0.040618896484375,
0.0357666015625,
0.03271484375,
-0.02911376953125,
0.00850677490234375,
-0.058349609375,
-0.0108489990234375,
-0.0181427001953125,
0.0004811286926269531,
-0.0282135009765625,
0.0236358642578125,
0.034759521484375,
0.0908203125,
-0.039337158203125,
-0.0308990478515625,
0.023223876953125,
0.037750244140625,
0.0242156982421875,
0.0127410888671875,
0.0307159423828125,
0.0289764404296875,
0.05999755859375,
0.0299224853515625,
0.031402587890625,
0.032196044921875,
0.03173828125,
-0.03546142578125,
0.0192718505859375,
-0.003936767578125,
-0.020294189453125,
0.0374755859375,
-0.04217529296875,
0.0284881591796875,
0.006389617919921875,
0.031524658203125,
-0.01812744140625,
-0.01995849609375,
0.0180206298828125,
-0.01293182373046875,
-0.0049896240234375,
-0.02081298828125,
-0.0284576416015625,
0.048004150390625,
-0.00897216796875,
0.00965118408203125,
-0.061004638671875,
-0.0051422119140625,
-0.0003440380096435547,
0.003597259521484375,
-0.029266357421875,
-0.032501220703125,
-0.08709716796875,
-0.021728515625,
-0.022857666015625,
0.036834716796875,
0.015045166015625,
-0.044921875,
0.007152557373046875,
-0.02001953125,
-0.03131103515625,
-0.0255889892578125,
-0.02215576171875,
0.0280914306640625,
0.00565338134765625,
-0.037353515625,
0.044403076171875,
0.020416259765625,
-0.032135009765625,
0.00858306884765625,
-0.0467529296875,
0.032470703125,
0.00428009033203125,
0.0164642333984375,
0.0330810546875,
-0.036163330078125,
0.01042938232421875,
-0.042755126953125,
0.00421905517578125,
0.015533447265625,
-0.0105438232421875,
0.038543701171875,
-0.048187255859375,
-0.0011882781982421875,
0.03314208984375,
-0.048065185546875,
-0.0399169921875,
0.00223541259765625,
0.07025146484375,
-0.046356201171875,
-0.033782958984375,
-0.0019311904907226562,
-0.01395416259765625,
0.00775909423828125,
-0.041748046875,
-0.004253387451171875,
-0.01331329345703125,
0.04010009765625,
0.01534271240234375,
0.0267791748046875,
0.02581787109375,
-0.03753662109375,
9.697675704956055e-05,
0.019439697265625,
0.0043792724609375,
0.03375244140625,
-0.0106201171875,
-0.0191497802734375,
0.040008544921875,
0.0052337646484375,
0.0050506591796875,
-0.063720703125,
0.059783935546875,
-0.0179290771484375,
0.0200042724609375,
-0.037872314453125,
-0.005931854248046875,
0.044647216796875,
-0.0147552490234375,
0.006679534912109375,
0.031097412109375,
-0.00823211669921875,
-0.0111236572265625,
-0.0282745361328125,
-0.0364990234375,
0.005535125732421875,
-0.038299560546875,
0.03753662109375,
0.014190673828125,
-0.0185546875,
-0.017333984375,
0.028961181640625,
0.01537322998046875,
0.03851318359375,
-0.00904083251953125,
0.005313873291015625,
-0.0278472900390625,
-0.007205963134765625,
0.038177490234375,
0.03662109375,
0.0212554931640625,
-0.04669189453125,
-0.032928466796875,
-0.0182342529296875,
-0.009246826171875,
0.0087738037109375,
0.02471923828125,
-0.004665374755859375,
-0.0248260498046875,
0.0163421630859375,
0.006610870361328125,
-0.05780029296875,
0.0635986328125,
0.003314971923828125,
-0.0232391357421875,
-0.0210723876953125,
-0.0168609619140625,
0.0212860107421875,
0.0150299072265625,
-0.0146942138671875,
-0.0106353759765625,
-0.005374908447265625,
0.0404052734375,
-0.0093231201171875,
0.0156402587890625,
-0.0211639404296875,
0.015716552734375,
0.01038360595703125,
-0.0236968994140625,
0.0044403076171875,
0.030242919921875,
0.03826904296875,
0.01532745361328125,
0.0151214599609375,
0.0335693359375,
0.0255279541015625,
-0.046051025390625,
-0.05426025390625,
0.040496826171875,
-0.033599853515625,
-0.046417236328125,
-0.016082763671875,
0.033294677734375,
0.040985107421875,
0.038787841796875,
0.01561737060546875,
-0.061004638671875,
-0.01393890380859375,
0.0419921875,
-0.027984619140625,
-0.00160980224609375,
0.034271240234375,
0.047027587890625,
-0.00753021240234375,
0.00010263919830322266,
-0.01548004150390625,
0.026153564453125,
0.0163726806640625,
0.045379638671875,
0.03814697265625,
0.031280517578125,
0.0278778076171875,
0.0340576171875,
0.047210693359375,
0.01104736328125,
0.027099609375,
0.0035648345947265625,
0.0228271484375,
0.01922607421875,
-0.04608154296875,
0.018218994140625,
-0.01538848876953125,
-0.01898193359375,
0.011505126953125,
0.05584716796875,
0.03875732421875,
0.01275634765625,
-0.032501220703125,
-0.052001953125,
-0.0229949951171875,
0.037933349609375,
0.01340484619140625,
0.01244354248046875,
-0.017791748046875,
-0.032867431640625,
-0.0229949951171875,
-0.047271728515625,
-0.0034351348876953125,
0.0380859375,
-0.03680419921875,
-0.033172607421875,
-0.0294647216796875,
-0.054229736328125,
-0.024261474609375,
0.011688232421875,
-0.0310211181640625,
0.0054473876953125,
-0.052276611328125,
0.01971435546875,
0.0157928466796875,
-0.0127410888671875,
0.041290283203125,
0.0170440673828125,
0.01100921630859375,
0.0050201416015625,
0.0614013671875,
-0.0207061767578125,
0.004970550537109375,
-0.039886474609375,
0.035247802734375,
-0.0299835205078125,
-0.044189453125,
0.0176849365234375,
-0.03240966796875,
0.011444091796875,
-0.0188140869140625,
0.021209716796875,
-0.0030193328857421875,
0.0244140625,
0.0570068359375,
-0.01378631591796875,
0.00659942626953125,
-0.034576416015625,
0.01084136962890625,
0.05517578125,
0.040252685546875,
-0.055511474609375,
-0.007205963134765625,
-0.0212249755859375,
-0.0185394287109375,
-0.01390838623046875,
-0.024383544921875,
0.0154266357421875,
0.037322998046875,
-0.02935791015625,
0.050811767578125,
0.01169586181640625,
-0.00862884521484375,
0.044464111328125,
-0.0309906005859375,
-0.038238525390625,
-0.031982421875,
-0.01629638671875,
-0.0115203857421875,
0.0014324188232421875,
-0.033905029296875,
-0.053741455078125,
0.0029697418212890625,
-0.00836944580078125,
-0.025421142578125,
0.032196044921875,
0.0102996826171875,
0.0416259765625,
0.057708740234375,
0.038330078125,
0.01213836669921875,
0.01297760009765625,
0.03326416015625,
0.0250091552734375,
0.036712646484375,
-0.0194854736328125,
0.0259857177734375,
0.0081634521484375,
-0.0211639404296875,
0.004367828369140625,
-0.043731689453125,
-0.0592041015625,
-0.06304931640625,
0.03570556640625,
-0.01641845703125,
0.001953125,
-0.0135345458984375,
0.00325775146484375,
0.0263214111328125,
0.005157470703125,
-0.0460205078125,
0.0015993118286132812,
-0.04705810546875,
-0.0173492431640625,
0.061920166015625,
0.0184783935546875,
-0.029876708984375,
0.06298828125,
-0.04522705078125,
-0.0100555419921875,
0.05291748046875,
0.0283203125,
-0.04864501953125,
-0.01523590087890625,
0.0240325927734375,
0.01385498046875,
0.0384521484375,
0.023223876953125,
0.03533935546875,
0.07843017578125,
0.05841064453125,
-0.0254364013671875,
0.01464080810546875,
-0.0243072509765625,
-0.0204925537109375,
0.041107177734375,
0.0308074951171875,
0.025115966796875,
-0.037200927734375,
-0.06182861328125,
0.05133056640625,
-0.0235595703125,
0.055206298828125,
0.0247802734375,
0.0273284912109375,
0.0296630859375,
0.03875732421875,
0.03558349609375,
0.00927734375,
0.006282806396484375,
-0.032196044921875,
0.0119476318359375,
-0.038360595703125,
9.566545486450195e-05,
-0.036041259765625,
-0.043914794921875,
-0.057037353515625,
-0.043243408203125,
-0.01122283935546875,
-0.016754150390625,
-0.00524139404296875,
-0.007755279541015625,
0.059906005859375,
-0.0301513671875,
-0.051239013671875,
0.0173187255859375,
0.0548095703125,
0.035919189453125,
-0.024658203125,
-0.020233154296875,
-0.0184478759765625,
-0.02001953125,
-0.0011129379272460938,
0.0105133056640625,
0.01270294189453125,
-0.038360595703125,
-0.0083770751953125,
0.01256561279296875,
0.046478271484375,
-0.003658294677734375,
-0.04437255859375,
-0.0134735107421875,
0.0227813720703125,
0.00505828857421875,
0.02337646484375,
-0.008544921875,
0.006671905517578125,
0.01194000244140625,
0.03375244140625,
0.0081787109375,
-0.0279083251953125,
0.06658935546875,
0.044708251953125,
-0.0311431884765625,
-0.039520263671875,
-0.00609588623046875,
-0.0121612548828125,
0.0253753662109375,
-0.01511383056640625,
-0.05145263671875,
0.0247650146484375,
-0.054534912109375,
0.054931640625,
0.04571533203125,
0.001796722412109375,
-0.0096435546875,
0.0122222900390625,
0.058868408203125,
-0.01354217529296875,
0.035430908203125,
0.0450439453125,
-0.0159912109375,
-0.00377655029296875,
-0.010528564453125,
-0.028167724609375,
0.02691650390625,
0.0193328857421875,
-0.02325439453125,
-0.022857666015625,
0.002094268798828125,
0.0239715576171875,
0.0022182464599609375,
0.0205535888671875,
-0.03387451171875,
-0.0008244514465332031,
-0.017822265625,
0.017181396484375,
0.0291290283203125,
0.056243896484375,
0.0400390625,
0.039947509765625,
0.01019287109375,
-0.033966064453125,
-0.0316162109375,
0.048583984375,
-0.0021762847900390625,
-0.033294677734375,
-0.056243896484375,
0.037017822265625,
0.021240234375,
0.0259857177734375,
-0.052459716796875,
-0.0283203125,
0.03778076171875,
0.023223876953125,
0.01055145263671875,
-0.025238037109375,
0.00098419189453125,
0.0210113525390625,
0.03875732421875,
-0.038543701171875,
0.025970458984375,
-0.021820068359375,
-0.04718017578125,
0.0019969940185546875,
-0.015716552734375,
0.0009860992431640625,
-0.0228424072265625,
-0.0283355712890625,
0.01158905029296875,
-0.0275421142578125,
0.0224456787109375,
0.009613037109375,
-0.0032062530517578125,
0.045196533203125,
0.0002918243408203125,
0.054351806640625,
-0.0618896484375,
-0.0172882080078125,
0.011322021484375,
0.0003464221954345703,
-0.0242462158203125,
0.00821685791015625,
0.012664794921875,
-0.025115966796875,
-0.03179931640625,
-0.00080108642578125,
0.0215301513671875,
0.035858154296875,
0.032135009765625,
-0.051849365234375,
-0.01432037353515625,
0.04443359375,
0.0626220703125,
0.0845947265625,
-0.016021728515625,
0.044097900390625,
0.004909515380859375,
0.0325927734375,
0.039764404296875,
-0.006557464599609375,
-0.0162353515625,
0.022247314453125,
0.05584716796875,
0.05316162109375,
-0.0489501953125,
0.0280914306640625,
-0.034912109375,
0.04718017578125,
-0.01172637939453125,
-0.047393798828125,
0.0041656494140625,
-0.03253173828125,
-0.057830810546875,
-0.054168701171875,
-0.050201416015625,
0.0213470458984375,
0.04248046875,
0.01678466796875,
0.04388427734375,
-0.0243072509765625,
-0.055145263671875,
-0.0648193359375,
-0.041717529296875,
0.0025234222412109375,
-0.00994110107421875,
0.00490570068359375,
-0.008880615234375,
0.0222015380859375,
0.057281494140625,
0.0039005279541015625,
0.002101898193359375,
-0.0132904052734375,
0.004955291748046875,
0.019195556640625,
-0.01690673828125,
0.0292510986328125,
-0.0211639404296875,
0.03497314453125,
0.040435791015625,
-0.051849365234375,
0.0404052734375,
-0.01508331298828125,
0.055938720703125,
-0.003368377685546875,
0.03643798828125,
-0.0682373046875,
-0.051727294921875,
-0.03668212890625,
-0.07647705078125,
-0.032470703125,
-0.0009775161743164062,
-0.0297393798828125,
-0.0313720703125,
-0.052398681640625,
-0.0258941650390625,
0.0017948150634765625,
-0.00911712646484375,
-0.057586669921875,
0.045013427734375,
0.0321044921875,
-0.0187835693359375,
-0.034881591796875,
-0.01544952392578125,
0.01410675048828125,
-0.0377197265625,
0.03887939453125,
0.0168304443359375,
0.0107574462890625,
0.06884765625,
-0.01082611083984375,
-0.0001989603042602539,
0.06842041015625,
0.05731201171875,
0.03692626953125,
-0.01983642578125,
0.020294189453125,
0.0150909423828125,
0.0022106170654296875,
0.027618408203125,
-0.006778717041015625,
-0.004932403564453125,
0.0628662109375,
0.044036865234375,
-0.027862548828125,
-0.011749267578125,
0.006641387939453125,
-0.034698486328125,
0.03570556640625,
-0.04327392578125,
0.0078125,
0.002353668212890625,
0.0521240234375,
0.01198577880859375,
-0.03094482421875,
-0.042694091796875,
-0.034332275390625,
0.003200531005859375,
-0.0114288330078125,
-0.0007500648498535156,
-0.018585205078125,
0.023590087890625,
0.04034423828125,
0.0012159347534179688,
0.03912353515625,
0.042022705078125,
0.0020580291748046875,
0.00269317626953125,
-0.02667236328125,
0.03216552734375,
-0.0208740234375,
0.021484375,
0.03912353515625,
0.0226898193359375,
0.05120849609375,
0.038299560546875,
-0.0276031494140625,
-0.019500732421875,
0.046722412109375,
-0.02764892578125,
-0.017822265625,
-0.032989501953125,
-0.035552978515625,
0.0129241943359375,
0.050872802734375,
0.00479888916015625,
0.02532958984375,
-0.061614990234375,
-0.0291290283203125,
0.033843994140625,
0.047515869140625,
-0.039703369140625,
-0.053985595703125,
0.06298828125,
-0.0184478759765625,
-0.0225372314453125,
-0.03948974609375,
-0.01654052734375,
0.03619384765625,
0.045074462890625,
0.03302001953125,
0.01016998291015625,
0.04095458984375,
0.0221405029296875,
-0.04559326171875,
-0.0147552490234375,
0.06756591796875,
0.0243682861328125,
-0.037078857421875,
0.030364990234375,
0.03546142578125,
-0.0160064697265625,
-0.046630859375,
0.041961669921875,
0.0277252197265625,
-0.0423583984375,
0.04290771484375,
-0.0260467529296875,
-0.050811767578125,
-0.0070648193359375,
-0.05316162109375,
-0.00640869140625,
-0.0291900634765625,
0.0269622802734375,
-0.0594482421875,
0.0212860107421875,
0.037567138671875,
0.0087890625,
0.046539306640625,
0.0047760009765625,
0.0428466796875,
0.062225341796875,
0.01097869873046875,
-0.0082244873046875,
-0.03436279296875,
0.0018463134765625,
0.0096588134765625,
-0.0023956298828125,
0.01488494873046875,
0.051239013671875,
-0.05084228515625,
-0.03778076171875,
0.079833984375,
0.058502197265625,
0.048614501953125,
0.0016489028930664062,
-0.044586181640625,
-0.04827880859375,
-0.020050048828125,
0.0207061767578125,
-0.04254150390625,
-0.0297393798828125,
-0.033782958984375,
0.0247802734375,
-0.0285186767578125,
0.041717529296875,
-0.0206298828125,
-0.01367950439453125,
-0.0113983154296875,
-0.0560302734375,
0.0153045654296875,
0.05352783203125,
0.023956298828125,
-0.03094482421875,
-0.08026123046875,
0.0052337646484375,
0.01291656494140625,
0.0709228515625,
0.003887176513671875,
0.0310516357421875,
0.002552032470703125,
-0.0133209228515625,
-0.0191802978515625,
-0.017425537109375,
-0.0151519775390625,
0.015899658203125,
-0.05096435546875,
-0.06787109375,
-0.01495361328125,
-0.0208892822265625,
0.051605224609375,
0.05816650390625,
-0.03985595703125,
-0.015777587890625,
-0.04119873046875,
-0.04010009765625,
-0.00592803955078125,
0.01715087890625,
-0.0384521484375,
-0.0631103515625,
0.00466156005859375,
0.025909423828125,
0.0028324127197265625,
0.0369873046875,
0.007343292236328125,
0.0118408203125,
0.01445770263671875,
-0.0018968582153320312,
0.04248046875,
-0.01947021484375,
0.005126953125,
-0.0504150390625,
0.00943756103515625,
0.022003173828125,
-0.04388427734375,
0.00865936279296875,
0.039398193359375,
-0.039825439453125,
-0.057952880859375,
-0.040130615234375,
-0.0056610107421875,
0.0167999267578125,
-0.009796142578125,
0.012786865234375,
0.0012331008911132812,
-0.053314208984375,
0.00971221923828125,
-0.0254669189453125,
0.0011777877807617188,
-0.022857666015625,
0.0205841064453125,
-0.0302581787109375,
-0.0009326934814453125,
-0.0020122528076171875,
0.038299560546875,
-0.046844482421875,
0.02691650390625,
-0.03448486328125,
-0.03948974609375,
0.021026611328125,
0.01541900634765625,
0.04571533203125,
0.0186767578125,
-0.0537109375,
0.0079193115234375,
-0.032989501953125,
-0.0103759765625,
0.046783447265625,
-0.03662109375,
-0.0030002593994140625,
-0.00495147705078125,
-0.0146942138671875,
0.04583740234375,
-0.0224761962890625,
-0.01015472412109375,
-0.043212890625,
-0.0020313262939453125,
-0.0025348663330078125,
0.039794921875,
0.0006151199340820312,
0.0211029052734375,
0.00652313232421875,
0.043548583984375,
0.007450103759765625,
0.005023956298828125,
0.021392822265625,
0.00127410888671875,
-0.0263214111328125,
0.052459716796875,
0.029510498046875,
0.00600433349609375,
0.004669189453125,
0.0169830322265625,
0.01261138916015625,
-0.06121826171875,
-0.032501220703125,
-0.023529052734375,
0.044464111328125,
0.041259765625,
-0.0243682861328125,
-0.007610321044921875,
-0.0293426513671875,
0.0181427001953125,
0.0303497314453125,
0.0587158203125,
0.0158233642578125,
0.0328369140625,
-0.0220184326171875,
0.040313720703125,
-0.039794921875,
-0.01146697998046875,
-0.0187225341796875,
-0.03643798828125,
0.00972747802734375,
-0.054718017578125,
0.0172119140625,
0.01666259765625,
0.0252227783203125,
-0.02947998046875,
0.0068359375,
-0.049041748046875,
0.020263671875,
-0.005405426025390625,
0.0237274169921875,
0.0194244384765625,
0.0010938644409179688,
-0.0295257568359375,
0.047027587890625,
0.04034423828125,
-0.0005698204040527344,
-0.00705718994140625,
0.003414154052734375,
-0.03173828125,
-0.0240631103515625,
-0.03643798828125,
-0.0006098747253417969,
0.007144927978515625,
0.01464080810546875,
-0.00724029541015625,
0.060302734375,
-0.046142578125,
-0.054168701171875,
0.0206756591796875,
0.00494384765625,
0.018218994140625,
0.004032135009765625,
-0.039398193359375,
0.0113372802734375,
-0.00211334228515625,
0.07037353515625,
0.00412750244140625,
-0.042327880859375,
0.040008544921875,
-0.05255126953125,
0.053741455078125,
-0.034271240234375,
0.00861358642578125,
-0.013336181640625,
-0.0312042236328125,
0.01471710205078125,
-0.0243377685546875,
0.021820068359375,
-0.02294921875,
0.07977294921875,
0.08978271484375,
0.032745361328125,
-0.042144775390625,
0.0116119384765625,
0.0014171600341796875,
-0.019805908203125,
0.005496978759765625,
0.07135009765625,
0.0018796920776367188,
0.0185089111328125,
0.0011806488037109375,
-0.007640838623046875,
-0.0019016265869140625,
0.02978515625,
-0.037384033203125,
0.046173095703125,
0.010467529296875,
0.025604248046875,
0.023529052734375,
-0.0017023086547851562,
0.0528564453125,
0.01380157470703125,
-0.01776123046875,
0.03070068359375,
-0.033721923828125,
-0.00838470458984375,
0.0338134765625,
0.022430419921875,
-0.0060272216796875,
0.042205810546875,
0.04278564453125,
-0.003452301025390625,
0.05120849609375,
-0.055877685546875,
0.05517578125,
-0.0149078369140625,
0.0313720703125,
0.041412353515625,
-0.044158935546875,
-0.0287017822265625,
-0.019195556640625,
-0.00832366943359375,
-0.01470947265625,
0.060516357421875,
0.04986572265625,
-0.042877197265625,
0.0019588470458984375,
0.0047607421875,
0.068603515625,
0.095703125,
0.048370361328125,
-0.005214691162109375,
0.020843505859375,
0.03033447265625,
0.057464599609375,
0.01529693603515625,
0.030517578125,
0.07025146484375,
-0.0020160675048828125,
-0.0189971923828125,
-0.002124786376953125,
-0.042022705078125,
-0.0169677734375,
-0.030364990234375,
-0.0288238525390625,
0.0025157928466796875,
-0.04638671875,
0.0277252197265625,
0.05853271484375,
0.044403076171875,
0.0222625732421875,
0.01103973388671875,
0.06982421875,
0.06512451171875,
0.057464599609375,
0.007556915283203125,
-0.04095458984375,
0.0201873779296875,
0.044586181640625,
0.060302734375,
0.048980712890625,
0.0283203125,
0.031097412109375,
-0.010406494140625,
-0.054107666015625,
-0.0170440673828125,
0.006923675537109375,
0.0009241104125976562,
-0.005649566650390625,
-0.0396728515625,
0.035186767578125,
-0.01505279541015625,
0.0260009765625,
-0.0211334228515625,
0.0290679931640625,
0.0184478759765625,
-0.005344390869140625,
0.039825439453125,
-0.047760009765625,
0.019744873046875,
-0.01091766357421875,
0.034149169921875,
0.00124359130859375,
-0.050933837890625,
0.0352783203125,
0.0246734619140625,
0.023712158203125,
-0.046112060546875,
0.0396728515625,
0.028656005859375,
0.060821533203125,
-0.039306640625,
0.02667236328125,
-0.045928955078125,
0.054229736328125,
0.050750732421875,
-0.03326416015625,
-0.00849151611328125,
0.016937255859375,
-0.031768798828125,
0.019683837890625,
-0.005298614501953125,
0.0065155029296875,
-0.0312347412109375,
-0.0360107421875,
-0.0418701171875,
-0.01186370849609375,
0.0177764892578125,
0.03375244140625,
-0.0078887939453125,
-0.0255279541015625,
-0.008819580078125,
-0.032379150390625,
-0.025634765625,
-0.00704193115234375,
0.0374755859375,
-0.006694793701171875,
-0.038330078125,
-0.00734710693359375,
-0.004070281982421875,
0.0190277099609375,
0.00661468505859375,
0.018035888671875,
0.0134124755859375,
0.057708740234375,
-0.02105712890625,
-0.00824737548828125,
0.0247955322265625,
0.035980224609375,
0.042083740234375,
-0.00864410400390625,
-0.0295562744140625,
0.00655364990234375,
0.023956298828125,
-0.037750244140625,
0.01232147216796875,
-0.0279083251953125,
0.0537109375,
-0.0316162109375,
0.00739288330078125,
-0.00894927978515625,
0.00897216796875,
-0.0252227783203125,
0.0170745849609375,
-0.0460205078125,
0.0037784576416015625,
-0.06243896484375,
0.047943115234375,
0.0247039794921875,
0.01751708984375,
0.007137298583984375,
-0.0003876686096191406,
-0.024993896484375,
0.032012939453125,
0.048736572265625,
-0.0411376953125,
0.01824951171875,
-0.036834716796875,
0.026275634765625,
-0.02227783203125,
-0.00826263427734375,
0.034576416015625,
-0.01861572265625,
0.052978515625,
0.0667724609375,
0.0123291015625,
0.020477294921875,
-0.01332855224609375,
-0.02777099609375,
0.061248779296875,
-0.0260772705078125,
0.0266876220703125,
-0.033050537109375,
-0.0234375,
-0.017913818359375,
-0.01971435546875,
-0.0161590576171875,
-0.0270233154296875,
-0.0298309326171875,
0.03973388671875,
0.0303192138671875,
-0.0308990478515625,
0.0011014938354492188,
0.0186767578125,
0.00698089599609375,
0.020904541015625,
-0.038909912109375,
-0.0274658203125,
-0.0234375,
0.055572509765625,
0.03594970703125,
-0.00982666015625,
-0.03790283203125,
-0.0189056396484375,
-0.015594482421875,
-0.0224761962890625,
-0.0285186767578125,
-0.03765869140625,
-0.01291656494140625,
0.05047607421875,
-0.01390838623046875,
0.058135986328125,
0.01230621337890625,
0.021575927734375,
-0.062255859375,
-0.017822265625,
0.02349853515625,
0.03411865234375,
0.018463134765625,
0.053985595703125,
-0.025543212890625,
0.04443359375,
0.01442718505859375,
0.036285400390625,
0.00783538818359375,
-0.01306915283203125,
-0.0233306884765625,
-0.0043182373046875,
0.038970947265625,
0.009765625,
-0.0433349609375,
0.027496337890625,
-0.0016317367553710938,
0.022430419921875,
0.007373809814453125,
0.005054473876953125,
-0.0035800933837890625,
-0.02691650390625,
-0.01537322998046875,
-0.0183258056640625,
-0.06195068359375,
0.0277099609375,
-0.02685546875,
-0.0194549560546875,
-0.00490570068359375,
0.0157012939453125,
0.04241943359375,
0.034423828125,
0.034515380859375,
0.006443023681640625,
0.034576416015625,
0.00522613525390625,
-0.0142669677734375,
-0.04833984375,
0.008636474609375,
0.0170440673828125,
0.040771484375,
0.01508331298828125,
0.00677490234375,
0.040924072265625,
0.04522705078125,
-0.00942230224609375,
-0.03790283203125,
-0.1019287109375,
-0.047821044921875,
0.0300750732421875,
-0.0235137939453125,
-0.0482177734375,
-0.02691650390625,
-0.0019626617431640625,
-0.039337158203125,
-0.023895263671875,
0.0233001708984375,
-0.0089111328125,
-0.00794219970703125,
-0.00342559814453125,
-0.0034351348876953125,
-0.04962158203125,
-0.0276031494140625,
-0.0225067138671875,
0.019287109375,
-0.05694580078125,
0.00684356689453125,
-0.0134429931640625,
-0.0173492431640625,
-0.00652313232421875,
-0.0258331298828125,
-0.035186767578125,
-0.05340576171875,
0.03448486328125,
0.0706787109375,
-0.0078125,
-0.06768798828125,
-0.032745361328125,
0.0055084228515625,
0.0251312255859375,
-0.046783447265625,
-0.022735595703125,
-0.03729248046875,
-0.024078369140625,
0.0615234375,
0.01531219482421875,
0.0164947509765625,
0.0066986083984375,
-0.04803466796875,
0.031768798828125,
-0.045440673828125,
3.2961368560791016e-05,
-0.062744140625,
-0.005184173583984375,
0.027984619140625,
-0.057037353515625,
0.046966552734375,
-0.0065460205078125,
-0.044189453125,
-0.0059356689453125,
-0.0153656005859375,
0.08380126953125,
-0.02001953125,
0.0178985595703125,
0.0125885009765625,
-0.01067352294921875,
0.058807373046875,
0.072509765625,
0.0266265869140625,
-0.034271240234375,
0.01070404052734375,
0.044921875,
0.043975830078125,
0.00690460205078125,
-0.06890869140625,
-0.005908966064453125,
6.592273712158203e-05,
0.0283660888671875,
-0.015960693359375,
-0.0100555419921875,
0.021270751953125,
-0.0157318115234375,
0.0067138671875,
0.0212554931640625,
-0.010528564453125,
0.024383544921875,
0.0206756591796875,
-0.0323486328125,
-0.01654052734375,
-0.055816650390625,
0.0247802734375,
-0.018585205078125,
0.01409912109375,
-0.017913818359375,
-0.04925537109375,
-0.0489501953125,
-0.061126708984375,
-0.0221405029296875,
-0.061676025390625,
-0.062347412109375,
-0.01435089111328125,
0.0246124267578125,
-0.061370849609375,
0.0088348388671875,
-0.006771087646484375,
-0.007480621337890625,
0.0002639293670654297,
0.043609619140625,
0.01486968994140625,
0.0367431640625,
0.018280029296875,
0.0574951171875,
0.0312042236328125,
0.0009531974792480469,
0.015106201171875,
0.01557159423828125,
0.00836944580078125,
0.01322174072265625,
-0.0160980224609375,
-0.035614013671875,
0.00412750244140625,
-0.003814697265625,
0.055206298828125,
-0.05426025390625,
-0.058197021484375,
-0.0447998046875,
0.05352783203125,
0.0170135498046875,
0.00641632080078125,
-0.005092620849609375,
-0.031494140625,
0.0213775634765625,
0.01142120361328125,
0.0151214599609375,
0.043182373046875,
-0.052276611328125,
0.043670654296875,
0.0212249755859375,
0.0024261474609375,
0.0017137527465820312,
-0.014678955078125,
0.048614501953125,
0.04595947265625,
-0.046112060546875,
0.0474853515625,
-0.0011539459228515625,
0.0560302734375,
-0.032928466796875,
0.0196990966796875,
0.01033782958984375,
0.0092926025390625,
-0.01143646240234375,
-0.007762908935546875,
0.04443359375,
-0.01488494873046875,
0.0185394287109375,
-0.03350830078125,
0.03729248046875,
0.046783447265625,
0.0006585121154785156,
0.030426025390625,
0.00930023193359375,
0.019683837890625,
-0.028839111328125,
0.011962890625,
0.0198211669921875,
0.05487060546875,
0.028778076171875,
-0.039398193359375,
-0.0145416259765625,
0.004596710205078125,
0.00234222412109375,
-0.03765869140625,
0.021148681640625,
0.00617218017578125,
-0.004673004150390625,
-0.056488037109375,
0.00511932373046875,
-0.03558349609375,
-0.03216552734375,
0.004787445068359375,
0.0179595947265625,
0.0703125,
0.0484619140625,
-0.0220184326171875,
0.040679931640625,
-0.00876617431640625,
0.055450439453125,
-0.009185791015625,
-0.03399658203125,
-0.01006317138671875,
-0.0252227783203125,
-0.00994110107421875,
0.0273895263671875,
-0.021881103515625,
0.03424072265625,
0.037811279296875,
0.048583984375,
0.040985107421875,
-0.0218353271484375,
-0.003223419189453125,
0.006504058837890625,
0.05328369140625,
0.03936767578125,
0.060455322265625,
0.01470947265625,
0.0350341796875,
0.035247802734375,
0.036224365234375,
0.049102783203125,
-0.0059051513671875,
0.078857421875,
0.061614990234375,
0.01617431640625,
-0.0310516357421875,
0.038177490234375,
-0.011688232421875,
-0.0218353271484375,
0.03558349609375,
0.0172576904296875,
-0.04046630859375,
0.07073974609375,
-0.0186767578125,
0.033447265625,
-0.047393798828125,
-0.0183258056640625,
0.03900146484375,
0.01751708984375,
0.0305633544921875,
0.010345458984375,
-0.0494384765625,
0.03326416015625,
-0.035247802734375,
-0.0097198486328125,
0.040740966796875,
-0.0550537109375,
0.0499267578125,
0.0286865234375,
-0.006877899169921875,
-0.0391845703125,
0.010284423828125,
-0.016265869140625,
-0.020599365234375,
-0.00695037841796875,
-0.00785064697265625,
0.004482269287109375,
-0.052947998046875,
-0.0390625,
-0.0080413818359375,
-0.052337646484375,
-0.035308837890625,
0.038787841796875,
-0.0162200927734375,
-0.044769287109375,
-0.0269012451171875,
0.057525634765625,
-0.019744873046875,
0.06146240234375,
-0.01236724853515625,
-0.05670166015625,
0.00885009765625,
0.017120361328125,
-0.046783447265625,
0.014892578125,
0.0235748291015625,
0.024566650390625,
0.038421630859375,
0.004535675048828125,
0.014404296875,
-0.04376220703125,
-0.01313018798828125,
0.0347900390625,
0.0452880859375,
0.055023193359375,
0.033599853515625,
0.005466461181640625,
-0.01250457763671875,
0.06536865234375,
0.04705810546875,
0.06829833984375,
0.0361328125,
-0.0011463165283203125,
0.0699462890625,
-0.04962158203125,
0.01003265380859375,
0.0279541015625,
-0.00601959228515625,
0.06304931640625,
0.010650634765625,
-0.01812744140625,
0.03271484375,
-0.024688720703125,
0.05029296875,
0.03985595703125,
0.01416015625,
-0.029693603515625,
-0.0303955078125,
0.041748046875,
0.021209716796875,
-0.0194244384765625,
0.0013589859008789062,
0.0178070068359375,
0.01800537109375,
0.01418304443359375,
0.045501708984375,
0.0182342529296875,
-0.069091796875,
-0.0148468017578125,
-0.04010009765625,
0.01404571533203125,
-0.0187225341796875,
0.0173492431640625,
0.007343292236328125,
0.054107666015625,
0.0165557861328125,
0.034423828125,
0.0221405029296875,
0.036376953125,
0.004222869873046875,
0.0277252197265625,
-0.052001953125,
-0.009307861328125,
0.016326904296875,
0.040069580078125,
-0.0186309814453125,
-0.01361083984375,
0.033172607421875,
0.02508544921875,
0.00809478759765625,
-0.0018711090087890625,
0.0200958251953125,
-0.045318603515625,
0.0014743804931640625,
0.0040283203125,
0.00742340087890625,
-0.0716552734375,
-0.034210205078125,
0.047821044921875,
0.0667724609375,
0.049957275390625,
0.005817413330078125,
0.0012331008911132812,
0.033538818359375,
-0.0218048095703125,
-0.0233917236328125,
0.00341796875,
0.00942230224609375,
0.0119171142578125,
-0.006999969482421875,
-0.036773681640625,
-0.0204925537109375,
-0.01435089111328125,
-0.005771636962890625,
0.0096588134765625,
-0.0241851806640625,
0.017608642578125,
-0.054962158203125,
-0.08660888671875,
-0.10302734375,
-0.035186767578125,
-0.00380706787109375,
0.051666259765625,
0.03240966796875,
-0.020843505859375,
-0.00936126708984375,
-0.022705078125,
0.04296875,
-0.00565338134765625,
-0.023529052734375,
0.00724029541015625,
-0.01374053955078125,
-0.031524658203125,
-0.03662109375,
0.037628173828125,
-0.045166015625,
-0.0013818740844726562,
0.049346923828125,
0.027557373046875,
0.0225372314453125,
0.00814056396484375,
-0.03070068359375,
0.04815673828125,
-0.059814453125,
0.02301025390625,
0.027679443359375,
0.049530029296875,
0.0239410400390625,
-0.02392578125,
-0.03741455078125,
-0.0222320556640625,
0.0146942138671875,
-0.016937255859375,
0.022552490234375,
0.049224853515625,
-0.005096435546875,
0.01216888427734375,
0.035064697265625,
0.0303955078125,
0.08026123046875,
0.03814697265625,
0.037322998046875,
-0.003322601318359375,
-0.048980712890625,
0.036895751953125,
-0.018707275390625,
0.03741455078125,
-0.016571044921875,
0.01033782958984375,
0.0149688720703125,
0.0518798828125,
0.00923919677734375,
-0.03759765625,
0.0009465217590332031,
-0.00373077392578125,
0.0168304443359375,
0.01947021484375,
0.053955078125,
0.024261474609375,
-0.001373291015625,
-0.037109375,
0.031005859375,
0.0084686279296875,
-0.02557373046875,
0.009246826171875,
-0.0098724365234375,
0.0271148681640625,
-0.0203704833984375,
0.01361846923828125,
0.034759521484375,
-0.00885772705078125,
-0.003570556640625,
-0.0318603515625,
0.0162200927734375,
0.01070404052734375,
0.039459228515625,
0.014984130859375,
-0.00653076171875,
-0.0019178390502929688,
-0.052703857421875,
-0.01277923583984375,
-0.024810791015625,
-0.00209808349609375,
0.020721435546875,
0.059814453125,
-0.037628173828125,
0.01654052734375,
-0.01465606689453125,
0.03546142578125,
0.0296630859375,
-0.00852203369140625,
-0.02825927734375,
-0.0026073455810546875,
-0.004608154296875,
-0.02490234375,
0.0263214111328125,
-0.01045989990234375,
-0.0455322265625,
0.06768798828125,
0.0245361328125,
-0.034210205078125,
0.032196044921875,
-0.01447296142578125,
0.048370361328125,
-0.049774169921875,
-0.02386474609375,
-0.032196044921875,
0.008880615234375,
0.04901123046875,
-0.029327392578125,
0.0142059326171875,
0.0157318115234375,
0.0086517333984375,
0.0085906982421875,
-0.012664794921875,
-0.01004791259765625,
0.035308837890625,
0.012298583984375,
0.059814453125,
-0.00408935546875,
-0.030670166015625,
0.024505615234375,
-0.023468017578125,
-0.06488037109375,
0.0126800537109375,
0.0224609375,
0.035247802734375,
0.0312042236328125,
0.0005664825439453125,
0.0084075927734375,
-0.034576416015625,
-0.0171051025390625,
0.04852294921875,
-0.0269622802734375,
-0.005657196044921875,
-0.044036865234375,
-0.00968170166015625,
-0.0099029541015625,
-0.03271484375,
0.04876708984375,
0.0521240234375,
0.0008587837219238281,
0.0177154541015625,
-0.028594970703125,
0.0657958984375,
0.0159454345703125,
0.05438232421875,
0.02362060546875,
0.04644775390625,
0.07501220703125,
0.0180511474609375,
0.0330810546875,
-0.004894256591796875,
-0.0021038055419921875,
0.027130126953125,
0.0306854248046875,
0.00504302978515625,
0.02899169921875,
-0.0290679931640625,
0.041229248046875,
-0.06781005859375,
-0.0030155181884765625,
0.00115966796875,
-0.03509521484375,
-0.00341033935546875,
-0.079345703125,
0.0180511474609375,
-0.0660400390625,
-0.03729248046875,
-0.028228759765625,
-0.0183258056640625,
0.0509033203125,
0.051910400390625,
-0.040008544921875,
0.00965118408203125,
0.020477294921875,
-0.0208282470703125,
-0.01399993896484375,
-0.0023632049560546875,
-0.0062713623046875,
0.038848876953125,
0.03857421875,
0.004993438720703125,
0.00809478759765625,
0.024078369140625,
0.00079345703125,
-0.0006527900695800781,
0.017578125,
0.0146942138671875,
-0.0117645263671875,
-0.0118560791015625,
0.004215240478515625,
-0.0330810546875,
-0.0753173828125,
0.0294952392578125,
-0.03338623046875,
0.0192718505859375,
-0.0328369140625,
0.0248565673828125,
0.0215606689453125,
-0.0243682861328125,
-0.036163330078125,
-0.0321044921875,
-0.053680419921875,
0.00370025634765625,
0.0261688232421875,
-0.048858642578125,
-0.049407958984375,
-0.0273284912109375,
0.026885986328125,
-0.0224761962890625,
0.0274200439453125,
0.0316162109375,
0.043304443359375,
-0.030303955078125,
0.019622802734375,
0.00855255126953125,
-0.027557373046875,
0.021942138671875,
0.0008754730224609375,
-0.00649261474609375,
0.00492095947265625,
0.064697265625,
-0.01285552978515625,
0.07000732421875,
0.06158447265625,
-0.047088623046875,
0.007724761962890625,
0.017486572265625,
0.040069580078125,
0.03399658203125,
-0.048187255859375,
0.040008544921875,
-0.0709228515625,
0.0194854736328125,
-0.01165008544921875,
-0.025238037109375,
0.06768798828125,
0.055145263671875,
-0.0435791015625,
0.0005593299865722656,
-0.0223541259765625,
0.04754638671875,
-0.0106048583984375,
-0.03936767578125,
-0.01056671142578125,
-0.02117919921875,
0.01470184326171875,
0.06634521484375,
-0.00417327880859375,
0.0296783447265625,
0.017822265625,
-0.05450439453125,
-0.0170135498046875,
0.01495361328125,
0.03515625,
-0.03167724609375,
-0.07489013671875,
-0.0006737709045410156,
0.00020253658294677734,
0.020416259765625,
-0.04412841796875,
0.010009765625,
-0.038238525390625,
-0.0181121826171875,
-0.0614013671875,
-0.03924560546875,
0.0256500244140625,
0.01922607421875,
-0.0579833984375,
-0.036376953125,
0.03643798828125,
0.005146026611328125,
-0.0110626220703125,
0.036376953125,
0.045562744140625,
0.0223541259765625,
-0.033538818359375,
0.05267333984375,
0.04327392578125,
-0.0039043426513671875,
-0.0091094970703125,
0.026123046875,
-0.01157379150390625,
0.0240631103515625,
-0.009246826171875,
0.040496826171875,
0.0213775634765625,
-0.00963592529296875,
0.046295166015625,
0.0007085800170898438,
-0.002246856689453125,
-0.003635406494140625,
-0.024261474609375,
-0.0022296905517578125,
0.07550048828125,
-0.046356201171875,
0.0018224716186523438,
0.03076171875,
-0.0164947509765625,
0.013275146484375,
0.003387451171875,
-0.0060272216796875,
-1.5020370483398438e-05,
-0.00986480712890625,
0.032745361328125,
-0.03228759765625,
-0.003215789794921875,
0.003902435302734375,
-0.007106781005859375,
-0.042327880859375,
0.00333404541015625,
0.044219970703125,
-0.0249176025390625,
-0.006717681884765625,
-0.037261962890625,
-0.001331329345703125,
0.0015010833740234375,
0.00677490234375,
-0.031494140625,
0.02117919921875,
0.004329681396484375,
0.016021728515625,
0.052001953125,
-0.00047588348388671875,
0.040374755859375,
-0.004695892333984375,
-0.01078033447265625,
-0.0236053466796875,
0.0341796875,
0.0193023681640625,
-0.0203399658203125,
-0.04302978515625,
0.0082244873046875,
0.04180908203125,
-0.0213470458984375,
0.0146636962890625,
-0.0263519287109375,
0.03033447265625,
0.006633758544921875,
-0.0293121337890625,
0.0094451904296875,
0.043731689453125,
-0.04327392578125,
-0.02374267578125,
-0.002742767333984375,
0.0195159912109375,
-0.0092010498046875,
-0.03460693359375,
-0.002323150634765625,
-0.0247650146484375,
0.0025272369384765625,
0.038970947265625,
-0.0193939208984375,
0.029266357421875,
-0.004718780517578125,
0.0198974609375,
0.0081329345703125,
-0.0234375,
0.01442718505859375,
0.01448822021484375,
0.021575927734375,
0.029541015625,
0.050689697265625,
0.05224609375,
-0.01117706298828125,
0.060882568359375,
-0.0036907196044921875,
0.038421630859375,
0.007415771484375,
0.03497314453125,
-0.01505279541015625,
-0.01580810546875,
0.0592041015625,
-0.001453399658203125,
-0.00933074951171875,
0.00629425048828125,
0.0230255126953125,
0.0169525146484375,
-0.046783447265625,
0.032135009765625,
0.00998687744140625,
0.030853271484375,
0.0028934478759765625,
0.03472900390625,
-0.005031585693359375,
0.0168304443359375,
-0.007110595703125,
0.01007843017578125,
-0.047760009765625,
-0.039794921875,
-0.0426025390625,
-0.0277099609375,
0.0178680419921875,
-0.00879669189453125,
0.03765869140625,
-0.0122222900390625,
0.050048828125,
-0.0245513916015625,
-0.042236328125,
-0.036712646484375,
-0.0472412109375,
0.04547119140625,
0.004383087158203125,
0.00872802734375,
-0.06768798828125,
0.0143890380859375,
-0.0254058837890625,
-0.02496337890625,
-0.043212890625,
-0.010589599609375,
0.04437255859375,
0.01406097412109375,
-0.0015735626220703125,
-0.0101165771484375,
-0.025726318359375,
0.029144287109375,
0.0007619857788085938,
-0.0003542900085449219,
0.0024967193603515625,
0.0018339157104492188,
0.04876708984375,
0.0287322998046875,
-0.00460052490234375,
-0.016021728515625,
0.0299835205078125,
0.05194091796875,
0.07183837890625,
-0.015167236328125,
-0.029815673828125,
-0.0634765625,
0.00791168212890625,
0.09783935546875,
0.007015228271484375,
-0.0279693603515625,
0.055145263671875,
-0.0171356201171875,
-0.0074462890625,
-0.056549072265625,
0.048797607421875,
0.0225372314453125,
0.0133514404296875,
0.0362548828125,
-0.027984619140625,
0.0263671875,
0.0178680419921875,
-0.03521728515625,
-0.004047393798828125,
-0.06048583984375,
-0.0687255859375,
-0.052215576171875,
-0.0259246826171875,
-0.0865478515625,
-0.07830810546875,
0.0192108154296875,
-0.006237030029296875,
0.05267333984375,
0.039794921875,
0.0175018310546875,
0.026641845703125,
0.0160064697265625,
0.033416748046875,
0.058807373046875,
-0.0306243896484375,
-0.0083160400390625,
-0.039154052734375,
-0.03765869140625,
-0.0301666259765625,
-0.05401611328125,
0.0193023681640625,
0.0159759521484375,
0.0052490234375,
0.012481689453125,
-0.037445068359375,
0.035552978515625,
0.035797119140625,
0.0157012939453125,
-0.051544189453125,
0.03338623046875,
-0.0295257568359375,
0.03460693359375,
-0.0098419189453125,
0.0296478271484375,
-0.011383056640625,
-0.034637451171875,
0.0582275390625,
0.0028553009033203125,
0.0095977783203125,
-0.0225372314453125,
-0.0323486328125,
0.00402069091796875,
0.0196685791015625,
-0.01715087890625,
0.039306640625,
-0.025909423828125,
0.02752685546875,
0.03277587890625,
-0.042327880859375,
-0.006191253662109375,
-0.06646728515625,
0.004669189453125,
0.0233612060546875,
-0.01123809814453125,
0.058319091796875,
0.01198577880859375,
-0.00325775146484375,
0.049530029296875,
0.05413818359375,
0.00357818603515625,
0.0092315673828125,
0.01253509521484375,
-0.033905029296875,
-0.024078369140625,
-0.0194854736328125,
-0.0347900390625,
-0.0305023193359375,
-0.0003345012664794922,
-0.004405975341796875,
0.02423095703125,
-0.05633544921875,
-0.041290283203125,
0.0090789794921875,
0.00390625,
-0.031829833984375,
0.010223388671875,
0.027618408203125,
-0.045013427734375,
0.0318603515625,
0.0236358642578125,
-0.0217437744140625,
-0.01220703125,
0.045379638671875,
-0.034027099609375,
0.042083740234375,
0.01361846923828125,
0.0143890380859375,
0.00888824462890625,
-0.028350830078125,
0.021942138671875,
0.042572021484375,
0.0516357421875,
-0.037506103515625,
-0.042938232421875,
0.04010009765625,
0.038360595703125,
-0.0166778564453125,
0.00902557373046875,
0.036865234375,
0.001598358154296875,
0.044830322265625,
0.045318603515625,
0.06085205078125,
0.04669189453125,
-0.03143310546875,
-0.01210784912109375,
-0.012298583984375,
0.01104736328125,
0.0280914306640625,
0.0116424560546875,
-0.0224151611328125,
-0.038177490234375,
-0.037994384765625,
-0.05206298828125,
0.032257080078125,
-0.0256195068359375,
-0.07550048828125,
-0.004131317138671875,
0.01435089111328125,
0.052520751953125,
0.0232696533203125,
-0.03863525390625,
0.004108428955078125,
0.023834228515625,
0.06439208984375,
-0.003406524658203125,
-0.024383544921875,
-0.04510498046875,
0.048980712890625,
-0.0255889892578125,
0.006214141845703125,
0.044525146484375,
0.00794219970703125,
0.05072021484375,
0.015411376953125,
0.0379638671875,
-0.0404052734375,
-0.017669677734375,
-0.0205230712890625,
-0.03802490234375,
0.029754638671875,
0.0024852752685546875,
-0.040985107421875,
-0.003643035888671875,
0.006412506103515625,
-0.034088134765625,
-0.01105499267578125,
-0.05401611328125,
-0.03204345703125,
0.00982666015625,
0.0408935546875,
0.03656005859375,
0.004669189453125,
0.016998291015625,
0.050750732421875,
0.014862060546875,
-0.02056884765625,
0.032318115234375,
-0.03338623046875,
-0.0003879070281982422,
-0.033416748046875,
-0.04998779296875,
0.038604736328125,
0.0300750732421875,
0.052215576171875,
-0.054534912109375,
-0.06524658203125,
-0.01194000244140625,
0.054290771484375,
-0.0088653564453125,
-0.022552490234375,
0.037933349609375,
-0.006221771240234375,
-0.01141357421875,
0.088623046875,
-0.01113128662109375,
-0.024932861328125,
0.030548095703125,
-0.01184844970703125,
0.051177978515625,
0.032440185546875,
-0.002391815185546875,
-0.042816162109375,
-0.025390625,
-0.041534423828125,
-0.02099609375,
-0.033935546875,
-0.003139495849609375,
-0.0233612060546875,
0.055511474609375,
-0.006561279296875,
-0.03656005859375,
-0.0419921875,
0.0107574462890625,
-0.01922607421875,
0.0721435546875,
-0.02099609375,
-0.018951416015625,
-0.0305023193359375,
0.0888671875,
-0.006076812744140625,
0.0282440185546875,
0.038848876953125,
-0.031707763671875,
0.03106689453125,
-0.0230865478515625,
0.006927490234375,
-0.0117340087890625,
-0.06353759765625,
0.06695556640625,
0.04046630859375,
-0.0374755859375,
-0.04449462890625,
-0.040924072265625,
0.055938720703125,
-0.045166015625,
0.0029449462890625,
-0.0195465087890625,
0.0165557861328125,
0.0355224609375,
-0.0292205810546875,
0.0203094482421875,
-0.03851318359375,
-0.0231781005859375,
0.033538818359375,
0.03167724609375,
-0.0164947509765625,
-0.0237884521484375,
0.046234130859375,
-0.023895263671875,
0.0540771484375,
-0.027740478515625,
0.036041259765625,
0.020751953125,
0.039459228515625,
-0.007755279541015625,
-0.06597900390625,
-0.0025005340576171875,
-0.030181884765625,
-0.005275726318359375,
0.021514892578125,
-0.02618408203125,
-0.0191192626953125,
-0.0233306884765625,
0.06988525390625,
-0.0011920928955078125,
0.0230865478515625,
0.033233642578125,
-0.00855255126953125,
-0.0060272216796875,
-0.043487548828125,
-0.039703369140625,
0.0061187744140625,
0.0428466796875,
-0.032562255859375,
0.01499176025390625,
0.01560211181640625,
-0.01047515869140625,
-0.0023250579833984375,
0.0306549072265625,
-0.0174713134765625,
-0.0011463165283203125,
-0.032745361328125,
0.016937255859375,
0.057342529296875,
0.033050537109375,
0.02032470703125,
-0.050537109375,
0.02947998046875,
-0.0289306640625,
0.0360107421875,
0.01035308837890625,
-0.0208892822265625,
0.046722412109375,
0.039825439453125,
0.0555419921875,
-0.0111541748046875,
0.0285186767578125,
0.052520751953125,
0.032196044921875,
-0.0255889892578125,
0.0281219482421875,
0.00293731689453125,
0.03253173828125,
-0.009521484375,
0.00620269775390625,
-0.0460205078125,
-0.0150146484375,
-0.0309600830078125,
-0.038421630859375,
0.06903076171875,
-0.00555419921875,
-0.02783203125,
-0.019500732421875,
-0.033660888671875,
-0.0110626220703125,
-0.0147552490234375,
0.006488800048828125,
0.00768280029296875,
-0.044891357421875,
0.037017822265625,
0.0419921875,
0.0024433135986328125,
0.04583740234375,
0.00098419189453125,
0.0186920166015625,
-0.00921630859375,
0.03826904296875,
0.0675048828125,
-0.0118865966796875,
-0.024444580078125,
0.029052734375,
0.0228729248046875,
-0.0165557861328125,
0.01322174072265625,
0.043182373046875,
-0.0682373046875,
0.0223388671875,
-0.01541900634765625,
-0.00789642333984375,
0.007476806640625,
-0.047698974609375,
-0.0008311271667480469,
-0.025146484375,
-0.030059814453125,
-0.033599853515625,
0.01439666748046875,
-0.0220184326171875,
-0.0136871337890625,
-0.03936767578125,
0.00691986083984375,
-0.0157623291015625,
0.055023193359375,
0.05181884765625,
-0.00824737548828125,
0.0251617431640625,
0.0050811767578125,
0.0007605552673339844,
-0.048095703125,
-0.0031948089599609375,
-0.004364013671875,
-0.01457977294921875,
0.02642822265625,
-0.049041748046875,
-0.01406097412109375,
0.0390625,
-0.045806884765625,
-0.06109619140625,
0.0159454345703125,
0.011474609375,
-0.0625,
-0.02508544921875,
-0.02191162109375,
-0.02130126953125,
-0.0032978057861328125,
-0.01641845703125,
0.036529541015625,
0.039276123046875,
-0.002105712890625,
0.06475830078125,
-0.0128173828125,
0.00983428955078125,
0.0214691162109375,
0.0283203125,
0.005615234375,
0.01097869873046875,
-0.026611328125,
-0.0273590087890625,
0.02716064453125,
0.01312255859375,
-0.0667724609375,
-0.03314208984375,
-0.01544952392578125,
0.032745361328125,
-0.03521728515625,
0.032806396484375,
0.00015163421630859375,
0.016571044921875,
0.037933349609375,
-0.009490966796875,
-0.029449462890625,
0.021148681640625,
0.0246124267578125,
0.0166778564453125,
0.037139892578125,
-0.0316162109375,
-0.04486083984375,
0.028289794921875,
-0.0202178955078125,
0.0168304443359375,
-0.031951904296875,
0.0364990234375,
0.03369140625,
-0.03216552734375,
-0.0136871337890625,
0.035400390625,
0.049713134765625,
-0.035736083984375,
0.013214111328125,
0.010772705078125,
0.01227569580078125,
0.01476287841796875,
0.0215911865234375,
0.046112060546875,
0.0295867919921875,
-0.036712646484375,
-0.0300445556640625,
0.0008358955383300781,
-0.04998779296875,
0.039581298828125,
-0.0082855224609375,
0.037109375,
0.0009794235229492188,
-0.0443115234375,
-0.042205810546875,
0.0291595458984375,
-0.0267791748046875,
-0.0047149658203125,
0.0243988037109375,
0.014129638671875,
0.046722412109375,
0.0224609375,
-0.036376953125,
0.0323486328125,
0.0462646484375,
0.019775390625,
-0.0355224609375,
0.0039215087890625,
0.0234527587890625,
0.00955963134765625,
0.01320648193359375,
-0.016143798828125,
-0.026824951171875,
0.00023055076599121094,
-0.038726806640625,
0.004413604736328125,
-0.037139892578125,
0.034820556640625,
-0.025115966796875,
-0.0517578125,
-0.0009527206420898438,
-0.01241302490234375,
-0.041412353515625,
0.00994110107421875,
-0.009765625,
0.007373809814453125,
0.013946533203125,
-0.0106658935546875,
-0.04241943359375,
0.044708251953125,
-0.0272216796875,
-0.0233001708984375,
0.0297393798828125,
-0.036468505859375,
-0.043121337890625,
-0.04638671875,
-0.0288543701171875,
0.029266357421875,
-0.0102081298828125,
-0.032806396484375,
0.031036376953125,
0.04571533203125,
0.04766845703125,
-0.0232086181640625,
-0.0285797119140625,
-0.0200347900390625,
0.006053924560546875,
0.01629638671875,
-0.0152130126953125,
-0.035003662109375,
-0.033660888671875,
0.0179901123046875,
0.0294189453125,
-0.0130767822265625,
0.0312347412109375,
0.045623779296875,
-0.04766845703125,
-0.0223846435546875,
-0.0170440673828125,
0.036468505859375,
0.03167724609375,
-0.0312347412109375,
0.01428985595703125,
0.021484375,
0.041046142578125,
0.0157470703125,
-0.01611328125,
-0.021820068359375,
0.0079193115234375,
-0.048980712890625,
-0.0330810546875,
-0.031402587890625,
-0.03558349609375,
-0.02093505859375,
0.03302001953125,
0.035919189453125,
-0.03619384765625,
0.00806427001953125,
-0.04156494140625,
-0.04998779296875,
-0.0200347900390625,
-0.05035400390625,
-0.027862548828125,
-0.0474853515625,
0.0093536376953125,
-0.049346923828125,
0.0335693359375,
-0.03619384765625,
0.0024738311767578125,
0.00893402099609375,
-0.0293426513671875,
-0.0253753662109375,
-0.036590576171875,
-0.00537872314453125,
-0.042510986328125,
-0.04058837890625,
-0.030670166015625,
0.03448486328125,
-0.0079803466796875,
0.0233612060546875,
0.00568389892578125,
-0.036895751953125,
-0.023712158203125,
-0.017913818359375,
0.01142120361328125,
-0.01175689697265625,
0.018035888671875,
-0.0166778564453125,
0.022308349609375,
-0.02960205078125,
0.04290771484375,
0.0285797119140625,
0.045135498046875,
-0.01039886474609375,
0.00525665283203125,
-0.00746917724609375,
-0.031494140625,
0.0289459228515625,
-0.016265869140625,
-0.03240966796875,
0.010711669921875,
0.0253448486328125,
-0.0330810546875,
0.046234130859375,
0.007511138916015625,
0.0103607177734375,
0.04986572265625,
0.037445068359375,
0.034698486328125,
0.0277252197265625,
0.031982421875,
0.04864501953125,
-0.00970458984375,
0.040374755859375,
-0.050323486328125,
-0.024993896484375,
0.03228759765625,
-0.01290130615234375,
-0.0284881591796875,
-0.007572174072265625,
0.0218048095703125,
-0.038421630859375,
0.0357666015625,
-0.0217742919921875,
-0.01397705078125,
0.019744873046875,
0.04559326171875,
0.01181793212890625,
-0.020599365234375,
0.0106201171875,
-0.005504608154296875,
0.0019359588623046875,
0.026763916015625,
0.00611114501953125,
0.027587890625,
0.035736083984375,
-0.049468994140625,
-0.004741668701171875,
0.025848388671875,
0.0031528472900390625,
-0.010711669921875,
-0.0411376953125,
-0.01515960693359375,
-0.0450439453125,
0.00223541259765625,
-0.037078857421875,
-0.044342041015625,
0.028076171875,
-0.01537322998046875,
0.0423583984375,
-0.0164947509765625,
0.0157470703125,
-0.0205230712890625,
0.026031494140625,
-0.00492095947265625,
0.0419921875,
0.03692626953125,
-0.047576904296875,
-0.0255126953125,
-0.041717529296875,
0.0091094970703125,
-0.036651611328125,
0.0157318115234375,
0.04559326171875,
-0.0256195068359375,
0.0210113525390625,
0.037078857421875,
-0.0484619140625,
0.033050537109375,
-0.032073974609375,
0.03912353515625,
0.041412353515625,
-0.042144775390625,
0.01068878173828125,
-0.03057861328125,
-0.0028667449951171875,
0.00933837890625,
-0.0206756591796875,
0.01499176025390625,
-0.039398193359375,
0.01079559326171875,
-0.030487060546875,
-0.0294036865234375,
-0.010986328125,
0.03863525390625,
-0.037353515625,
-0.01433563232421875,
0.01424407958984375,
0.0081329345703125,
0.0079193115234375,
-0.0389404296875,
-0.034515380859375,
-0.036529541015625,
0.0439453125,
0.03509521484375,
0.0076446533203125,
-0.039642333984375,
0.0090179443359375,
0.035400390625,
0.01271820068359375,
0.01568603515625,
-0.03607177734375,
-0.035430908203125,
-0.013763427734375,
-0.0290374755859375,
-0.03765869140625,
-0.046722412109375,
0.0133056640625,
-0.039154052734375,
0.022308349609375,
0.019134521484375,
0.01139068603515625,
0.0257415771484375,
0.034271240234375,
-0.01409149169921875,
-0.03228759765625,
-0.01525115966796875,
-0.01358795166015625,
0.016265869140625,
-0.03533935546875,
-0.034332275390625,
-0.0408935546875,
0.03851318359375,
-0.04046630859375,
-0.044219970703125,
-0.005825042724609375,
0.044921875,
-0.0116119384765625,
0.00385284423828125,
0.033477783203125,
0.01263427734375,
0.0143890380859375,
0.017669677734375,
0.0296478271484375,
-0.019683837890625,
0.01515960693359375,
-0.004886627197265625,
-0.043548583984375,
-0.0093994140625,
0.02264404296875,
0.037567138671875,
0.04937744140625,
0.0089111328125,
0.036376953125,
-0.01727294921875,
0.0256195068359375,
0.032928466796875,
0.04327392578125,
0.04571533203125,
-0.034637451171875,
-0.046539306640625,
-0.048095703125,
0.034820556640625,
0.04345703125,
0.03387451171875,
0.029571533203125,
0.0175018310546875,
-0.001018524169921875,
0.03155517578125,
0.03173828125,
0.022003173828125,
-0.004241943359375,
-0.004974365234375,
-0.035186767578125,
-0.04669189453125,
-0.0242462158203125,
-0.00949859619140625,
0.01499176025390625,
0.0277099609375,
0.0423583984375,
-0.04949951171875,
0.01271820068359375,
0.00717926025390625,
0.04351806640625,
0.0307769775390625,
0.0081939697265625,
0.00856781005859375,
-0.0024280548095703125,
0.037109375,
-0.01495361328125,
-0.03887939453125,
0.016754150390625,
-0.046234130859375,
-0.0014133453369140625,
-0.0257568359375,
0.02288818359375,
-0.0249176025390625,
-0.0217437744140625,
-0.0010700225830078125,
-0.01629638671875,
-0.0291900634765625,
-0.032623291015625,
-0.007213592529296875,
0.01617431640625,
-0.03399658203125,
0.044708251953125,
0.0364990234375,
-0.03326416015625,
0.020233154296875,
-0.03009033203125,
-0.00629425048828125,
-0.040802001953125,
0.0242919921875,
0.0472412109375,
-0.0109710693359375,
0.01483154296875,
-0.037200927734375,
0.028076171875,
0.044891357421875,
0.043060302734375,
-0.035919189453125,
-0.00972747802734375,
-0.038787841796875,
-0.040252685546875,
-0.01446533203125,
-0.0300445556640625,
0.036529541015625,
0.00839996337890625,
-0.003078460693359375,
-0.0251007080078125,
-0.0161285400390625,
0.04254150390625,
-0.019012451171875,
0.0010242462158203125,
0.0325927734375,
-0.0183868408203125,
-0.0249176025390625,
-0.01361846923828125,
0.0291595458984375,
-0.01434326171875,
-0.029327392578125,
-0.0467529296875,
-0.017913818359375,
0.022613525390625,
0.008056640625,
0.0104827880859375,
0.0163116455078125,
0.0295867919921875,
0.044158935546875,
0.052978515625,
0.046112060546875,
0.03948974609375,
-0.0408935546875,
-0.031341552734375,
-0.041168212890625,
0.026580810546875,
0.01499176025390625,
-0.039581298828125,
-0.0212860107421875,
-0.05523681640625,
0.00728607177734375,
0.00434112548828125,
0.048858642578125,
-0.004962921142578125,
-0.026702880859375,
0.034820556640625,
0.0160675048828125,
-0.056304931640625,
-0.0306243896484375,
0.00759124755859375,
0.0238800048828125,
0.0679931640625,
-0.0499267578125,
-0.018096923828125,
0.0341796875,
0.0648193359375,
0.022918701171875,
0.046630859375,
-0.049346923828125,
-0.0282440185546875,
0.031097412109375,
-0.01201629638671875,
-0.0231475830078125,
-0.005672454833984375,
-0.038543701171875,
-0.037811279296875,
-0.04339599609375,
-0.0499267578125,
-0.005596160888671875,
0.0220947265625,
0.04473876953125,
0.0181732177734375,
-0.01065826416015625,
0.0682373046875,
0.046905517578125,
0.049041748046875,
-0.0161285400390625,
-0.00972747802734375,
0.010833740234375,
0.0239410400390625,
0.0205230712890625,
-0.008270263671875,
-0.0164642333984375,
-0.02239990234375,
9.28044319152832e-05,
0.044403076171875,
-0.0545654296875,
0.0240478515625,
0.017486572265625,
0.026641845703125,
-0.0007176399230957031,
0.031890869140625,
-0.037353515625,
-0.035369873046875,
-0.03857421875,
0.0007786750793457031,
-0.0016765594482421875,
0.00020110607147216797,
0.032562255859375,
-0.0018100738525390625,
-0.05145263671875,
-0.057647705078125,
-0.0079498291015625,
0.02532958984375,
0.057647705078125,
-0.005603790283203125,
-0.0257720947265625,
0.050933837890625,
-0.023773193359375,
-0.0015249252319335938,
-0.0011997222900390625,
0.01284027099609375,
-0.024169921875,
-0.0209808349609375,
-0.0239410400390625,
0.031280517578125,
-0.04779052734375,
-0.03936767578125,
-0.0308837890625,
0.04290771484375,
-0.007556915283203125,
0.0167236328125,
-0.01629638671875,
0.06280517578125,
-0.005443572998046875,
0.016387939453125,
0.0279541015625,
0.034698486328125,
0.04425048828125,
0.02130126953125,
0.0010690689086914062,
-0.0272064208984375,
0.00951385498046875,
-0.00283050537109375,
0.03192138671875,
-0.00609588623046875,
0.006053924560546875,
0.036895751953125,
0.026031494140625,
-0.0009245872497558594,
0.033660888671875,
-0.027984619140625,
0.041900634765625,
0.040069580078125,
0.059112548828125,
-0.0093841552734375,
0.038055419921875,
0.048858642578125,
0.0309295654296875,
0.02471923828125,
-0.0182647705078125,
-0.07379150390625,
0.033935546875,
-0.0011682510375976562,
0.006137847900390625,
-0.0235748291015625,
-0.043792724609375,
-0.055877685546875,
-0.0243072509765625,
0.057769775390625,
-0.0333251953125,
0.019622802734375,
0.03546142578125,
-0.0380859375,
0.05291748046875,
0.0170135498046875,
-0.053680419921875,
0.03076171875,
0.0205841064453125,
-0.030181884765625,
0.04644775390625,
0.03167724609375,
0.0241546630859375,
-0.036773681640625,
0.0242919921875,
-0.07183837890625,
-0.01111602783203125,
0.00942230224609375,
0.0345458984375,
-0.0274810791015625,
-0.00911712646484375,
-0.0139617919921875,
0.00875091552734375,
0.005008697509765625,
-0.01198577880859375,
0.0003097057342529297,
0.053436279296875,
0.03240966796875,
0.00455474853515625,
0.01062774658203125,
-0.034027099609375,
0.0035839080810546875,
0.02581787109375,
-0.0059814453125,
-0.0005826950073242188,
0.0005130767822265625,
-0.004520416259765625,
-0.00658416748046875,
0.03289794921875,
-0.00774383544921875,
0.04388427734375,
0.0081939697265625,
0.0310211181640625,
0.045806884765625,
-0.03692626953125,
0.00475311279296875,
-0.0251312255859375,
-0.021697998046875,
0.00423431396484375,
0.041900634765625,
-0.063720703125,
-0.0184783935546875,
0.05609130859375,
-0.00864410400390625,
-0.000659942626953125,
0.0006003379821777344,
-0.04620361328125,
-0.032958984375,
-0.04608154296875,
-0.029754638671875,
-0.052764892578125,
0.0304412841796875,
-0.041107177734375,
-0.054107666015625,
0.00923919677734375,
-0.054412841796875,
-0.06427001953125,
0.00617218017578125,
-0.01442718505859375,
-0.020599365234375,
-0.0677490234375,
-0.03631591796875,
-0.016693115234375,
-0.044891357421875,
0.044586181640625,
0.00580596923828125,
0.0372314453125,
-0.054046630859375,
-0.0012540817260742188,
-0.0227203369140625,
-0.009368896484375,
0.03985595703125,
0.049041748046875,
0.03021240234375,
0.0241241455078125,
-0.049713134765625,
0.031494140625,
0.03704833984375,
-0.039031982421875,
-0.040618896484375,
0.01395416259765625,
-0.06781005859375,
0.0523681640625,
-0.01375579833984375,
-0.010009765625,
-0.05950927734375,
-0.064453125,
0.037841796875,
0.038360595703125,
0.047607421875,
0.01837158203125,
0.040863037109375,
0.0081024169921875,
-0.018646240234375,
-0.0009479522705078125,
0.0225830078125,
-0.032440185546875,
-0.0292816162109375,
0.00616455078125,
0.032318115234375,
-0.01519012451171875,
0.0263519287109375,
-0.01708984375,
-0.01280975341796875,
0.03985595703125,
0.0283966064453125,
-0.01055908203125,
0.0015468597412109375,
0.02593994140625,
-0.01473236083984375,
0.044219970703125,
0.0253143310546875,
-0.02032470703125,
0.0247650146484375,
0.032928466796875,
0.02825927734375,
-0.0282745361328125,
-0.00347900390625,
-0.005344390869140625,
-0.01493072509765625,
-0.0041961669921875,
-0.052276611328125,
0.039581298828125,
0.0249481201171875,
0.045562744140625,
-0.05865478515625,
0.029693603515625,
0.056365966796875,
-0.03460693359375,
-0.0190582275390625,
-0.0227813720703125,
-0.01983642578125,
0.00882720947265625,
-0.027557373046875,
0.034759521484375,
-0.0115966796875,
0.0177154541015625,
0.05548095703125,
-0.006938934326171875,
-0.028228759765625,
-0.007720947265625,
0.06732177734375,
0.0313720703125,
0.0074462890625,
-0.01146697998046875,
-0.007167816162109375,
0.021942138671875,
-0.0079345703125,
0.006557464599609375,
-0.0196075439453125,
0.0057525634765625,
0.011322021484375,
0.02642822265625,
-0.04815673828125,
0.005954742431640625,
-0.0689697265625,
0.01271820068359375,
-0.0528564453125,
0.026123046875,
-0.01102447509765625,
-0.051605224609375,
-0.0526123046875,
-0.02392578125,
-0.022796630859375,
-0.001800537109375,
0.03045654296875,
-0.0231475830078125,
-0.01517486572265625,
-0.0134735107421875,
-0.004261016845703125,
0.015289306640625,
-0.032867431640625,
0.02423095703125,
0.034515380859375,
-0.01457977294921875,
0.0266571044921875,
0.032562255859375,
0.0209808349609375,
0.0543212890625,
0.01085662841796875,
0.0228424072265625,
0.054046630859375,
0.0352783203125,
0.048980712890625,
0.007518768310546875,
0.01039886474609375,
0.030487060546875,
-0.040740966796875,
-0.05523681640625,
-0.0340576171875,
-0.042266845703125,
0.00873565673828125,
-0.016357421875,
-0.004474639892578125,
0.0010204315185546875,
0.027862548828125,
0.027069091796875,
-0.0178985595703125,
0.0345458984375,
-0.033905029296875,
-0.049072265625,
0.025970458984375,
-0.004230499267578125,
0.0341796875,
-0.004566192626953125,
-0.038482666015625,
-0.04315185546875,
0.01177978515625,
0.00583648681640625,
0.05126953125,
0.049041748046875,
-0.004779815673828125,
-0.003284454345703125,
0.0159454345703125,
0.01824951171875,
0.0122222900390625,
-0.0232696533203125,
0.0128631591796875,
-0.0036373138427734375,
-0.050445556640625,
-0.0113372802734375,
0.0226287841796875,
-0.00035452842712402344,
0.0286102294921875,
0.040313720703125,
-0.038360595703125,
-0.041839599609375,
-0.0352783203125,
-0.04791259765625,
-0.01242828369140625,
-0.053741455078125,
-0.026885986328125,
0.033355712890625,
0.0300140380859375,
0.044189453125,
0.060394287109375,
-0.002887725830078125,
-0.0057220458984375,
-0.03460693359375,
-0.054443359375,
0.0081787109375,
0.023193359375,
0.043792724609375,
0.01122283935546875,
-0.044189453125,
0.008636474609375,
-0.01204681396484375,
-0.001956939697265625,
0.0008721351623535156,
-0.0130462646484375,
-0.0178375244140625,
0.002803802490234375,
0.0159149169921875,
0.0208892822265625,
0.004970550537109375,
0.0625,
0.01702880859375,
-0.05511474609375,
-0.0838623046875,
-0.054840087890625,
0.0118255615234375,
0.0208740234375,
-0.0289154052734375,
-0.1036376953125,
-0.0537109375,
-0.060150146484375,
-0.036285400390625,
-0.01904296875,
-0.06317138671875,
0.015960693359375,
0.0175628662109375,
0.0012311935424804688,
-0.0308990478515625,
0.038330078125,
0.039825439453125,
-0.0013818740844726562,
-0.039306640625,
-0.014434814453125,
0.053375244140625,
-0.0185089111328125,
-0.038787841796875,
0.0188751220703125,
0.015777587890625,
0.00316619873046875,
-0.01134490966796875,
-0.006069183349609375,
-0.045562744140625,
-0.002109527587890625,
0.0347900390625,
0.060211181640625,
-0.025665283203125,
0.0357666015625,
-0.040374755859375,
0.00925445556640625,
0.044647216796875,
0.0284271240234375,
-0.002826690673828125,
-0.035797119140625,
0.04144287109375,
0.07244873046875,
0.032318115234375,
0.004222869873046875,
0.054962158203125,
-0.031707763671875,
-0.06561279296875,
0.0225372314453125,
-0.039794921875,
-0.01515960693359375,
-0.012481689453125,
0.021697998046875,
-0.025909423828125,
-0.041351318359375,
-0.016357421875,
0.01155853271484375,
-0.0082855224609375,
0.0362548828125,
0.016815185546875,
0.033355712890625,
-0.0478515625,
-0.0274658203125,
-0.0044097900390625,
0.0390625,
0.04632568359375,
-0.0191497802734375,
-0.004825592041015625,
0.058319091796875,
-0.0105133056640625,
-0.005290985107421875,
-0.06317138671875,
-0.0369873046875,
0.041595458984375,
0.03814697265625,
0.0305023193359375,
-0.0806884765625,
-0.036956787109375,
-0.0177001953125,
0.00609588623046875,
-0.003726959228515625,
-0.0728759765625,
-0.01052093505859375,
0.0306243896484375,
0.046417236328125,
-0.0117034912109375,
-0.03564453125,
0.024658203125,
0.01171112060546875,
-0.03704833984375,
-0.0121307373046875,
0.02972412109375,
0.012847900390625,
0.02447509765625,
0.028533935546875,
0.05120849609375,
0.0208740234375,
0.0478515625,
-0.0196685791015625,
-0.007022857666015625,
0.029510498046875,
0.0406494140625,
-0.034210205078125,
0.0278778076171875,
0.006103515625,
0.042388916015625,
-0.033355712890625,
0.0247955322265625,
0.019134521484375,
0.033660888671875,
0.0450439453125,
-0.0187835693359375,
0.0275115966796875,
0.051239013671875,
0.0039825439453125,
-0.0305938720703125,
0.0452880859375,
0.08331298828125,
0.03582763671875,
-0.01171112060546875,
-0.00038433074951171875,
0.0223236083984375,
0.03924560546875,
0.0391845703125,
0.0750732421875,
-0.0150299072265625,
-0.04022216796875,
-0.01346588134765625,
0.02532958984375,
0.0271453857421875,
0.053009033203125,
0.045989990234375,
-0.03338623046875,
0.01068878173828125,
-0.04022216796875,
0.02569580078125,
0.04150390625,
-0.01271820068359375,
0.04559326171875,
-0.0206451416015625,
-0.006805419921875,
0.039093017578125,
0.03619384765625,
-0.01371002197265625,
0.004489898681640625,
0.0238037109375,
-0.01525115966796875,
-0.047027587890625,
-0.019683837890625,
0.01390838623046875,
0.015411376953125,
-0.049346923828125,
0.04742431640625,
0.006717681884765625,
0.0179290771484375,
-0.04217529296875,
-0.0513916015625,
-0.011505126953125,
0.0204010009765625,
0.041473388671875,
0.0280609130859375,
0.029052734375,
-0.0355224609375,
0.038482666015625,
-0.01297760009765625,
0.0133514404296875,
-0.031951904296875,
0.0094146728515625,
-0.058074951171875,
-0.049072265625,
-0.0196685791015625,
-0.0226898193359375,
0.0240478515625,
0.020263671875,
-0.059417724609375,
-0.019439697265625,
-0.011962890625,
0.0272064208984375,
-0.038055419921875,
0.047393798828125,
-0.027435302734375,
-0.007198333740234375,
-0.0286102294921875,
-0.001190185546875,
0.0081939697265625,
0.0082855224609375,
-0.0023937225341796875,
0.0294952392578125,
-0.025146484375,
0.0648193359375,
0.0084686279296875,
0.010528564453125,
-0.00614166259765625,
0.00323486328125,
0.006725311279296875,
0.016510009765625,
-0.032501220703125,
7.832050323486328e-05,
0.018798828125,
0.0288848876953125,
0.0202484130859375,
-0.03277587890625,
0.0416259765625,
-0.023529052734375,
0.00946044921875,
-0.0312347412109375,
-0.0149688720703125,
-0.04510498046875,
-0.01190185546875,
0.007144927978515625,
0.0141448974609375,
-0.033782958984375,
-0.00714111328125,
-0.019989013671875,
0.015777587890625,
0.040069580078125,
-0.0238037109375,
-0.01438140869140625,
-0.00704193115234375,
-0.06524658203125,
-0.0251312255859375,
-0.043121337890625,
-0.0012235641479492188,
-0.04010009765625,
-0.0016279220581054688,
0.04022216796875,
-0.062103271484375,
-0.0013360977172851562,
0.036895751953125,
-0.01512908935546875,
-0.0185394287109375,
0.0005059242248535156,
0.0230712890625,
0.043548583984375,
0.045379638671875,
-0.037841796875,
-0.0110015869140625,
-0.006317138671875,
-0.034332275390625,
0.0276031494140625,
-0.0287322998046875,
-0.007305145263671875,
-0.04534912109375,
-0.037689208984375,
-0.0201263427734375,
0.00151824951171875,
0.0014925003051757812,
-0.004322052001953125,
-0.02130126953125,
-0.059417724609375,
0.006122589111328125,
-0.01203155517578125,
-0.0312042236328125,
0.0084075927734375,
-0.035797119140625,
-0.039398193359375,
-0.00927734375,
0.024749755859375,
0.0209197998046875,
0.0352783203125,
-0.0204010009765625,
0.048919677734375,
0.07354736328125,
0.01708984375,
0.006275177001953125,
-0.006999969482421875,
0.032958984375,
-0.035430908203125,
0.042877197265625,
0.03131103515625,
0.016265869140625,
-0.008331298828125,
0.006378173828125,
0.03729248046875,
0.051666259765625,
0.01849365234375,
-0.01580810546875,
0.0313720703125,
0.0286102294921875,
0.0298614501953125,
-0.01523590087890625,
-0.00455474853515625,
-0.0204010009765625,
-0.04718017578125,
0.0184478759765625,
0.04229736328125,
0.046417236328125,
0.041168212890625,
-0.056243896484375,
-0.032501220703125,
0.050079345703125,
0.01113128662109375,
-0.0300445556640625,
-0.05072021484375,
0.032501220703125,
-0.009368896484375,
-0.049835205078125,
-0.00873565673828125,
0.044586181640625,
0.0009279251098632812,
0.039093017578125,
0.0186767578125,
0.025146484375,
0.028778076171875,
-0.0041046142578125,
-0.008056640625,
-0.016754150390625,
0.03363037109375,
0.046600341796875,
-0.0182037353515625,
0.0543212890625,
0.016571044921875,
-0.0140380859375,
0.01074981689453125,
0.0169219970703125,
-0.01068115234375,
0.011993408203125,
0.0298614501953125,
-0.0038318634033203125,
0.0252838134765625,
0.021087646484375,
0.048309326171875,
0.034332275390625,
-0.050384521484375,
0.032379150390625,
-0.00646209716796875,
0.024993896484375,
-0.0418701171875,
-0.05023193359375,
-0.028289794921875,
-0.01502227783203125,
-0.057769775390625,
-0.042205810546875,
-0.00504302978515625,
-0.0205078125,
-0.00971221923828125,
-0.0589599609375,
0.01285552978515625,
0.05596923828125,
-5.733966827392578e-05,
-0.006633758544921875,
0.042083740234375,
-0.0092010498046875,
0.0523681640625,
0.030914306640625,
0.061004638671875,
-0.014617919921875,
0.007190704345703125,
0.040557861328125,
0.0240631103515625,
-0.0208587646484375,
-0.01678466796875,
0.01541900634765625,
0.025421142578125,
-0.0187225341796875,
-0.0214996337890625,
0.0010395050048828125,
0.046844482421875,
-0.0589599609375,
-0.039398193359375,
-0.04345703125,
0.061798095703125,
-0.00873565673828125,
-0.01485443115234375,
0.049835205078125,
0.00775146484375,
0.051513671875,
-0.035858154296875,
0.04766845703125,
-0.006134033203125,
0.0235137939453125,
0.0247955322265625,
0.0155487060546875,
-0.0182952880859375,
0.046051025390625,
-0.042816162109375,
0.023651123046875,
-0.003726959228515625,
-0.02056884765625,
0.01161956787109375,
0.0030765533447265625,
-0.00952911376953125,
0.0169677734375,
-0.035064697265625,
0.039794921875,
0.03631591796875,
0.046417236328125,
-0.038909912109375,
-0.026275634765625,
-0.044952392578125,
0.0152130126953125,
0.0367431640625,
0.05999755859375,
0.078125,
-0.005077362060546875,
-0.01419830322265625,
0.07135009765625,
-0.05926513671875,
-0.0667724609375,
-0.08685302734375,
0.051605224609375,
0.10455322265625,
0.0183563232421875,
0.00891876220703125,
0.0084381103515625,
0.0343017578125,
0.0689697265625,
-0.024322509765625,
-0.0438232421875,
0.013671875,
-0.024139404296875,
-0.03802490234375,
-0.06060791015625,
-0.04443359375,
-0.01261138916015625,
-0.0002830028533935547,
-0.03759765625,
0.016265869140625,
0.0214691162109375,
-0.011260986328125,
-0.0226287841796875,
0.0025691986083984375,
0.01032257080078125,
0.018280029296875,
0.0022735595703125,
0.038787841796875,
-0.003265380859375,
0.001483917236328125,
-0.0243377685546875,
-0.0113983154296875,
0.06689453125,
-0.01308441162109375,
0.0228729248046875,
0.0059051513671875,
-0.0428466796875,
-0.0213470458984375,
-0.012451171875,
0.01058197021484375,
0.0105133056640625,
0.017303466796875,
0.0433349609375,
-0.0316162109375,
-0.056182861328125,
-0.0277099609375,
0.0294189453125,
0.0196685791015625,
0.005580902099609375,
0.01267242431640625,
0.06427001953125,
0.03509521484375,
0.0343017578125,
-0.037139892578125,
-0.015838623046875,
-0.04803466796875,
-0.03167724609375,
-0.02069091796875,
-0.0261688232421875,
-0.027618408203125,
-0.01947021484375,
0.003204345703125,
0.0253143310546875,
0.01483917236328125,
-0.0008268356323242188,
-0.00128173828125,
0.01079559326171875,
0.000652313232421875,
-0.0167999267578125,
0.004669189453125,
0.002285003662109375,
-0.04998779296875,
0.0098724365234375,
-0.01186370849609375,
-0.0238037109375,
-0.06793212890625,
-0.007640838623046875,
0.0540771484375,
0.045257568359375,
0.0114898681640625,
-0.049530029296875,
-0.01042938232421875,
0.0223541259765625,
-0.0389404296875,
0.050506591796875,
0.040191650390625,
-0.01403045654296875,
-0.0022430419921875,
0.030548095703125,
-0.01282501220703125,
0.0215911865234375,
-0.03973388671875,
-0.021759033203125,
0.04730224609375,
0.0165557861328125,
0.00612640380859375,
0.0138092041015625,
0.03936767578125,
-0.007587432861328125,
0.04937744140625,
-0.035186767578125,
-0.013519287109375,
0.018524169921875,
0.031524658203125,
-0.0193634033203125,
-0.022216796875,
-0.0413818359375,
-0.0177459716796875,
0.05560302734375,
0.0028362274169921875,
0.0145721435546875,
-0.0213623046875,
-0.036956787109375,
-0.02362060546875,
0.01074981689453125,
-0.000232696533203125,
0.028717041015625,
-0.023406982421875,
0.01169586181640625,
-0.053924560546875,
0.0276641845703125,
-0.0293121337890625,
-0.01678466796875,
0.016845703125,
0.0462646484375,
-0.0355224609375,
-0.0295867919921875,
0.01047515869140625,
0.01163482666015625,
-0.006801605224609375,
-0.032745361328125,
-0.03692626953125,
0.006259918212890625,
-0.0178070068359375,
-0.05816650390625,
-0.06793212890625,
-0.041168212890625,
-0.0161895751953125,
-0.0230865478515625,
0.0035152435302734375,
0.033416748046875,
-0.017486572265625,
-0.015777587890625,
-0.040130615234375,
0.0203857421875,
0.0022296905517578125,
-0.00202178955078125,
-0.0092620849609375,
0.00824737548828125,
-0.019256591796875,
-0.0035915374755859375,
0.0179595947265625,
0.01468658447265625,
0.04754638671875,
-0.035675048828125,
0.035980224609375,
-0.0546875,
0.00885772705078125,
-0.017303466796875,
-0.01264190673828125,
-0.0210723876953125,
-0.005764007568359375,
0.044525146484375,
-0.019256591796875,
-0.03485107421875,
0.032470703125,
-0.02325439453125,
-0.038238525390625,
-0.014007568359375,
0.060272216796875,
0.054473876953125,
0.045562744140625,
0.0253753662109375,
0.0142822265625,
0.050994873046875,
0.03778076171875,
-0.0013151168823242188,
-0.02081298828125,
-0.03704833984375,
-0.03741455078125,
0.019256591796875,
-0.055938720703125,
0.03546142578125,
0.04461669921875,
-0.00965118408203125,
-0.0616455078125,
-0.001522064208984375,
-0.02435302734375,
-0.0210418701171875,
0.019561767578125,
-0.017486572265625,
0.030609130859375,
-0.0494384765625,
-0.0066070556640625,
0.0189056396484375,
0.0221099853515625,
0.06304931640625,
0.01788330078125,
0.040863037109375,
0.02069091796875,
0.039825439453125,
-0.047393798828125,
0.0169219970703125,
0.0323486328125,
0.00310516357421875,
0.0181121826171875,
0.0190582275390625,
0.01558685302734375,
-0.0347900390625,
0.060394287109375,
0.01326751708984375,
-0.005756378173828125,
-0.05535888671875,
0.039764404296875,
-0.0343017578125,
0.0269317626953125,
-0.0239715576171875,
-0.006992340087890625,
0.012542724609375,
0.0194091796875,
0.03936767578125,
-0.0259246826171875,
-0.0291748046875,
0.037841796875,
0.046417236328125,
0.05010986328125,
-0.047576904296875,
-0.03021240234375,
0.003536224365234375,
-0.00969696044921875,
0.0139923095703125,
-0.04559326171875,
-0.032318115234375,
-0.0003840923309326172,
0.0389404296875,
-0.0211181640625,
-0.021392822265625,
-0.01244354248046875,
0.0226898193359375,
-0.022613525390625,
-0.0151519775390625,
-0.01355743408203125,
-0.0294342041015625,
0.0271759033203125,
0.0309906005859375,
-0.01482391357421875,
-0.035614013671875,
-0.00357818603515625,
0.0260467529296875,
-0.0122528076171875,
0.03900146484375,
-0.040557861328125,
0.05731201171875,
0.0562744140625,
0.00389862060546875,
0.048797607421875,
-0.020904541015625,
0.050323486328125,
0.025299072265625,
-0.006900787353515625,
0.047515869140625,
-0.013763427734375,
0.0276336669921875,
0.03753662109375,
0.047515869140625,
0.0411376953125,
0.043212890625,
-0.0672607421875,
0.031768798828125,
0.034912109375,
0.06317138671875,
-0.0140228271484375,
0.045013427734375,
0.024261474609375,
-0.006237030029296875,
-0.07330322265625,
0.01189422607421875,
0.0259246826171875,
0.0251312255859375,
0.04388427734375,
-0.036102294921875,
-0.047149658203125,
0.0251922607421875,
-0.0255584716796875,
0.02349853515625,
0.045318603515625,
-0.052001953125,
-0.01189422607421875,
0.01551055908203125,
0.054534912109375,
0.01065826416015625,
0.0206451416015625,
-0.0537109375,
0.0609130859375,
0.032989501953125,
0.061309814453125,
-0.0102386474609375,
-0.017333984375,
-0.0026531219482421875,
0.00048089027404785156,
-0.00411224365234375,
0.0109710693359375,
0.0142059326171875,
-0.007617950439453125,
0.040557861328125,
-0.01085662841796875,
-0.042083740234375,
0.0175018310546875,
0.041473388671875,
-0.050018310546875,
-0.01467132568359375,
-0.0198974609375,
-0.03778076171875,
0.034515380859375,
-0.00981903076171875,
-0.01446533203125,
-0.01702880859375,
0.041595458984375,
-0.031463623046875,
-0.01316070556640625,
0.01458740234375,
0.0318603515625,
0.03839111328125,
-0.04791259765625,
0.046234130859375,
0.056732177734375,
0.0423583984375,
0.022491455078125,
0.0276641845703125,
0.0257720947265625,
0.0195465087890625,
0.0173492431640625,
-0.006500244140625,
-0.0106201171875,
0.00528717041015625,
0.028961181640625,
-0.03955078125,
0.040008544921875,
-0.006084442138671875,
-0.0163116455078125,
0.0196075439453125,
-0.006778717041015625,
0.0279541015625,
0.021453857421875,
0.0214385986328125,
0.0250701904296875,
0.0224761962890625,
0.0013570785522460938,
-0.026092529296875,
0.01253509521484375,
-0.0178375244140625,
0.0013036727905273438,
0.054962158203125,
0.03240966796875,
0.00577545166015625,
-0.038726806640625,
-0.007183074951171875,
-0.00647735595703125,
0.040008544921875,
-0.021240234375,
0.0286865234375,
-0.0257568359375,
0.0303497314453125,
0.040069580078125,
0.0282440185546875,
-0.019073486328125,
-0.0243072509765625,
-0.0328369140625,
0.01006317138671875,
0.0458984375,
-0.037353515625,
0.0166168212890625,
0.03729248046875,
-0.0237579345703125,
-0.01824951171875,
-0.06085205078125,
0.0343017578125,
-0.0045166015625,
0.02801513671875,
-0.04412841796875,
0.04180908203125,
0.050506591796875,
0.0107269287109375,
0.0638427734375,
-0.024383544921875,
-0.0179443359375,
0.00255584716796875,
-0.035552978515625,
-0.038818359375,
-0.0291900634765625,
0.01617431640625,
0.026214599609375,
0.0121612548828125,
-0.025970458984375,
-0.0250701904296875,
0.06524658203125,
0.052032470703125,
0.0038433074951171875,
-0.0312347412109375,
0.033538818359375,
0.01354217529296875,
0.03240966796875,
0.02716064453125,
0.025543212890625,
-0.0233001708984375,
0.032928466796875,
0.034759521484375,
-0.0260009765625,
0.0273590087890625,
0.0256195068359375,
0.03863525390625,
0.039093017578125,
-0.0114288330078125,
0.03729248046875,
0.033050537109375,
0.03790283203125,
0.0089263916015625,
0.00689697265625,
-0.01261138916015625,
-0.027984619140625,
0.054595947265625,
-0.01528167724609375,
0.034912109375,
-0.00788116455078125,
0.037689208984375,
-0.052337646484375,
-0.008331298828125,
-0.0015430450439453125,
0.056671142578125,
0.028472900390625,
-0.06903076171875,
-0.032318115234375,
0.0445556640625,
0.06536865234375,
0.01480865478515625,
0.03753662109375,
0.057342529296875,
-0.039703369140625,
0.0229339599609375,
0.01483154296875,
0.004741668701171875,
0.04705810546875,
-0.06622314453125,
0.0191650390625,
-0.050506591796875,
0.0242919921875,
-0.004474639892578125,
-0.036285400390625,
-0.0009169578552246094,
0.00922393798828125,
-0.00846099853515625,
0.026519775390625,
-0.0018024444580078125,
-0.0019664764404296875,
0.0177764892578125,
0.021484375,
-0.03729248046875,
-0.0215606689453125,
-0.01251220703125,
0.061126708984375,
-0.0058746337890625,
-0.019805908203125,
-0.07098388671875,
-0.0557861328125,
-0.0187225341796875,
0.00914764404296875,
0.043121337890625,
-0.037750244140625,
0.020904541015625,
-0.033935546875,
0.01268768310546875,
-0.0268096923828125,
-0.026275634765625,
0.003963470458984375,
0.0191497802734375,
0.07110595703125,
0.02197265625,
0.02313232421875,
-0.04425048828125,
-0.0302886962890625,
-0.0184783935546875,
-0.026214599609375,
0.0158538818359375,
0.04327392578125,
0.0088958740234375,
0.02484130859375,
0.002986907958984375,
-0.05706787109375,
0.016937255859375,
0.01163482666015625,
-0.0130157470703125,
-0.0012006759643554688,
-0.02783203125,
0.021270751953125,
0.03497314453125,
0.01512908935546875,
-0.0150604248046875,
-0.0239105224609375,
-0.0251617431640625,
-0.03326416015625,
-0.0246124267578125,
0.0189666748046875,
-0.03399658203125,
-0.054779052734375,
0.03497314453125,
-0.040557861328125,
0.0285186767578125,
-0.046295166015625,
-0.01715087890625,
0.040924072265625,
-0.0111083984375,
0.01023101806640625,
-0.01873779296875,
0.0225982666015625,
0.0304412841796875,
-0.029632568359375,
-0.00417327880859375,
0.06573486328125,
0.04583740234375,
0.0187225341796875,
-0.0113372802734375,
-0.034698486328125,
0.01397705078125,
0.0197296142578125,
0.027252197265625,
-0.0124053955078125,
0.058502197265625,
0.00109100341796875,
-0.005329132080078125,
-0.0146636962890625,
-0.004146575927734375,
-0.00835418701171875,
-0.0105438232421875,
-0.00975799560546875,
-0.018463134765625,
-0.027618408203125,
0.02093505859375,
0.0140228271484375,
0.0338134765625,
0.008392333984375,
-0.038726806640625,
-0.040191650390625,
-0.00870513916015625,
-0.0130767822265625,
-0.0018863677978515625,
-0.0221099853515625,
0.047637939453125,
-0.0274658203125,
0.0208587646484375,
-0.04229736328125,
0.0015974044799804688,
0.0223388671875,
-0.02374267578125,
0.05938720703125,
0.0240631103515625,
0.0706787109375,
-0.0219573974609375,
0.038604736328125,
0.0298614501953125,
0.0150604248046875,
0.03369140625,
0.035400390625,
-0.05255126953125,
0.0014734268188476562,
0.055419921875,
0.035308837890625,
0.0426025390625,
0.00772857666015625,
0.0516357421875,
-0.0301666259765625,
0.056396484375,
-0.039276123046875,
-0.0283660888671875,
0.047607421875,
0.0294647216796875,
-0.0408935546875,
0.036865234375,
-0.005809783935546875,
0.00336456298828125,
-0.024261474609375,
0.026641845703125,
-0.00460052490234375,
-0.00437164306640625,
-0.01561737060546875,
0.01232147216796875,
-0.037506103515625,
-0.013214111328125,
-0.01506805419921875,
-0.0039005279541015625,
-0.048675537109375,
0.0294342041015625,
0.0222015380859375,
-0.00418853759765625,
-0.0253448486328125,
-0.03497314453125,
0.055450439453125,
0.042388916015625,
-0.0537109375,
0.0128021240234375,
0.029632568359375,
0.05029296875,
0.045623779296875,
0.03472900390625,
-0.012298583984375,
-0.0245513916015625,
0.042083740234375,
0.04620361328125,
0.0207672119140625,
-0.033203125,
-0.07916259765625,
-0.029083251953125,
0.052154541015625,
0.05718994140625,
0.0278167724609375,
0.01122283935546875,
-0.0137176513671875,
-0.03692626953125,
0.015167236328125,
-0.041168212890625,
-0.01021575927734375,
0.07452392578125,
-0.007568359375,
0.012176513671875,
-0.01096343994140625,
-0.00989532470703125,
-0.0318603515625,
0.0296173095703125,
-0.0195159912109375,
-0.050445556640625,
0.0300140380859375,
0.0526123046875,
0.060028076171875,
0.0024089813232421875,
0.0214691162109375,
0.00876617431640625,
-0.046722412109375,
0.0122833251953125,
-0.009552001953125,
0.0141448974609375,
0.013336181640625,
0.00695037841796875,
0.017608642578125,
-0.0307769775390625,
-0.01666259765625,
-0.0125732421875,
-0.01480865478515625,
0.05377197265625,
-0.01042938232421875,
0.01806640625,
-0.0299530029296875,
-0.03204345703125,
-0.051422119140625,
0.001712799072265625,
0.0394287109375,
-0.021484375,
0.042694091796875,
-0.004413604736328125,
-0.06298828125,
0.033355712890625,
-0.004337310791015625,
0.0259857177734375,
-0.0145111083984375,
-0.037445068359375,
-0.0386962890625,
0.040679931640625,
-0.016876220703125,
-0.0296173095703125,
0.0037288665771484375,
-0.0439453125,
-0.022430419921875,
-0.0511474609375,
-0.0272674560546875,
0.021514892578125,
-0.0198516845703125,
-0.03692626953125,
0.048248291015625,
0.046142578125,
0.00395965576171875,
-0.0232086181640625,
-0.0255889892578125,
-0.0059051513671875,
0.033782958984375,
0.0261383056640625,
0.02777099609375,
0.0203399658203125,
-0.045501708984375,
-0.01800537109375,
-0.0157623291015625,
-0.00757598876953125,
0.018218994140625,
0.0204315185546875,
0.002132415771484375,
0.00455474853515625,
0.0036640167236328125,
-0.04193115234375,
-0.023162841796875,
-0.029296875,
-0.032501220703125,
-0.0384521484375,
0.024658203125,
-0.006160736083984375,
-0.0279998779296875,
-0.006847381591796875,
-0.0080108642578125,
0.04779052734375,
0.0008258819580078125,
-0.028228759765625,
-0.004184722900390625,
-0.022308349609375,
-0.046966552734375,
-0.0035552978515625,
-0.01552581787109375,
0.00014340877532958984,
-0.041107177734375,
0.0271759033203125,
0.01812744140625,
-0.029571533203125,
-0.0325927734375,
-0.0245513916015625,
-0.0158538818359375,
0.013824462890625,
0.005878448486328125,
0.028961181640625,
-0.00872802734375,
0.03472900390625,
-0.0679931640625,
-0.00679779052734375,
-0.03839111328125,
0.0236663818359375,
0.06280517578125,
0.03338623046875,
-0.0019626617431640625,
-0.05926513671875,
0.0531005859375,
0.0212249755859375,
-0.030059814453125,
0.0467529296875,
-0.045135498046875,
-0.0469970703125,
0.0180206298828125,
0.033050537109375,
0.00020062923431396484,
0.012969970703125,
-0.04302978515625,
-0.022979736328125,
-0.046539306640625,
-0.03851318359375,
-0.001552581787109375,
-0.0166473388671875,
0.00893402099609375,
0.01422882080078125,
-0.0009469985961914062,
0.03485107421875,
-0.00848388671875,
-0.02880859375,
0.0191650390625,
-0.004016876220703125,
-0.040771484375,
0.015869140625,
0.018280029296875,
0.035125732421875,
0.04632568359375,
-0.037567138671875,
-0.036773681640625,
-0.011962890625,
-0.0147857666015625,
0.001026153564453125,
0.033538818359375,
0.03802490234375,
-0.0306243896484375,
-0.0158233642578125,
-0.0164947509765625,
-0.00417327880859375,
-0.02618408203125,
0.046356201171875,
-0.01285552978515625,
0.025909423828125,
-0.01226043701171875,
0.058807373046875,
-0.03179931640625,
-0.03155517578125,
-0.053741455078125,
0.02008056640625,
0.01142120361328125,
0.0662841796875,
-0.006526947021484375,
0.0273590087890625,
0.027130126953125,
0.028228759765625,
0.04254150390625,
0.044647216796875,
0.0268402099609375,
0.0093994140625,
-0.047821044921875,
-0.059814453125,
-0.010711669921875,
-0.049072265625,
0.0296783447265625,
-0.01302337646484375,
-0.055328369140625,
-0.02276611328125,
0.039276123046875,
0.01549530029296875,
0.00641632080078125,
-0.02783203125,
0.0025157928466796875,
-0.00943756103515625,
0.07415771484375,
-0.0016756057739257812,
0.04443359375,
0.00696563720703125,
-0.0238494873046875,
0.022552490234375,
-0.0035533905029296875,
0.0026111602783203125,
0.0740966796875,
0.0288238525390625,
0.005016326904296875,
-0.0294647216796875,
-0.024444580078125,
0.037689208984375,
-0.018310546875,
-0.01361846923828125,
0.0355224609375,
-0.0753173828125,
0.0220794677734375,
-0.041595458984375,
0.01161956787109375,
-0.013275146484375,
-0.05279541015625,
-0.014495849609375,
-0.049468994140625,
0.042724609375,
0.06805419921875,
0.052337646484375,
0.018798828125,
0.0216522216796875,
-0.0180816650390625,
-0.0074005126953125,
0.013580322265625,
0.0222625732421875,
0.0019664764404296875,
0.027557373046875,
-0.03900146484375,
-0.041107177734375,
0.00524139404296875,
-0.0071868896484375,
-0.0010213851928710938,
0.0167236328125,
-0.036590576171875,
0.043975830078125,
0.0211944580078125,
-0.026275634765625,
-0.0032749176025390625,
0.046295166015625,
0.01090240478515625,
-0.0148468017578125,
0.022186279296875,
0.0236358642578125,
-0.01273345947265625,
0.0809326171875,
-0.0228729248046875,
0.01218414306640625,
0.017974853515625,
-0.01485443115234375,
0.015228271484375,
-0.010894775390625,
-0.037933349609375,
-0.04058837890625,
0.01239013671875,
0.0709228515625,
0.0347900390625,
0.01036834716796875,
-0.0190277099609375,
0.00833892822265625,
-0.025787353515625,
-0.00647735595703125,
-0.0467529296875,
0.05389404296875,
-0.034820556640625,
-0.00380706787109375,
-0.00551605224609375,
0.02130126953125,
0.01849365234375,
0.031280517578125,
-0.042633056640625,
-0.058685302734375,
0.04736328125,
-0.035430908203125,
-0.03363037109375,
0.035064697265625,
0.0390625,
0.017578125,
-0.019989013671875,
-0.00372314453125,
-0.0243682861328125,
0.00711822509765625,
0.0001493692398071289,
0.003650665283203125,
-0.03448486328125,
0.0163421630859375,
-0.033538818359375,
-0.01451873779296875,
0.00909423828125,
-0.05535888671875,
-0.027862548828125,
-0.036773681640625,
0.057525634765625,
0.034027099609375,
0.01349639892578125,
-0.031829833984375,
-0.030120849609375,
0.06134033203125,
0.01134490966796875,
0.036285400390625,
0.0030345916748046875,
0.02105712890625,
-0.00531005859375,
0.0204620361328125,
0.049896240234375,
0.028106689453125,
0.003475189208984375,
-0.05316162109375,
0.021728515625,
0.01371002197265625,
-0.017669677734375,
0.0291748046875,
-0.031402587890625,
-0.0251312255859375,
-0.0119171142578125,
0.036865234375,
0.04833984375,
0.00934600830078125,
0.0712890625,
-0.0017719268798828125,
0.02691650390625,
-0.041534423828125,
-0.0004355907440185547,
0.045623779296875,
-0.03778076171875,
-0.044219970703125,
-0.006103515625,
0.003643035888671875,
-0.0022754669189453125,
-0.0002536773681640625,
0.005176544189453125,
0.0288543701171875,
0.035308837890625,
-0.01175689697265625,
-0.036590576171875,
-0.000896453857421875,
0.036529541015625,
-0.0297698974609375,
-0.03955078125,
-0.03179931640625,
-0.041290283203125,
0.06353759765625,
0.004703521728515625,
-0.0008606910705566406,
-0.033782958984375,
-0.047027587890625,
0.02545166015625,
0.00786590576171875,
-0.0036411285400390625,
-0.0036067962646484375,
0.024169921875,
0.006618499755859375,
-0.00027060508728027344,
-0.06378173828125,
0.0283966064453125,
-0.0391845703125,
0.046661376953125,
-0.04638671875,
0.037353515625,
-0.00897216796875,
-0.028167724609375,
0.03692626953125,
-0.046295166015625,
0.04193115234375,
0.032318115234375,
0.02471923828125,
0.034698486328125,
0.04229736328125,
0.043609619140625,
0.0335693359375,
0.0141143798828125,
0.0157470703125,
0.04534912109375,
0.0285797119140625,
0.028656005859375,
-0.0299835205078125,
-0.052886962890625,
-0.01433563232421875,
0.0195770263671875,
0.027435302734375,
0.05389404296875,
0.01453399658203125,
0.038970947265625,
-0.033599853515625,
0.0291595458984375,
0.04364013671875,
0.0478515625,
-0.03448486328125,
0.038055419921875,
0.00923919677734375,
0.041412353515625,
-0.0161590576171875,
-0.037322998046875,
0.00946807861328125,
-0.006526947021484375,
-0.044281005859375,
-0.028717041015625,
0.0097198486328125,
0.03607177734375,
-0.028045654296875,
-0.029296875,
-0.034423828125,
0.0308837890625,
-0.0150909423828125,
-0.048492431640625,
-0.025115966796875,
0.0209197998046875,
-0.06732177734375,
0.04351806640625,
0.0687255859375,
-0.01300048828125,
0.005764007568359375,
0.014678955078125,
0.039642333984375,
0.0186309814453125,
0.030792236328125,
0.0193023681640625,
0.0114593505859375,
-0.0155181884765625,
-0.07098388671875,
0.04986572265625,
-0.062408447265625,
-0.034637451171875,
-0.0138702392578125,
-0.0272216796875,
-0.0198822021484375,
-0.01824951171875,
-0.04412841796875,
0.024078369140625,
-0.028045654296875,
-0.05352783203125,
0.020233154296875,
0.0350341796875,
-0.023681640625,
0.0285491943359375,
-0.002971649169921875,
0.01287841796875,
0.043914794921875,
-0.0235443115234375,
-0.0186614990234375,
-0.039581298828125,
0.055389404296875,
-0.0107269287109375,
0.00223541259765625,
0.01462554931640625,
0.035430908203125,
0.01084136962890625,
0.048583984375,
-0.0157318115234375,
0.006866455078125,
-0.052276611328125,
-0.02667236328125,
0.0022754669189453125,
0.0343017578125,
-0.0386962890625,
0.00910186767578125,
-0.033721923828125,
-0.050628662109375,
-0.03802490234375,
-0.01226806640625,
0.07318115234375,
0.03729248046875,
0.002197265625,
0.0129241943359375,
0.006305694580078125,
-0.055419921875,
0.0044708251953125,
-0.01172637939453125,
0.042510986328125,
0.0019931793212890625,
-0.00960540771484375,
0.0156097412109375,
-0.0426025390625,
-0.040008544921875,
-0.017242431640625,
0.052947998046875,
0.03955078125,
-0.00879669189453125,
-0.053436279296875,
-0.0222015380859375,
0.028076171875,
0.005218505859375,
-0.0247344970703125,
-0.04443359375,
0.030181884765625,
0.033935546875,
-0.00799560546875,
-0.00962066650390625,
-0.060791015625,
0.004146575927734375,
0.0160980224609375,
0.010009765625,
0.034271240234375,
-0.005199432373046875,
0.01134490966796875,
0.0131378173828125,
-0.021087646484375,
-0.003940582275390625,
-0.006946563720703125,
-0.0214385986328125,
0.0279541015625,
0.01502227783203125,
-0.05517578125,
-0.0160675048828125,
0.032867431640625,
-0.033111572265625,
0.0248260498046875,
-0.0181121826171875,
0.030731201171875,
0.007137298583984375,
-0.033111572265625,
0.00545501708984375,
0.0277252197265625,
0.028472900390625,
0.0306854248046875,
-0.0127105712890625,
-0.004024505615234375,
-0.002048492431640625,
0.0489501953125,
-0.035919189453125,
-0.04766845703125,
-0.0239105224609375,
0.03302001953125,
0.050048828125,
-6.014108657836914e-05,
-0.0201263427734375,
0.0116729736328125,
0.01131439208984375,
0.024017333984375,
-0.014312744140625,
0.01212310791015625,
0.0094146728515625,
-0.0687255859375,
0.038604736328125,
0.048980712890625,
0.008880615234375,
0.0291290283203125,
0.00244903564453125,
-0.0343017578125,
0.0247344970703125,
-0.03338623046875,
-0.0020847320556640625,
0.008697509765625,
0.0300445556640625,
0.039642333984375,
0.03448486328125,
0.032440185546875,
-0.0033130645751953125,
-0.012420654296875,
-0.00701141357421875,
-0.052764892578125,
-0.0565185546875,
0.00634765625,
0.03802490234375,
-0.025238037109375,
0.045501708984375,
-0.002170562744140625,
-0.03765869140625,
0.0233001708984375,
-0.03948974609375,
0.0137939453125,
-0.01171112060546875,
-0.01120758056640625,
0.032501220703125,
-0.0108489990234375,
-0.006137847900390625,
0.00018584728240966797,
0.015960693359375,
0.0087127685546875,
0.015869140625,
0.0667724609375,
0.0504150390625,
-0.01309967041015625,
-0.0308837890625,
0.01282501220703125,
0.0237579345703125,
-0.0122833251953125,
0.025665283203125,
0.01404571533203125,
0.00969696044921875,
-0.070068359375,
-0.033477783203125,
0.042724609375,
0.059783935546875,
0.03131103515625,
0.04058837890625,
-0.03887939453125,
-0.028900146484375,
-0.053802490234375,
0.0129547119140625,
-0.049285888671875,
0.0330810546875,
-0.0306396484375,
-0.006092071533203125,
0.021026611328125,
-0.0310516357421875,
-0.00879669189453125,
0.03802490234375,
0.0382080078125,
-0.0137786865234375,
0.02978515625,
-0.04132080078125,
-0.01392364501953125,
-0.0548095703125,
-0.0105133056640625,
0.061492919921875,
-0.02313232421875,
-0.0004973411560058594,
0.041534423828125,
-0.07965087890625,
-0.08111572265625,
-0.052581787109375,
-0.0277862548828125,
0.02984619140625,
0.013458251953125,
-0.0024394989013671875,
-0.08258056640625,
-0.027435302734375,
-0.006595611572265625,
-0.01268768310546875,
0.0208740234375,
-0.002716064453125,
-0.01490020751953125,
0.05877685546875,
-0.03472900390625,
0.016845703125,
-0.03448486328125,
-0.0142059326171875,
0.0020580291748046875,
0.00484466552734375,
-0.026397705078125,
-0.01139068603515625,
-0.023681640625,
-0.002841949462890625,
-0.0038318634033203125,
-0.024566650390625,
-8.71419906616211e-05,
0.002559661865234375,
0.00547027587890625,
0.026153564453125,
0.0117034912109375,
-0.051727294921875,
-0.02008056640625,
0.01319122314453125,
-0.0254058837890625,
-0.054656982421875,
0.045654296875,
-0.011474609375,
0.0157928466796875,
-0.00527191162109375,
-0.039276123046875,
0.0195770263671875,
0.02447509765625,
0.0135345458984375,
0.0118560791015625,
-0.02911376953125,
0.0157623291015625,
-0.032562255859375,
-0.0245361328125,
0.030059814453125,
0.041748046875,
0.10467529296875,
0.0220794677734375,
0.01189422607421875,
0.0102081298828125,
0.0216827392578125,
-0.00444793701171875,
-0.042022705078125,
-0.03485107421875,
-0.01800537109375,
-0.0282440185546875,
-0.044769287109375,
-0.031494140625,
0.01934814453125,
0.0031795501708984375,
-0.01041412353515625,
-0.02520751953125,
-0.030975341796875,
-0.0054779052734375,
0.00402069091796875,
0.048126220703125,
0.0943603515625,
0.034027099609375,
-0.046966552734375,
0.038848876953125,
-0.0242156982421875,
0.0258331298828125,
0.0301666259765625,
0.0037841796875,
-0.0150604248046875,
-0.023468017578125,
0.030517578125,
0.00945281982421875,
-0.0292510986328125,
-0.034210205078125,
-0.01154327392578125,
-0.0197906494140625,
-0.004787445068359375,
-0.002460479736328125,
-0.02789306640625,
0.006984710693359375,
-0.026702880859375,
0.005096435546875,
-0.0350341796875,
0.053436279296875,
-0.007343292236328125,
0.036529541015625,
0.0150909423828125,
0.041168212890625,
0.0474853515625,
0.06280517578125,
0.058441162109375,
0.0269775390625,
0.0114898681640625,
-0.040985107421875,
0.05560302734375,
0.053070068359375,
0.0753173828125,
-0.00974273681640625,
0.03131103515625,
0.041290283203125,
0.0435791015625,
0.029998779296875,
0.0086822509765625,
0.050140380859375,
0.012603759765625,
0.0277862548828125,
-0.03350830078125,
-0.031524658203125,
0.040771484375,
0.032470703125,
-0.0029201507568359375,
0.0222320556640625,
-0.005596160888671875,
0.00046706199645996094,
0.033905029296875,
-0.0145111083984375,
0.034942626953125,
0.0299224853515625,
0.04705810546875,
0.040679931640625,
0.0186614990234375,
0.039337158203125,
0.0406494140625,
0.001758575439453125,
0.041717529296875,
-1.3113021850585938e-06,
0.01343536376953125,
-0.024200439453125,
0.046142578125,
-0.031982421875,
0.01385498046875,
0.0260162353515625,
0.004425048828125,
0.046844482421875,
-0.019683837890625,
-0.0330810546875,
-0.035491943359375,
-0.03656005859375,
-0.0312347412109375,
-0.005977630615234375,
-0.0477294921875,
0.0191650390625,
-0.0298309326171875,
-0.012237548828125,
-0.00775909423828125,
0.037200927734375,
-0.01482391357421875,
-0.039703369140625,
0.03594970703125,
-0.01708984375,
0.0227508544921875,
-0.030731201171875,
0.01416015625,
0.00933837890625,
0.0236053466796875,
0.01078033447265625,
0.032257080078125,
0.040740966796875,
0.02142333984375,
0.042083740234375,
0.053680419921875,
0.0298919677734375,
-0.0262298583984375,
0.0208587646484375,
0.0360107421875,
0.0136566162109375,
0.0482177734375,
0.024078369140625,
0.0265045166015625,
0.01145172119140625,
0.04364013671875,
0.03173828125,
0.004329681396484375,
-0.0457763671875,
0.060638427734375,
0.01470947265625,
-0.0227508544921875,
0.0216064453125,
-0.045928955078125,
0.031585693359375,
0.0285797119140625,
-0.036407470703125,
-0.04827880859375,
0.041717529296875,
0.0313720703125,
-0.0540771484375,
-0.045745849609375,
-0.01497650146484375,
0.020355224609375,
0.05963134765625,
-0.0246124267578125,
-0.015380859375,
0.00848388671875,
0.032440185546875,
0.0574951171875,
0.0526123046875,
-0.03643798828125,
0.0399169921875,
0.0020904541015625,
-0.013336181640625,
0.004016876220703125,
-0.04644775390625,
-0.007366180419921875,
0.045806884765625,
-0.011932373046875,
-0.037353515625,
-0.022705078125,
0.017547607421875,
-0.03955078125,
-0.02642822265625,
0.029510498046875,
0.0250701904296875,
0.01102447509765625,
0.00351715087890625,
0.018280029296875,
-0.0286712646484375,
-0.031005859375,
0.051239013671875,
0.054473876953125,
0.0279388427734375,
-0.04388427734375,
-0.032745361328125,
0.00485992431640625,
-0.040130615234375,
0.004123687744140625,
-0.03369140625,
0.018402099609375,
0.033935546875,
0.024932861328125,
-0.0175933837890625,
0.0247955322265625,
0.03582763671875,
0.038970947265625,
1.329183578491211e-05,
-0.0095367431640625,
0.05841064453125,
-0.049468994140625,
-0.048095703125,
0.028961181640625,
0.048797607421875,
0.05694580078125,
0.01346588134765625,
0.024139404296875,
0.00708770751953125,
-0.01476287841796875,
-0.0033931732177734375,
-0.0204010009765625,
-0.0017290115356445312,
-0.022369384765625,
-0.03955078125,
0.0007786750793457031,
-0.0154266357421875,
0.033843994140625,
-0.02813720703125,
-0.046417236328125,
-0.044097900390625,
0.034088134765625,
0.0015354156494140625,
0.03887939453125,
-0.0287628173828125,
-0.041168212890625,
-0.0207977294921875,
-0.019317626953125,
-0.0017757415771484375,
0.0704345703125,
0.0570068359375,
0.033416748046875,
-0.013275146484375,
0.046966552734375,
0.06549072265625,
0.0017213821411132812,
-0.03558349609375,
0.038665771484375,
0.050506591796875,
-0.03179931640625,
0.00978851318359375,
0.04461669921875,
0.023895263671875,
-0.005641937255859375,
0.0396728515625,
0.0001348257064819336,
-0.042755126953125,
-0.02630615234375,
-0.021392822265625,
0.03155517578125,
0.0006189346313476562,
-0.02032470703125,
0.0200958251953125,
-0.0271759033203125,
0.01480865478515625,
-0.041595458984375,
-0.01556396484375,
-0.0279083251953125,
0.022003173828125,
0.021209716796875,
-0.03912353515625,
0.02374267578125,
0.01096343994140625,
0.001506805419921875,
-0.0195465087890625,
0.042510986328125,
0.0399169921875,
0.0200653076171875,
-0.0284576416015625,
0.04052734375,
0.038818359375,
-0.015380859375,
0.0260009765625,
-0.0206146240234375,
0.01148223876953125,
0.0256195068359375,
-0.0123291015625,
0.041168212890625,
-0.00942230224609375,
0.0209503173828125,
-0.00672149658203125,
-0.03521728515625,
-0.033660888671875,
-0.0079803466796875,
0.0258636474609375,
0.00308990478515625,
0.03631591796875,
-0.03375244140625,
-0.046417236328125,
0.052215576171875,
0.0303497314453125,
0.0142669677734375,
-0.034149169921875,
-0.02435302734375,
0.035400390625,
-0.0301666259765625,
0.0006566047668457031,
-0.019561767578125,
-0.0014314651489257812,
-0.005130767822265625,
0.0007920265197753906,
0.006046295166015625,
0.03704833984375,
0.0248260498046875,
0.04229736328125,
0.0032806396484375,
-0.007724761962890625,
0.0198822021484375,
0.02386474609375,
-0.0216064453125,
0.0211334228515625,
0.04217529296875,
0.040771484375,
0.007610321044921875,
-0.034423828125,
0.0357666015625,
0.038116455078125,
0.032684326171875,
-0.033050537109375,
-0.034515380859375,
-0.01776123046875,
-0.04205322265625,
-0.00391387939453125,
-0.02032470703125,
0.0092620849609375,
0.0445556640625
# 30 "lenet.cpp" 2
 };
 static f_16 K3_B[120] = {

# 1 "./c3_b.h" 1
0.0252685546875,
0.054656982421875,
-0.031494140625,
-0.038665771484375,
0.0245513916015625,
0.057525634765625,
0.048675537109375,
0.03558349609375,
0.032623291015625,
0.01029205322265625,
0.044525146484375,
0.015625,
-0.03314208984375,
0.02935791015625,
0.043060302734375,
0.0416259765625,
0.022979736328125,
-0.00768280029296875,
-0.030120849609375,
0.0423583984375,
-0.034332275390625,
0.007167816162109375,
-0.038482666015625,
-0.0050811767578125,
0.0081329345703125,
-0.0192413330078125,
-0.0362548828125,
-0.036834716796875,
-0.018829345703125,
-0.015045166015625,
-0.03460693359375,
-0.0026721954345703125,
-0.01129150390625,
0.0205535888671875,
-0.01184844970703125,
0.0211181640625,
0.048797607421875,
0.03759765625,
0.0301971435546875,
-0.02960205078125,
0.0157012939453125,
0.00836944580078125,
-0.004726409912109375,
-0.034088134765625,
-0.0260162353515625,
-0.032928466796875,
0.02850341796875,
0.01442718505859375,
0.0014896392822265625,
-0.040985107421875,
0.0007882118225097656,
0.0003941059112548828,
0.03240966796875,
0.031585693359375,
0.0040435791015625,
-0.01476287841796875,
-0.0552978515625,
-0.047698974609375,
-0.027587890625,
0.049346923828125,
-0.006633758544921875,
0.060028076171875,
0.03424072265625,
-0.01690673828125,
0.00714111328125,
-0.0032444000244140625,
-0.048126220703125,
-0.04986572265625,
0.01560211181640625,
0.0111236572265625,
0.0213775634765625,
0.034454345703125,
-0.0211334228515625,
0.01494598388671875,
-0.0222625732421875,
-0.030181884765625,
0.0035610198974609375,
-0.0004191398620605469,
-0.019012451171875,
0.06719970703125,
-0.0228271484375,
0.0178375244140625,
-0.0391845703125,
-0.03509521484375,
0.0291595458984375,
0.024444580078125,
0.051605224609375,
0.0108184814453125,
-0.024749755859375,
0.025146484375,
-0.017059326171875,
0.0240020751953125,
-0.043426513671875,
0.034149169921875,
0.020263671875,
0.00788116455078125,
-0.0009784698486328125,
0.00981903076171875,
0.0147705078125,
-0.035675048828125,
0.014068603515625,
-0.042816162109375,
-0.0031108856201171875,
-0.0122528076171875,
0.004741668701171875,
-0.047454833984375,
-0.00469207763671875,
0.00440216064453125,
0.033111572265625,
0.01265716552734375,
0.027496337890625,
-0.01294708251953125,
0.0474853515625,
-0.004638671875,
-0.0258331298828125,
0.029937744140625,
0.0245819091796875,
0.028656005859375,
-0.039764404296875,
0.045074462890625
# 33 "lenet.cpp" 2
 };
 static f_16 FC1_W[84][120] = {

# 1 "./fc_w.h" 1
0.004497528076171875,
-0.01261138916015625,
-0.03668212890625,
0.053466796875,
-0.03448486328125,
0.07794189453125,
0.0220489501953125,
0.0141448974609375,
-0.00904083251953125,
-0.050140380859375,
0.049591064453125,
0.04571533203125,
-0.0806884765625,
-0.04302978515625,
0.05889892578125,
-0.047027587890625,
-0.0199432373046875,
0.081298828125,
0.07415771484375,
-0.053680419921875,
-0.10430908203125,
-0.1060791015625,
0.008209228515625,
-0.06549072265625,
-0.006313323974609375,
0.040557861328125,
0.0058135986328125,
0.006580352783203125,
-0.041473388671875,
-0.029205322265625,
0.037384033203125,
-0.0758056640625,
-0.01250457763671875,
0.061981201171875,
0.07794189453125,
0.048187255859375,
-0.1214599609375,
0.089111328125,
-0.034027099609375,
-0.05487060546875,
0.01507568359375,
0.099609375,
-0.06732177734375,
0.098876953125,
-0.029083251953125,
-0.036285400390625,
0.03271484375,
-0.07098388671875,
-0.06951904296875,
-0.0950927734375,
-0.06671142578125,
-0.064697265625,
0.0268096923828125,
-0.016815185546875,
-0.02337646484375,
0.0279388427734375,
0.097412109375,
-0.019805908203125,
-0.0694580078125,
-0.046295166015625,
0.017547607421875,
-0.041595458984375,
0.05938720703125,
0.07867431640625,
-0.0748291015625,
0.0721435546875,
0.0136260986328125,
-0.0162811279296875,
0.05682373046875,
-0.048980712890625,
0.06719970703125,
0.050872802734375,
-0.01398468017578125,
-0.01099395751953125,
0.006389617919921875,
-0.00458526611328125,
0.0936279296875,
0.085205078125,
-0.05242919921875,
-0.05523681640625,
-0.10693359375,
-0.021759033203125,
-0.005279541015625,
0.017974853515625,
-0.035888671875,
0.0204315185546875,
-0.031768798828125,
0.021942138671875,
-0.004772186279296875,
0.01090240478515625,
0.06439208984375,
-0.015869140625,
-0.00017535686492919922,
0.041778564453125,
-0.1065673828125,
-0.10003662109375,
-0.08154296875,
-0.09478759765625,
-0.059112548828125,
-0.002635955810546875,
0.06097412109375,
-0.01490020751953125,
-0.032867431640625,
0.12213134765625,
0.10662841796875,
0.0194091796875,
0.0109405517578125,
-0.0006966590881347656,
0.00771331787109375,
-0.03631591796875,
-0.0164794921875,
0.0374755859375,
-0.0318603515625,
-0.04620361328125,
-0.0965576171875,
0.0574951171875,
0.0811767578125,
-0.04083251953125,
-0.10162353515625,
0.041778564453125,
-0.01210784912109375,
0.12445068359375,
-0.0155792236328125,
0.1015625,
-0.058990478515625,
-0.02880859375,
-0.0946044921875,
0.10394287109375,
-0.0304107666015625,
0.04364013671875,
-0.053131103515625,
0.077880859375,
0.07330322265625,
-0.05902099609375,
0.026947021484375,
-0.020660400390625,
-0.0098876953125,
-0.1529541015625,
-0.049072265625,
0.08270263671875,
0.035003662109375,
0.06396484375,
0.045684814453125,
-0.09136962890625,
0.06378173828125,
0.09381103515625,
-0.0611572265625,
0.01395416259765625,
-0.0941162109375,
-0.111572265625,
-0.0823974609375,
-0.00411224365234375,
0.0209197998046875,
-0.07635498046875,
0.03643798828125,
-0.1370849609375,
0.08551025390625,
0.0017881393432617188,
-0.0215911865234375,
0.0182952880859375,
-0.0892333984375,
-0.0196075439453125,
0.07403564453125,
-0.04913330078125,
0.055694580078125,
0.0145416259765625,
0.045928955078125,
0.0386962890625,
0.0187225341796875,
-0.08795166015625,
-0.05584716796875,
-0.04541015625,
-0.038787841796875,
0.027740478515625,
0.031463623046875,
-0.08734130859375,
0.0136260986328125,
-0.1019287109375,
-0.0909423828125,
0.035888671875,
0.034393310546875,
0.0275726318359375,
-0.10711669921875,
0.0697021484375,
-0.049407958984375,
0.0860595703125,
0.0221099853515625,
0.03936767578125,
-0.020263671875,
0.045654296875,
-0.084716796875,
-0.044586181640625,
-0.0011157989501953125,
0.07080078125,
0.0052642822265625,
-0.0131378173828125,
0.007602691650390625,
-0.01361846923828125,
0.0274658203125,
0.051361083984375,
0.07501220703125,
-0.038360595703125,
0.051422119140625,
-0.0738525390625,
0.07891845703125,
0.06512451171875,
-0.068603515625,
-0.0290374755859375,
-0.1292724609375,
0.07275390625,
-0.040557861328125,
0.0906982421875,
-0.09552001953125,
-0.08184814453125,
0.0024127960205078125,
-0.05487060546875,
0.020751953125,
-0.04144287109375,
-0.03021240234375,
0.037567138671875,
-0.0090179443359375,
-0.0830078125,
-0.06304931640625,
0.053070068359375,
0.0758056640625,
-0.00960540771484375,
-0.06182861328125,
-0.0538330078125,
0.0697021484375,
0.1009521484375,
-0.00341033935546875,
-0.00446319580078125,
0.0309295654296875,
-0.0287628173828125,
-0.07049560546875,
-0.07586669921875,
0.0438232421875,
0.07623291015625,
0.065185546875,
0.0701904296875,
0.05108642578125,
0.0004000663757324219,
0.018798828125,
-0.0831298828125,
0.0643310546875,
0.09930419921875,
0.10382080078125,
0.09197998046875,
0.0254669189453125,
-0.01251983642578125,
0.09033203125,
-0.11114501953125,
-0.0523681640625,
-0.061004638671875,
-0.1298828125,
-0.088623046875,
-0.06304931640625,
-0.061248779296875,
0.030181884765625,
0.05853271484375,
-0.00801849365234375,
-0.0140838623046875,
0.04608154296875,
0.08544921875,
-0.059814453125,
-0.03778076171875,
4.094839096069336e-05,
0.0208892822265625,
-0.05816650390625,
-0.0914306640625,
0.1478271484375,
0.06591796875,
-0.07012939453125,
0.03594970703125,
0.0020904541015625,
0.0341796875,
-0.009857177734375,
-0.020751953125,
-0.04180908203125,
-0.037200927734375,
-0.05718994140625,
0.003383636474609375,
-0.037017822265625,
0.0859375,
-0.048919677734375,
0.0384521484375,
0.054595947265625,
-0.007350921630859375,
0.126708984375,
-0.089111328125,
-0.04290771484375,
-0.02947998046875,
0.022430419921875,
0.045440673828125,
0.12109375,
0.09051513671875,
-0.0263671875,
0.1224365234375,
0.048675537109375,
-0.049468994140625,
0.020111083984375,
0.034210205078125,
0.06927490234375,
-0.028228759765625,
-0.015838623046875,
0.1124267578125,
0.06353759765625,
0.0263824462890625,
0.065185546875,
0.080322265625,
-0.007007598876953125,
-0.07855224609375,
-0.0947265625,
-0.0423583984375,
-0.0016298294067382812,
-0.0205535888671875,
0.079833984375,
-0.022979736328125,
0.1258544921875,
0.0714111328125,
-0.05853271484375,
-0.10906982421875,
-0.034088134765625,
-0.003116607666015625,
-0.033782958984375,
0.025665283203125,
0.0828857421875,
-0.013336181640625,
0.06640625,
0.036041259765625,
-0.00968170166015625,
-0.0518798828125,
-0.0025806427001953125,
0.02105712890625,
-0.02734375,
-0.050140380859375,
0.0018405914306640625,
-0.075927734375,
0.0374755859375,
-0.08154296875,
-0.039947509765625,
-0.0892333984375,
-0.0014553070068359375,
0.1124267578125,
0.0860595703125,
0.04779052734375,
-0.075927734375,
-0.122802734375,
-0.0147247314453125,
-0.07061767578125,
0.017578125,
0.0242156982421875,
-0.037139892578125,
-0.0333251953125,
0.07305908203125,
0.057342529296875,
0.002208709716796875,
0.08978271484375,
-0.09002685546875,
-0.09912109375,
0.08197021484375,
0.06781005859375,
0.059356689453125,
0.01800537109375,
0.11480712890625,
0.08782958984375,
-0.012054443359375,
0.01031494140625,
0.0572509765625,
-0.0027904510498046875,
0.0849609375,
-0.052001953125,
-0.007266998291015625,
0.0711669921875,
-0.1041259765625,
-0.0789794921875,
0.04803466796875,
-0.0699462890625,
-0.008575439453125,
-0.0142822265625,
-0.11578369140625,
-0.07281494140625,
0.10845947265625,
-0.057098388671875,
-0.046051025390625,
0.060516357421875,
-0.09124755859375,
-0.1251220703125,
0.06695556640625,
-0.062164306640625,
-0.0176239013671875,
-0.0288238525390625,
0.1434326171875,
-0.019256591796875,
-0.00787353515625,
0.02325439453125,
-0.108642578125,
0.05303955078125,
0.047027587890625,
0.037841796875,
0.036285400390625,
0.034027099609375,
0.10302734375,
0.01113128662109375,
0.006031036376953125,
0.0216522216796875,
0.0810546875,
-0.047515869140625,
0.047515869140625,
-0.03204345703125,
0.087158203125,
-0.0204315185546875,
-0.0061187744140625,
-0.120361328125,
-0.07757568359375,
0.005702972412109375,
-0.0120697021484375,
-0.0760498046875,
0.0095062255859375,
-0.044464111328125,
-0.037567138671875,
0.0306854248046875,
0.056793212890625,
0.035888671875,
-0.0166015625,
0.11309814453125,
0.061126708984375,
-0.05804443359375,
0.0657958984375,
-0.0031833648681640625,
-0.0657958984375,
-0.0126953125,
0.026580810546875,
0.083251953125,
-0.06793212890625,
-0.035919189453125,
-0.0261077880859375,
-0.033203125,
0.08831787109375,
-0.05364990234375,
-0.1085205078125,
0.02117919921875,
-0.01776123046875,
-0.0206451416015625,
-0.038543701171875,
0.055877685546875,
-0.00026226043701171875,
-0.06964111328125,
-0.050750732421875,
0.08392333984375,
0.08526611328125,
-0.03173828125,
0.083984375,
0.119140625,
-0.018096923828125,
-0.036346435546875,
-0.13330078125,
-0.0733642578125,
0.06951904296875,
0.06256103515625,
-0.04803466796875,
-0.0849609375,
-0.0784912109375,
0.039520263671875,
0.0889892578125,
-0.166015625,
0.01099395751953125,
0.049346923828125,
0.0037326812744140625,
0.03662109375,
-0.05438232421875,
-0.039459228515625,
0.013519287109375,
0.06060791015625,
-0.07843017578125,
0.0029926300048828125,
0.0030231475830078125,
0.05712890625,
0.00034332275390625,
-0.0259552001953125,
0.0552978515625,
0.041290283203125,
0.02752685546875,
-0.07513427734375,
0.040679931640625,
-0.07830810546875,
0.03948974609375,
-0.029632568359375,
0.04595947265625,
0.052978515625,
0.055694580078125,
0.03375244140625,
0.0033130645751953125,
0.0853271484375,
0.0528564453125,
-0.07769775390625,
0.03216552734375,
0.0180511474609375,
-0.04034423828125,
0.0201263427734375,
0.0102386474609375,
-0.08477783203125,
-0.007366180419921875,
-0.035247802734375,
-0.008758544921875,
0.0865478515625,
-0.033416748046875,
-0.01459503173828125,
-0.00179290771484375,
-0.02435302734375,
0.0562744140625,
0.0006189346313476562,
-0.022613525390625,
0.030029296875,
-0.003509521484375,
0.06414794921875,
0.028564453125,
-0.0328369140625,
0.0201416015625,
0.052642822265625,
-0.00830841064453125,
-0.035919189453125,
0.040985107421875,
0.06683349609375,
-0.05352783203125,
-0.07232666015625,
-0.05316162109375,
-0.00156402587890625,
-0.042327880859375,
-0.035247802734375,
-0.00022780895233154297,
0.0213775634765625,
-0.07867431640625,
-0.0270233154296875,
0.0202789306640625,
-0.036376953125,
-0.019439697265625,
-0.04083251953125,
0.0272674560546875,
0.006679534912109375,
-0.06817626953125,
-0.0645751953125,
-0.08740234375,
-0.0164031982421875,
-0.007183074951171875,
-0.061920166015625,
-0.057525634765625,
-0.0211181640625,
0.0430908203125,
0.07867431640625,
0.04132080078125,
-0.06329345703125,
-0.0191650390625,
0.0276641845703125,
0.0771484375,
-0.066162109375,
0.0772705078125,
0.005321502685546875,
-0.0726318359375,
0.04364013671875,
-0.0457763671875,
0.0474853515625,
-0.089111328125,
-0.0892333984375,
0.0207977294921875,
-0.0083770751953125,
-0.08966064453125,
-0.087158203125,
0.058074951171875,
-0.07171630859375,
0.0053558349609375,
-0.00812530517578125,
0.054840087890625,
-0.029876708984375,
-0.005672454833984375,
0.04254150390625,
-0.0556640625,
-0.0836181640625,
0.034698486328125,
-0.0093841552734375,
0.07257080078125,
-0.0596923828125,
0.07354736328125,
0.0821533203125,
-0.005657196044921875,
-0.0044708251953125,
-0.0433349609375,
-0.0596923828125,
0.0252227783203125,
-0.0382080078125,
0.0736083984375,
-0.035491943359375,
0.0516357421875,
-0.05426025390625,
-0.07659912109375,
-0.0899658203125,
-0.0202789306640625,
0.019622802734375,
-0.006988525390625,
0.050445556640625,
0.0882568359375,
-0.0650634765625,
0.09912109375,
-0.0587158203125,
-0.044830322265625,
0.07550048828125,
0.054962158203125,
0.083740234375,
0.043121337890625,
-0.07958984375,
0.05517578125,
-0.0428466796875,
-0.08441162109375,
-0.070556640625,
-0.134033203125,
-0.04241943359375,
-0.007801055908203125,
0.0228271484375,
-0.10064697265625,
0.06207275390625,
0.0200347900390625,
-0.030181884765625,
-0.07550048828125,
-0.01035308837890625,
0.0743408203125,
0.08648681640625,
0.04022216796875,
-0.12200927734375,
-0.10504150390625,
-0.057952880859375,
0.049530029296875,
0.06494140625,
0.0841064453125,
-0.0830078125,
0.03765869140625,
0.015411376953125,
0.034210205078125,
-0.000179290771484375,
0.1292724609375,
-0.0528564453125,
0.089111328125,
0.127685546875,
0.08209228515625,
0.0367431640625,
0.059478759765625,
0.06488037109375,
-0.06829833984375,
-0.10955810546875,
-0.039276123046875,
0.051239013671875,
-0.057891845703125,
-0.007389068603515625,
0.06805419921875,
0.156005859375,
0.0364990234375,
-0.11480712890625,
0.0188751220703125,
0.0634765625,
-0.056304931640625,
0.03289794921875,
0.09051513671875,
-0.0625,
0.0225372314453125,
0.062347412109375,
0.10498046875,
0.0675048828125,
-0.00238800048828125,
0.07672119140625,
0.010986328125,
0.015045166015625,
0.035858154296875,
0.0230255126953125,
0.0311279296875,
0.00876617431640625,
0.037567138671875,
0.07177734375,
0.027984619140625,
-0.0147705078125,
-0.0228424072265625,
0.09356689453125,
-0.09649658203125,
0.1080322265625,
-0.050689697265625,
-0.018951416015625,
0.079833984375,
-0.0169219970703125,
0.07275390625,
-0.1739501953125,
-0.0875244140625,
-0.052490234375,
0.0017070770263671875,
0.0440673828125,
-0.033050537109375,
-0.06182861328125,
-0.038421630859375,
-0.0809326171875,
-0.0577392578125,
-0.0479736328125,
-0.0693359375,
0.0305633544921875,
0.0225372314453125,
0.06402587890625,
-0.08709716796875,
-0.0020294189453125,
0.07550048828125,
-0.080322265625,
-0.05792236328125,
-0.026214599609375,
-0.0191650390625,
0.051116943359375,
-0.1455078125,
0.0217132568359375,
-0.04144287109375,
0.018646240234375,
-0.03521728515625,
-0.06005859375,
-0.0101470947265625,
0.08062744140625,
0.020843505859375,
-0.12213134765625,
0.050079345703125,
-0.021453857421875,
0.08917236328125,
0.0206756591796875,
0.00893402099609375,
-0.09747314453125,
-0.0157623291015625,
0.09228515625,
-0.06732177734375,
-0.09112548828125,
-0.11322021484375,
0.07574462890625,
0.0546875,
-0.0733642578125,
-0.0221710205078125,
0.06982421875,
0.00563812255859375,
0.12744140625,
-0.06219482421875,
0.025177001953125,
0.01163482666015625,
0.00260162353515625,
-0.0304412841796875,
0.07928466796875,
-0.08795166015625,
-0.026824951171875,
-0.01045989990234375,
0.1058349609375,
-0.040740966796875,
-0.00701904296875,
-0.056488037109375,
-0.08758544921875,
0.051971435546875,
-0.054718017578125,
0.084716796875,
0.1160888671875,
0.09619140625,
-0.006992340087890625,
-0.049224853515625,
-0.06842041015625,
0.0806884765625,
0.025634765625,
0.05950927734375,
-0.06658935546875,
-0.080322265625,
0.0111083984375,
0.016204833984375,
0.12091064453125,
-0.05010986328125,
-0.10107421875,
0.00859832763671875,
0.045684814453125,
-0.020111083984375,
0.0188140869140625,
0.1412353515625,
0.080078125,
0.0305938720703125,
-0.0828857421875,
0.009765625,
0.08392333984375,
0.039306640625,
0.016326904296875,
-0.135986328125,
-0.00016832351684570312,
-0.0197296142578125,
-0.039703369140625,
0.0158233642578125,
0.11639404296875,
-0.0223236083984375,
-0.01235198974609375,
0.006298065185546875,
-0.0482177734375,
0.00887298583984375,
-0.09075927734375,
-0.0369873046875,
-0.0887451171875,
0.01727294921875,
-0.013824462890625,
-0.043487548828125,
-0.05914306640625,
0.0014438629150390625,
0.005352020263671875,
0.047943115234375,
0.07037353515625,
-0.0153656005859375,
0.06304931640625,
-0.115478515625,
0.118896484375,
0.006622314453125,
0.045013427734375,
0.05450439453125,
-0.09466552734375,
-0.0943603515625,
0.00759124755859375,
-0.0810546875,
0.032562255859375,
-0.0489501953125,
0.054901123046875,
-0.032135009765625,
0.054473876953125,
0.0012655258178710938,
0.016387939453125,
-0.03570556640625,
0.07177734375,
0.08349609375,
0.0115509033203125,
-0.031585693359375,
0.08392333984375,
-0.00038504600524902344,
0.045501708984375,
0.10009765625,
0.0304412841796875,
0.12017822265625,
-0.0728759765625,
-0.032501220703125,
0.0654296875,
0.035491943359375,
0.01293182373046875,
0.00572967529296875,
-0.0033779144287109375,
-0.098876953125,
0.08929443359375,
-0.0266876220703125,
0.034881591796875,
0.0946044921875,
0.0201568603515625,
0.042724609375,
0.03875732421875,
0.054901123046875,
-0.07611083984375,
0.050201416015625,
-0.03564453125,
-0.06878662109375,
0.103271484375,
-0.04583740234375,
0.08282470703125,
0.10467529296875,
-0.09588623046875,
0.07879638671875,
0.004627227783203125,
0.11016845703125,
-0.048980712890625,
-0.01611328125,
0.013763427734375,
-0.064697265625,
-0.0699462890625,
-0.022491455078125,
0.0810546875,
-0.0823974609375,
-0.042022705078125,
-0.040985107421875,
-0.038909912109375,
-0.14453125,
0.0308380126953125,
-0.0760498046875,
-0.11407470703125,
0.084228515625,
0.03546142578125,
-0.033477783203125,
0.05877685546875,
-0.09417724609375,
-0.08209228515625,
-0.06201171875,
0.06536865234375,
0.0352783203125,
-0.061431884765625,
0.056182861328125,
-0.07769775390625,
0.0218658447265625,
-0.039703369140625,
-0.0275115966796875,
0.043365478515625,
0.06982421875,
0.061004638671875,
0.0718994140625,
0.01306915283203125,
-0.10833740234375,
0.050262451171875,
0.060333251953125,
-0.06451416015625,
0.0791015625,
0.0562744140625,
0.006988525390625,
-0.06805419921875,
0.044525146484375,
0.04937744140625,
-0.06622314453125,
0.0215301513671875,
-0.08612060546875,
0.037933349609375,
-0.0178680419921875,
-0.09722900390625,
-0.04656982421875,
0.040496826171875,
-0.045989990234375,
0.0280609130859375,
0.10089111328125,
0.029449462890625,
0.07843017578125,
0.014190673828125,
0.111328125,
0.0882568359375,
-0.004695892333984375,
-0.03253173828125,
0.10321044921875,
-0.0400390625,
0.07171630859375,
0.0465087890625,
-0.09637451171875,
0.06732177734375,
0.03515625,
0.11865234375,
-0.04168701171875,
0.0860595703125,
0.0172119140625,
0.003040313720703125,
0.042999267578125,
-0.0855712890625,
0.044708251953125,
0.03961181640625,
0.0095672607421875,
-0.0287933349609375,
-0.0232696533203125,
-0.0017976760864257812,
-0.054779052734375,
0.0672607421875,
-0.07403564453125,
-0.0780029296875,
0.04693603515625,
-0.0897216796875,
-0.0187530517578125,
0.04705810546875,
-0.0208892822265625,
-0.077880859375,
0.03564453125,
0.006450653076171875,
-0.08099365234375,
0.04241943359375,
0.0555419921875,
-0.006984710693359375,
-0.008819580078125,
-0.0633544921875,
-0.07391357421875,
0.052032470703125,
0.0751953125,
0.0816650390625,
0.0272369384765625,
-0.078857421875,
0.0216827392578125,
0.08404541015625,
-0.05926513671875,
-0.0210113525390625,
-0.0031280517578125,
0.043304443359375,
-0.050689697265625,
0.05938720703125,
-0.04595947265625,
0.035430908203125,
-0.0261688232421875,
-0.05322265625,
0.0200042724609375,
-0.054107666015625,
0.0027713775634765625,
-0.006683349609375,
-0.091064453125,
-0.0150604248046875,
0.049407958984375,
0.0178375244140625,
0.0289764404296875,
-0.004505157470703125,
-0.08203125,
0.009246826171875,
0.05645751953125,
0.056243896484375,
0.031341552734375,
0.02825927734375,
0.055419921875,
-0.0859375,
-0.07208251953125,
0.0418701171875,
-0.040802001953125,
0.04400634765625,
-0.01727294921875,
0.070068359375,
-0.07586669921875,
0.043975830078125,
0.0745849609375,
0.0257720947265625,
-0.035614013671875,
0.08734130859375,
-0.0511474609375,
-0.06695556640625,
0.016082763671875,
0.06890869140625,
-0.0855712890625,
0.01239776611328125,
-0.061920166015625,
-0.02630615234375,
0.01154327392578125,
-0.023040771484375,
0.057220458984375,
-0.0777587890625,
0.053070068359375,
-0.00958251953125,
-0.00457763671875,
0.04412841796875,
-0.017730712890625,
0.05712890625,
-0.050079345703125,
0.05194091796875,
0.059326171875,
0.0243988037109375,
-0.028076171875,
0.01348876953125,
0.08148193359375,
-0.016326904296875,
-0.0601806640625,
-0.056396484375,
-0.0214691162109375,
0.007320404052734375,
-0.061431884765625,
0.046142578125,
-0.0699462890625,
0.0084991455078125,
0.0635986328125,
-0.0282135009765625,
-0.0196075439453125,
0.043975830078125,
-0.0645751953125,
0.080078125,
-0.0679931640625,
-0.06805419921875,
-0.061767578125,
0.00560760498046875,
0.07940673828125,
0.04095458984375,
-0.0168914794921875,
-0.08233642578125,
-0.0565185546875,
-0.004848480224609375,
0.08636474609375,
-0.0816650390625,
0.058837890625,
-0.05108642578125,
-0.0491943359375,
-0.04803466796875,
0.004940032958984375,
0.042510986328125,
0.041595458984375,
-0.07061767578125,
0.084716796875,
-0.035308837890625,
-0.0767822265625,
-0.038787841796875,
-0.00600433349609375,
-0.066650390625,
0.061370849609375,
-0.0889892578125,
0.059814453125,
-0.044342041015625,
0.037689208984375,
0.01496124267578125,
-0.07568359375,
-0.03997802734375,
0.06622314453125,
-0.006305694580078125,
-0.0628662109375,
-0.05303955078125,
0.034942626953125,
-0.03851318359375,
0.059967041015625,
0.01042938232421875,
0.06890869140625,
0.07940673828125,
-0.007537841796875,
-0.0211944580078125,
-0.0235748291015625,
-0.054718017578125,
-0.0091400146484375,
0.0489501953125,
-0.049896240234375,
-0.055877685546875,
0.028289794921875,
0.057525634765625,
0.08758544921875,
-0.055908203125,
-0.0836181640625,
0.07684326171875,
-0.0244140625,
-0.08673095703125,
0.014923095703125,
0.02197265625,
-0.069091796875,
0.02874755859375,
-0.0712890625,
-0.08892822265625,
0.04364013671875,
0.044769287109375,
-0.052001953125,
0.055084228515625,
0.0633544921875,
0.05810546875,
-0.06585693359375,
0.04608154296875,
0.07147216796875,
0.00823974609375,
-0.038818359375,
-0.04693603515625,
-0.019012451171875,
-0.04278564453125,
0.021453857421875,
-0.0909423828125,
-0.08880615234375,
-0.034698486328125,
-0.010284423828125,
0.07720947265625,
-0.0280914306640625,
0.0203094482421875,
0.0297698974609375,
-0.010711669921875,
-0.01751708984375,
-0.05914306640625,
0.0223388671875,
-0.07061767578125,
0.07659912109375,
0.020538330078125,
-0.0728759765625,
0.0188751220703125,
0.01739501953125,
-0.0418701171875,
0.08184814453125,
-0.05987548828125,
0.01146697998046875,
0.0872802734375,
-0.061248779296875,
-0.01082611083984375,
-0.086181640625,
0.08544921875,
-0.07452392578125,
0.06884765625,
0.055450439453125,
-0.0704345703125,
0.04962158203125,
-0.0007333755493164062,
-0.0771484375,
0.03399658203125,
0.05450439453125,
0.0545654296875,
-0.046630859375,
-0.0692138671875,
0.0721435546875,
0.08538818359375,
-0.07257080078125,
-0.062469482421875,
-0.031646728515625,
-0.013214111328125,
0.00263214111328125,
0.061370849609375,
-0.01532745361328125,
-0.0538330078125,
-0.07489013671875,
0.05926513671875,
-0.07171630859375,
-0.0277862548828125,
0.043243408203125,
0.0888671875,
0.00154876708984375,
-0.07745361328125,
0.049713134765625,
-0.021575927734375,
0.0172882080078125,
0.07574462890625,
0.04345703125,
-0.08807373046875,
-0.07550048828125,
-0.025970458984375,
-0.04864501953125,
-0.041748046875,
-0.06671142578125,
0.0731201171875,
0.047088623046875,
-0.0919189453125,
0.0183868408203125,
-0.07843017578125,
0.045745849609375,
-0.036285400390625,
-0.0289154052734375,
0.046783447265625,
-0.006587982177734375,
0.07843017578125,
-0.050811767578125,
0.084228515625,
-0.0002053976058959961,
0.0540771484375,
0.057281494140625,
0.047821044921875,
0.031036376953125,
0.012115478515625,
-0.0207061767578125,
0.005764007568359375,
-0.04144287109375,
0.07684326171875,
0.021484375,
0.0312042236328125,
-0.07305908203125,
-0.01528167724609375,
-0.061614990234375,
-0.06866455078125,
-0.07806396484375,
0.01271820068359375,
-0.06378173828125,
0.05340576171875,
-0.0221099853515625,
-0.047515869140625,
0.0360107421875,
0.04266357421875,
-0.01434326171875,
0.040191650390625,
-0.0011749267578125,
-0.0160675048828125,
-0.05120849609375,
0.030914306640625,
-0.08709716796875,
-0.07916259765625,
0.08050537109375,
-0.07110595703125,
0.02239990234375,
-0.03887939453125,
-0.056793212890625,
0.01415252685546875,
-0.0751953125,
-0.005321502685546875,
-0.0889892578125,
-0.0887451171875,
-0.042236328125,
0.04510498046875,
-0.07025146484375,
0.04571533203125,
-0.047637939453125,
0.08319091796875,
0.04486083984375,
0.0010156631469726562,
-0.021026611328125,
-0.0001270771026611328,
-0.0010118484497070312,
-0.0251922607421875,
0.01149749755859375,
0.0709228515625,
0.036529541015625,
0.05743408203125,
-0.007785797119140625,
-0.0916748046875,
-0.037689208984375,
-0.026397705078125,
-0.061981201171875,
0.005580902099609375,
0.01026153564453125,
-0.09161376953125,
-0.022918701171875,
-0.005229949951171875,
-0.020721435546875,
0.0711669921875,
-0.042755126953125,
0.0677490234375,
0.07122802734375,
0.036346435546875,
0.0272979736328125,
-0.05242919921875,
-0.0016279220581054688,
-0.05670166015625,
-0.07684326171875,
-0.0312042236328125,
0.043975830078125,
-0.0350341796875,
-0.09063720703125,
-0.0107269287109375,
-0.06494140625,
-0.050506591796875,
0.03515625,
0.004657745361328125,
0.043609619140625,
0.0557861328125,
-0.07965087890625,
-0.04412841796875,
0.07586669921875,
0.079833984375,
-0.0767822265625,
-0.032806396484375,
-0.02813720703125,
-0.091552734375,
-0.0079803466796875,
-0.06683349609375,
-0.052154541015625,
0.06817626953125,
0.06591796875,
0.03271484375,
-0.0257720947265625,
0.080810546875,
-0.00792694091796875,
-0.08416748046875,
-0.028594970703125,
-0.0276641845703125,
0.034820556640625,
-0.080078125,
-0.0367431640625,
-0.05615234375,
0.10406494140625,
-0.0771484375,
-0.02996826171875,
-0.10394287109375,
-0.025054931640625,
0.08441162109375,
0.01053619384765625,
0.1123046875,
0.09429931640625,
0.08331298828125,
-0.043182373046875,
0.06475830078125,
-0.06451416015625,
0.024658203125,
0.0016031265258789062,
-0.05609130859375,
-0.0251312255859375,
0.07061767578125,
-0.05413818359375,
0.07159423828125,
0.03179931640625,
-0.04656982421875,
-0.110107421875,
0.0244293212890625,
0.053985595703125,
0.046966552734375,
-0.005889892578125,
-0.07012939453125,
-0.00021207332611083984,
-0.04052734375,
-0.00514984130859375,
0.0022678375244140625,
0.047637939453125,
0.062286376953125,
0.042938232421875,
-0.06634521484375,
-0.0097198486328125,
0.06817626953125,
-0.040191650390625,
-0.014434814453125,
-0.06280517578125,
-0.002002716064453125,
0.06591796875,
0.030364990234375,
0.0260162353515625,
-0.006053924560546875,
-0.00945281982421875,
0.040313720703125,
0.0141143798828125,
-0.01464080810546875,
0.0662841796875,
0.0634765625,
0.0181121826171875,
0.0168304443359375,
0.07305908203125,
0.1064453125,
0.0256500244140625,
0.0172119140625,
0.07562255859375,
-0.0008716583251953125,
0.061370849609375,
0.0069732666015625,
-0.02886962890625,
-0.00017249584197998047,
0.075439453125,
0.0085906982421875,
-0.03680419921875,
-0.01776123046875,
0.03497314453125,
-0.032806396484375,
-0.04107666015625,
-0.038299560546875,
0.0462646484375,
-0.01959228515625,
0.0117645263671875,
-0.0277252197265625,
0.0460205078125,
-0.05096435546875,
0.0711669921875,
0.10595703125,
0.08355712890625,
0.0081787109375,
-0.0157470703125,
0.00344085693359375,
0.0090179443359375,
0.043853759765625,
0.08087158203125,
0.031585693359375,
-0.07769775390625,
-0.068603515625,
-0.0246734619140625,
-0.045989990234375,
0.0060577392578125,
0.07122802734375,
0.06976318359375,
0.03680419921875,
-0.04742431640625,
-0.02020263671875,
-0.01543426513671875,
-0.095458984375,
0.01108551025390625,
-0.047760009765625,
0.006561279296875,
-0.051849365234375,
-0.042266845703125,
-0.055206298828125,
0.0215911865234375,
-0.075927734375,
0.001316070556640625,
-0.10736083984375,
-0.008209228515625,
-0.051513671875,
-0.024444580078125,
0.08319091796875,
0.06884765625,
-0.00017261505126953125,
-0.07708740234375,
-0.0753173828125,
0.060821533203125,
0.0212860107421875,
0.059600830078125,
-0.0161590576171875,
-0.0174713134765625,
-0.054290771484375,
-0.002986907958984375,
0.005054473876953125,
-0.08154296875,
-0.016204833984375,
-0.05419921875,
0.006793975830078125,
-0.078857421875,
0.00139617919921875,
0.0173492431640625,
0.032379150390625,
0.062103271484375,
-0.026458740234375,
0.002223968505859375,
-0.07421875,
-0.0423583984375,
-0.08746337890625,
-0.01326751708984375,
-0.06170654296875,
-0.057769775390625,
-0.0250091552734375,
0.029296875,
0.00269317626953125,
0.0278778076171875,
0.0728759765625,
0.0208282470703125,
-0.033111572265625,
0.0215606689453125,
0.06561279296875,
-0.0265045166015625,
0.011016845703125,
0.0004284381866455078,
0.07879638671875,
-0.042449951171875,
0.00897216796875,
-0.01454925537109375,
0.0018205642700195312,
-0.002750396728515625,
0.0599365234375,
-0.09698486328125,
0.021942138671875,
-0.08880615234375,
0.05108642578125,
0.0277252197265625,
0.0213470458984375,
0.074462890625,
-0.04498291015625,
-0.05609130859375,
0.0293426513671875,
0.022369384765625,
0.0394287109375,
-0.04888916015625,
0.087646484375,
0.0445556640625,
-0.0223236083984375,
-0.0023040771484375,
0.036285400390625,
-0.0557861328125,
0.00919342041015625,
0.059326171875,
0.0013456344604492188,
0.0029811859130859375,
0.034454345703125,
-0.0906982421875,
0.01436614990234375,
0.01483917236328125,
0.01213836669921875,
0.057159423828125,
0.06585693359375,
0.0023632049560546875,
-0.0477294921875,
-0.038970947265625,
0.034423828125,
0.03594970703125,
0.073974609375,
0.04486083984375,
-0.0921630859375,
-0.085693359375,
-0.055389404296875,
0.0638427734375,
-0.08563232421875,
-0.087646484375,
0.01678466796875,
-0.00970458984375,
-0.042572021484375,
0.05401611328125,
-0.084228515625,
0.082763671875,
0.031707763671875,
-0.0665283203125,
-0.035247802734375,
-0.0276336669921875,
0.0221099853515625,
-0.00666046142578125,
-0.059661865234375,
-0.0531005859375,
0.04736328125,
0.05535888671875,
-0.0193939208984375,
0.07647705078125,
0.0008397102355957031,
-0.03411865234375,
-0.0758056640625,
-0.08892822265625,
0.056884765625,
-0.06549072265625,
0.057342529296875,
-0.036712646484375,
0.03814697265625,
-0.046844482421875,
0.0306243896484375,
-0.01412200927734375,
0.031646728515625,
-0.05584716796875,
-0.0009918212890625,
1.8477439880371094e-06,
0.040863037109375,
-0.0447998046875,
0.06988525390625,
0.0809326171875,
-0.10919189453125,
-0.06439208984375,
-0.0063018798828125,
-0.06854248046875,
-0.0042724609375,
0.0030193328857421875,
-0.06341552734375,
-0.05975341796875,
-0.0160369873046875,
-0.0194549560546875,
0.08795166015625,
0.07293701171875,
0.0013742446899414062,
-0.029449462890625,
-0.07080078125,
0.06866455078125,
-0.06939697265625,
-0.035797119140625,
0.0830078125,
-0.0804443359375,
0.074462890625,
0.062744140625,
0.021392822265625,
0.03131103515625,
-0.005741119384765625,
-0.019805908203125,
0.035614013671875,
-0.08050537109375,
-0.01036834716796875,
0.004619598388671875,
-0.035003662109375,
0.043731689453125,
-0.052490234375,
-0.08819580078125,
-0.0479736328125,
0.09759521484375,
0.034515380859375,
0.06195068359375,
-0.0460205078125,
0.033843994140625,
-0.09710693359375,
0.05572509765625,
0.08929443359375,
0.01192474365234375,
-0.032470703125,
0.004482269287109375,
0.07232666015625,
0.0001920461654663086,
-0.0009508132934570312,
0.00943756103515625,
0.01052093505859375,
0.1258544921875,
0.03912353515625,
-0.0533447265625,
0.0731201171875,
0.06585693359375,
0.03948974609375,
-0.03424072265625,
0.0880126953125,
0.004779815673828125,
-0.01511383056640625,
-0.0290679931640625,
0.0697021484375,
0.08233642578125,
-0.021514892578125,
0.06439208984375,
0.016143798828125,
-0.106201171875,
-0.0196075439453125,
-0.052398681640625,
-0.0236968994140625,
-0.0210418701171875,
0.019561767578125,
0.033355712890625,
-0.0792236328125,
-0.0207672119140625,
0.062255859375,
-0.04718017578125,
0.02490234375,
0.080078125,
0.022735595703125,
0.036865234375,
0.04913330078125,
0.0298309326171875,
-0.0184173583984375,
-0.038330078125,
0.1016845703125,
-0.038726806640625,
-0.04315185546875,
-0.0250091552734375,
-0.07318115234375,
-0.05023193359375,
0.085205078125,
0.0023365020751953125,
0.06927490234375,
0.058319091796875,
0.0750732421875,
0.0753173828125,
-0.0141448974609375,
-0.07464599609375,
-0.046112060546875,
-0.08294677734375,
-0.09259033203125,
-0.0272216796875,
0.033905029296875,
-0.051361083984375,
0.022796630859375,
-0.030731201171875,
0.005313873291015625,
-0.0281524658203125,
0.033599853515625,
0.1390380859375,
-0.0765380859375,
0.039306640625,
-0.04949951171875,
-0.0183563232421875,
0.06707763671875,
-0.06707763671875,
-0.0496826171875,
-0.04473876953125,
-0.061187744140625,
0.0836181640625,
-0.08282470703125,
0.049957275390625,
-0.00968170166015625,
-0.1195068359375,
-0.07830810546875,
-0.0330810546875,
0.133544921875,
-0.0985107421875,
0.045013427734375,
-0.0085906982421875,
-0.0177459716796875,
0.040252685546875,
0.02362060546875,
0.12109375,
0.0963134765625,
0.01409149169921875,
0.056488037109375,
-0.06292724609375,
0.03973388671875,
0.0880126953125,
0.14990234375,
0.07855224609375,
-0.00013935565948486328,
-0.00727081298828125,
0.0640869140625,
0.0897216796875,
0.09161376953125,
0.0430908203125,
-0.0833740234375,
-0.042388916015625,
0.0160980224609375,
0.06610107421875,
0.07373046875,
-0.05853271484375,
0.0782470703125,
-0.11199951171875,
0.1171875,
0.0038890838623046875,
0.024993896484375,
-0.0457763671875,
0.01178741455078125,
0.01580810546875,
0.04425048828125,
0.100830078125,
0.04388427734375,
0.0477294921875,
-0.0794677734375,
-0.0887451171875,
0.10052490234375,
-0.1014404296875,
-0.1356201171875,
0.02642822265625,
-0.02801513671875,
0.06805419921875,
0.08465576171875,
0.06976318359375,
0.030975341796875,
0.0242156982421875,
-0.0280914306640625,
0.05511474609375,
-0.027130126953125,
0.04364013671875,
-0.035491943359375,
0.0889892578125,
0.06591796875,
-0.09405517578125,
-0.0596923828125,
-0.03106689453125,
-0.0474853515625,
-0.05865478515625,
-0.044525146484375,
0.04388427734375,
0.045196533203125,
0.0767822265625,
-0.0279541015625,
0.039459228515625,
-0.042999267578125,
0.0750732421875,
0.0108642578125,
-0.01291656494140625,
-0.03082275390625,
-0.066650390625,
-0.00992584228515625,
0.044158935546875,
0.01285552978515625,
-0.003482818603515625,
-0.08349609375,
-0.061126708984375,
0.0029811859130859375,
-0.039306640625,
0.036651611328125,
-0.002101898193359375,
-0.0220794677734375,
0.10638427734375,
-0.016357421875,
0.0865478515625,
0.06787109375,
-0.0295562744140625,
0.050750732421875,
-0.098388671875,
0.0171661376953125,
0.06414794921875,
0.061492919921875,
-0.0654296875,
0.1268310546875,
0.003631591796875,
-0.0341796875,
0.10809326171875,
-0.016632080078125,
0.08184814453125,
-0.035919189453125,
0.033935546875,
0.075927734375,
0.0011425018310546875,
0.05950927734375,
0.036590576171875,
-0.062744140625,
-0.06414794921875,
0.01458740234375,
0.11566162109375,
-0.042572021484375,
0.039581298828125,
0.04754638671875,
0.117431640625,
0.0234527587890625,
-0.03106689453125,
-0.099609375,
0.0966796875,
0.08856201171875,
-0.041534423828125,
-0.1090087890625,
-0.078857421875,
-0.08026123046875,
0.0236968994140625,
-0.051361083984375,
-0.0178070068359375,
-0.06243896484375,
0.063720703125,
0.023284912109375,
0.10089111328125,
0.0154876708984375,
-0.0221099853515625,
0.01593017578125,
-0.0789794921875,
0.01611328125,
-0.01212310791015625,
0.11376953125,
-0.06201171875,
-0.07147216796875,
-0.0704345703125,
-0.115234375,
0.027374267578125,
0.041717529296875,
-0.03167724609375,
-0.05621337890625,
0.01849365234375,
0.0035953521728515625,
-0.0224761962890625,
-0.00258636474609375,
0.04254150390625,
0.07806396484375,
0.06353759765625,
-0.0672607421875,
0.0280303955078125,
0.0675048828125,
-0.0953369140625,
0.0848388671875,
0.05084228515625,
-0.045928955078125,
-0.02410888671875,
0.0194854736328125,
-0.047119140625,
0.0197296142578125,
-0.07745361328125,
0.0157928466796875,
-0.0181121826171875,
-0.058624267578125,
0.11956787109375,
0.0187225341796875,
-0.02227783203125,
-0.07366943359375,
-0.00792694091796875,
0.05426025390625,
-0.0767822265625,
0.053558349609375,
0.08428955078125,
0.10540771484375,
0.047882080078125,
-0.06463623046875,
-0.0041656494140625,
-0.081787109375,
0.06146240234375,
0.0758056640625,
0.052215576171875,
-0.0394287109375,
0.0003800392150878906,
-0.08880615234375,
0.08843994140625,
0.10601806640625,
0.0572509765625,
0.03558349609375,
-0.0175933837890625,
0.08087158203125,
0.01143646240234375,
-0.07562255859375,
-0.0919189453125,
0.0005431175231933594,
-0.017578125,
-0.0386962890625,
-0.035369873046875,
-0.09381103515625,
0.023345947265625,
0.05364990234375,
0.061798095703125,
-0.008758544921875,
-0.0574951171875,
-0.111572265625,
0.11785888671875,
0.07220458984375,
-0.004177093505859375,
0.07440185546875,
0.04296875,
0.04150390625,
0.0887451171875,
-0.08349609375,
-0.05181884765625,
-0.056793212890625,
-0.008331298828125,
0.027740478515625,
0.0093841552734375,
-0.0022678375244140625,
-0.0369873046875,
-0.0300445556640625,
0.0902099609375,
-0.06463623046875,
-0.082763671875,
0.08416748046875,
-0.046051025390625,
0.00917816162109375,
0.035675048828125,
-0.00421142578125,
0.059814453125,
-0.03546142578125,
0.032867431640625,
0.0114898681640625,
-0.0166015625,
-0.039764404296875,
-0.0190582275390625,
-0.054962158203125,
0.08807373046875,
-0.07257080078125,
0.052001953125,
-0.040557861328125,
-0.016448974609375,
-0.08453369140625,
0.066650390625,
0.06427001953125,
-0.020111083984375,
0.023956298828125,
-0.001758575439453125,
0.062103271484375,
0.013519287109375,
-0.031585693359375,
-0.0850830078125,
-0.06488037109375,
0.01508331298828125,
-0.08740234375,
0.059814453125,
-0.027984619140625,
-0.077392578125,
-0.0280609130859375,
-0.033721923828125,
-0.08905029296875,
0.08172607421875,
-0.07818603515625,
-0.0189971923828125,
-0.03173828125,
-0.053192138671875,
0.015838623046875,
0.00041174888610839844,
-0.026641845703125,
-0.0599365234375,
0.089111328125,
-0.0237579345703125,
-0.0584716796875,
-0.03021240234375,
0.068359375,
0.0109405517578125,
-0.08721923828125,
-0.0308837890625,
-0.0855712890625,
0.08172607421875,
-0.004741668701171875,
-0.033843994140625,
0.02349853515625,
0.0220794677734375,
-0.049072265625,
-0.0191497802734375,
-0.0053863525390625,
-0.01025390625,
0.038604736328125,
0.033294677734375,
-0.0297393798828125,
-0.0418701171875,
0.0736083984375,
0.058837890625,
-0.055389404296875,
-0.038238525390625,
0.07806396484375,
0.0789794921875,
-0.061187744140625,
0.032745361328125,
-0.079833984375,
-0.07440185546875,
-0.037933349609375,
0.00423431396484375,
-0.0009493827819824219,
0.0188140869140625,
0.002105712890625,
0.005054473876953125,
-0.0026035308837890625,
0.0762939453125,
0.05560302734375,
0.0237274169921875,
-0.0592041015625,
-0.0347900390625,
-0.0242462158203125,
0.08551025390625,
0.048370361328125,
0.03289794921875,
-0.0758056640625,
0.010284423828125,
-0.053131103515625,
-0.0007109642028808594,
-0.051177978515625,
-0.015777587890625,
0.0631103515625,
0.02044677734375,
0.04595947265625,
0.0418701171875,
0.0892333984375,
-0.0266876220703125,
0.01325225830078125,
-0.0687255859375,
0.06683349609375,
0.043060302734375,
-0.04132080078125,
-0.006008148193359375,
-0.0849609375,
0.08642578125,
0.06060791015625,
0.07757568359375,
-0.08502197265625,
0.03399658203125,
-0.059722900390625,
0.03326416015625,
0.047607421875,
0.072265625,
-0.01493072509765625,
-0.08514404296875,
0.10064697265625,
-0.0065155029296875,
0.0029735565185546875,
-0.0953369140625,
-0.006336212158203125,
0.09210205078125,
0.145263671875,
0.0577392578125,
0.0867919921875,
-0.1044921875,
0.0863037109375,
0.06585693359375,
0.0077056884765625,
-0.0111236572265625,
-0.045928955078125,
-0.00830841064453125,
-0.010833740234375,
-0.0136566162109375,
0.10003662109375,
-0.038848876953125,
0.0885009765625,
0.0677490234375,
0.04644775390625,
0.07000732421875,
0.1783447265625,
-0.0692138671875,
-0.05938720703125,
-0.02386474609375,
-0.047271728515625,
-0.0019779205322265625,
-0.0008192062377929688,
-0.076171875,
-0.01271820068359375,
0.0843505859375,
-0.07861328125,
0.01007843017578125,
0.060089111328125,
0.0400390625,
-0.07098388671875,
0.06243896484375,
0.005382537841796875,
0.066650390625,
-0.04461669921875,
0.1300048828125,
0.059112548828125,
-0.043121337890625,
-0.08648681640625,
0.04443359375,
0.03265380859375,
-0.0259857177734375,
-0.0810546875,
0.074951171875,
-0.025634765625,
-0.06256103515625,
-0.00418853759765625,
-0.071533203125,
-0.0254058837890625,
0.031829833984375,
0.03106689453125,
-0.07098388671875,
0.123291015625,
0.08251953125,
-0.046478271484375,
-0.064208984375,
0.0272979736328125,
-0.0750732421875,
0.076416015625,
-0.0826416015625,
0.0723876953125,
0.037139892578125,
0.11834716796875,
-0.0718994140625,
-0.08319091796875,
0.0198974609375,
0.052978515625,
-0.061309814453125,
0.031097412109375,
-0.1072998046875,
0.0182342529296875,
0.03570556640625,
-0.07269287109375,
0.0235748291015625,
-0.1026611328125,
-0.039459228515625,
-0.05914306640625,
0.1466064453125,
-0.0030307769775390625,
0.008056640625,
-0.005115509033203125,
-0.0162811279296875,
0.03436279296875,
0.045013427734375,
0.08306884765625,
0.06549072265625,
-0.062164306640625,
-0.06256103515625,
0.056854248046875,
-0.0440673828125,
0.134765625,
0.05181884765625,
0.0159759521484375,
-0.050872802734375,
-0.018707275390625,
-0.0902099609375,
-0.07000732421875,
0.0692138671875,
-0.01534271240234375,
-0.11163330078125,
0.03582763671875,
0.0186920166015625,
0.0491943359375,
0.07177734375,
0.025604248046875,
0.12164306640625,
0.09539794921875,
0.04608154296875,
-0.0726318359375,
-0.06439208984375,
0.10162353515625,
0.0972900390625,
0.0005707740783691406,
-0.012451171875,
-0.10284423828125,
-0.03045654296875,
-0.06390380859375,
0.004184722900390625,
0.08355712890625,
-0.0216827392578125,
0.090087890625,
-0.064453125,
-0.0017032623291015625,
-0.03173828125,
-0.052001953125,
0.029510498046875,
0.0989990234375,
-0.082763671875,
0.10137939453125,
0.10260009765625,
0.090087890625,
0.015869140625,
-0.0562744140625,
0.114501953125,
0.0097503662109375,
-0.00901031494140625,
0.0208282470703125,
0.086669921875,
-0.05657958984375,
-0.10003662109375,
-0.00930023193359375,
0.099853515625,
0.0728759765625,
0.08123779296875,
-0.1048583984375,
0.00908660888671875,
0.08563232421875,
0.117919921875,
-0.070556640625,
-0.1302490234375,
0.1162109375,
-0.017822265625,
0.0633544921875,
-0.0225982666015625,
0.033935546875,
-0.09552001953125,
0.04852294921875,
-0.052154541015625,
0.027435302734375,
-0.08599853515625,
0.0975341796875,
-0.07232666015625,
0.10760498046875,
0.040863037109375,
0.025726318359375,
0.021484375,
0.0161590576171875,
-0.05810546875,
-0.06414794921875,
-0.066650390625,
0.043914794921875,
0.034088134765625,
-0.0211334228515625,
-0.08203125,
-0.089599609375,
0.07421875,
-0.08966064453125,
0.0186004638671875,
0.11212158203125,
-0.051605224609375,
-0.0295562744140625,
-0.1085205078125,
0.007656097412109375,
-0.07720947265625,
0.068359375,
-0.03472900390625,
-0.0986328125,
0.09210205078125,
0.045257568359375,
0.044647216796875,
-0.00568389892578125,
0.07977294921875,
0.078369140625,
0.07855224609375,
-0.01378631591796875,
0.014007568359375,
0.10040283203125,
0.10321044921875,
0.0836181640625,
-0.0703125,
0.003345489501953125,
0.029144287109375,
-0.0019025802612304688,
0.052581787109375,
-0.1337890625,
0.008544921875,
0.077880859375,
-0.03985595703125,
-0.018035888671875,
0.023162841796875,
-0.01788330078125,
0.1705322265625,
0.09149169921875,
0.1505126953125,
0.004947662353515625,
0.1168212890625,
-0.036651611328125,
0.1456298828125,
-0.06689453125,
0.039794921875,
-0.0103607177734375,
-0.060028076171875,
-0.047821044921875,
0.00437164306640625,
-0.0474853515625,
0.040191650390625,
0.08740234375,
0.055145263671875,
0.00206756591796875,
0.046966552734375,
0.01055908203125,
-0.061187744140625,
0.08056640625,
0.042083740234375,
0.00614166259765625,
-0.0787353515625,
-0.0916748046875,
-0.0826416015625,
0.08575439453125,
0.042144775390625,
0.041473388671875,
-0.1202392578125,
0.08831787109375,
-0.0445556640625,
-0.0888671875,
0.05908203125,
-0.054840087890625,
-0.043792724609375,
0.0970458984375,
0.0850830078125,
-0.0300750732421875,
0.03466796875,
0.0899658203125,
0.07781982421875,
0.04644775390625,
0.061431884765625,
0.05145263671875,
0.0128936767578125,
0.0178375244140625,
-0.08917236328125,
-0.08795166015625,
0.021392822265625,
0.08160400390625,
0.10052490234375,
-0.11297607421875,
-0.07958984375,
0.124755859375,
0.09161376953125,
0.05047607421875,
0.048553466796875,
-0.03802490234375,
-0.0333251953125,
-0.02471923828125,
0.0618896484375,
-0.043731689453125,
0.0092010498046875,
0.02130126953125,
0.054168701171875,
0.050323486328125,
0.08868408203125,
0.0084075927734375,
0.0885009765625,
0.0159759521484375,
0.04095458984375,
-0.07373046875,
0.0347900390625,
-0.045440673828125,
-0.085205078125,
-0.081298828125,
-0.067138671875,
0.01198577880859375,
0.06439208984375,
0.0794677734375,
0.08612060546875,
-0.08013916015625,
0.08892822265625,
-0.0556640625,
-0.1175537109375,
0.007038116455078125,
-0.0305633544921875,
0.0207061767578125,
0.0816650390625,
-0.0129852294921875,
0.07537841796875,
-0.07049560546875,
-0.0196380615234375,
-0.0302276611328125,
0.055145263671875,
-0.005573272705078125,
0.035064697265625,
-0.01213836669921875,
-0.061920166015625,
-0.0308837890625,
0.08984375,
0.0438232421875,
-0.0694580078125,
0.10113525390625,
-0.00827789306640625,
0.085205078125,
0.0301361083984375,
0.056304931640625,
0.11077880859375,
0.031951904296875,
0.057647705078125,
0.0282135009765625,
0.0011911392211914062,
-0.059906005859375,
0.0125274658203125,
0.08404541015625,
-0.04241943359375,
-0.07220458984375,
0.0252685546875,
0.057891845703125,
0.0928955078125,
-0.04669189453125,
-0.0467529296875,
-0.040313720703125,
-0.038360595703125,
0.038818359375,
0.07086181640625,
-0.018463134765625,
-0.005809783935546875,
0.1134033203125,
-0.06903076171875,
-0.036468505859375,
0.036468505859375,
0.06402587890625,
-0.01398468017578125,
0.0498046875,
0.03729248046875,
-0.058990478515625,
0.055694580078125,
0.0036468505859375,
0.0177154541015625,
-0.0174102783203125,
0.0633544921875,
0.0692138671875,
0.0738525390625,
0.07061767578125,
-0.01409149169921875,
-0.0487060546875,
0.0164947509765625,
-0.0797119140625,
0.039520263671875,
-0.0189361572265625,
-0.06793212890625,
0.0297393798828125,
-0.0594482421875,
-0.05645751953125,
-0.0755615234375,
-0.0499267578125,
-0.0487060546875,
0.032257080078125,
-0.039031982421875,
-0.08758544921875,
0.15625,
0.0188751220703125,
-0.061737060546875,
-0.0692138671875,
-0.0299072265625,
0.0821533203125,
-0.06298828125,
0.00562286376953125,
-0.06280517578125,
-0.01506805419921875,
0.0877685546875,
-0.019195556640625,
0.007472991943359375,
0.0888671875,
0.09991455078125,
-0.08740234375,
-0.032623291015625,
0.00046753883361816406,
0.10064697265625,
-0.02960205078125,
-0.09869384765625,
-0.09521484375,
-0.126708984375,
-0.01238250732421875,
0.06427001953125,
0.0292510986328125,
-0.019805908203125,
-0.023162841796875,
0.018646240234375,
0.0804443359375,
-0.014739990234375,
0.08135986328125,
0.0088043212890625,
0.12469482421875,
-0.0543212890625,
0.0859375,
0.036865234375,
-0.0140228271484375,
-0.0556640625,
-0.0031642913818359375,
0.07275390625,
-0.020050048828125,
-0.0701904296875,
0.01425933837890625,
0.1129150390625,
-0.0679931640625,
-0.0178985595703125,
-0.11041259765625,
0.047943115234375,
0.0246734619140625,
0.0831298828125,
0.09619140625,
-0.09820556640625,
-0.0003085136413574219,
0.01050567626953125,
-0.00899505615234375,
0.061798095703125,
-0.06256103515625,
-0.1240234375,
0.06683349609375,
-0.021759033203125,
-0.08056640625,
-0.033416748046875,
0.0274505615234375,
0.040985107421875,
-0.07501220703125,
0.046478271484375,
0.07867431640625,
-0.05267333984375,
-0.03741455078125,
0.07757568359375,
0.03741455078125,
-0.00617218017578125,
0.056427001953125,
0.07061767578125,
-0.025177001953125,
-0.05242919921875,
-0.06744384765625,
-0.004726409912109375,
0.015228271484375,
0.10284423828125,
0.0165252685546875,
0.0197601318359375,
-0.044189453125,
-0.059051513671875,
-0.0262298583984375,
0.05023193359375,
0.05780029296875,
0.05206298828125,
-0.0675048828125,
-0.07818603515625,
0.0190582275390625,
-0.0782470703125,
0.025848388671875,
0.01499176025390625,
-0.06854248046875,
-0.0181884765625,
0.004215240478515625,
0.06500244140625,
-0.09014892578125,
-0.047760009765625,
-0.05224609375,
-0.079833984375,
-0.04937744140625,
0.035003662109375,
-0.021728515625,
0.04376220703125,
0.04119873046875,
-0.00927734375,
-0.01100921630859375,
-0.07501220703125,
-0.07452392578125,
0.05419921875,
-0.032867431640625,
0.0465087890625,
0.04229736328125,
0.06353759765625,
0.0174407958984375,
-0.034698486328125,
0.07965087890625,
0.029083251953125,
0.08349609375,
0.047760009765625,
0.0028209686279296875,
-0.0099334716796875,
0.0011548995971679688,
0.08721923828125,
-0.082275390625,
-0.01392364501953125,
0.0056304931640625,
0.032073974609375,
-0.05194091796875,
-0.024993896484375,
-0.033538818359375,
0.0273590087890625,
0.0745849609375,
0.0693359375,
0.05035400390625,
0.0242462158203125,
0.0595703125,
0.061767578125,
0.0241851806640625,
0.021026611328125,
0.0716552734375,
0.07147216796875,
-0.06207275390625,
0.02679443359375,
-0.07403564453125,
0.08563232421875,
0.061859130859375,
0.08905029296875,
0.041900634765625,
0.05523681640625,
-0.056060791015625,
-0.05255126953125,
-0.0040130615234375,
0.03045654296875,
-0.033111572265625,
-0.0772705078125,
0.0408935546875,
0.059356689453125,
-0.0548095703125,
-0.082275390625,
-0.08673095703125,
0.027557373046875,
-0.046051025390625,
0.059356689453125,
-0.0079193115234375,
0.04583740234375,
0.0213470458984375,
0.03253173828125,
-0.0227813720703125,
0.035186767578125,
-0.047119140625,
-0.06622314453125,
-0.0682373046875,
-0.0352783203125,
-0.028839111328125,
-0.0233001708984375,
-0.046112060546875,
0.056396484375,
0.045654296875,
0.041290283203125,
-0.01496124267578125,
0.0684814453125,
-0.03466796875,
-0.05596923828125,
-0.0797119140625,
0.0758056640625,
-0.05621337890625,
-0.089111328125,
0.0305938720703125,
0.058868408203125,
0.01045989990234375,
0.07940673828125,
-0.054107666015625,
0.0269012451171875,
-0.051910400390625,
0.01214599609375,
0.022613525390625,
-0.06317138671875,
0.03765869140625,
-0.037506103515625,
-0.08502197265625,
-0.0797119140625,
0.0130767822265625,
-0.01410675048828125,
0.051666259765625,
0.03265380859375,
0.0633544921875,
-0.054168701171875,
-0.0911865234375,
-0.026519775390625,
-0.00818634033203125,
0.07080078125,
-0.015960693359375,
0.04541015625,
0.018310546875,
0.035736083984375,
0.059539794921875,
-0.00293731689453125,
-0.02862548828125,
0.056243896484375,
-0.12255859375,
0.034515380859375,
0.047576904296875,
-0.04412841796875,
0.13037109375,
0.09912109375,
0.00130462646484375,
-0.0565185546875,
0.00753021240234375,
-0.017364501953125,
0.001129150390625,
-0.08734130859375,
-0.039337158203125,
0.07049560546875,
0.1063232421875,
-0.041015625,
0.08087158203125,
-0.0307464599609375,
-0.14453125,
0.10382080078125,
0.05950927734375,
0.0030117034912109375,
-0.033599853515625,
-0.1048583984375,
0.04449462890625,
-0.0281524658203125,
0.10400390625,
-0.02020263671875,
0.1199951171875,
-0.009765625,
-0.07440185546875,
0.09112548828125,
-0.0240631103515625,
0.057708740234375,
0.03704833984375,
0.040802001953125,
0.070556640625,
-0.009368896484375,
-0.0848388671875,
-0.1063232421875,
0.03570556640625,
-0.08648681640625,
0.1173095703125,
0.007251739501953125,
-0.05035400390625,
0.00579071044921875,
-0.07012939453125,
0.11669921875,
-0.0304718017578125,
0.08001708984375,
-0.045196533203125,
-0.055084228515625,
-0.07666015625,
0.0186004638671875,
0.050201416015625,
0.0609130859375,
-0.11199951171875,
-0.07476806640625,
-0.01250457763671875,
0.0531005859375,
0.004726409912109375,
0.063232421875,
0.059539794921875,
0.154296875,
0.07489013671875,
-0.08880615234375,
-0.0562744140625,
0.11053466796875,
0.02996826171875,
0.054351806640625,
-0.003997802734375,
0.038330078125,
-0.050537109375,
-0.0182647705078125,
-0.04388427734375,
0.01461029052734375,
-0.059814453125,
0.07000732421875,
-0.080322265625,
0.10406494140625,
-0.046722412109375,
-0.06170654296875,
-0.0693359375,
0.09161376953125,
0.0205535888671875,
0.0838623046875,
0.0753173828125,
0.023590087890625,
0.07366943359375,
-0.0673828125,
-0.041107177734375,
0.09552001953125,
-0.054473876953125,
-0.089599609375,
-0.07550048828125,
-0.0289306640625,
-0.09063720703125,
0.0487060546875,
0.059906005859375,
-0.0697021484375,
-0.058197021484375,
0.09912109375,
0.007694244384765625,
0.0035266876220703125,
0.06915283203125,
-0.061309814453125,
0.052490234375,
0.0185394287109375,
-0.090087890625,
-0.09222412109375,
-0.05792236328125,
-0.0220794677734375,
-0.032318115234375,
-0.019439697265625,
0.054229736328125,
0.01105499267578125,
-0.0161285400390625,
-0.025146484375,
-0.007389068603515625,
0.032318115234375,
-0.05511474609375,
-0.036224365234375,
-0.0300445556640625,
-0.09808349609375,
0.00466156005859375,
-0.027435302734375,
0.01751708984375,
0.0535888671875,
0.0859375,
-0.04425048828125,
0.047088623046875,
0.01364898681640625,
-0.11376953125,
0.09869384765625,
0.026458740234375,
0.027496337890625,
-0.03411865234375,
0.053192138671875,
-0.06988525390625,
-0.040863037109375,
0.041717529296875,
0.06146240234375,
-0.00885772705078125,
-0.03692626953125,
-0.01934814453125,
-0.0157012939453125,
0.00759124755859375,
-0.09893798828125,
0.0550537109375,
0.06622314453125,
0.060150146484375,
0.095703125,
0.0086517333984375,
-0.008392333984375,
-0.06427001953125,
0.15283203125,
0.055755615234375,
-0.0004534721374511719,
-0.1256103515625,
-0.04864501953125,
-0.038360595703125,
-0.02459716796875,
-0.01207733154296875,
0.0243988037109375,
0.032257080078125,
-0.003147125244140625,
0.0205535888671875,
0.129638671875,
0.09466552734375,
0.07989501953125,
0.06597900390625,
-0.05291748046875,
0.0250091552734375,
-0.00640869140625,
-0.07427978515625,
0.0117034912109375,
0.07366943359375,
0.09002685546875,
-0.04669189453125,
-0.005405426025390625,
0.093017578125,
-0.04833984375,
0.040924072265625,
-0.08746337890625,
-0.1151123046875,
0.042388916015625,
0.0703125,
0.08953857421875,
0.0732421875,
0.040802001953125,
-0.0296783447265625,
-0.0239105224609375,
0.046478271484375,
-0.0048675537109375,
0.124267578125,
0.0176849365234375,
0.042724609375,
0.07830810546875,
0.0193634033203125,
0.01367950439453125,
-0.005859375,
-0.049896240234375,
0.06976318359375,
-0.0253448486328125,
0.049346923828125,
-0.07666015625,
0.06591796875,
-0.02947998046875,
-0.1209716796875,
0.060272216796875,
0.031829833984375,
0.0877685546875,
0.00908660888671875,
0.004581451416015625,
0.1163330078125,
0.000957489013671875,
0.057464599609375,
0.0156707763671875,
-0.0140228271484375,
0.044708251953125,
-0.0313720703125,
-0.085205078125,
-0.0145111083984375,
0.062225341796875,
-0.027587890625,
0.111572265625,
0.1187744140625,
0.0074005126953125,
-0.01114654541015625,
0.0931396484375,
0.0343017578125,
0.0225067138671875,
-0.0005660057067871094,
-0.044952392578125,
0.06488037109375,
0.053985595703125,
-0.02996826171875,
0.11895751953125,
-0.0333251953125,
-0.02154541015625,
-0.099853515625,
-0.04547119140625,
0.06878662109375,
-0.048553466796875,
0.0263824462890625,
0.0947265625,
0.068359375,
0.086669921875,
0.0008540153503417969,
0.08984375,
0.058349609375,
0.142822265625,
-0.07586669921875,
-0.1036376953125,
-0.024169921875,
0.02783203125,
-0.0543212890625,
-0.06768798828125,
-0.1429443359375,
-0.1031494140625,
0.08721923828125,
0.06280517578125,
-0.037933349609375,
-0.1075439453125,
-0.000759124755859375,
0.038543701171875,
-0.035888671875,
-0.021270751953125,
0.09088134765625,
0.05682373046875,
-0.0457763671875,
0.0767822265625,
0.0298919677734375,
-0.0130615234375,
0.039947509765625,
0.09014892578125,
-0.0462646484375,
-0.0165252685546875,
0.09185791015625,
-0.06658935546875,
-0.1063232421875,
0.00304412841796875,
-0.0281829833984375,
-0.0428466796875,
0.06683349609375,
-0.00649261474609375,
-0.055877685546875,
-0.0726318359375,
-0.0753173828125,
-0.00861358642578125,
-0.088134765625,
0.0980224609375,
0.056671142578125,
-0.08203125,
0.0968017578125,
0.070556640625,
0.07940673828125,
0.013336181640625,
0.00807952880859375,
-0.0743408203125,
0.06396484375,
-0.03350830078125,
-0.032470703125,
0.042877197265625,
-0.0758056640625,
-0.00482940673828125,
0.0100860595703125,
0.019073486328125,
0.049072265625,
0.03900146484375,
-0.039794921875,
-0.0199737548828125,
-0.00872039794921875,
-0.07159423828125,
0.0241241455078125,
0.052642822265625,
-0.00433349609375,
-0.08868408203125,
-0.005168914794921875,
0.0196380615234375,
0.0037975311279296875,
0.02606201171875,
0.0274505615234375,
0.052154541015625,
-0.0677490234375,
0.07147216796875,
-0.03253173828125,
-0.04150390625,
-0.036102294921875,
-0.07855224609375,
-0.059295654296875,
-0.054351806640625,
-0.06671142578125,
-0.054290771484375,
-0.037353515625,
0.01430511474609375,
0.07525634765625,
-0.0958251953125,
0.01436614990234375,
-0.10186767578125,
0.07958984375,
0.12255859375,
0.04217529296875,
0.00565338134765625,
0.033355712890625,
-0.037567138671875,
-0.0328369140625,
-0.015960693359375,
-0.05828857421875,
0.0811767578125,
-0.06805419921875,
-0.06793212890625,
-0.048675537109375,
-0.027069091796875,
-0.0219879150390625,
0.00623321533203125,
0.0234222412109375,
0.08770751953125,
0.0440673828125,
-0.0926513671875,
0.08685302734375,
0.07586669921875,
-0.01380157470703125,
0.061187744140625,
0.08294677734375,
0.08294677734375,
-0.0279541015625,
0.0274505615234375,
-0.01351165771484375,
0.06451416015625,
0.06988525390625,
0.00018095970153808594,
0.0156707763671875,
-0.08990478515625,
-0.06585693359375,
0.0887451171875,
-0.057525634765625,
0.06988525390625,
0.0577392578125,
-0.024810791015625,
-0.0926513671875,
-0.0235595703125,
0.054779052734375,
-0.064697265625,
0.0164031982421875,
-0.0775146484375,
-0.01219940185546875,
-0.0675048828125,
-0.08624267578125,
-0.07305908203125,
0.0382080078125,
0.0014801025390625,
0.08331298828125,
0.0254058837890625,
0.0268096923828125,
0.041961669921875,
0.0096893310546875,
-0.07891845703125,
-0.058807373046875,
-0.08758544921875,
0.0704345703125,
-0.041900634765625,
0.017669677734375,
0.0178375244140625,
0.041778564453125,
0.020538330078125,
0.0364990234375,
0.0058135986328125,
-0.0914306640625,
0.07318115234375,
0.02081298828125,
0.033477783203125,
-0.062408447265625,
0.07598876953125,
0.055511474609375,
0.035308837890625,
-0.051483154296875,
-0.019378662109375,
0.069580078125,
-0.002239227294921875,
-0.036834716796875,
0.025390625,
-0.037200927734375,
-0.00948333740234375,
-0.07415771484375,
-0.07037353515625,
-0.06573486328125,
0.043609619140625,
-0.09002685546875,
-0.08282470703125,
0.0202484130859375,
-0.006526947021484375,
0.078857421875,
0.0853271484375,
-0.0224761962890625,
0.0281982421875,
0.038482666015625,
0.0026721954345703125,
-0.0782470703125,
-0.06829833984375,
-0.0875244140625,
0.03741455078125,
-0.0274658203125,
0.003997802734375,
0.01554107666015625,
0.04156494140625,
-0.06365966796875,
-0.07122802734375,
0.05279541015625,
-0.08551025390625,
-0.048614501953125,
-0.04364013671875,
0.04296875,
-0.0496826171875,
0.07318115234375,
-0.062347412109375,
-0.055633544921875,
-0.03717041015625,
0.015533447265625,
0.021881103515625,
-0.0280914306640625,
0.05157470703125,
-0.0015773773193359375,
0.024139404296875,
-0.0709228515625,
0.055755615234375,
-0.08721923828125,
-0.025634765625,
-0.07940673828125,
-0.07635498046875,
0.054595947265625,
0.05462646484375,
-0.048675537109375,
-0.067626953125,
-0.06884765625,
0.07147216796875,
-0.02691650390625,
-0.08001708984375,
-0.08489990234375,
-0.03106689453125,
-0.06787109375,
0.061431884765625,
0.0821533203125,
0.0061187744140625,
-0.019439697265625,
0.0848388671875,
0.07977294921875,
0.05242919921875,
-0.058013916015625,
0.003376007080078125,
0.036895751953125,
0.0555419921875,
0.032501220703125,
-0.0726318359375,
0.059661865234375,
-0.04840087890625,
0.051727294921875,
-0.020965576171875,
0.0465087890625,
-0.03326416015625,
-0.04058837890625,
0.0606689453125,
0.015106201171875,
0.03631591796875,
-0.0338134765625,
-0.046630859375,
-0.08355712890625,
0.0285491943359375,
-0.020111083984375,
-0.0865478515625,
0.085693359375,
0.04180908203125,
-0.08282470703125,
-0.0660400390625,
-0.0302276611328125,
0.054931640625,
-0.020477294921875,
-0.0103912353515625,
-0.063232421875,
-0.03875732421875,
-0.05816650390625,
0.04315185546875,
0.006378173828125,
-0.03369140625,
0.033905029296875,
0.0161285400390625,
0.036651611328125,
-0.08367919921875,
0.06439208984375,
0.060791015625,
0.023712158203125,
0.0104217529296875,
-0.0279998779296875,
0.022308349609375,
0.0494384765625,
0.05908203125,
-0.06829833984375,
-0.0396728515625,
0.08868408203125,
-0.0038242340087890625,
0.03399658203125,
-0.0828857421875,
-0.0035228729248046875,
0.0625,
-0.08599853515625,
-0.00785064697265625,
-0.043487548828125,
0.055877685546875,
-0.07672119140625,
-0.034576416015625,
-0.0156402587890625,
0.07232666015625,
-0.03643798828125,
-0.058746337890625,
-0.008514404296875,
-0.06365966796875,
-0.00537109375,
-0.07568359375,
-0.030517578125,
0.07867431640625,
-0.0171051025390625,
-0.047607421875,
-0.038421630859375,
0.05731201171875,
0.021392822265625,
-0.00649261474609375,
0.008087158203125,
-0.0044403076171875,
0.01480865478515625,
-0.0009832382202148438,
0.010223388671875,
-0.07318115234375,
0.038909912109375,
0.008331298828125,
-0.06231689453125,
-0.032501220703125,
-0.01131439208984375,
0.0114593505859375,
0.08343505859375,
-0.00750732421875,
0.04180908203125,
-0.002288818359375,
0.06982421875,
0.0152130126953125,
-0.053741455078125,
0.06610107421875,
0.06829833984375,
-0.08203125,
-0.08331298828125,
-0.0635986328125,
-0.02423095703125,
-0.08660888671875,
0.0440673828125,
0.048126220703125,
-0.031280517578125,
0.019134521484375,
0.001621246337890625,
-0.0248870849609375,
0.0004317760467529297,
-0.0096893310546875,
0.0733642578125,
0.026947021484375,
0.0166168212890625,
-0.0579833984375,
-0.04803466796875,
0.08465576171875,
0.042022705078125,
-0.053131103515625,
-0.035797119140625,
-0.07513427734375,
0.015289306640625,
-0.008056640625,
0.048370361328125,
0.07293701171875,
0.08636474609375,
0.07012939453125,
0.0823974609375,
0.07952880859375,
-0.01404571533203125,
-0.0682373046875,
0.0151214599609375,
-0.06475830078125,
-0.07568359375,
0.0635986328125,
-0.0233612060546875,
-0.0799560546875,
-0.007137298583984375,
0.05047607421875,
0.05316162109375,
6.67572021484375e-06,
0.08172607421875,
-0.06695556640625,
0.036041259765625,
-0.0794677734375,
0.06890869140625,
0.0038661956787109375,
0.039276123046875,
-0.06939697265625,
0.038330078125,
0.051788330078125,
-0.0004017353057861328,
0.03125,
0.0160675048828125,
-0.004627227783203125,
-0.025054931640625,
0.016937255859375,
0.0226898193359375,
0.0089569091796875,
-0.03314208984375,
-0.033447265625,
-0.061737060546875,
-0.04376220703125,
-0.07806396484375,
0.015106201171875,
0.0706787109375,
-0.04913330078125,
0.06195068359375,
0.069091796875,
0.0034656524658203125,
-0.004581451416015625,
-0.053680419921875,
-0.08514404296875,
0.0290985107421875,
0.006679534912109375,
0.0190582275390625,
-0.07269287109375,
0.06390380859375,
0.0843505859375,
-0.0701904296875,
-0.0166473388671875,
-0.07452392578125,
0.0198211669921875,
-0.039093017578125,
0.01351165771484375,
0.05938720703125,
0.00441741943359375,
-0.07757568359375,
0.039306640625,
-0.06439208984375,
0.061981201171875,
-0.06341552734375,
0.0191192626953125,
-0.0760498046875,
-0.070556640625,
0.025634765625,
-0.01050567626953125,
-0.08709716796875,
-0.05230712890625,
-0.01409912109375,
-0.046966552734375,
0.0447998046875,
0.0181732177734375,
-0.07330322265625,
-0.040130615234375,
-0.0836181640625,
6.598234176635742e-05,
0.0025997161865234375,
0.01180267333984375,
-0.073486328125,
0.0732421875,
0.02569580078125,
-0.0016260147094726562,
0.06158447265625,
-0.0311279296875,
-0.051910400390625,
-0.00012969970703125,
-0.0194244384765625,
-0.0455322265625,
0.040740966796875,
-0.00313568115234375,
-0.019775390625,
-0.0771484375,
-0.0246734619140625,
-0.0782470703125,
0.00687408447265625,
-0.005550384521484375,
0.0628662109375,
0.09674072265625,
0.06982421875,
0.037384033203125,
0.022918701171875,
-0.056610107421875,
-0.0033206939697265625,
0.07611083984375,
0.12335205078125,
0.00597381591796875,
0.0740966796875,
0.009735107421875,
-0.050323486328125,
-0.011627197265625,
0.0009512901306152344,
-0.00524139404296875,
0.056182861328125,
0.00885009765625,
0.0694580078125,
-0.1378173828125,
-0.06024169921875,
-0.097412109375,
-0.09686279296875,
0.042388916015625,
0.007572174072265625,
0.0985107421875,
-0.08758544921875,
0.049346923828125,
-0.100830078125,
0.00891876220703125,
0.041778564453125,
0.01165008544921875,
0.07568359375,
-0.02178955078125,
0.0118408203125,
0.0972900390625,
-0.006103515625,
-0.0684814453125,
0.05706787109375,
-0.044097900390625,
-0.1033935546875,
0.0007348060607910156,
0.0635986328125,
0.049224853515625,
0.0164337158203125,
-0.0704345703125,
0.08465576171875,
0.1248779296875,
0.0148773193359375,
0.0546875,
-0.06134033203125,
-0.004436492919921875,
-0.0570068359375,
-0.06585693359375,
0.03759765625,
0.01206207275390625,
0.08697509765625,
0.0435791015625,
0.08221435546875,
0.07830810546875,
0.03515625,
0.04852294921875,
0.078857421875,
0.07904052734375,
-0.08074951171875,
0.10552978515625,
0.08917236328125,
0.12060546875,
0.0797119140625,
-0.07537841796875,
-0.02880859375,
0.0570068359375,
0.0640869140625,
-0.018096923828125,
-0.018829345703125,
0.0841064453125,
0.059112548828125,
0.005069732666015625,
-0.0611572265625,
0.047210693359375,
0.016632080078125,
-0.0096435546875,
-0.0289306640625,
0.01409149169921875,
0.08123779296875,
0.061370849609375,
-0.06707763671875,
0.003963470458984375,
0.0809326171875,
-0.012908935546875,
0.07061767578125,
-0.05255126953125,
0.006664276123046875,
0.059173583984375,
0.0780029296875,
-0.007701873779296875,
0.0164337158203125,
-0.08843994140625,
-0.07550048828125,
0.0665283203125,
-0.01418304443359375,
-0.07342529296875,
-0.0222320556640625,
0.044464111328125,
0.0166778564453125,
-0.0008339881896972656,
-0.0753173828125,
0.1182861328125,
0.00824737548828125,
0.0253143310546875,
-0.061370849609375,
0.066650390625,
0.06622314453125,
0.0538330078125,
0.00409698486328125,
0.08837890625,
0.07818603515625,
-0.0001068115234375,
-0.0650634765625,
-0.06085205078125,
-0.00556182861328125,
0.01142120361328125,
0.0426025390625,
0.0706787109375,
0.041229248046875,
-0.06390380859375,
-0.07757568359375,
0.034393310546875,
-0.03594970703125,
0.01108551025390625,
-0.08148193359375,
0.056854248046875,
0.06793212890625,
-0.05413818359375,
0.07598876953125,
-0.08428955078125,
-0.0130615234375,
0.060577392578125,
0.08734130859375,
0.1317138671875,
-0.08551025390625,
0.0731201171875,
-0.042510986328125,
-0.05242919921875,
-0.0279693603515625,
0.056182861328125,
0.04364013671875,
-0.06451416015625,
0.11126708984375,
0.1171875,
-0.036834716796875,
0.0045013427734375,
0.01345062255859375,
0.01009368896484375,
0.08197021484375,
-0.00649261474609375,
-0.06787109375,
0.0748291015625,
-0.043060302734375,
0.0035400390625,
0.050750732421875,
-0.11834716796875,
-0.10980224609375,
0.0277099609375,
-0.01203155517578125,
0.03369140625,
-0.01424407958984375,
-0.1065673828125,
-0.04266357421875,
-0.08197021484375,
-0.00409698486328125,
-0.00543212890625,
0.07122802734375,
-0.005527496337890625,
-0.0300445556640625,
-0.012176513671875,
0.0767822265625,
-0.0296783447265625,
-0.01470184326171875,
-0.0160369873046875,
0.0281982421875,
0.013275146484375,
-0.061431884765625,
-0.08221435546875,
-0.044219970703125,
-0.00829315185546875,
0.07623291015625,
-0.0999755859375,
-0.042724609375,
-0.07318115234375,
-0.07305908203125,
-0.02398681640625,
0.0914306640625,
0.00870513916015625,
0.01983642578125,
0.01416015625,
0.0121002197265625,
-0.07806396484375,
-0.0771484375,
-0.1182861328125,
-0.044464111328125,
-0.0115966796875,
0.08648681640625,
0.0218353271484375,
-0.06689453125,
-0.02374267578125,
0.061676025390625,
0.0849609375,
-0.0127105712890625,
-0.00939178466796875,
0.06732177734375,
-0.04937744140625,
-0.10736083984375,
0.08892822265625,
0.10302734375,
0.09149169921875,
0.00637054443359375,
0.0030879974365234375,
0.030303955078125,
0.0304412841796875,
0.0149078369140625,
0.0380859375,
-0.0125579833984375,
0.07373046875,
-0.08599853515625,
0.0103759765625,
-0.046417236328125,
0.05255126953125,
-0.0254364013671875,
0.04339599609375,
-0.0692138671875,
-0.039703369140625,
0.04150390625,
-0.022216796875,
-0.036834716796875,
-0.00717926025390625,
0.1353759765625,
0.0458984375,
0.0880126953125,
-0.0203857421875,
0.048095703125,
-0.01197052001953125,
-0.036712646484375,
-0.095947265625,
-0.1397705078125,
0.0701904296875,
-0.0174713134765625,
0.0032176971435546875,
-0.015869140625,
0.007717132568359375,
0.03668212890625,
0.0155487060546875,
0.03778076171875,
-0.0146026611328125,
0.03411865234375,
0.11956787109375,
-0.1251220703125,
-0.0950927734375,
-0.11474609375,
-0.0946044921875,
0.014373779296875,
-0.0307464599609375,
-0.0400390625,
0.085205078125,
0.03131103515625,
-0.031982421875,
0.0205841064453125,
0.01049041748046875,
0.10089111328125,
-0.0418701171875,
0.004108428955078125,
0.036773681640625,
-0.006473541259765625,
-0.06060791015625,
0.038818359375,
0.07080078125,
-0.017974853515625,
-0.04962158203125,
-0.00780487060546875,
0.06292724609375,
-0.0516357421875,
-0.121337890625,
-0.004886627197265625,
-0.0755615234375,
0.0249481201171875,
0.08245849609375,
-0.034576416015625,
0.06768798828125,
0.10260009765625,
0.0560302734375,
0.0276031494140625,
-0.049224853515625,
0.06549072265625,
0.077392578125,
-0.09332275390625,
0.057891845703125,
0.064453125,
0.02593994140625,
-0.046844482421875,
-0.099365234375,
0.0036525726318359375,
-0.04156494140625,
-0.052703857421875,
-0.038330078125,
-0.055938720703125,
-0.01263427734375,
0.063232421875,
-0.04827880859375,
0.0877685546875,
0.036102294921875,
-0.05072021484375,
0.07867431640625,
-0.0155792236328125,
-0.062042236328125,
0.0252227783203125,
-0.0364990234375,
0.0268402099609375,
0.08404541015625,
0.1021728515625,
-0.07025146484375,
-0.032867431640625,
-0.056060791015625,
-0.039703369140625,
0.0699462890625,
-0.055084228515625,
0.0264739990234375,
0.012298583984375,
0.11572265625,
0.0948486328125,
-0.0111236572265625,
-0.0836181640625,
-0.09075927734375,
-0.1163330078125,
0.05059814453125,
-0.0033168792724609375,
0.106201171875,
0.08843994140625,
-0.0306854248046875,
0.042022705078125,
0.057708740234375,
-0.056243896484375,
0.027587890625,
-0.0168609619140625,
-0.09271240234375,
0.026214599609375,
0.033782958984375,
-0.01346588134765625,
0.08966064453125,
0.0304718017578125,
0.06463623046875,
0.0240478515625,
-0.059234619140625,
0.042999267578125,
-0.01131439208984375,
0.054046630859375,
-0.0345458984375,
-0.046844482421875,
-0.033233642578125,
0.0634765625,
0.03271484375,
-0.0127410888671875,
0.040985107421875,
-0.10064697265625,
0.03668212890625,
0.12335205078125,
-0.0267486572265625,
0.012847900390625,
0.024993896484375,
0.048858642578125,
0.041473388671875,
-0.007537841796875,
0.03521728515625,
0.04644775390625,
-0.046844482421875,
-0.0093994140625,
0.0137786865234375,
0.10595703125,
-0.020263671875,
0.1455078125,
0.0296630859375,
0.08294677734375,
-0.014434814453125,
0.037261962890625,
0.0120086669921875,
-0.0159149169921875,
0.025238037109375,
0.029510498046875,
0.001972198486328125,
0.116455078125,
-0.0345458984375,
0.0433349609375,
-0.0472412109375,
0.07177734375,
-0.036590576171875,
0.13134765625,
0.018524169921875,
0.06231689453125,
-0.07440185546875,
-0.0386962890625,
0.0933837890625,
-0.00791168212890625,
0.030303955078125,
-0.1102294921875,
-0.018798828125,
-0.1224365234375,
-0.06072998046875,
0.08111572265625,
-0.0276947021484375,
-0.06207275390625,
-0.05596923828125,
0.0008702278137207031,
-0.0816650390625,
-0.0885009765625,
0.057647705078125,
0.06982421875,
-0.0870361328125,
-0.07623291015625,
-0.054840087890625,
-0.0599365234375,
-0.020050048828125,
0.076171875,
0.07061767578125,
-0.03204345703125,
-0.08514404296875,
-0.00279998779296875,
0.049072265625,
-0.0154876708984375,
0.07867431640625,
0.018035888671875,
-0.055694580078125,
-0.0684814453125,
-0.107177734375,
0.026031494140625,
-0.0176239013671875,
0.06170654296875,
0.11126708984375,
-0.08575439453125,
-0.047119140625,
-0.03326416015625,
-0.0264434814453125,
-0.09588623046875,
-0.02178955078125,
0.06341552734375,
0.0980224609375,
-0.01317596435546875,
-0.02490234375,
0.059051513671875,
0.00116729736328125,
0.0165863037109375,
0.078857421875,
0.0374755859375,
-0.019744873046875,
-0.0255126953125,
-0.01117706298828125,
0.0087127685546875,
-0.08282470703125,
0.08135986328125,
0.0338134765625,
0.017974853515625,
-0.08770751953125,
-0.0095672607421875,
-0.046539306640625,
0.1175537109375,
-0.0753173828125,
0.0758056640625,
-0.06536865234375,
0.0914306640625,
0.0552978515625,
0.05877685546875,
0.10345458984375,
-0.0236053466796875,
-0.036651611328125,
-0.032073974609375,
-0.00757598876953125,
-0.045806884765625,
-0.053741455078125,
-0.0263519287109375,
-0.0909423828125,
-0.0693359375,
0.056549072265625,
-0.0491943359375,
-0.0777587890625,
-0.041412353515625,
-8.821487426757812e-06,
0.01763916015625,
0.007904052734375,
-0.0582275390625,
-0.0921630859375,
0.049957275390625,
0.054168701171875,
0.070068359375,
-0.02294921875,
-0.037445068359375,
-0.08819580078125,
-0.04827880859375,
-0.044219970703125,
0.0496826171875,
-0.022003173828125,
0.08734130859375,
0.12152099609375,
-0.0640869140625,
0.07952880859375,
0.0019102096557617188,
-0.07147216796875,
-0.00543975830078125,
-0.005939483642578125,
-0.054962158203125,
-0.07440185546875,
0.11553955078125,
0.042755126953125,
0.09716796875,
0.047210693359375,
0.081298828125,
-0.0270843505859375,
0.1263427734375,
0.0850830078125,
-0.10675048828125,
0.055328369140625,
-0.020172119140625,
0.0595703125,
0.01468658447265625,
0.07635498046875,
0.083740234375,
0.08477783203125,
-0.087646484375,
0.0416259765625,
0.02294921875,
-0.082275390625,
-0.0926513671875,
-0.05975341796875,
0.01165771484375,
-0.0849609375,
0.0400390625,
0.00618743896484375,
0.07666015625,
-0.044158935546875,
0.0743408203125,
-0.042877197265625,
0.048309326171875,
0.0576171875,
-0.05029296875,
-0.0124053955078125,
-0.027679443359375,
0.061767578125,
0.0885009765625,
-0.06341552734375,
-0.04833984375,
0.007282257080078125,
-0.00559234619140625,
-0.0299072265625,
0.06732177734375,
0.07794189453125,
0.11065673828125,
-0.074951171875,
0.043243408203125,
-0.06591796875,
0.044342041015625,
-0.03314208984375,
-0.09716796875,
-0.07611083984375,
0.034027099609375,
0.01439666748046875,
0.04876708984375,
-0.07159423828125,
-0.0975341796875,
-0.01299285888671875,
0.04058837890625,
-0.10174560546875,
-0.09356689453125,
-0.0677490234375,
0.12298583984375,
0.05133056640625,
0.0289154052734375,
-0.0699462890625,
-0.04083251953125,
0.0618896484375,
0.00830078125,
-0.0394287109375,
-0.009979248046875,
-0.08026123046875,
-0.0340576171875,
-0.00673675537109375,
-0.0787353515625,
-0.07269287109375,
0.09674072265625,
-0.06201171875,
0.0267791748046875,
-0.053802490234375,
0.032379150390625,
-0.02508544921875,
0.040374755859375,
0.01226043701171875,
-0.11285400390625,
-0.061676025390625,
0.003948211669921875,
0.029876708984375,
-0.018218994140625,
0.07232666015625,
0.04425048828125,
-0.035797119140625,
0.042877197265625,
-0.041412353515625,
-0.013763427734375,
-0.03106689453125,
0.0455322265625,
-0.09356689453125,
-0.051422119140625,
-0.02947998046875,
-0.06024169921875,
0.07861328125,
-0.010650634765625,
0.06805419921875,
-0.006805419921875,
-0.040740966796875,
0.0543212890625,
-0.0227203369140625,
-0.079833984375,
0.02691650390625,
-0.0631103515625,
0.064453125,
-0.029632568359375,
-0.07171630859375,
0.08148193359375,
0.0225830078125,
-0.0546875,
0.09075927734375,
-0.048370361328125,
-0.0267791748046875,
-0.10247802734375,
0.08135986328125,
-0.0992431640625,
-0.03338623046875,
0.0535888671875,
-0.061187744140625,
0.1068115234375,
-0.076171875,
-0.07244873046875,
0.06793212890625,
-0.04522705078125,
0.053863525390625,
-0.030853271484375,
-0.030303955078125,
0.032501220703125,
0.091796875,
-0.10498046875,
0.07598876953125,
-0.01195526123046875,
-0.01416015625,
0.07904052734375,
-0.08465576171875,
-0.0576171875,
0.0758056640625,
0.0567626953125,
-0.038055419921875,
0.027587890625,
-0.07666015625,
-0.06036376953125,
0.052337646484375,
-0.061370849609375,
0.07373046875,
-0.049041748046875,
-0.08026123046875,
-0.02862548828125,
-0.0906982421875,
0.0712890625,
0.04925537109375,
0.052154541015625,
0.01788330078125,
0.00881195068359375,
-0.0611572265625,
0.0306396484375,
0.027557373046875,
-0.0220794677734375,
0.03961181640625,
-0.09832763671875,
-0.0399169921875,
0.007511138916015625,
0.003742218017578125,
-0.0085601806640625,
-0.0176544189453125,
-0.04864501953125,
-0.0004246234893798828,
-0.007770538330078125,
-0.034393310546875,
0.0306549072265625,
-0.0133819580078125,
0.049957275390625,
0.05615234375,
0.055908203125,
-0.08251953125,
-0.041839599609375,
-0.00445556640625,
-0.038482666015625,
-0.017791748046875,
0.056854248046875,
-0.0655517578125,
-0.036163330078125,
0.035186767578125,
0.034088134765625,
-0.0992431640625,
-0.082275390625,
0.01214599609375,
-0.025604248046875,
-0.06976318359375,
0.00574493408203125,
-0.0496826171875,
-0.04986572265625,
-0.03485107421875,
0.036224365234375,
0.054473876953125,
0.012115478515625,
0.033447265625,
-0.09014892578125,
-0.09033203125,
0.07061767578125,
0.0162811279296875,
-0.08905029296875,
0.079833984375,
0.05560302734375,
0.00333404541015625,
-0.053680419921875,
0.042694091796875,
-0.06756591796875,
-0.003108978271484375,
0.0771484375,
0.07666015625,
-0.0217742919921875,
0.03662109375,
-0.03643798828125,
0.05450439453125,
0.0882568359375,
-0.051971435546875,
0.041778564453125,
-0.04718017578125,
0.005764007568359375,
0.045745849609375,
-0.03912353515625,
0.0645751953125,
-0.0753173828125,
0.00016808509826660156,
0.037506103515625,
0.0160369873046875,
-0.0672607421875,
-0.018157958984375,
-0.0245513916015625,
-0.0019121170043945312,
0.08087158203125,
0.0704345703125,
-0.045501708984375,
-0.048858642578125,
-0.07452392578125,
-0.078857421875,
0.024749755859375,
-0.08526611328125,
-0.07647705078125,
0.029693603515625,
0.0229949951171875,
0.032623291015625,
-0.03228759765625,
0.0484619140625,
-0.06109619140625,
0.0140380859375,
0.01708984375,
0.043853759765625,
-0.056365966796875,
0.01023101806640625,
-0.08831787109375,
-0.046905517578125,
0.00859832763671875,
0.0195159912109375,
0.030731201171875,
0.0156097412109375,
0.0640869140625,
0.02142333984375,
-0.0149688720703125,
-0.08319091796875,
-0.017333984375,
0.007007598876953125,
-0.0052947998046875,
0.032867431640625,
-0.081787109375,
0.031219482421875,
-0.06591796875,
-0.06890869140625,
-0.037689208984375,
0.007457733154296875,
-0.08294677734375,
-0.03436279296875,
-0.0743408203125,
0.061309814453125,
0.0850830078125,
-0.003814697265625,
0.056854248046875,
-0.040985107421875,
0.05523681640625,
-0.03546142578125,
0.08245849609375,
-0.07220458984375,
-0.01250457763671875,
0.005695343017578125,
0.053497314453125,
-0.09173583984375,
0.007965087890625,
-0.074951171875,
-0.0416259765625,
0.0816650390625,
-0.0296173095703125,
-0.01468658447265625,
0.0252838134765625,
-0.0374755859375,
-0.0205841064453125,
0.033538818359375,
-0.047027587890625,
0.011688232421875,
0.08349609375,
0.0267791748046875,
0.0205230712890625,
0.056671142578125,
0.017852783203125,
0.0643310546875,
0.033294677734375,
-0.042938232421875,
0.0384521484375,
-0.04620361328125,
0.04766845703125,
-0.07928466796875,
-0.0206298828125,
0.031402587890625,
0.02886962890625,
-0.0298919677734375,
-0.026611328125,
-0.1279296875,
0.0200653076171875,
0.0311279296875,
0.07861328125,
-0.00762939453125,
-0.07000732421875,
-0.0789794921875,
-0.02197265625,
0.08740234375,
-0.12109375,
0.05255126953125,
0.0660400390625,
0.0200958251953125,
0.08453369140625,
-0.005107879638671875,
0.017608642578125,
-0.04119873046875,
0.040069580078125,
0.0794677734375,
-0.05462646484375,
-0.046295166015625,
-0.033355712890625,
-0.015655517578125,
0.042694091796875,
-0.031463623046875,
-0.044158935546875,
0.03765869140625,
0.164306640625,
0.0167236328125,
0.0294952392578125,
0.026580810546875,
-0.0038604736328125,
0.103515625,
-0.001094818115234375,
0.06488037109375,
-0.06341552734375,
0.00997161865234375,
0.12261962890625,
0.0623779296875,
-0.005558013916015625,
0.002567291259765625,
0.03277587890625,
-0.0054931640625,
0.1270751953125,
0.083251953125,
0.0869140625,
0.01425933837890625,
0.0343017578125,
-0.057220458984375,
0.01007080078125,
0.107177734375,
-0.041900634765625,
0.108642578125,
-0.1497802734375,
0.023834228515625,
0.096923828125,
0.1201171875,
0.042755126953125,
-0.07049560546875,
0.040313720703125,
0.09228515625,
0.0280609130859375,
-0.032440185546875,
0.03662109375,
-0.11297607421875,
-0.08074951171875,
0.05963134765625,
0.1060791015625,
-0.0718994140625,
-0.10247802734375,
0.036041259765625,
-0.04412841796875,
-0.10455322265625,
-0.0662841796875,
0.03680419921875,
-0.0001895427703857422,
0.092529296875,
0.07318115234375,
0.08795166015625,
-0.05364990234375,
0.060821533203125,
0.0633544921875,
-0.01568603515625,
0.0166473388671875,
0.07525634765625,
-0.03143310546875,
0.056304931640625,
-0.005077362060546875,
-0.016326904296875,
-0.04095458984375,
0.11468505859375,
-0.05194091796875,
0.0523681640625,
0.10888671875,
-0.00762176513671875,
0.060516357421875,
0.0474853515625,
0.0811767578125,
0.005523681640625,
0.06561279296875,
-0.05023193359375,
0.08282470703125,
-0.0638427734375,
0.01238250732421875,
0.0989990234375,
-0.025787353515625,
-0.10150146484375,
0.010833740234375,
0.062286376953125,
-0.05328369140625,
0.044097900390625,
0.06591796875,
0.038482666015625,
0.061370849609375,
-0.0261077880859375,
0.0849609375,
0.006259918212890625,
-0.100341796875,
-0.08123779296875,
-0.08026123046875,
0.0267333984375,
0.07159423828125,
0.12432861328125,
0.038787841796875,
0.0119476318359375,
0.060516357421875,
-0.00608062744140625,
0.02642822265625,
-0.037139892578125,
0.09210205078125,
-0.1280517578125,
0.01399993896484375,
-0.04766845703125,
0.053955078125,
0.0797119140625,
-0.018310546875,
-0.01267242431640625,
0.0662841796875,
0.0108795166015625,
-0.0699462890625,
0.05828857421875,
-0.0035152435302734375,
-0.06201171875,
-0.092529296875,
0.1373291015625,
-0.04339599609375,
0.0386962890625,
-0.0218048095703125,
0.00521087646484375,
-0.07208251953125,
-0.051177978515625,
0.03729248046875,
-0.124267578125,
0.095458984375,
0.1226806640625,
-0.061737060546875,
0.039886474609375,
0.0655517578125,
0.10235595703125,
-0.04071044921875,
-0.0279693603515625,
0.0517578125,
-0.0238494873046875,
-0.09539794921875,
-0.028106689453125,
0.028839111328125,
-0.0159454345703125,
-0.0518798828125,
0.12335205078125,
-0.12646484375,
-0.0570068359375,
-0.08001708984375,
-0.10711669921875,
-0.09063720703125,
-0.04425048828125,
-0.045166015625,
0.002147674560546875,
-0.08636474609375,
0.022003173828125,
-0.05712890625,
0.041534423828125,
0.048919677734375,
-0.0293731689453125,
-0.06463623046875,
0.1112060546875,
0.07940673828125,
0.00738525390625,
0.1268310546875,
0.0509033203125,
-0.01470184326171875,
-0.0246124267578125,
-0.01629638671875,
0.06683349609375,
0.0242156982421875,
0.0870361328125,
0.0173187255859375,
-0.00897216796875,
-0.05029296875,
-0.042724609375,
0.0828857421875,
0.05572509765625,
0.01097869873046875,
0.12322998046875,
0.112548828125,
0.1217041015625,
0.02093505859375,
0.005336761474609375,
0.1046142578125,
0.1143798828125,
0.061920166015625,
-0.0103607177734375,
-0.058319091796875,
0.0667724609375,
-0.0618896484375,
0.0853271484375,
-0.0181121826171875,
-0.0838623046875,
0.09405517578125,
-0.06512451171875,
0.073974609375,
-0.0654296875,
-0.1072998046875,
-0.037933349609375,
0.0694580078125,
-0.086181640625,
-0.087158203125,
-0.0054931640625,
0.07208251953125,
-0.09478759765625,
-0.04034423828125,
0.082275390625,
0.058135986328125,
0.0731201171875,
0.0089874267578125,
-0.08819580078125,
0.006191253662109375,
-0.05645751953125,
-0.061767578125,
0.0258026123046875,
-0.06988525390625,
0.043121337890625,
-0.039337158203125,
-0.08294677734375,
0.01107025146484375,
-0.004474639892578125,
-0.078857421875,
-0.049835205078125,
-0.046875,
-0.0665283203125,
0.05059814453125,
0.0263519287109375,
-0.0675048828125,
0.0254364013671875,
-0.065673828125,
-0.0288848876953125,
0.0474853515625,
-0.07135009765625,
-0.08148193359375,
0.0038604736328125,
-0.0282135009765625,
-0.028594970703125,
0.01507568359375,
-0.06744384765625,
0.032958984375,
-0.0222625732421875,
-0.050262451171875,
-0.0118255615234375,
-0.0880126953125,
0.08203125,
0.0887451171875,
-0.00897979736328125,
-0.08447265625,
-0.0033588409423828125,
0.07891845703125,
-0.0487060546875,
-0.027862548828125,
0.052886962890625,
0.038970947265625,
0.0305023193359375,
0.066162109375,
-0.028656005859375,
-0.0523681640625,
0.034820556640625,
-0.052703857421875,
0.01198577880859375,
-0.0653076171875,
0.04583740234375,
-0.081298828125,
0.08258056640625,
-0.0243377685546875,
0.045135498046875,
0.06988525390625,
-0.056396484375,
0.0223846435546875,
0.0858154296875,
-0.0654296875,
-0.03277587890625,
0.00583648681640625,
0.06292724609375,
0.08892822265625,
0.06561279296875,
-0.06805419921875,
0.01016998291015625,
0.005374908447265625,
0.0252532958984375,
0.0582275390625,
-0.08929443359375,
-0.0310516357421875,
0.01544952392578125,
-0.03118896484375,
-0.0101165771484375,
0.0670166015625,
0.0269927978515625,
-0.06072998046875,
0.006267547607421875,
0.06329345703125,
0.07623291015625,
-0.00034165382385253906,
-0.0689697265625,
0.0860595703125,
-0.053131103515625,
-0.0002741813659667969,
-0.00980377197265625,
-0.039031982421875,
-0.0070953369140625,
-0.0712890625,
0.04254150390625,
0.056365966796875,
0.0289306640625,
0.0298004150390625,
-0.019775390625,
0.08514404296875,
0.09051513671875,
-0.02777099609375,
-0.0012340545654296875,
0.068603515625,
-0.0301971435546875,
-0.030364990234375,
0.06732177734375,
-0.0222625732421875,
-0.0034389495849609375,
-0.0347900390625,
-0.08038330078125,
-0.0880126953125,
0.032073974609375,
-0.0888671875,
-0.0260162353515625,
-0.08807373046875,
-0.0386962890625,
0.027252197265625,
-0.005390167236328125,
-0.0191497802734375,
0.0750732421875,
0.0215606689453125,
-0.0477294921875,
0.035003662109375,
0.0440673828125,
-0.0927734375,
-0.05560302734375,
-0.01512908935546875,
-0.037109375,
0.009490966796875,
-0.0201568603515625,
0.00615692138671875,
0.007415771484375,
0.0006198883056640625,
-0.0738525390625,
0.025421142578125,
0.037384033203125,
0.061492919921875,
-0.0240325927734375,
-0.08154296875,
-0.03900146484375,
0.02142333984375,
0.07733154296875,
0.07269287109375,
0.03582763671875,
-0.072509765625,
0.03759765625,
0.0092010498046875,
-0.03912353515625,
-0.06024169921875,
0.031890869140625,
0.00341796875,
-0.0262451171875,
0.034454345703125,
-0.04986572265625,
0.06817626953125,
-0.07568359375,
0.044647216796875,
0.056793212890625,
-0.00872802734375,
-0.08599853515625,
-0.063232421875,
-0.0208587646484375,
-0.0164337158203125,
-0.0645751953125,
0.01496124267578125,
-0.05963134765625,
2.0503997802734375e-05,
-0.053009033203125,
0.07940673828125,
-0.0699462890625,
0.032318115234375,
-0.00749969482421875,
0.00595855712890625,
0.0144805908203125,
0.08135986328125,
0.0047607421875,
-0.047698974609375,
0.037628173828125,
0.0229339599609375,
-0.0146942138671875,
-0.05712890625,
-0.0079193115234375,
0.00923919677734375,
0.003330230712890625,
-0.0293731689453125,
-0.08563232421875,
-0.04052734375,
-0.031524658203125,
-0.035491943359375,
0.0157928466796875,
0.0283355712890625,
0.0438232421875,
-0.07623291015625,
-0.036529541015625,
-0.0430908203125,
-0.01270294189453125,
0.0345458984375,
0.087158203125,
0.058197021484375,
-0.021820068359375,
0.025604248046875,
0.08135986328125,
-0.0406494140625,
0.0033817291259765625,
-0.03485107421875,
0.05645751953125,
0.08990478515625,
0.046875,
-0.08782958984375,
0.0175933837890625,
0.0187835693359375,
-0.032196044921875,
0.056549072265625,
-0.023590087890625,
-0.02197265625,
-0.06292724609375,
-0.0716552734375,
0.0323486328125,
0.081298828125,
-0.06475830078125,
-0.0296630859375,
-0.0640869140625,
-0.06146240234375,
0.053070068359375,
0.0187835693359375,
0.089599609375,
0.00936126708984375,
0.058349609375,
-0.0283050537109375,
0.04132080078125,
0.0173797607421875,
-0.0648193359375,
-0.09027099609375,
-0.050079345703125,
-0.042327880859375,
-0.0821533203125,
0.08026123046875,
-0.0819091796875,
0.0665283203125,
-0.0185394287109375,
-0.078125,
0.0743408203125,
0.08746337890625,
0.06353759765625,
-0.06500244140625,
0.0765380859375,
-0.03753662109375,
0.046356201171875,
0.07525634765625,
0.10272216796875,
0.06121826171875,
-0.01337432861328125,
0.042144775390625,
-0.0550537109375,
0.037811279296875,
0.052398681640625,
0.040069580078125,
-0.075927734375,
0.033233642578125,
-0.034454345703125,
0.0178985595703125,
0.08941650390625,
0.061492919921875,
-0.02166748046875,
-0.1396484375,
0.04638671875,
0.0035076141357421875,
-0.005519866943359375,
0.020538330078125,
-0.01611328125,
0.045318603515625,
-0.06707763671875,
-0.11920166015625,
-0.0814208984375,
-0.025299072265625,
0.06158447265625,
-0.00017917156219482422,
0.0005178451538085938,
0.028411865234375,
0.0093994140625,
-0.038543701171875,
-0.08612060546875,
0.0506591796875,
0.080322265625,
0.0382080078125,
0.033721923828125,
-0.058349609375,
0.020721435546875,
-0.0103759765625,
0.135986328125,
0.003997802734375,
-0.06622314453125,
-0.0303802490234375,
-0.003505706787109375,
0.01351165771484375,
0.07537841796875,
0.039886474609375,
-0.1322021484375,
0.09759521484375,
0.0389404296875,
0.153564453125,
-0.076904296875,
-0.0792236328125,
-0.060882568359375,
0.045654296875,
-0.053466796875,
0.00907135009765625,
-0.09014892578125,
0.083740234375,
-0.02215576171875,
0.0214996337890625,
-0.10107421875,
-0.068359375,
0.09063720703125,
-0.113525390625,
-0.08270263671875,
0.075439453125,
0.0158843994140625,
0.052886962890625,
-0.02752685546875,
0.053375244140625,
-0.0260467529296875,
-0.032867431640625,
-0.104736328125,
0.0225982666015625,
-0.035736083984375,
0.0242156982421875,
0.08233642578125,
-0.0220184326171875,
0.09228515625,
-0.02587890625,
-0.039642333984375,
-0.047607421875,
0.0462646484375,
-0.01499176025390625,
-0.082763671875,
0.0089569091796875,
0.01541900634765625,
0.055511474609375,
0.0631103515625,
0.0156097412109375,
-0.07672119140625,
-0.0252532958984375,
-0.0013885498046875,
0.0673828125,
-0.072265625,
-0.020782470703125,
0.017120361328125,
-0.0171356201171875,
0.0221405029296875,
-0.01548004150390625,
0.0184326171875,
0.017578125,
0.12396240234375,
-0.09686279296875,
0.0770263671875,
-0.059417724609375,
0.09814453125,
-0.11358642578125,
-0.05328369140625,
-0.0963134765625,
0.042755126953125,
-0.11285400390625,
0.006015777587890625,
-0.0009655952453613281,
0.05181884765625,
-0.07659912109375,
-0.07672119140625,
-0.0672607421875,
-0.06524658203125,
0.076904296875,
0.05908203125,
0.0200042724609375,
0.071533203125,
0.00858306884765625,
-0.0770263671875,
0.00853729248046875,
0.08343505859375,
0.01091766357421875,
-0.0782470703125,
0.094482421875,
0.042694091796875,
0.02862548828125,
0.06048583984375,
0.08880615234375,
0.0110321044921875,
0.0236358642578125,
-0.043670654296875,
0.0643310546875,
-0.044677734375,
0.023895263671875,
-0.0860595703125,
0.0814208984375,
-0.03497314453125,
-0.0108795166015625,
-0.048553466796875,
0.061431884765625,
0.0286865234375,
-0.001636505126953125,
0.02203369140625,
-0.0452880859375,
0.01258087158203125,
0.051055908203125,
-0.086669921875,
-0.033935546875,
0.006622314453125,
0.036468505859375,
-0.08966064453125,
-0.08758544921875,
0.0350341796875,
-0.032562255859375,
-0.017913818359375,
0.016265869140625,
0.07672119140625,
0.06805419921875,
0.054168701171875,
0.00547027587890625,
-0.030853271484375,
-0.0758056640625,
-0.02276611328125,
0.05755615234375,
0.058074951171875,
0.0784912109375,
0.037567138671875,
0.01029205322265625,
-0.07867431640625,
-0.04833984375,
-0.0628662109375,
0.0810546875,
-0.04852294921875,
-0.063720703125,
-0.0017642974853515625,
-0.08282470703125,
0.005615234375,
0.07269287109375,
-0.032806396484375,
-0.053253173828125,
0.00940704345703125,
-0.004741668701171875,
0.0212249755859375,
-0.0823974609375,
0.08819580078125,
-0.058349609375,
0.0207977294921875,
0.06829833984375,
-0.01393890380859375,
0.0260772705078125,
-0.0234222412109375,
0.06512451171875,
-0.051605224609375,
0.09552001953125,
-0.044708251953125,
-0.054290771484375,
0.01727294921875,
-0.0037631988525390625,
0.002803802490234375,
0.068115234375,
0.091064453125,
-0.06640625,
-0.07904052734375,
0.0293121337890625,
-0.0185546875,
-0.054351806640625,
0.07098388671875,
-0.0015001296997070312,
0.0711669921875,
0.0430908203125,
0.01529693603515625,
0.034149169921875,
0.057098388671875,
-0.0546875,
-0.07159423828125,
0.01568603515625,
0.0687255859375,
-0.07684326171875,
0.091796875,
0.05535888671875,
-0.0767822265625,
-0.0017137527465820312,
-0.06500244140625,
0.016845703125,
0.0009927749633789062,
-0.027099609375,
-0.039276123046875,
-0.035064697265625,
0.062347412109375,
0.043121337890625,
0.0789794921875,
0.06842041015625,
0.08636474609375,
-0.0244293212890625,
0.0899658203125,
0.039764404296875,
0.004581451416015625,
0.05029296875,
-0.053619384765625,
0.00846099853515625,
0.0163421630859375,
-0.0843505859375,
-0.071044921875,
-0.10565185546875,
-0.01213836669921875,
-0.0650634765625,
0.09393310546875,
-0.0384521484375,
0.05303955078125,
-0.0850830078125,
-0.060760498046875,
0.1007080078125,
-0.07659912109375,
-0.028656005859375,
-0.0009622573852539062,
-0.1390380859375,
0.12237548828125,
-0.038299560546875,
0.10528564453125,
0.0721435546875,
-0.033172607421875,
-0.0168914794921875,
-0.0330810546875,
0.0051116943359375,
0.09747314453125,
-0.04669189453125,
0.01396942138671875,
-0.01235198974609375,
0.0697021484375,
0.0251312255859375,
0.03668212890625,
0.01387786865234375,
-0.049652099609375,
-0.01422882080078125,
-0.07379150390625,
0.09521484375,
0.042266845703125,
-0.0538330078125,
-0.01013946533203125,
-0.08984375,
-0.051116943359375,
0.06982421875,
-0.0272216796875,
0.00933074951171875,
-0.04083251953125,
-0.07403564453125,
-0.0966796875,
0.05084228515625,
-0.0010194778442382812,
-0.056396484375,
0.04949951171875,
0.031707763671875,
0.05450439453125,
0.0034732818603515625,
0.007404327392578125,
0.0526123046875,
0.01410675048828125,
-0.0165863037109375,
-0.07232666015625,
0.1322021484375,
-0.0823974609375,
0.0006723403930664062,
0.09747314453125,
0.0614013671875,
0.1329345703125,
-0.051361083984375,
-0.11395263671875,
0.0697021484375,
-0.0203399658203125,
0.0119171142578125,
0.06854248046875,
0.042083740234375,
0.07659912109375,
-0.1295166015625,
-0.11083984375,
0.024383544921875,
-0.03253173828125,
0.0214080810546875,
0.00091552734375,
0.06549072265625,
0.101318359375,
-0.07916259765625,
-0.00704193115234375,
-0.110107421875,
-0.0227203369140625,
0.0161895751953125,
0.07342529296875,
0.03204345703125,
-0.060882568359375,
0.021392822265625,
0.10003662109375,
-0.1412353515625,
0.02593994140625,
-0.093017578125,
-0.022796630859375,
-0.06207275390625,
-0.0352783203125,
-0.0782470703125,
0.039398193359375,
0.056182861328125,
0.031494140625,
0.058441162109375,
0.0626220703125,
-0.065673828125,
0.043426513671875,
-0.019927978515625,
0.0169830322265625,
-0.072998046875,
0.043426513671875,
0.06219482421875,
0.049896240234375,
-0.07049560546875,
0.052581787109375,
0.01090240478515625,
0.0665283203125,
0.0706787109375,
0.05731201171875,
-0.0180816650390625,
-0.06280517578125,
0.0256195068359375,
-0.0648193359375,
-0.08514404296875,
-0.07965087890625,
-0.019805908203125,
-0.08453369140625,
0.04730224609375,
-0.061187744140625,
-0.063232421875,
0.02838134765625,
-0.0208740234375,
-0.08416748046875,
0.07269287109375,
-0.046478271484375,
0.0855712890625,
0.0726318359375,
-0.011260986328125,
-0.037109375,
-0.0897216796875,
0.0755615234375,
-0.0177764892578125,
-0.017822265625,
-0.0247039794921875,
-0.04229736328125,
-0.09136962890625,
0.02398681640625,
0.0199432373046875,
-0.06494140625,
0.0870361328125,
0.07147216796875,
-0.076171875,
0.07281494140625,
0.04241943359375,
-0.0439453125,
0.0643310546875,
-0.03662109375,
0.0670166015625,
-0.0064697265625,
-0.048370361328125,
-0.07110595703125,
0.08551025390625,
-0.03717041015625,
-0.04974365234375,
-0.019012451171875,
0.019134521484375,
-0.035675048828125,
0.01073455810546875,
-0.028472900390625,
-0.032989501953125,
-0.01314544677734375,
0.050140380859375,
-0.0259246826171875,
0.00691986083984375,
-0.0273895263671875,
0.069580078125,
0.0325927734375,
0.08575439453125,
-0.03656005859375,
-0.0249481201171875,
-0.026458740234375,
-0.0877685546875,
0.05975341796875,
0.039459228515625,
0.0743408203125,
-0.0791015625,
-0.031829833984375,
-0.03277587890625,
0.037750244140625,
-0.0430908203125,
-0.06243896484375,
-0.074951171875,
-0.0121002197265625,
-0.007904052734375,
0.07806396484375,
0.060943603515625,
-0.01428985595703125,
-0.03118896484375,
-0.07537841796875,
0.058929443359375,
0.0204925537109375,
-0.07232666015625,
-0.06207275390625,
-0.049468994140625,
-0.0809326171875,
-0.03424072265625,
0.0302276611328125,
0.025604248046875,
0.039154052734375,
0.016845703125,
0.0765380859375,
0.04449462890625,
-0.0921630859375,
0.01212310791015625,
0.0892333984375,
0.030059814453125,
-0.087890625,
0.01507568359375,
0.01250457763671875,
0.0237884521484375,
-0.05987548828125,
-0.05987548828125,
-0.08367919921875,
-0.07806396484375,
-0.0751953125,
0.052398681640625,
0.08837890625,
-0.048126220703125,
-0.0321044921875,
-0.07061767578125,
-0.0219268798828125,
-0.053131103515625,
0.047027587890625,
-0.026123046875,
-0.06842041015625,
0.0289459228515625,
0.07818603515625,
0.02667236328125,
-0.022125244140625,
-0.11004638671875,
0.067138671875,
-0.05108642578125,
-0.0227203369140625,
0.06353759765625,
0.0143890380859375,
-0.08770751953125,
-0.032745361328125,
0.07257080078125,
0.114990234375,
0.0128631591796875,
0.08087158203125,
0.033935546875,
0.015655517578125,
0.037109375,
0.06939697265625,
-0.08270263671875,
0.06170654296875,
0.02655029296875,
0.1107177734375,
0.030029296875,
-0.049163818359375,
0.0858154296875,
-0.02410888671875,
0.0697021484375,
0.043060302734375,
0.045623779296875,
0.047393798828125,
-0.04559326171875,
0.0200958251953125,
-0.1083984375,
0.060455322265625,
0.1474609375,
-0.075439453125,
-0.054473876953125,
-0.02978515625,
-0.034088134765625,
0.0283355712890625,
-0.0260772705078125,
0.0264739990234375,
0.0228271484375,
-0.04083251953125,
-0.060455322265625,
0.061737060546875,
0.1239013671875,
0.027587890625,
-0.02581787109375,
0.043914794921875,
0.09246826171875,
-0.06036376953125,
0.02691650390625,
0.1038818359375,
-0.07293701171875,
-0.08160400390625,
-0.016754150390625,
0.0175628662109375,
-0.03033447265625,
0.1553955078125,
0.032745361328125,
0.0615234375,
-0.0906982421875,
-0.07525634765625,
0.07501220703125,
0.063232421875,
0.00043487548828125,
-0.0199737548828125,
0.05792236328125,
0.0234832763671875,
-0.007030487060546875,
-0.05584716796875,
-0.05035400390625,
-0.07427978515625,
0.07733154296875,
-0.08477783203125,
0.01094818115234375,
0.049468994140625,
-0.055633544921875,
-0.01207733154296875,
0.1298828125,
-0.0892333984375,
-0.0193328857421875,
0.09600830078125,
0.12445068359375,
-0.094970703125,
0.00189208984375,
-0.12054443359375,
-0.0285186767578125,
-0.04107666015625,
0.002964019775390625,
-0.06536865234375,
0.01435089111328125,
0.01233673095703125,
0.05426025390625,
0.0390625,
-0.01149749755859375,
0.0181121826171875,
-0.129150390625,
0.0906982421875,
0.056365966796875,
-0.0080108642578125,
-0.006938934326171875,
0.0294647216796875,
-0.07861328125,
-0.049407958984375,
-0.058837890625,
-0.098388671875,
0.0655517578125,
0.093017578125,
-0.05712890625,
0.03924560546875,
-0.0928955078125,
-0.06573486328125,
0.06884765625,
-0.08392333984375,
0.061431884765625,
-0.05682373046875,
-0.07958984375,
-0.0731201171875,
0.0218353271484375,
-0.026824951171875,
-0.027191162109375,
0.0369873046875,
-0.0196380615234375,
0.0440673828125,
-0.08404541015625,
-0.0714111328125,
-0.03619384765625,
0.08056640625,
-0.0216064453125,
-0.052703857421875,
-0.060089111328125,
-0.01102447509765625,
0.08538818359375,
0.0246124267578125,
-0.08526611328125,
0.07989501953125,
0.0606689453125,
-0.053436279296875,
-0.0160980224609375,
0.032379150390625,
0.03216552734375,
0.07269287109375,
0.0447998046875,
-0.05816650390625,
-0.0318603515625,
0.03826904296875,
-0.0088348388671875,
-0.0027179718017578125,
0.0767822265625,
-0.0899658203125,
-0.0286102294921875,
-0.01438140869140625,
-0.0535888671875,
-0.05755615234375,
-0.058624267578125,
0.032928466796875,
0.0018033981323242188,
0.05059814453125,
-0.04022216796875,
-0.01180267333984375,
0.08404541015625,
-0.07147216796875,
-0.06842041015625,
0.039154052734375,
-0.07806396484375,
-0.0675048828125,
-0.06854248046875,
0.01456451416015625,
-0.0297088623046875,
-0.0400390625,
-0.0401611328125,
0.07318115234375,
0.0740966796875,
0.051605224609375,
0.0682373046875,
-0.027801513671875,
0.0308837890625,
-0.068115234375,
-0.025238037109375,
-0.056396484375,
-0.031982421875,
0.036285400390625,
0.0762939453125,
-0.051483154296875,
0.03765869140625,
-0.0201568603515625,
-0.067626953125,
-0.071533203125,
0.0210113525390625,
-0.004150390625,
0.002796173095703125,
0.041412353515625,
0.0190277099609375,
0.08282470703125,
0.02838134765625,
0.019317626953125,
0.08294677734375,
-0.0386962890625,
0.028839111328125,
0.028411865234375,
-0.019561767578125,
0.00689697265625,
0.0372314453125,
-0.0838623046875,
-0.07720947265625,
0.04638671875,
0.033355712890625,
0.060089111328125,
-0.04229736328125,
-0.058441162109375,
0.0653076171875,
0.07666015625,
0.078369140625,
0.030975341796875,
-0.0269317626953125,
0.07769775390625,
-0.005855560302734375,
0.0295257568359375,
0.0242919921875,
-0.07330322265625,
-0.0018167495727539062,
-0.08392333984375,
-0.08251953125,
0.050384521484375,
-0.0247344970703125,
0.039398193359375,
-0.07122802734375,
0.060028076171875,
0.03729248046875,
-0.03472900390625,
0.08154296875,
-0.034576416015625,
-0.060791015625,
0.0504150390625,
0.0037384033203125,
-0.07525634765625,
-0.004871368408203125,
0.047576904296875,
0.03680419921875,
0.02020263671875,
-0.0107421875,
-0.08087158203125,
-0.08612060546875,
0.00817108154296875,
0.05224609375,
0.056640625,
0.05377197265625,
0.08868408203125,
-0.061737060546875,
0.036346435546875,
0.0888671875,
-0.03607177734375,
-0.0626220703125,
-0.06512451171875,
-0.05615234375,
-0.049591064453125,
-0.05072021484375,
0.028656005859375,
-0.034637451171875,
-0.08599853515625,
-0.002147674560546875,
-0.0220794677734375,
0.0228424072265625,
0.034393310546875,
-0.059600830078125,
0.041107177734375,
-0.0121307373046875,
-0.057037353515625,
0.018707275390625,
0.06390380859375,
0.08160400390625,
-0.0679931640625,
-0.01363372802734375,
0.085693359375,
0.03668212890625,
-0.037750244140625,
-0.07061767578125,
-0.0743408203125,
-0.006103515625,
0.0200958251953125,
0.040191650390625,
0.01108551025390625,
0.08941650390625,
-0.08465576171875,
-0.0732421875,
0.087646484375,
0.0047454833984375,
-0.0179290771484375,
-0.0303192138671875,
0.069580078125,
-0.0278472900390625,
0.05731201171875,
0.049591064453125,
0.077880859375,
0.0017023086547851562,
-0.0308685302734375,
-0.015228271484375,
-0.06317138671875,
0.07464599609375,
-0.08331298828125,
-0.04437255859375,
0.03570556640625,
0.09027099609375,
0.04510498046875,
-0.027801513671875,
0.0738525390625,
-0.0435791015625,
-0.0491943359375,
0.0860595703125,
-0.081787109375,
-0.0123291015625,
-0.056671142578125,
-0.07513427734375,
0.062225341796875,
-0.08502197265625,
0.0648193359375,
-0.0367431640625,
0.08819580078125,
-0.0760498046875,
-0.07574462890625,
0.049346923828125,
-0.00637054443359375,
0.0562744140625,
0.06390380859375,
0.0180816650390625,
0.037445068359375,
0.0186614990234375,
0.05712890625,
0.00701141357421875,
-0.06488037109375,
0.061553955078125,
-0.033050537109375,
-0.03436279296875,
-0.09136962890625,
0.0052642822265625,
-0.0269775390625,
-0.0888671875,
-0.080078125,
-0.07269287109375,
0.0303955078125,
-0.050384521484375,
0.01416015625,
0.086669921875,
0.0189056396484375,
-0.092041015625,
0.02972412109375,
0.02911376953125,
0.07232666015625,
-0.03955078125,
0.03662109375,
0.017913818359375,
-0.0292510986328125,
0.044586181640625,
-0.048919677734375,
0.03460693359375,
-0.00817108154296875,
-0.044525146484375,
-0.0653076171875,
0.0194244384765625,
-0.038543701171875,
0.05535888671875,
-0.0239715576171875,
0.004962921142578125,
-0.04559326171875,
-0.0234222412109375,
-0.0782470703125,
-0.059539794921875,
0.041534423828125,
0.0716552734375,
-0.00969696044921875,
0.03851318359375,
0.07513427734375,
0.0025920867919921875,
0.03594970703125,
-0.061798095703125,
0.030731201171875,
-0.061187744140625,
-0.020111083984375,
-0.01519775390625,
-0.050811767578125,
-0.0008244514465332031,
0.0440673828125,
-0.005062103271484375,
-0.0165252685546875,
0.003631591796875,
0.07958984375,
0.0501708984375,
-0.06536865234375,
-0.052154541015625,
0.015716552734375,
-0.0089111328125,
0.06591796875,
-0.02337646484375,
-0.0276336669921875,
0.001659393310546875,
0.00289154052734375,
0.029296875,
0.013397216796875,
-0.0833740234375,
-0.0204925537109375,
0.0261077880859375,
-0.00572967529296875,
-0.03448486328125,
0.033050537109375,
-0.00395965576171875,
0.03070068359375,
-0.0215606689453125,
-0.0215911865234375,
0.00817108154296875,
-0.0017290115356445312,
0.019805908203125,
0.08233642578125,
0.05462646484375,
0.08935546875,
-0.03448486328125,
0.0650634765625,
-0.015777587890625,
0.0158233642578125,
-0.06280517578125,
0.06610107421875,
0.048614501953125,
-0.01544189453125,
-0.03204345703125,
-0.006587982177734375,
-0.07257080078125,
-0.07550048828125,
-0.07745361328125,
0.02880859375,
0.045806884765625,
0.048736572265625,
0.05853271484375,
0.08868408203125,
-0.049591064453125,
0.0301513671875,
-0.053802490234375,
-0.060546875,
0.0020732879638671875,
0.00308990478515625,
-0.06787109375,
-0.0462646484375,
0.06744384765625,
0.050506591796875,
-0.048736572265625,
-0.07965087890625,
0.0008616447448730469,
-0.01873779296875,
-0.04974365234375,
0.01520538330078125,
-0.0260772705078125,
0.016571044921875,
0.0677490234375,
0.05938720703125,
-0.052581787109375,
-0.0802001953125,
-0.017120361328125,
-0.0006880760192871094,
0.03985595703125,
0.003299713134765625,
-0.06707763671875,
-0.059478759765625,
-0.003948211669921875,
0.006862640380859375,
0.07177734375,
-0.035980224609375,
0.0083770751953125,
0.06573486328125,
-0.07196044921875,
0.0616455078125,
0.08349609375,
-0.06365966796875,
0.032562255859375,
-0.04083251953125,
-0.07293701171875,
-0.05419921875,
0.08917236328125,
0.057861328125,
-0.054779052734375,
0.0034503936767578125,
0.031768798828125,
-0.02337646484375,
0.08526611328125,
-0.041412353515625,
0.07366943359375,
-0.025970458984375,
-0.022705078125,
-0.08050537109375,
0.013824462890625,
0.063232421875,
-0.0179290771484375,
-0.05535888671875,
0.043182373046875,
-0.07586669921875,
0.0667724609375,
0.0022487640380859375,
0.0074005126953125,
0.03997802734375,
-0.073974609375,
-0.0892333984375,
-0.01369476318359375,
-0.05743408203125,
0.007480621337890625,
0.0019073486328125,
-0.043792724609375,
0.058441162109375,
0.06011962890625,
-0.06549072265625,
-0.052520751953125,
0.08349609375,
0.0897216796875,
0.041107177734375,
-0.0738525390625,
-0.08465576171875,
-0.004199981689453125,
-0.0024929046630859375,
0.077392578125,
-0.019927978515625,
-0.0799560546875,
0.03692626953125,
0.090576171875,
-0.051849365234375,
-0.082275390625,
-0.045135498046875,
-0.0670166015625,
-0.07647705078125,
0.043121337890625,
0.0223388671875,
0.00669097900390625,
0.06280517578125,
-0.046875,
0.07208251953125,
0.04449462890625,
-0.01416778564453125,
-0.0574951171875,
0.0006742477416992188,
-0.041473388671875,
0.0733642578125,
0.050262451171875,
0.084716796875,
0.052886962890625,
0.09033203125,
-0.068359375,
0.04608154296875,
0.018768310546875,
0.0792236328125,
0.041107177734375,
0.01486968994140625,
-0.08380126953125,
-0.0679931640625,
-0.08599853515625,
0.08428955078125,
0.026397705078125,
0.06854248046875,
0.014892578125,
-0.03564453125,
0.061676025390625,
0.0643310546875,
0.055511474609375,
0.040191650390625,
-0.05908203125,
-0.0214996337890625,
-0.05548095703125,
-0.07781982421875,
-0.08648681640625,
-0.046844482421875,
0.08740234375,
0.08685302734375,
0.0899658203125,
0.02215576171875,
0.08416748046875,
0.075439453125,
-0.06488037109375,
0.027587890625,
-0.0151214599609375,
-0.0771484375,
-0.029693603515625,
0.040313720703125,
-0.0782470703125,
-0.043426513671875,
0.044891357421875,
0.08538818359375,
0.0222320556640625,
0.049896240234375,
0.0287933349609375,
-0.011138916015625,
0.0762939453125,
-0.083740234375,
-0.08636474609375,
-0.0146942138671875,
0.0199432373046875,
-0.053131103515625,
0.0202178955078125,
0.01317596435546875,
0.053375244140625,
-0.08056640625,
-0.0262451171875,
-0.0643310546875,
0.0572509765625,
0.0316162109375,
0.103271484375,
-0.045562744140625,
-0.0274658203125,
-0.0426025390625,
-0.09765625,
0.061798095703125,
-0.08673095703125,
-0.0626220703125,
0.0804443359375,
-0.01947021484375,
0.039276123046875,
-0.0247344970703125,
0.0865478515625,
-0.145751953125,
-0.06744384765625,
0.02166748046875,
0.050079345703125,
0.00983428955078125,
-0.045135498046875,
0.11492919921875,
0.0726318359375,
-0.0740966796875,
-0.03240966796875,
-0.0210418701171875,
0.01488494873046875,
0.06884765625,
-0.06427001953125,
-0.057373046875,
0.027130126953125,
-0.034881591796875,
-0.07196044921875,
0.0252685546875,
-0.012939453125,
-0.036895751953125,
0.054840087890625,
0.025177001953125,
-0.06256103515625,
0.043975830078125,
-0.0090789794921875,
0.054229736328125,
0.048187255859375,
0.00745391845703125,
-0.0455322265625,
0.05377197265625,
0.0103759765625,
-0.045379638671875,
0.01259613037109375,
-0.006793975830078125,
-0.0006356239318847656,
-0.0305023193359375,
0.09454345703125,
-0.048065185546875,
0.01067352294921875,
-0.045135498046875,
0.088134765625,
-0.0816650390625,
-0.054107666015625,
0.05877685546875,
0.11419677734375,
-0.0234222412109375,
-0.06732177734375,
-0.055938720703125,
-0.0188140869140625,
-0.018157958984375,
0.045440673828125,
0.040802001953125,
0.00550079345703125,
0.0450439453125,
0.097900390625,
-0.0634765625,
-0.074462890625,
0.052734375,
0.10260009765625,
-0.08447265625,
-0.0267333984375,
-0.065185546875,
-0.029754638671875,
-0.0268096923828125,
0.09307861328125,
0.1326904296875,
-0.0179595947265625,
0.026885986328125,
0.053619384765625,
-0.02569580078125,
-0.1041259765625,
0.034271240234375,
0.0360107421875,
0.09674072265625,
-0.0322265625,
0.08026123046875,
0.01070404052734375,
-0.07550048828125,
-0.0018987655639648438,
-0.021453857421875,
-0.08209228515625,
0.08990478515625,
-0.0109710693359375,
0.07684326171875,
0.0084686279296875,
0.09344482421875,
-0.044769287109375,
0.11883544921875,
-0.0211181640625,
-0.01203155517578125,
0.06396484375,
0.05010986328125,
0.01288604736328125,
0.10186767578125,
0.050262451171875,
0.0007047653198242188,
-0.039642333984375,
-0.04119873046875,
-0.0309295654296875,
-0.057037353515625,
-0.00885772705078125,
0.10540771484375,
0.03985595703125,
0.0767822265625,
-0.081787109375,
0.0292816162109375,
0.042144775390625,
0.0887451171875,
-0.021240234375,
0.02044677734375,
-0.023040771484375,
-0.08447265625,
-0.02203369140625,
-0.060546875,
0.13525390625,
0.07696533203125,
-0.044464111328125,
-0.03460693359375,
0.027984619140625,
0.038238525390625,
0.08905029296875,
-0.027252197265625,
0.044647216796875,
-0.010162353515625,
-0.020172119140625,
-0.0019683837890625,
0.0611572265625,
0.01528167724609375,
0.018341064453125,
0.03900146484375,
0.054473876953125,
0.09527587890625,
0.02392578125,
-0.080810546875,
0.036712646484375,
0.022216796875,
0.019317626953125,
0.003086090087890625,
-0.1162109375,
-0.05224609375,
0.07965087890625,
0.04522705078125,
-0.0304412841796875,
0.111572265625,
0.034759521484375,
0.07635498046875,
0.0433349609375,
0.054901123046875,
0.07440185546875,
-0.0906982421875,
0.0187225341796875,
0.0281219482421875,
0.0517578125,
0.08929443359375,
0.0372314453125,
-0.06585693359375,
-0.015228271484375,
-0.0278778076171875,
-0.1072998046875,
-0.078369140625,
0.0016155242919921875,
-0.037506103515625,
0.0711669921875,
-0.038055419921875,
0.007724761962890625,
-0.0645751953125,
0.1009521484375,
0.034515380859375,
-0.07537841796875,
0.0435791015625,
-0.039459228515625,
-0.03704833984375,
0.0043487548828125,
0.12384033203125,
-0.0806884765625,
-0.0081329345703125,
-0.0280303955078125,
0.04351806640625,
0.00611114501953125,
-0.072509765625,
0.009368896484375,
-0.0921630859375,
-0.023162841796875,
0.0914306640625,
0.110107421875,
0.10235595703125,
-0.00727081298828125,
-0.08209228515625,
-0.0850830078125,
0.076904296875,
0.07464599609375,
-0.03448486328125,
0.09637451171875,
0.07928466796875,
0.09967041015625,
-0.09661865234375,
-0.021148681640625,
0.0208892822265625,
-0.0982666015625,
-0.0251922607421875,
0.03778076171875,
-0.0677490234375,
-0.0305023193359375,
-0.03240966796875,
-0.017730712890625,
-0.1142578125,
-0.08905029296875,
0.03375244140625,
-0.09521484375,
0.0906982421875,
0.08538818359375,
-0.053253173828125,
0.024383544921875,
0.032073974609375,
-0.017303466796875,
0.03875732421875,
0.0198211669921875,
-0.029388427734375,
0.09381103515625,
-0.058990478515625,
0.08660888671875,
0.022247314453125,
0.05364990234375,
-0.0496826171875,
-0.01177978515625,
0.0206298828125,
-0.090087890625,
-0.049957275390625,
-0.019927978515625,
-0.0227203369140625,
0.05145263671875,
0.12091064453125,
0.0133514404296875,
0.04583740234375,
0.060791015625,
0.024658203125,
0.016448974609375,
0.137939453125,
0.08770751953125,
-0.06915283203125,
0.06744384765625,
-0.087158203125,
0.056732177734375,
0.06268310546875,
0.012451171875,
-0.055389404296875,
0.049713134765625,
0.0997314453125,
0.036285400390625,
-0.1334228515625,
-0.08514404296875,
-0.016021728515625,
-0.01361846923828125,
0.00984954833984375,
-0.09747314453125,
0.07403564453125,
-0.07281494140625,
-0.033721923828125,
0.01168060302734375,
0.09423828125,
0.0016345977783203125,
-0.03436279296875,
0.007198333740234375,
-0.002071380615234375,
0.06610107421875,
0.09375,
0.0823974609375,
-0.076904296875,
-0.09063720703125,
0.021942138671875,
0.1689453125,
0.09765625,
0.08331298828125,
0.01824951171875,
-0.08856201171875,
-0.03961181640625,
0.05224609375,
0.0027790069580078125,
0.049530029296875,
-0.05169677734375,
-0.06964111328125,
0.050537109375,
-0.02337646484375,
0.06549072265625,
0.081298828125,
0.05670166015625,
-0.01250457763671875,
-0.0450439453125,
-0.07061767578125,
-0.044219970703125,
-0.059906005859375,
0.07220458984375,
-0.08843994140625,
0.0173492431640625,
0.060333251953125,
0.0100555419921875,
0.09576416015625,
0.07415771484375,
-0.021514892578125,
0.06640625,
-0.0161285400390625,
-0.0238800048828125,
0.10565185546875,
-0.077880859375,
-0.09814453125,
0.154541015625,
-0.0015048980712890625,
0.0228118896484375,
0.021942138671875,
-0.116943359375,
-0.055389404296875,
0.1302490234375,
0.09356689453125,
0.11431884765625,
0.1573486328125,
-0.00714874267578125,
0.001953125,
-0.1134033203125,
0.07562255859375,
0.046356201171875,
-0.0243988037109375,
-0.04656982421875,
0.002635955810546875,
0.04925537109375,
-0.02532958984375,
0.09600830078125,
-0.0287017822265625,
-0.09967041015625,
-0.05450439453125,
-0.10552978515625,
0.079345703125,
0.034942626953125,
0.1002197265625,
-0.052032470703125,
-0.038665771484375,
-0.0155029296875,
-0.0018129348754882812,
0.0816650390625,
0.03704833984375,
-0.08782958984375,
0.0296173095703125,
0.02215576171875,
-0.037689208984375,
0.044342041015625,
0.00405120849609375,
0.0141754150390625,
0.0156402587890625,
0.0157928466796875,
-0.0738525390625,
-0.06805419921875,
-0.0767822265625,
-0.11090087890625,
0.050323486328125,
0.02972412109375,
0.0892333984375,
0.055572509765625,
0.0364990234375,
-0.051483154296875,
0.00799560546875,
0.10662841796875,
-0.011138916015625,
-0.06915283203125,
-0.0509033203125,
-0.07098388671875,
-0.11907958984375,
-0.0218963623046875,
0.0209197998046875,
-0.0111083984375,
0.088623046875,
0.09075927734375,
0.0849609375,
-0.0885009765625,
0.0535888671875,
-0.1092529296875,
0.06280517578125,
0.11553955078125,
0.08526611328125,
0.10723876953125,
0.07830810546875,
0.09161376953125,
-0.039215087890625,
0.0791015625,
-0.02294921875,
-0.08636474609375,
-0.032196044921875,
-0.105224609375,
0.05877685546875,
-0.0789794921875,
-0.07080078125,
-0.06927490234375,
-0.00778961181640625,
-0.02313232421875,
-0.00592041015625,
-0.05828857421875,
0.0501708984375,
0.004436492919921875,
-0.0665283203125,
0.0205535888671875,
0.07672119140625,
0.07916259765625,
-0.025787353515625,
0.004364013671875,
0.0523681640625,
-0.01010894775390625,
-0.0222930908203125,
-0.07769775390625,
0.01053619384765625,
0.07373046875,
0.08221435546875,
-0.055206298828125,
0.013427734375,
-0.011474609375,
0.01444244384765625,
0.006847381591796875,
0.03912353515625,
-0.0038318634033203125,
-0.0704345703125,
-0.05218505859375,
-0.0158538818359375,
-0.082763671875,
0.053009033203125,
0.06268310546875,
-0.03570556640625,
0.06951904296875,
-0.0237579345703125,
-0.0743408203125,
-0.04925537109375,
-0.0151214599609375,
-0.004680633544921875,
0.040679931640625,
0.1123046875,
0.0927734375,
0.01056671142578125,
-0.0987548828125,
-0.0223388671875,
0.037017822265625,
-0.0478515625,
-0.10498046875,
0.060760498046875,
-0.0667724609375,
-0.06365966796875,
0.07177734375,
-0.10107421875,
-0.047149658203125,
0.0260009765625,
0.0010175704956054688,
-0.030364990234375,
-0.08453369140625,
0.004932403564453125,
0.006504058837890625,
0.08050537109375,
0.02960205078125,
0.085693359375,
-0.08221435546875,
0.0447998046875,
-0.056182861328125,
-0.0286712646484375,
-0.0726318359375,
-0.052215576171875,
0.09033203125,
-0.07354736328125,
-0.00301361083984375,
-0.0421142578125,
-0.0142364501953125,
0.07574462890625,
-0.032379150390625,
-0.0270538330078125,
-0.037628173828125,
-0.0009064674377441406,
0.00801849365234375,
-0.0479736328125,
0.0005712509155273438,
-0.021209716796875,
-0.08648681640625,
-0.0239105224609375,
0.05377197265625,
0.043243408203125,
-0.0082244873046875,
-0.0009641647338867188,
-0.041107177734375,
0.06927490234375,
-0.026519775390625,
0.0770263671875,
0.006160736083984375,
0.035888671875,
-0.030548095703125,
0.07574462890625,
0.04998779296875,
0.06964111328125,
0.01366424560546875,
0.01395416259765625,
0.06298828125,
-0.051727294921875,
-0.07611083984375,
-0.0305633544921875,
0.006702423095703125,
0.054656982421875,
-0.037628173828125,
0.03399658203125,
0.059234619140625,
-0.014007568359375,
0.0109100341796875,
0.02685546875,
0.057464599609375,
-0.0140228271484375,
0.0273590087890625,
0.03924560546875,
-0.0030364990234375,
-0.0198211669921875,
-0.0584716796875,
-0.0438232421875,
-0.00325775146484375,
0.0030918121337890625,
-0.03375244140625,
0.0703125,
0.063232421875,
-0.01448822021484375,
-0.03533935546875,
-0.0219268798828125,
0.040802001953125,
-0.052093505859375,
0.037353515625,
0.06298828125,
0.0271148681640625,
0.0509033203125,
0.0838623046875,
0.07122802734375,
0.034881591796875,
-0.0521240234375,
-0.0018968582153320312,
-0.015228271484375,
-0.05322265625,
-0.0128631591796875,
-0.0421142578125,
-0.0229949951171875,
-0.07867431640625,
-0.0293731689453125,
-0.08148193359375,
-0.0297393798828125,
-0.032501220703125,
-0.023651123046875,
-0.07403564453125,
0.07061767578125,
0.0208282470703125,
-0.08892822265625,
-0.0275421142578125,
-0.029510498046875,
0.07037353515625,
0.08074951171875,
-0.022064208984375,
0.06512451171875,
-0.03668212890625,
0.0830078125,
-0.059814453125,
0.08746337890625,
0.0423583984375,
0.065673828125,
0.05078125,
0.0136260986328125,
-0.0902099609375,
0.052642822265625,
-0.018768310546875,
-0.061187744140625,
0.04058837890625,
0.035980224609375,
0.054534912109375,
-0.07489013671875,
-0.08563232421875,
-0.00778961181640625,
-0.060211181640625,
0.00731658935546875,
-0.02362060546875,
-0.049530029296875,
-0.0158538818359375,
0.088623046875,
0.0012407302856445312,
0.0345458984375,
-0.0797119140625,
0.07720947265625,
0.06207275390625,
0.004528045654296875,
0.03253173828125,
0.090576171875,
-0.0012798309326171875,
0.07830810546875,
-0.05426025390625,
-0.0498046875,
0.03240966796875,
0.0328369140625,
-0.0479736328125,
0.027923583984375,
0.0948486328125,
-0.0753173828125,
0.035980224609375,
-0.033355712890625,
0.040252685546875,
-0.0673828125,
-0.0396728515625,
-0.067626953125,
-0.10498046875,
-0.004810333251953125,
-0.09625244140625,
-0.04388427734375,
-0.050933837890625,
0.06451416015625,
-0.0204925537109375,
0.06427001953125,
-0.15283203125,
-0.0227203369140625,
-0.0439453125,
0.02630615234375,
-0.04718017578125,
-0.062286376953125,
-0.035736083984375,
0.028076171875,
-0.0158538818359375,
0.017974853515625,
-0.0196685791015625,
-0.05902099609375,
0.0205841064453125,
-0.07794189453125,
0.0028018951416015625,
-0.03485107421875,
0.092529296875,
-0.0616455078125,
0.0640869140625,
0.041778564453125,
0.031494140625,
-0.038543701171875,
-0.0797119140625,
-0.06414794921875,
-0.084228515625,
0.02178955078125,
-0.1490478515625,
-0.001190185546875,
-0.040618896484375,
0.08795166015625,
0.07562255859375,
0.113037109375,
-0.058929443359375,
-0.061553955078125,
-0.06475830078125,
-0.0262603759765625,
0.014434814453125,
0.0655517578125,
-0.06390380859375,
0.048797607421875,
0.08978271484375,
0.04742431640625,
-0.031524658203125,
0.061767578125,
-0.024658203125,
-0.06207275390625,
0.03753662109375,
-0.004138946533203125,
0.0161895751953125,
0.0104217529296875,
0.0892333984375,
-0.08367919921875,
0.086181640625,
0.00513458251953125,
-0.08380126953125,
0.07464599609375,
0.033660888671875,
0.11297607421875,
0.006359100341796875,
0.06671142578125,
0.045867919921875,
0.00013768672943115234,
-0.00818634033203125,
0.0712890625,
-0.1185302734375,
-0.052032470703125,
0.0887451171875,
-0.0271759033203125,
-0.01413726806640625,
-0.055328369140625,
0.10992431640625,
-0.0946044921875,
-0.0472412109375,
0.07379150390625,
-0.03594970703125,
0.0238800048828125,
-0.08013916015625,
-0.044921875,
0.04254150390625,
0.061798095703125,
-0.051971435546875,
-0.09326171875,
-0.0028285980224609375,
0.008941650390625,
-0.01123809814453125,
-0.062347412109375,
0.11553955078125,
0.00836944580078125,
-0.02313232421875,
-0.12054443359375,
0.07489013671875,
-0.04205322265625,
0.05401611328125,
0.07940673828125,
0.04083251953125,
0.09521484375,
0.0026187896728515625,
0.09954833984375,
-0.01010894775390625,
-0.06976318359375,
-0.00020992755889892578,
0.048797607421875,
-0.047271728515625,
-0.09393310546875,
-0.063720703125,
0.11297607421875,
0.0972900390625,
-0.06939697265625,
0.041412353515625,
-0.0404052734375,
0.06378173828125,
-0.038665771484375,
0.01036834716796875,
0.0670166015625,
0.06439208984375,
-0.02703857421875,
0.08935546875,
0.046875,
-0.0229034423828125,
0.01324462890625,
0.028778076171875,
-0.07476806640625,
-0.00917816162109375,
-0.0687255859375,
-0.0975341796875,
0.09033203125,
0.005458831787109375,
-0.0279693603515625,
-0.1280517578125,
-0.034942626953125,
-0.0355224609375,
-0.025390625,
-0.0714111328125,
0.007228851318359375,
0.10382080078125,
-0.07489013671875,
-0.04559326171875,
-0.08544921875,
0.051483154296875,
-0.1336669921875,
-0.0523681640625,
-0.03411865234375,
0.01873779296875,
0.136474609375,
0.0277557373046875,
0.0313720703125,
0.04608154296875,
0.082763671875,
0.04901123046875,
0.1268310546875,
-0.1279296875,
-0.0704345703125,
-0.1280517578125,
-0.049346923828125,
0.059234619140625,
0.025787353515625,
0.0433349609375,
-0.007228851318359375,
0.09307861328125,
-0.08514404296875,
-0.0634765625,
-0.11328125,
-0.0765380859375,
-0.063232421875,
0.020965576171875,
-0.048980712890625,
0.09820556640625,
0.056854248046875,
-0.0537109375,
0.1265869140625,
0.050445556640625,
-0.0274505615234375,
-0.04241943359375,
0.028533935546875,
0.0645751953125,
-0.0345458984375,
-0.091064453125,
-0.0880126953125,
-0.061065673828125,
-0.00799560546875,
0.0220794677734375,
-0.013031005859375,
-0.016876220703125,
-0.10882568359375,
0.08087158203125,
-0.023284912109375,
0.061065673828125,
-0.05078125,
0.0174102783203125,
0.029693603515625,
-0.054412841796875,
-0.0026035308837890625,
-0.08709716796875,
-0.0012979507446289062,
-0.0606689453125,
0.0307464599609375,
-0.023773193359375,
0.0264739990234375,
-0.01558685302734375,
0.11334228515625,
-0.07537841796875,
0.00044035911560058594,
-0.0362548828125,
0.07855224609375,
-0.1116943359375,
-0.0226593017578125,
0.0229339599609375,
0.072265625,
0.002410888671875,
0.033416748046875,
0.048828125,
0.042999267578125,
-0.05035400390625,
0.038116455078125,
0.072509765625,
0.08038330078125,
-0.0693359375,
0.06536865234375,
0.005344390869140625,
-0.041961669921875,
0.0182647705078125,
-0.0267791748046875,
-0.0450439453125,
0.03759765625,
0.053619384765625,
-0.0159759521484375,
-0.076416015625,
0.05804443359375,
0.051849365234375,
-0.0274505615234375,
-0.00406646728515625,
-0.0218048095703125,
-0.07489013671875,
-0.0684814453125,
-0.0831298828125,
0.08514404296875,
0.0765380859375,
-0.043121337890625,
-0.034881591796875,
-0.039093017578125,
-0.00344085693359375,
-0.044525146484375,
-0.0770263671875,
-0.08831787109375,
-0.06890869140625,
0.041412353515625,
0.06689453125,
-0.0731201171875,
-0.006072998046875,
0.0012159347534179688,
0.0283966064453125,
-0.08770751953125,
-0.08221435546875,
-0.0787353515625,
0.06427001953125,
0.00034499168395996094,
-0.08172607421875,
0.0736083984375,
-0.07421875,
-0.0859375,
0.06689453125,
0.07049560546875,
0.03839111328125,
0.0406494140625,
0.06866455078125,
-0.01042938232421875,
-0.05303955078125,
0.034820556640625,
0.00847625732421875,
-0.05517578125,
-0.06793212890625,
-0.0201263427734375,
0.0220794677734375,
0.0239715576171875,
0.049957275390625,
0.05718994140625,
0.08782958984375,
-0.052734375,
-0.0625,
-0.04058837890625,
-0.043487548828125,
-0.0253448486328125,
0.04241943359375,
0.04058837890625,
0.016204833984375,
0.061065673828125,
0.035980224609375,
0.02001953125,
-0.042938232421875,
-0.0285797119140625,
0.00667572021484375,
0.004425048828125,
0.0343017578125,
-0.062103271484375,
-0.046600341796875,
-0.0259246826171875,
-0.049163818359375,
0.05462646484375,
-0.0419921875,
0.044647216796875,
-0.0418701171875,
-0.05670166015625,
0.01137542724609375,
-0.07427978515625,
-0.07177734375,
0.0413818359375,
0.0650634765625,
-0.0386962890625,
-0.027740478515625,
0.048919677734375,
0.023834228515625,
0.056365966796875,
0.06591796875,
-0.031005859375,
0.07025146484375,
0.07611083984375,
-0.04852294921875,
0.0526123046875,
-0.09417724609375,
0.0167999267578125,
-0.01473236083984375,
-0.07476806640625,
0.023284912109375,
-0.08184814453125,
0.06390380859375,
-0.049530029296875,
0.04949951171875,
-0.07196044921875,
-0.01392364501953125,
0.06622314453125,
-0.0384521484375,
-0.0024127960205078125,
-0.037811279296875,
0.0838623046875,
-0.017547607421875,
0.0333251953125,
0.10186767578125,
0.037933349609375,
-0.09063720703125,
-0.054107666015625,
-0.045654296875,
0.0645751953125,
-0.0272064208984375,
0.0261383056640625,
0.11322021484375,
0.046722412109375,
0.003971099853515625,
-0.06256103515625,
0.09576416015625,
0.055419921875,
0.043243408203125,
0.049041748046875,
-0.029144287109375,
-0.01143646240234375,
0.07806396484375,
-0.040679931640625,
0.0609130859375,
0.050506591796875,
0.1275634765625,
0.010894775390625,
-0.075439453125,
0.005115509033203125,
-0.08001708984375,
-0.043853759765625,
-0.124267578125,
-0.07281494140625,
-0.0010318756103515625,
0.0033016204833984375,
-0.06622314453125,
-0.039642333984375,
-0.0313720703125,
-0.1280517578125,
-0.0765380859375,
0.0302886962890625,
-0.040191650390625,
-0.0210418701171875,
-0.038818359375,
-0.09747314453125,
0.08355712890625,
-0.0037593841552734375,
0.003299713134765625,
-0.03643798828125,
-0.00046825408935546875,
-0.06939697265625,
0.0849609375,
0.0257110595703125,
-0.043121337890625,
0.07135009765625,
0.04534912109375,
0.1312255859375,
-0.06402587890625,
0.112060546875,
-0.0192108154296875,
-0.03912353515625,
-0.08575439453125,
-0.01611328125,
-0.04974365234375,
-0.134765625,
0.0579833984375,
0.031707763671875,
0.0032672882080078125,
-0.049285888671875,
-0.071044921875,
0.0992431640625,
-0.01000213623046875,
-0.010833740234375,
0.117431640625,
0.05792236328125,
-0.0268402099609375,
0.0283050537109375,
0.030609130859375,
-0.0177154541015625,
0.03887939453125,
0.021575927734375,
-0.052734375,
-0.0016031265258789062,
-0.043426513671875,
0.0673828125,
0.0195770263671875,
0.1270751953125,
-0.06976318359375,
-0.04974365234375,
-0.0303497314453125,
0.08074951171875,
0.0245361328125,
0.01229095458984375,
-0.0089874267578125,
-0.0226593017578125,
0.01345062255859375,
0.047332763671875,
0.049346923828125,
0.05596923828125,
-0.070068359375,
-0.059478759765625,
-0.0310211181640625,
0.03497314453125,
0.01416778564453125,
-0.1112060546875,
0.08990478515625,
0.060089111328125,
-0.01507568359375,
0.08770751953125,
0.11492919921875,
-0.041290283203125,
0.01221466064453125,
-0.0703125,
-0.0570068359375,
-0.0171051025390625,
-0.036041259765625,
0.0775146484375,
0.0031681060791015625,
-0.03350830078125,
-0.0916748046875,
-0.048187255859375,
0.04364013671875,
-0.05804443359375,
0.040313720703125,
0.07318115234375,
0.029876708984375,
0.06292724609375,
0.007732391357421875,
0.0811767578125,
-0.079345703125,
-0.0374755859375,
-0.0701904296875,
0.047027587890625,
-0.047698974609375,
0.07464599609375,
-0.0211944580078125,
-0.0631103515625,
-0.0177764892578125,
-0.0164642333984375,
-0.070556640625,
-0.0867919921875,
0.040771484375,
0.026458740234375,
-0.01465606689453125,
-0.0242767333984375,
-0.07122802734375,
-0.00231170654296875,
-0.0310821533203125,
-0.05126953125,
0.00501251220703125,
0.037628173828125,
0.07232666015625,
-0.0009212493896484375,
0.07122802734375,
-0.0433349609375,
0.049591064453125,
0.087158203125,
0.046905517578125,
0.07470703125,
0.06658935546875,
0.01071929931640625,
-0.0950927734375,
-0.01366424560546875,
0.0472412109375,
0.01947021484375,
-0.0082550048828125,
0.06817626953125,
-0.07354736328125,
-0.0677490234375,
-0.009002685546875,
-0.078369140625,
0.0244903564453125,
-0.02386474609375,
-0.0150909423828125,
-0.03668212890625,
-0.0594482421875,
0.0015163421630859375,
0.08563232421875,
-0.050537109375,
-0.07293701171875,
0.039459228515625,
-0.00763702392578125,
0.0029144287109375,
0.07281494140625,
-0.06610107421875,
0.08233642578125,
-0.0479736328125,
-0.06317138671875,
-0.032257080078125,
-0.0291900634765625,
-0.02301025390625,
-0.02203369140625,
-0.0025272369384765625,
0.0257110595703125,
-0.0231170654296875,
0.033660888671875,
0.07763671875,
0.046966552734375,
-0.002529144287109375,
0.0672607421875,
0.01580810546875,
-0.06683349609375,
-0.0235748291015625,
-0.015777587890625,
0.073974609375,
0.0828857421875,
0.051483154296875,
-0.078857421875,
-0.033447265625,
-0.00829315185546875,
-0.07086181640625,
-0.0850830078125,
0.043060302734375,
-0.043670654296875,
-0.0160980224609375,
0.08056640625,
0.0887451171875,
-0.0216827392578125,
-0.006839752197265625,
-0.06292724609375,
-0.0198974609375,
-0.033843994140625,
-0.07342529296875,
0.076904296875,
0.036834716796875,
0.024200439453125,
-0.028411865234375,
-0.0273590087890625,
-0.08905029296875,
-0.05950927734375,
0.060333251953125,
0.035064697265625,
0.0697021484375,
0.0362548828125,
-0.01032257080078125,
0.007465362548828125,
-0.038330078125,
-0.032989501953125,
-0.07666015625,
-0.01184844970703125,
-0.07794189453125,
-0.0279388427734375,
0.03216552734375,
-0.07818603515625,
0.08935546875,
-0.02349853515625,
0.116943359375,
0.00838470458984375,
-0.055694580078125,
-0.04547119140625,
-0.05474853515625,
-0.054595947265625,
0.057281494140625,
-0.07574462890625,
-0.04766845703125,
-0.00946807861328125,
-0.01270294189453125,
-0.038330078125,
-0.0157318115234375,
-0.03741455078125,
-0.032379150390625,
0.0931396484375,
-0.055908203125,
-0.0108489990234375,
0.07794189453125,
0.061859130859375,
0.0056915283203125,
0.0302886962890625,
-0.0958251953125,
0.07598876953125,
0.08843994140625,
-0.0285186767578125,
0.06781005859375,
0.11712646484375,
0.022186279296875,
0.041412353515625,
0.0650634765625,
-0.0162811279296875,
0.01971435546875,
-0.10595703125,
0.06671142578125,
0.025238037109375,
-0.0347900390625,
0.081298828125,
0.05218505859375,
0.05029296875,
0.058380126953125,
-0.006137847900390625,
-0.06549072265625,
-0.11474609375,
0.0911865234375,
0.01904296875,
0.0999755859375,
0.1307373046875,
-0.0496826171875,
-0.01453399658203125,
0.0020618438720703125,
0.042510986328125,
-0.09405517578125,
0.0557861328125,
0.011199951171875,
0.005138397216796875,
0.037567138671875,
-0.0780029296875,
-0.0094757080078125,
0.0294189453125,
-0.016693115234375,
0.04449462890625,
0.049835205078125,
-0.08587646484375,
0.049102783203125,
-0.02288818359375,
0.0745849609375,
-0.0302734375,
0.035491943359375,
-0.09197998046875,
-0.055633544921875,
0.026611328125,
0.08050537109375,
-0.0009198188781738281,
-0.0128173828125,
-0.08905029296875,
0.02874755859375,
-0.035491943359375,
0.036651611328125,
0.065185546875,
0.01422119140625,
0.054290771484375,
0.049774169921875,
0.06103515625,
-0.018585205078125,
-0.0648193359375,
-0.0478515625,
0.072509765625,
0.07769775390625,
0.013671875,
-0.04071044921875,
0.05078125,
-0.08013916015625,
-0.030059814453125,
-0.07635498046875,
0.052734375,
0.092529296875,
0.0423583984375,
0.03961181640625,
-0.06414794921875,
0.111328125,
-0.042816162109375,
0.01275634765625,
0.0704345703125,
-0.025787353515625,
-0.1043701171875,
0.04638671875,
0.00878143310546875,
0.0950927734375,
0.10284423828125,
-0.0228118896484375,
-0.046356201171875,
0.09100341796875,
0.025115966796875,
0.05548095703125,
-0.022796630859375,
-0.02093505859375,
0.061737060546875,
0.06121826171875,
-0.00572967529296875,
0.0154266357421875,
0.02862548828125,
0.00783538818359375,
-0.0797119140625,
0.021697998046875,
0.08062744140625,
-0.06085205078125,
0.12109375,
-0.128173828125,
0.115478515625,
0.084716796875,
0.06854248046875,
-0.0040283203125,
0.0181427001953125,
0.01413726806640625,
-0.045806884765625,
-0.0265655517578125,
0.0809326171875,
0.11029052734375,
0.0640869140625,
0.05853271484375,
0.046844482421875,
-0.128173828125,
-0.0643310546875,
-0.035614013671875,
-0.035491943359375,
0.0679931640625,
-0.03790283203125,
-0.0404052734375,
-0.1085205078125,
0.042144775390625,
-0.10107421875,
0.0321044921875,
-0.008575439453125,
0.03662109375,
0.0021610260009765625,
-0.023895263671875,
0.089111328125,
-0.0192413330078125,
0.047821044921875,
0.0126800537109375,
0.07891845703125,
0.08636474609375,
0.03173828125,
-0.02471923828125,
0.0045623779296875,
0.10845947265625,
-0.0596923828125,
0.1400146484375,
0.0242767333984375,
-0.04144287109375,
-0.0819091796875,
-0.0013990402221679688,
-0.1043701171875,
0.006366729736328125,
-0.04229736328125,
0.032958984375,
-0.0281524658203125,
-0.11041259765625,
0.0870361328125,
-0.03704833984375,
0.0109405517578125,
-0.08489990234375,
-0.06964111328125,
-0.0175933837890625,
-0.0611572265625,
0.0265655517578125,
0.0308685302734375,
0.00160980224609375,
-0.060211181640625,
0.08197021484375,
-0.01299285888671875,
0.0014553070068359375,
0.056549072265625,
0.002201080322265625,
0.0789794921875,
0.09442138671875,
0.052398681640625,
0.0125579833984375,
0.0430908203125,
0.03265380859375,
-0.005626678466796875,
-0.0098114013671875,
-0.003826141357421875,
0.003997802734375,
-0.0281219482421875,
-0.0423583984375,
-0.06982421875,
0.0885009765625,
-0.0011148452758789062,
0.053314208984375,
-0.0192108154296875,
-0.07794189453125,
0.0428466796875,
-0.06109619140625,
-0.0146026611328125,
0.05828857421875,
0.06396484375,
-0.10443115234375,
0.040985107421875,
0.087158203125,
0.01061248779296875,
-0.004077911376953125,
0.0587158203125,
-0.07568359375,
-0.09576416015625,
-0.10858154296875,
0.0418701171875,
-0.03216552734375,
0.037841796875,
0.0643310546875,
0.06451416015625,
-0.0977783203125,
0.0272369384765625,
0.06768798828125,
0.033416748046875,
0.075927734375,
0.11669921875,
0.0296478271484375,
0.00896453857421875,
-0.10382080078125,
0.0077972412109375,
0.09619140625,
-0.10394287109375,
-0.005901336669921875,
-0.057525634765625,
0.0999755859375,
0.0479736328125,
-0.0181121826171875,
0.03240966796875,
-0.0005779266357421875,
0.08648681640625,
-0.06854248046875,
-0.0110321044921875,
-0.087890625,
0.10382080078125,
0.010101318359375,
0.07269287109375,
0.0413818359375,
-0.00991058349609375,
0.1036376953125,
0.04718017578125,
-0.0195465087890625,
0.06884765625,
-0.069091796875,
-0.0148468017578125,
-0.08209228515625,
-0.047637939453125,
-0.05419921875,
-0.0443115234375,
0.045928955078125,
0.12396240234375,
-0.1378173828125,
-0.09307861328125,
0.11383056640625,
0.11541748046875,
-0.06182861328125,
0.018035888671875,
-0.1419677734375,
-0.09332275390625,
-0.022308349609375,
0.01261138916015625,
-0.06280517578125,
-0.038604736328125,
-0.11627197265625,
-0.10333251953125,
0.10748291015625,
0.0195159912109375,
0.07745361328125,
0.047119140625,
-0.0258636474609375,
-0.049407958984375,
0.110107421875,
0.1146240234375,
-0.0899658203125,
-0.0042572021484375,
-0.0806884765625,
0.08001708984375,
-0.140380859375,
-0.0239410400390625,
0.060577392578125,
-0.0565185546875,
-0.0168914794921875,
0.019927978515625,
0.049102783203125,
0.0195159912109375,
0.06561279296875,
0.158203125,
0.07098388671875,
-0.01543426513671875,
0.09051513671875,
0.019256591796875,
0.10552978515625,
-0.0401611328125,
-0.03564453125,
0.005222320556640625,
0.017364501953125,
0.08355712890625,
0.056549072265625,
-0.038818359375,
0.04412841796875,
0.062225341796875,
-0.00913238525390625,
-0.053131103515625,
0.06842041015625,
0.00615692138671875,
0.06195068359375,
-0.0182037353515625,
-0.056549072265625,
-0.0256500244140625,
0.0237274169921875,
0.0216827392578125,
0.01263427734375,
-0.019775390625,
-0.065673828125,
0.0163116455078125,
0.00550079345703125,
0.0599365234375,
0.046783447265625,
0.09051513671875,
-0.062103271484375,
0.033599853515625,
0.02880859375,
0.08453369140625,
0.0216217041015625,
-0.01139068603515625,
-0.1024169921875,
0.11273193359375,
0.06768798828125,
-0.0869140625,
-0.09918212890625,
-0.0265655517578125,
0.00301361083984375,
-0.07952880859375,
-0.053009033203125,
0.053558349609375,
0.09869384765625,
-0.05584716796875,
0.03985595703125,
-0.022491455078125,
-0.050872802734375,
0.041900634765625,
-0.050445556640625,
-0.030975341796875,
0.0989990234375,
0.11834716796875,
0.0714111328125,
0.1141357421875,
-0.043701171875,
0.09661865234375,
0.0050048828125,
-0.0067596435546875,
0.04022216796875,
-0.0711669921875,
0.016693115234375,
0.087158203125,
0.0290679931640625,
0.01497650146484375,
0.068603515625,
-0.0195159912109375,
0.044525146484375,
-0.01418304443359375,
-0.12188720703125,
0.01352691650390625,
-0.089599609375,
-0.0701904296875,
-0.0909423828125,
-0.03399658203125,
0.023284912109375,
-0.099609375,
0.0400390625,
0.0791015625,
-0.0784912109375,
-0.05340576171875,
-0.0843505859375,
0.085693359375,
-0.0628662109375,
-0.0021228790283203125,
-0.06829833984375,
0.029632568359375,
0.0589599609375,
0.03619384765625,
-0.0017518997192382812,
-0.048583984375,
0.01233673095703125,
-0.0982666015625,
0.062469482421875,
-0.1412353515625,
0.09014892578125,
0.004444122314453125,
0.0989990234375,
0.0019016265869140625,
0.12646484375,
-0.0162353515625,
0.083740234375,
0.094970703125,
0.05712890625,
-0.08087158203125,
-0.06414794921875,
-0.0657958984375,
-0.04730224609375,
0.029876708984375,
-0.1070556640625,
-0.0938720703125,
-0.045379638671875,
0.037322998046875,
0.0560302734375,
0.1055908203125,
-0.0030879974365234375,
0.03643798828125,
0.0958251953125,
0.07000732421875,
0.06494140625,
0.0711669921875,
-0.06640625,
0.07080078125,
0.0229339599609375,
0.0469970703125,
0.038330078125,
0.037506103515625,
0.007144927978515625,
-0.08514404296875,
-0.056488037109375,
-0.0313720703125,
0.050079345703125,
-0.0345458984375,
-0.0528564453125,
-0.05499267578125,
-0.0040740966796875,
0.0335693359375,
0.06854248046875,
-0.0299530029296875,
-0.06988525390625,
-0.07794189453125,
-0.07366943359375,
-0.05731201171875,
-0.0677490234375,
0.0123748779296875,
-0.08331298828125,
0.12060546875,
-0.0013914108276367188,
0.06884765625,
-0.00714874267578125,
0.117431640625,
-0.0439453125,
0.0731201171875,
-0.034027099609375,
0.018402099609375,
0.0011453628540039062,
-0.0197601318359375,
-0.13330078125,
0.00548553466796875,
0.049163818359375,
0.065673828125,
0.07879638671875,
0.021728515625,
0.040069580078125,
-0.0333251953125,
0.077880859375,
-0.058624267578125,
0.03338623046875,
-0.0816650390625,
-0.07452392578125,
0.043548583984375,
0.0125579833984375,
0.04193115234375,
-0.08050537109375,
0.05755615234375,
-0.0635986328125,
0.08782958984375,
-0.041015625,
-0.061004638671875,
-0.044952392578125,
0.065185546875,
0.0836181640625,
0.01329803466796875,
-0.0703125,
-0.022857666015625,
-0.08770751953125,
0.00988006591796875,
-0.08984375,
0.1514892578125,
0.0994873046875,
-0.108154296875,
0.0557861328125,
-0.10284423828125,
-0.0982666015625,
0.04840087890625,
0.0418701171875,
0.09649658203125,
-0.06451416015625,
0.007564544677734375,
0.1070556640625,
0.071533203125,
-0.094970703125,
-0.054229736328125,
0.0447998046875,
-0.061004638671875,
0.0452880859375,
0.10150146484375,
0.038848876953125,
-0.0173187255859375,
-0.03387451171875,
0.0292205810546875,
0.007366180419921875,
-0.033905029296875,
-0.11322021484375,
0.0263671875,
0.06500244140625,
0.03369140625,
-0.03900146484375,
0.12091064453125,
0.02825927734375,
0.058380126953125,
-0.08416748046875,
0.0098724365234375,
0.10040283203125,
-0.048828125,
0.01338958740234375,
0.0352783203125,
0.07720947265625,
-0.019775390625,
-0.006969451904296875,
0.07373046875,
0.1142578125,
-0.0105743408203125,
-0.08966064453125,
-0.046722412109375,
0.01216888427734375,
0.10516357421875,
0.08807373046875,
0.031890869140625,
-0.1058349609375,
-0.08642578125,
-0.059783935546875,
-0.04669189453125,
-0.04522705078125,
0.08587646484375,
-0.05157470703125,
0.1195068359375,
0.0601806640625,
-0.07373046875,
0.055084228515625,
0.018218994140625,
-0.039459228515625,
0.0005331039428710938,
0.056610107421875,
0.05084228515625,
0.0494384765625,
-0.0457763671875,
-0.0791015625,
-0.0399169921875,
0.0963134765625,
-0.068603515625,
-0.006755828857421875,
-0.062469482421875,
0.10772705078125,
0.06243896484375,
-0.0843505859375,
-0.034393310546875,
-0.12066650390625,
0.0112762451171875,
-0.0169525146484375,
0.010833740234375,
0.0640869140625,
-0.01285552978515625,
0.0947265625,
-0.042022705078125,
-0.038818359375,
0.0218658447265625,
0.04736328125,
-0.042388916015625,
0.10516357421875,
-0.0323486328125,
0.04119873046875,
0.08758544921875,
-0.08740234375,
0.007503509521484375,
0.0633544921875,
-0.07122802734375,
0.05816650390625,
0.032806396484375,
0.0648193359375,
-0.032928466796875,
-0.037750244140625,
-0.122802734375,
0.0601806640625,
0.0980224609375,
0.0251312255859375,
-0.0012178421020507812,
-0.0013418197631835938,
-0.08502197265625,
-0.04632568359375,
-0.1002197265625,
-0.0203399658203125,
-0.071533203125,
0.05059814453125,
-0.00431060791015625,
-0.0216827392578125,
-0.09735107421875,
0.0946044921875,
0.10711669921875,
0.09954833984375,
0.04541015625,
-0.06280517578125,
0.06524658203125,
0.133056640625,
0.0765380859375,
0.0040435791015625,
0.01324462890625,
0.07177734375,
-0.06243896484375,
-0.0267333984375,
-0.054901123046875,
-0.0703125,
0.08905029296875,
-0.09356689453125,
0.13427734375,
0.1014404296875,
-0.08038330078125,
0.06524658203125,
0.0802001953125,
0.019622802734375,
0.0014390945434570312,
0.037994384765625,
-0.09423828125,
0.07183837890625,
-0.1170654296875,
0.047454833984375,
-0.07745361328125,
-0.01456451416015625,
0.04107666015625,
-0.10888671875,
-0.0267791748046875,
0.0089874267578125,
0.0286865234375,
0.10101318359375,
0.022613525390625,
0.048828125,
-0.14453125,
0.08148193359375,
-0.06121826171875,
-0.0621337890625,
0.0034618377685546875,
-0.022186279296875,
-0.08453369140625,
0.01690673828125,
0.07586669921875,
-0.06341552734375,
0.10662841796875,
0.03204345703125,
0.032379150390625,
-0.03472900390625,
-0.04803466796875,
-0.08673095703125,
-0.01302337646484375,
0.00867462158203125,
0.057098388671875,
0.0183258056640625,
0.09490966796875,
-0.05078125,
0.006702423095703125,
-0.0872802734375,
-0.1053466796875,
0.0086822509765625,
-0.0038051605224609375,
0.1092529296875,
0.1058349609375,
-0.01062774658203125,
-0.043060302734375,
-0.02935791015625,
0.10888671875,
0.027191162109375,
-0.039459228515625,
-0.0997314453125,
0.0633544921875,
0.0831298828125,
-0.01216888427734375,
0.07269287109375,
-0.0269012451171875,
0.05596923828125,
0.0404052734375,
-0.01690673828125,
0.09307861328125,
0.032989501953125,
-0.06475830078125,
-0.035919189453125,
0.1036376953125,
-0.12103271484375,
-0.01332855224609375,
-0.008819580078125,
0.017730712890625,
-0.01561737060546875,
-0.054656982421875,
0.0171356201171875,
-0.02923583984375,
0.003467559814453125,
0.0440673828125,
0.029266357421875,
-0.062347412109375,
0.0782470703125,
0.0682373046875,
-0.01617431640625,
-0.08575439453125,
0.0189971923828125,
-0.039215087890625,
-0.051971435546875,
-0.0740966796875,
-0.052154541015625,
-0.01959228515625,
0.07891845703125,
-0.0293426513671875,
0.064208984375,
-0.006561279296875,
0.053375244140625,
-0.0145111083984375,
0.05584716796875,
-0.0318603515625,
0.051727294921875,
0.072021484375,
-0.061553955078125,
0.0004813671112060547,
0.016693115234375,
-0.0009002685546875,
-0.07159423828125,
0.0423583984375,
-0.014190673828125,
0.0153961181640625,
-0.07684326171875,
-0.05596923828125,
0.0234527587890625,
0.022308349609375,
-0.059234619140625,
0.006824493408203125,
0.0029964447021484375,
0.0200958251953125,
-0.06976318359375,
0.068603515625,
0.0235595703125,
-0.027191162109375,
-0.06805419921875,
0.00046372413635253906,
-0.0765380859375,
-0.08636474609375,
0.0706787109375,
-0.032562255859375,
-0.093017578125,
0.0792236328125,
-0.08306884765625,
-0.09075927734375,
-0.071044921875,
0.0206451416015625,
0.08929443359375,
-0.00550079345703125,
0.01399993896484375,
-0.0124969482421875,
0.0163726806640625,
-0.01279449462890625,
-0.02630615234375,
-0.055419921875,
-0.00472259521484375,
-0.058746337890625,
-0.06805419921875,
0.030029296875,
0.002330780029296875,
0.0281829833984375,
0.08203125,
0.058013916015625,
-0.0093231201171875,
0.056976318359375,
0.08319091796875,
0.02838134765625,
0.02001953125,
-0.035797119140625,
0.08062744140625,
-0.045440673828125,
-0.06463623046875,
0.03369140625,
-0.0550537109375,
0.008880615234375,
0.08074951171875,
0.02392578125,
-0.005550384521484375,
-0.0300445556640625,
-0.035003662109375,
-0.0071258544921875,
-0.060302734375,
-0.08355712890625,
-0.046051025390625,
-0.0280303955078125,
0.0141754150390625,
0.07843017578125,
-0.0250244140625,
0.0665283203125,
-0.0811767578125,
0.0283966064453125,
0.047454833984375,
0.01358795166015625,
-0.08453369140625,
0.0208587646484375,
-0.06719970703125,
-0.06854248046875,
0.033355712890625,
-0.04437255859375,
0.01215362548828125,
-0.01004791259765625,
-0.033416748046875,
-0.032623291015625,
0.061431884765625,
-0.037567138671875,
0.05316162109375,
-0.048431396484375,
0.008514404296875,
0.0236053466796875,
-0.07037353515625,
0.06536865234375,
0.0711669921875,
-0.08013916015625,
0.0628662109375,
-0.0126190185546875,
-0.048797607421875,
0.06695556640625,
-0.0479736328125,
-0.0006308555603027344,
0.028717041015625,
0.1448974609375,
0.07879638671875,
0.073974609375,
0.0025539398193359375,
0.01491546630859375,
0.0780029296875,
0.1617431640625,
-0.02294921875,
-0.005237579345703125,
-0.058624267578125,
-0.05645751953125,
0.01140594482421875,
-0.00980377197265625,
-0.0217437744140625,
0.0875244140625,
0.06390380859375,
0.031463623046875,
-0.1064453125,
-0.03424072265625,
0.0157928466796875,
-0.1473388671875,
-0.0379638671875,
0.026275634765625,
0.08074951171875,
0.07855224609375,
0.03826904296875,
0.0836181640625,
0.01073455810546875,
-0.0689697265625,
0.125244140625,
0.0110015869140625,
-0.01338958740234375,
-0.056549072265625,
-0.0318603515625,
-0.05023193359375,
-0.045196533203125,
0.005828857421875,
-0.046112060546875,
-0.155517578125,
0.040618896484375,
-0.046966552734375,
0.08465576171875,
0.10931396484375,
0.12451171875,
-0.00836181640625,
0.049530029296875,
-0.0197601318359375,
-0.0269012451171875,
0.07281494140625,
-0.0190582275390625,
-0.001499176025390625,
-0.11492919921875,
0.018798828125,
-0.068603515625,
0.09588623046875,
-0.0416259765625,
-0.04095458984375,
-0.0999755859375,
0.005401611328125,
-0.0706787109375,
0.04681396484375,
-0.08544921875,
0.1068115234375,
-0.068359375,
-0.111083984375,
0.03289794921875,
0.0921630859375,
-0.03228759765625,
0.0261688232421875,
0.08758544921875,
0.062286376953125,
-0.015167236328125,
0.10992431640625,
-0.05389404296875,
-0.00685882568359375,
0.09869384765625,
-0.06024169921875,
0.11187744140625,
-0.09002685546875,
-0.062744140625,
0.07696533203125,
-0.090576171875,
0.06817626953125,
0.11767578125,
-0.028167724609375,
0.0548095703125,
-0.07391357421875,
-0.090576171875,
-0.0750732421875,
-0.002552032470703125,
0.031890869140625,
0.1043701171875,
0.0797119140625,
-0.023284912109375,
0.0204010009765625,
-0.026885986328125,
-0.0643310546875,
-0.086181640625,
-0.07342529296875,
-0.005344390869140625,
0.08544921875,
0.018585205078125,
-0.045013427734375,
0.03155517578125,
-0.00775909423828125,
0.0306396484375,
-0.01041412353515625,
0.040435791015625,
0.056121826171875,
0.0645751953125,
-0.04376220703125,
0.051605224609375,
-0.0438232421875,
0.0859375,
0.0204620361328125,
0.061065673828125,
0.002613067626953125,
-0.00785064697265625,
0.0306549072265625,
-0.10382080078125,
0.0183258056640625,
-0.01316070556640625,
-0.03204345703125,
-0.11602783203125,
-0.00310516357421875,
0.0048065185546875,
0.011383056640625,
0.01488494873046875,
0.08544921875,
0.065673828125,
0.12158203125,
0.10040283203125,
-0.040557861328125,
-0.039520263671875,
-0.020111083984375,
-0.12188720703125,
0.01052093505859375,
0.1124267578125,
0.03387451171875,
-0.00548553466796875,
-0.066650390625,
-0.0174713134765625,
-0.05615234375,
0.131103515625,
0.10125732421875,
0.03228759765625,
0.060211181640625,
0.116455078125,
0.031097412109375,
0.018035888671875,
0.031982421875,
0.0787353515625,
-0.0132598876953125,
-0.058502197265625,
-0.09405517578125,
0.07763671875,
-0.053558349609375,
0.078125,
-0.028564453125,
0.0247802734375,
0.035675048828125,
-0.0718994140625,
0.01381683349609375,
-0.1207275390625,
-0.048370361328125,
0.13330078125,
0.032257080078125,
-0.0418701171875,
0.0260467529296875,
0.00467681884765625,
-0.017578125,
0.04095458984375,
-0.06646728515625,
-0.10394287109375,
-0.0390625,
0.0141143798828125,
-0.040771484375,
0.048187255859375,
-0.03466796875,
-0.0302886962890625,
-0.043426513671875,
-0.01010894775390625,
-0.07415771484375,
-0.0755615234375,
0.0227508544921875,
0.1007080078125,
0.033233642578125,
0.01898193359375,
-0.04864501953125,
-0.0802001953125,
0.08294677734375,
-0.07391357421875,
0.09197998046875,
-0.054229736328125,
-0.1014404296875,
-0.007068634033203125,
-0.0787353515625,
0.0293731689453125,
-0.054595947265625,
-0.07110595703125,
0.1021728515625,
0.08892822265625,
-0.10723876953125,
-0.11865234375,
0.10107421875,
0.0899658203125,
-0.034423828125,
-0.08123779296875,
-0.0125274658203125,
-0.0107879638671875,
-0.045806884765625,
-0.08746337890625,
-0.06048583984375,
-0.052764892578125,
0.0162506103515625,
0.020843505859375,
-0.055419921875,
0.02789306640625,
-0.0391845703125,
0.00890350341796875,
-0.07470703125,
0.0207366943359375,
-0.09490966796875,
0.0748291015625,
0.044189453125,
-0.032684326171875,
0.0447998046875,
-0.082763671875,
0.072021484375,
0.061309814453125,
0.024444580078125,
-0.061676025390625,
-0.018951416015625,
-0.07537841796875,
0.086181640625,
-0.05438232421875,
-0.03387451171875,
0.011749267578125,
-0.0290679931640625,
0.039459228515625,
0.0137939453125,
-0.024993896484375,
0.0276336669921875,
-0.0281982421875,
-0.06353759765625,
0.0400390625,
-0.0682373046875,
-0.031494140625,
0.02764892578125,
-0.07403564453125,
-0.0908203125,
-0.076904296875,
-0.021759033203125,
-0.0224761962890625,
-0.0004868507385253906,
-0.0241851806640625,
0.00875091552734375,
0.039764404296875,
-0.0172576904296875,
0.00565338134765625,
0.0232391357421875,
-0.033111572265625,
-0.043975830078125,
-0.085205078125,
0.031829833984375,
-0.0286102294921875,
-0.0016908645629882812,
-0.0166778564453125,
-0.0291900634765625,
-0.090576171875,
-0.0767822265625,
-0.07879638671875,
0.07305908203125,
0.0516357421875,
0.0035839080810546875,
0.05767822265625,
-0.04486083984375,
-0.049346923828125,
0.07415771484375,
-0.034698486328125,
-0.040191650390625,
-0.0020294189453125,
-0.0269927978515625,
0.0043792724609375,
0.044677734375,
0.02783203125,
-0.07012939453125,
-0.0792236328125,
-0.01145172119140625,
0.047882080078125,
0.0013275146484375,
0.02752685546875,
0.01361083984375,
-0.0037097930908203125,
-0.041107177734375,
-0.039215087890625,
0.0091094970703125,
0.03619384765625,
-0.072998046875,
-0.08203125,
0.0020275115966796875,
-0.06756591796875,
0.005443572998046875,
0.032379150390625,
-0.049072265625,
0.05657958984375,
0.06329345703125,
0.01288604736328125,
0.041351318359375,
-0.0648193359375,
0.07635498046875,
-0.056854248046875,
-0.0809326171875,
0.0174407958984375,
-0.045654296875,
-0.0299530029296875,
0.08612060546875,
0.0193939208984375,
-0.06964111328125,
-0.038970947265625,
-0.09185791015625,
-0.0904541015625,
0.051055908203125,
0.04400634765625,
-0.07440185546875,
-0.061553955078125,
0.01045989990234375,
0.05303955078125,
0.047943115234375,
0.076416015625,
0.0782470703125,
0.0859375,
0.0302734375,
0.0706787109375,
0.0167999267578125,
0.029144287109375,
0.0307769775390625,
-0.00490570068359375,
-0.058990478515625,
-0.00954437255859375,
-0.042022705078125,
-0.01169586181640625,
-0.003826141357421875,
-0.0667724609375,
0.0574951171875,
-0.0213775634765625,
0.06304931640625,
-0.047332763671875,
-0.03472900390625,
-0.059112548828125,
0.0282440185546875,
0.038909912109375,
0.0217437744140625,
0.0273590087890625,
-0.08709716796875,
-0.054107666015625,
0.08367919921875,
-0.0380859375,
-0.024200439453125,
-0.08038330078125,
-0.059234619140625,
0.01116180419921875,
0.06829833984375,
0.1650390625,
0.06256103515625,
-0.030517578125,
-0.103515625,
0.0181884765625,
-0.08642578125,
-0.033447265625,
0.02838134765625,
0.034393310546875,
0.01451873779296875,
0.08154296875,
-0.048370361328125,
0.10845947265625,
0.0849609375,
0.078125,
-0.025238037109375,
-0.07464599609375,
0.01331329345703125,
0.128662109375,
-0.050750732421875,
0.024505615234375,
0.085205078125,
0.08001708984375,
-0.01557159423828125,
-0.054046630859375,
-0.10687255859375,
-0.06231689453125,
0.08343505859375,
-0.01468658447265625,
-0.0775146484375,
-0.042572021484375,
0.08221435546875,
0.059722900390625,
0.001583099365234375,
0.0171356201171875,
-0.06695556640625,
-0.11248779296875,
0.0841064453125,
0.011077880859375,
-0.08978271484375,
-0.037322998046875,
-0.00791168212890625,
-0.0004601478576660156,
-0.0267333984375,
-0.110595703125,
0.09393310546875,
-0.0164947509765625,
-0.06268310546875,
0.034423828125,
0.0157012939453125,
-0.01428985595703125,
0.042205810546875,
0.050537109375,
0.03228759765625,
0.1116943359375,
0.0814208984375,
0.0540771484375,
-0.061859130859375,
0.04022216796875,
0.0112152099609375,
0.0124969482421875,
0.0665283203125,
-0.0762939453125,
0.052520751953125,
0.049407958984375,
-0.0628662109375,
0.048919677734375,
-0.06402587890625,
-0.045928955078125,
0.05517578125,
0.10968017578125,
0.0692138671875,
0.0105743408203125,
0.01410675048828125,
-0.00691986083984375,
-0.0014667510986328125,
0.032562255859375,
-0.074462890625,
0.02471923828125,
0.1292724609375,
0.0863037109375,
0.062744140625,
-0.0655517578125,
0.04620361328125,
0.0753173828125,
0.058380126953125,
0.048980712890625,
0.038818359375,
0.10614013671875,
0.0020999908447265625,
0.023162841796875,
-0.1107177734375,
0.0018033981323242188,
0.0158233642578125,
-0.0499267578125,
-0.0122222900390625,
-0.01175689697265625,
0.0552978515625,
0.0010318756103515625,
0.0175018310546875,
-0.0011768341064453125,
-0.11651611328125,
-0.0258026123046875,
-0.0010890960693359375,
-0.073486328125,
-0.0100250244140625,
0.09027099609375,
-0.048126220703125,
0.09039306640625,
-0.078125,
-0.04534912109375,
0.08746337890625,
0.003414154052734375,
-0.0226898193359375,
-0.05364990234375,
-0.03192138671875,
0.01493072509765625,
0.0004534721374511719,
-0.07452392578125,
0.00485992431640625,
0.03399658203125,
-0.0703125,
-0.08984375,
0.0011377334594726562,
-0.072509765625,
-0.0736083984375,
-0.0016918182373046875,
-0.032684326171875,
0.022003173828125,
-0.021331787109375,
-0.0136260986328125,
-0.0302276611328125,
-0.0836181640625,
-0.038482666015625,
-0.045928955078125,
-0.045166015625,
0.04876708984375,
0.036956787109375,
-0.008087158203125,
0.0029048919677734375,
-0.0164337158203125,
-0.084228515625,
0.0273895263671875,
0.0789794921875,
0.08526611328125,
-0.037628173828125,
-0.0155181884765625,
-0.03741455078125,
-0.022064208984375,
0.0943603515625,
-0.031707763671875,
0.045440673828125,
0.052459716796875,
-0.016082763671875,
-0.0379638671875,
-0.042999267578125,
0.01456451416015625,
0.08453369140625,
-0.057891845703125,
0.057769775390625,
0.00016999244689941406,
-0.06768798828125,
-0.063232421875,
-0.027313232421875,
0.08349609375,
0.049530029296875,
0.052398681640625,
-0.005825042724609375,
0.034393310546875,
-0.003932952880859375,
-0.071044921875,
0.0178070068359375,
0.08343505859375,
0.057281494140625,
-0.09027099609375,
0.06494140625,
0.01140594482421875,
-0.052520751953125,
-0.015167236328125,
0.06524658203125,
0.03802490234375,
0.0176849365234375,
0.047698974609375,
-0.06982421875,
0.09442138671875,
0.032318115234375,
0.038726806640625,
0.0771484375,
0.08160400390625,
0.018280029296875,
-0.021514892578125,
0.024322509765625,
0.04205322265625,
0.01338958740234375,
-0.0224761962890625,
-0.06036376953125,
-0.00012123584747314453,
-0.029571533203125,
0.089111328125,
-0.05133056640625,
0.09075927734375,
0.036102294921875,
-0.0127105712890625,
-0.05596923828125,
0.0160980224609375,
0.0780029296875,
-0.019775390625,
0.0389404296875,
-0.08135986328125,
-0.0616455078125,
0.07177734375,
-0.06939697265625,
0.039642333984375,
-0.06610107421875,
-0.08349609375,
-0.0011882781982421875,
0.08428955078125,
0.0352783203125,
0.0706787109375,
0.0936279296875,
0.001132965087890625,
-0.0080413818359375,
0.07220458984375,
0.0714111328125,
-0.032196044921875,
-0.036407470703125,
0.05810546875,
-0.04754638671875,
-0.06207275390625,
-0.0855712890625,
0.0994873046875,
0.08135986328125,
0.00893402099609375,
0.0225677490234375,
-0.0458984375,
0.0031261444091796875,
-0.044158935546875,
-0.07110595703125,
0.08367919921875,
0.0033092498779296875,
-0.0859375,
0.0755615234375,
0.0268402099609375,
-0.0782470703125,
-0.0712890625,
0.061981201171875,
-0.0205230712890625,
-0.00876617431640625,
-0.09222412109375,
0.019927978515625,
0.08013916015625,
0.072021484375,
0.07318115234375,
-0.035552978515625,
0.0120849609375,
0.04901123046875,
-0.088623046875,
0.0753173828125,
0.10589599609375,
0.03466796875,
0.045196533203125,
-0.04248046875,
-0.01218414306640625,
0.060272216796875,
-0.060699462890625,
-0.11309814453125,
-0.0450439453125,
0.0626220703125,
0.004146575927734375,
-0.013916015625,
0.02728271484375,
0.054473876953125,
0.08477783203125,
0.005016326904296875,
0.0106048583984375,
-0.04547119140625,
0.0240631103515625,
-0.021820068359375,
0.032257080078125,
0.004352569580078125,
0.010986328125,
-0.078125,
-0.042724609375,
0.097412109375,
0.0185699462890625,
0.032318115234375,
0.0235595703125,
0.055023193359375,
-0.02313232421875,
-0.046051025390625,
0.03973388671875,
-0.005138397216796875,
0.022369384765625,
-0.058197021484375,
0.09588623046875,
0.0716552734375,
-0.0303497314453125,
-0.0777587890625,
0.04913330078125,
-0.1083984375,
-0.0531005859375,
-0.031951904296875,
-0.0092620849609375,
0.10272216796875,
-0.092041015625,
0.07122802734375,
-0.0350341796875,
0.047119140625,
0.0283203125,
-0.07794189453125,
-0.046966552734375,
-0.06402587890625,
-0.0869140625,
0.0506591796875,
0.04541015625,
0.050140380859375,
-0.06549072265625,
0.02947998046875,
0.051116943359375,
0.06610107421875,
-0.0592041015625,
0.056243896484375,
-0.0173492431640625,
0.07391357421875,
-0.0108489990234375,
0.056732177734375,
-0.010040283203125,
0.06884765625,
0.0634765625,
-0.09100341796875,
0.13134765625,
-0.03778076171875,
-0.0810546875,
0.06854248046875,
0.0584716796875,
0.004581451416015625,
0.0699462890625,
-0.0313720703125,
0.111083984375,
0.117919921875,
0.0136566162109375,
-0.07843017578125,
-0.02496337890625,
-0.061553955078125,
0.06005859375,
0.007381439208984375,
-0.0430908203125,
-0.102783203125,
0.08349609375,
-0.09796142578125,
0.07330322265625,
0.0021114349365234375,
0.051544189453125,
-0.00955963134765625,
-0.1014404296875,
-0.06488037109375,
-0.00440216064453125,
0.039642333984375,
-0.03594970703125,
-0.0794677734375,
-0.10089111328125,
0.00450897216796875,
-0.0511474609375,
0.0743408203125,
0.03350830078125,
0.060028076171875,
0.08453369140625,
0.04083251953125,
-0.08905029296875,
0.01312255859375,
0.1121826171875,
-0.11260986328125,
-0.0201568603515625,
0.06512451171875,
-0.003692626953125,
-0.061187744140625,
-0.00693511962890625,
-0.0061187744140625,
0.10321044921875,
0.11798095703125,
0.0196990966796875,
-0.060821533203125,
-0.0273284912109375,
-0.04510498046875,
-0.0478515625,
0.043060302734375,
0.0556640625,
-0.04254150390625,
0.00798797607421875,
0.0195159912109375,
0.04180908203125,
0.10919189453125,
-0.07568359375,
-0.00461578369140625,
0.038330078125,
-0.03338623046875,
0.03656005859375,
-0.01540374755859375,
0.042755126953125,
0.056365966796875,
0.08538818359375,
-0.040191650390625,
0.039154052734375,
0.0006341934204101562,
-0.032989501953125,
-0.031341552734375,
0.0655517578125,
-0.03118896484375,
-0.00597381591796875,
0.0026988983154296875,
-0.0533447265625,
-0.03131103515625,
0.07177734375,
-0.0177001953125,
0.0543212890625,
-0.09271240234375,
0.055419921875,
0.00772857666015625,
0.0823974609375,
0.020782470703125,
-0.04058837890625,
0.05328369140625,
-0.06427001953125,
-0.091064453125,
0.06182861328125,
-0.03216552734375,
0.048858642578125,
0.0872802734375,
0.005786895751953125,
0.04425048828125,
0.0711669921875,
0.0987548828125,
0.085693359375,
0.08221435546875,
-0.0029773712158203125,
0.012298583984375,
-0.07763671875,
0.052642822265625,
0.04547119140625,
-0.006885528564453125,
0.110107421875,
-0.0011272430419921875,
-0.058807373046875,
-0.0946044921875,
0.05889892578125,
-0.0202789306640625,
0.0689697265625,
0.04620361328125,
-0.040802001953125,
-0.0101776123046875,
-0.051116943359375,
-0.031158447265625,
0.08740234375,
-0.1060791015625,
0.020721435546875,
-0.062744140625,
0.08135986328125,
0.01026153564453125,
-0.053955078125,
-0.0228271484375,
0.06494140625,
-0.07562255859375,
-0.0268402099609375,
-0.127685546875,
0.11737060546875,
0.09246826171875,
0.07537841796875,
-0.0188140869140625,
-0.043243408203125,
0.05743408203125,
0.1070556640625,
0.06793212890625,
-0.0297088623046875,
-0.09149169921875,
0.00872802734375,
-0.041412353515625,
0.06396484375,
0.00435638427734375,
0.01235198974609375,
0.1368408203125,
-0.031036376953125,
-0.039825439453125,
0.043701171875,
0.02587890625,
0.036346435546875,
-0.0411376953125,
-0.028350830078125,
0.1097412109375,
0.114501953125,
-0.039398193359375,
0.08599853515625,
-0.055419921875,
-0.01641845703125,
-0.12384033203125,
0.020843505859375,
-0.114990234375,
0.034332275390625,
0.052764892578125,
-0.02655029296875,
0.0830078125,
-0.0653076171875,
0.036712646484375,
0.0611572265625,
0.0015287399291992188,
0.027099609375,
-0.001560211181640625,
-0.0919189453125,
0.006351470947265625,
0.111572265625,
-0.054656982421875,
-0.02740478515625,
-0.031829833984375,
-0.043365478515625,
-0.07159423828125,
0.025299072265625,
-0.04656982421875,
-0.0218658447265625,
-0.0533447265625,
-0.025390625,
-0.051025390625,
-0.0247802734375,
-0.08172607421875,
0.11187744140625,
0.06573486328125,
0.111083984375,
0.061981201171875,
-0.0229949951171875,
0.010833740234375,
-0.051849365234375,
0.0682373046875,
-0.0072021484375,
-0.0482177734375,
-0.0062255859375,
-0.0858154296875,
0.07305908203125,
0.06048583984375,
-0.0836181640625,
-0.09075927734375,
0.040435791015625,
-0.036224365234375,
0.014129638671875,
-0.09912109375,
0.12322998046875,
0.07586669921875,
0.12396240234375,
0.01000213623046875,
-0.037750244140625,
0.036041259765625,
0.0396728515625,
-0.045501708984375,
-0.04803466796875,
-0.0413818359375,
-0.00615692138671875,
0.06329345703125,
0.07781982421875,
0.032440185546875,
-0.09014892578125,
0.06756591796875,
-0.0689697265625,
0.043609619140625,
0.033172607421875,
0.0870361328125,
-0.01178741455078125,
0.035919189453125,
-0.0313720703125,
0.06195068359375,
0.03143310546875,
0.066650390625,
0.0014333724975585938,
-0.03497314453125,
0.01297760009765625,
0.0804443359375,
-0.0535888671875,
-0.01212310791015625,
-0.0250396728515625,
0.0611572265625,
0.06097412109375,
-0.032501220703125,
-0.08087158203125,
0.0672607421875,
-0.004665374755859375,
-0.0086822509765625,
0.099609375,
-0.047027587890625,
-0.02630615234375,
-0.08477783203125,
-0.09100341796875,
0.01959228515625,
0.03717041015625,
0.0033664703369140625,
-0.023406982421875,
0.0611572265625,
-0.045440673828125,
0.08941650390625,
0.048248291015625,
-0.001800537109375,
0.03814697265625,
0.03558349609375,
-0.0703125,
0.07763671875,
0.031585693359375,
0.00193023681640625,
0.07366943359375,
0.049102783203125,
0.01898193359375,
0.07659912109375,
0.00482940673828125,
0.0139312744140625,
-0.08856201171875,
-0.0887451171875,
-0.05548095703125,
-0.06768798828125,
0.007556915283203125,
-0.055694580078125,
-0.07501220703125,
-0.040924072265625,
-0.043304443359375,
0.0269317626953125,
-0.055328369140625,
0.01448822021484375,
-0.05499267578125,
-0.03460693359375,
0.08587646484375,
-0.0217742919921875,
0.057769775390625,
-0.07513427734375,
0.04644775390625,
-0.08599853515625,
0.01139068603515625,
-0.08172607421875,
-0.0123138427734375,
-0.08526611328125,
-0.02935791015625,
0.06964111328125,
0.0013408660888671875,
0.07440185546875,
0.045867919921875,
0.01971435546875,
-0.05322265625,
0.040008544921875,
-0.07000732421875,
-0.08599853515625,
-0.0906982421875,
-0.01387786865234375,
0.02557373046875,
0.0088348388671875,
-0.01044464111328125,
-0.0268096923828125,
0.06109619140625,
-0.051177978515625,
0.0219573974609375,
-0.08795166015625,
-0.06671142578125,
-0.02850341796875,
-0.07379150390625,
-0.04681396484375,
-0.05291748046875,
0.050445556640625,
0.060302734375,
-0.03564453125,
0.00269317626953125,
-0.06964111328125,
-0.0771484375,
-0.01800537109375,
0.043670654296875,
-0.01023101806640625,
-0.07073974609375,
0.05413818359375,
-0.0144500732421875,
0.053192138671875,
-0.07476806640625,
0.004077911376953125,
0.009002685546875,
0.0224151611328125,
-0.008270263671875,
-0.0318603515625,
-0.020477294921875,
-0.0706787109375,
-0.0161590576171875,
-0.0247955322265625,
0.07086181640625,
0.06298828125,
0.038177490234375,
0.03497314453125,
0.04730224609375,
0.0307464599609375,
-0.0023193359375,
0.03839111328125,
0.025848388671875,
-0.0322265625,
-0.04669189453125,
0.06317138671875,
0.054229736328125,
-0.0645751953125,
0.053985595703125,
-0.07342529296875,
-0.038360595703125,
0.05255126953125,
0.01399993896484375,
0.042205810546875,
0.0684814453125,
-0.046783447265625,
0.063232421875,
-0.09625244140625,
-0.0257415771484375,
0.06884765625,
0.043487548828125,
0.084716796875,
-0.069580078125,
0.0859375,
0.0732421875,
0.05010986328125,
-0.06201171875,
0.055816650390625,
0.117919921875,
0.073974609375,
-0.0361328125,
0.035614013671875,
0.057159423828125,
0.06396484375,
0.1328125,
0.0197601318359375,
-0.0011777877807617188,
-0.07366943359375,
-0.07061767578125,
0.02197265625,
-0.01629638671875,
0.00983428955078125,
0.002079010009765625,
0.005565643310546875,
0.00543975830078125,
-0.044769287109375,
1.5854835510253906e-05,
-0.1556396484375,
-0.059967041015625,
0.051605224609375,
0.019500732421875,
-0.021728515625,
0.0294036865234375,
-0.072021484375,
-0.05572509765625,
-0.0611572265625,
-0.0002346038818359375,
0.021148681640625,
0.00179290771484375,
0.0555419921875,
-0.05853271484375,
0.05792236328125,
-0.009918212890625,
0.05780029296875,
0.0188751220703125,
0.09979248046875,
0.047027587890625,
-0.0008058547973632812,
0.0169677734375,
0.05706787109375,
-0.1287841796875,
0.0200347900390625,
0.09185791015625,
-0.01800537109375,
-0.12445068359375,
-0.06719970703125,
-0.01428985595703125,
0.11798095703125,
-0.11395263671875,
0.0458984375,
-0.028961181640625,
0.01605224609375,
0.07330322265625,
-0.06280517578125,
0.0341796875,
0.0450439453125,
0.0999755859375,
0.00916290283203125,
0.07489013671875,
0.06488037109375,
-0.0550537109375,
-0.0193939208984375,
-0.06207275390625,
-0.053802490234375,
0.02545166015625,
0.0266571044921875,
0.0312347412109375,
0.120849609375,
0.044708251953125,
0.01885986328125,
0.0770263671875,
0.038909912109375,
0.0872802734375,
0.01617431640625,
0.055419921875,
-0.06060791015625,
-0.098388671875,
-0.07781982421875,
-0.06634521484375,
0.0113983154296875,
0.08526611328125,
-0.085693359375,
0.044189453125,
0.047027587890625,
-0.045166015625,
-0.09674072265625,
-0.04400634765625,
-0.040130615234375,
-0.06561279296875,
-0.0667724609375,
-0.0128326416015625,
0.0863037109375,
0.00015366077423095703,
0.07183837890625,
0.05474853515625,
0.019989013671875,
0.040985107421875,
0.103759765625,
-0.047515869140625,
0.0743408203125,
-0.0028972625732421875,
-0.0119171142578125,
-0.075439453125,
0.0105743408203125,
0.07647705078125,
-0.0261993408203125,
0.050262451171875,
-0.09912109375,
0.042633056640625,
0.085693359375,
-0.0168304443359375,
0.0845947265625,
0.07281494140625,
0.09185791015625,
0.0189666748046875,
0.033233642578125,
-0.07177734375,
0.0270538330078125,
0.00923919677734375,
-0.0723876953125,
0.1285400390625,
0.1357421875,
-0.03106689453125,
0.040618896484375,
-0.00621795654296875,
0.0235595703125,
-0.0276641845703125,
0.07806396484375,
0.0850830078125,
0.050048828125,
-0.0692138671875,
-0.09619140625,
-0.08270263671875,
-0.037017822265625,
-0.10223388671875,
-0.06231689453125,
0.01441192626953125,
-0.11004638671875,
0.019775390625,
0.0130767822265625,
-0.035247802734375,
0.1070556640625,
-0.1138916015625,
-0.098388671875,
-0.06005859375,
0.0765380859375,
0.0673828125,
-0.06768798828125,
-0.06488037109375,
-0.046051025390625,
-0.086181640625,
0.08447265625,
-0.048736572265625,
-0.058197021484375,
0.017242431640625,
0.095703125,
-0.055450439453125,
0.03533935546875,
0.02557373046875,
0.10870361328125,
0.062255859375,
-0.01444244384765625,
0.0291900634765625,
-0.1064453125,
-0.07611083984375,
-0.0792236328125,
-0.03668212890625,
0.1044921875,
-0.033294677734375,
0.08984375,
0.07464599609375,
-0.057037353515625,
0.0889892578125,
0.059112548828125,
-0.0125579833984375,
0.062103271484375,
-0.041015625,
-0.049041748046875,
0.03265380859375,
0.09588623046875,
0.09814453125,
0.0173492431640625,
-0.08172607421875,
0.0225372314453125,
0.080810546875,
-0.007556915283203125,
-0.0504150390625,
0.023529052734375,
0.0035800933837890625,
0.01181793212890625,
-0.08367919921875,
0.005771636962890625,
0.1077880859375,
-0.0701904296875,
0.00021445751190185547,
0.04931640625,
0.069091796875,
-0.0650634765625,
-0.032257080078125,
-0.02154541015625,
0.0836181640625,
0.07464599609375,
-0.12200927734375,
0.0738525390625,
0.0036258697509765625,
-0.0008711814880371094,
-0.04766845703125,
-0.039794921875,
0.025970458984375,
-0.07965087890625,
0.1336669921875,
0.051849365234375,
-0.137939453125,
0.0221099853515625,
0.0291748046875,
0.00901031494140625,
-0.07061767578125,
-0.0933837890625,
-0.0745849609375,
-0.10791015625,
0.04541015625,
0.039581298828125,
0.06793212890625,
-0.0247650146484375,
0.099853515625,
0.0110931396484375,
-0.0255126953125,
-0.02239990234375,
0.054412841796875,
-0.061248779296875,
0.04766845703125,
0.007556915283203125,
-0.007320404052734375,
0.0017642974853515625,
-0.0950927734375,
-0.0491943359375,
0.0306243896484375,
0.006710052490234375,
0.07366943359375,
-0.0692138671875,
0.0657958984375,
-0.0941162109375,
0.08673095703125,
-0.04681396484375,
0.026947021484375,
0.0699462890625,
0.08746337890625,
0.024566650390625,
-0.05401611328125,
-0.0745849609375,
0.07757568359375,
-0.07745361328125,
0.0767822265625,
0.021759033203125,
0.07708740234375,
-0.07720947265625,
0.05242919921875,
-0.0489501953125,
-0.023193359375,
-0.011322021484375,
0.070556640625,
0.034149169921875,
0.08734130859375,
-0.0869140625,
0.07916259765625,
0.0809326171875,
-0.07891845703125,
-0.07879638671875,
-0.0657958984375,
-0.0264739990234375,
-0.057525634765625,
-0.0361328125,
0.01934814453125,
-0.0802001953125,
0.05865478515625,
-0.07244873046875,
-0.07666015625,
0.021453857421875,
0.052642822265625,
0.061279296875,
-0.0013751983642578125,
-0.06768798828125,
-0.0200042724609375,
-0.01390838623046875,
-0.0919189453125,
0.018463134765625,
-0.0750732421875,
-0.04510498046875,
-0.047027587890625,
-0.07830810546875,
0.06396484375,
0.00890350341796875,
0.0259552001953125,
-0.0634765625,
0.040130615234375,
-0.08154296875,
0.037109375,
-0.0207061767578125,
-0.01233673095703125,
-0.0013408660888671875,
0.03057861328125,
-0.05291748046875,
0.0640869140625,
0.019622802734375,
0.0360107421875,
0.051513671875,
0.060546875,
-0.0692138671875,
-0.042572021484375,
-0.069580078125,
-0.032623291015625,
0.04827880859375,
-0.056304931640625,
-0.07568359375,
0.07037353515625,
-0.1011962890625,
0.03997802734375,
-0.012969970703125,
-0.00965118408203125,
0.02587890625,
0.07940673828125,
0.0833740234375,
-0.0362548828125,
-0.050079345703125,
0.02130126953125,
0.0811767578125,
0.03851318359375,
0.03375244140625,
0.0579833984375,
0.056610107421875,
-0.049224853515625,
0.0341796875,
-0.06988525390625,
-0.0738525390625,
-0.039825439453125,
0.0162506103515625,
0.001186370849609375,
-0.06683349609375,
-0.045257568359375,
-0.057037353515625,
-0.03265380859375,
-0.06439208984375,
-0.0090789794921875,
0.0458984375,
0.06439208984375,
0.038299560546875,
0.039764404296875,
0.06451416015625,
-0.06097412109375,
-0.0270233154296875,
-0.07373046875,
0.02557373046875,
-0.018951416015625,
0.08331298828125,
-0.08062744140625,
0.0258941650390625,
-0.0241851806640625,
0.004711151123046875,
-0.0247039794921875,
-0.01442718505859375,
0.035614013671875,
-0.021697998046875,
0.0174407958984375,
0.027923583984375,
-0.02001953125,
-0.043548583984375,
-0.060333251953125,
-0.0867919921875,
-0.04461669921875,
0.00901031494140625,
0.01678466796875,
0.058685302734375,
-0.05242919921875,
-0.073974609375,
0.08209228515625,
-0.00264739990234375,
0.064453125,
-0.054290771484375,
0.0286712646484375,
-0.04248046875,
-0.0133209228515625,
0.0882568359375,
0.06512451171875,
-0.00576019287109375,
-0.027496337890625,
-0.0460205078125,
-0.058746337890625,
-0.06829833984375,
0.07171630859375,
-0.0625,
-0.07574462890625,
-0.0692138671875,
0.0189208984375,
-0.079345703125,
-0.075439453125,
-0.0714111328125,
-0.034423828125,
-0.083740234375,
-0.04315185546875,
0.0018854141235351562,
-0.0198974609375,
0.0789794921875,
-0.0872802734375,
0.0077362060546875,
0.083984375,
-0.04656982421875,
-0.055023193359375,
0.00762176513671875,
-0.08514404296875,
-0.0830078125,
0.0098876953125,
0.0256805419921875,
0.01100921630859375,
0.00719451904296875,
0.0626220703125,
-0.0147857666015625,
0.02850341796875,
0.07489013671875,
0.08636474609375,
0.033416748046875,
0.01172637939453125,
-0.07757568359375,
0.01934814453125,
-0.0169219970703125,
-0.08526611328125,
-0.0552978515625,
-0.01419830322265625,
-0.00530242919921875,
0.0306243896484375,
0.04498291015625,
-0.0819091796875,
-0.0888671875,
0.0243988037109375,
-0.032318115234375,
0.0751953125,
0.01009368896484375,
-0.033111572265625,
0.0677490234375,
0.05511474609375,
-0.0704345703125,
-0.033477783203125,
0.051727294921875,
-0.055145263671875,
0.033111572265625,
0.045166015625,
0.0699462890625,
-0.049530029296875,
-0.00656890869140625,
0.0870361328125,
-0.0675048828125,
0.0161895751953125,
-0.0770263671875,
-0.06610107421875,
0.0633544921875,
0.0176544189453125,
-0.058807373046875,
-0.016204833984375,
-0.08935546875,
-0.09033203125,
-0.051300048828125,
-0.06390380859375,
-0.0236968994140625,
0.03045654296875,
0.00501251220703125,
0.00876617431640625,
0.0428466796875,
-0.09002685546875,
0.09197998046875,
0.044525146484375,
0.057586669921875,
-0.02313232421875,
-0.0625,
0.05767822265625,
0.04608154296875,
-0.0550537109375,
0.01291656494140625,
0.0241241455078125,
-0.06549072265625,
-0.07757568359375,
0.058135986328125,
-0.0019741058349609375,
0.01129913330078125,
0.07354736328125,
0.048492431640625,
-0.057220458984375,
-0.02752685546875,
-0.03387451171875,
0.074951171875,
-0.01395416259765625,
0.02276611328125,
-0.0599365234375,
0.0653076171875,
-0.0118255615234375,
-0.03875732421875,
0.0517578125,
-0.06585693359375,
-0.04449462890625,
0.1220703125,
-0.0401611328125,
-0.00521087646484375,
0.055206298828125,
-0.0179595947265625,
0.09423828125,
0.07366943359375,
-0.035552978515625,
-0.04901123046875,
0.04241943359375,
0.057159423828125,
0.08831787109375,
0.01451873779296875,
0.10467529296875,
-0.008056640625,
-0.0012044906616210938,
-0.033294677734375,
0.0093536376953125,
0.114501953125,
-0.07086181640625,
0.0183868408203125,
-0.0244598388671875,
0.052001953125,
0.055267333984375,
-0.035980224609375,
-0.00727081298828125,
-0.0015325546264648438,
0.10272216796875,
0.004459381103515625,
-0.0467529296875,
-0.040679931640625,
0.06121826171875,
-0.01148223876953125,
0.04681396484375,
0.0189056396484375,
0.044586181640625,
-0.01255035400390625,
0.1312255859375,
-0.049835205078125,
0.062164306640625,
0.073974609375,
-0.09344482421875,
-0.0178680419921875,
-0.08148193359375,
-0.005977630615234375,
-0.0094451904296875,
-0.0169219970703125,
-0.0198974609375,
0.034515380859375,
-0.031646728515625,
-0.0733642578125,
-0.055694580078125,
-0.070068359375,
-0.08612060546875,
0.12091064453125,
-0.00997161865234375,
0.08685302734375,
-0.07635498046875,
-0.035400390625,
0.058563232421875,
-0.01285552978515625,
0.06304931640625,
-0.07147216796875,
-0.0997314453125,
0.0083770751953125,
0.05523681640625,
0.06640625,
0.0750732421875,
0.0731201171875,
0.0802001953125,
-0.06878662109375,
-0.081787109375,
0.0022640228271484375,
0.0157470703125,
0.06341552734375,
-0.06292724609375,
0.0323486328125,
-0.036163330078125,
0.048095703125,
-0.07867431640625,
-0.11627197265625,
0.0762939453125,
-0.06024169921875,
-0.04443359375,
0.0791015625,
0.052581787109375,
-0.0321044921875,
0.03857421875,
0.0430908203125,
-0.029693603515625,
-0.009124755859375,
0.07659912109375,
0.0141143798828125,
0.11334228515625,
0.0034942626953125,
0.0626220703125,
-0.0238189697265625,
-0.044281005859375,
-0.08917236328125,
0.0804443359375,
0.094970703125,
-0.052825927734375,
0.0748291015625,
0.06982421875,
0.013458251953125,
0.037445068359375,
-0.048553466796875,
-0.0692138671875,
-0.0178375244140625,
-0.035736083984375,
0.10394287109375,
-0.037445068359375,
-0.02191162109375,
-0.0455322265625,
-0.00418853759765625,
-0.0408935546875,
-0.00850677490234375,
-0.053985595703125,
0.08905029296875,
-0.052337646484375,
0.09478759765625,
-0.0196685791015625,
-0.06884765625,
-0.019683837890625,
-0.060638427734375,
-0.1380615234375,
-0.0892333984375,
-0.00014340877532958984,
0.00919342041015625,
-0.027923583984375,
-0.08160400390625,
0.04144287109375,
0.02685546875,
0.127197265625,
-0.046051025390625,
-0.07928466796875,
-0.055389404296875,
0.058563232421875,
0.09149169921875,
-0.006404876708984375,
0.0209503173828125,
-0.046112060546875,
-0.0283660888671875,
0.07891845703125,
-0.05322265625,
-0.04296875,
0.045318603515625,
0.07672119140625,
0.0758056640625,
-0.0133056640625,
0.087890625,
0.03997802734375,
0.00970458984375,
-0.05108642578125,
0.0242156982421875,
0.0237274169921875,
0.09075927734375,
-0.11474609375,
-0.01366424560546875,
-0.07769775390625,
0.067138671875,
-0.01430511474609375,
-0.0809326171875,
0.013580322265625,
-0.0261077880859375,
-0.05645751953125,
0.12457275390625,
0.028839111328125,
-0.006122589111328125,
-0.05224609375,
-0.08319091796875,
-0.0792236328125,
0.0797119140625,
0.01085662841796875,
-0.045928955078125,
-0.01076507568359375,
0.015899658203125,
-0.09381103515625,
0.0197906494140625,
0.092041015625,
-0.029388427734375,
-0.0225830078125,
-0.07562255859375,
0.104248046875,
0.1141357421875,
-0.0517578125,
-0.11383056640625,
0.041473388671875,
0.08123779296875,
-0.0166778564453125,
-0.058624267578125,
0.031341552734375,
-0.0772705078125,
0.09259033203125,
0.038360595703125,
-0.044830322265625,
-0.032562255859375,
-0.1104736328125,
0.0909423828125,
0.0966796875,
-0.00103759765625,
0.04815673828125,
-0.0384521484375,
0.0888671875,
-0.0004477500915527344,
0.04583740234375,
-0.04425048828125,
0.049896240234375,
0.03228759765625,
-0.027801513671875,
0.0745849609375,
-0.057586669921875,
-0.031951904296875,
0.043914794921875,
0.0013265609741210938,
0.0252532958984375,
-0.06182861328125,
0.08428955078125,
-0.0131378173828125,
0.0931396484375,
0.053558349609375,
-0.11151123046875,
0.09185791015625,
-0.058441162109375,
-0.009765625,
-0.061767578125,
-0.037628173828125,
0.0751953125,
-0.00981903076171875,
0.0175018310546875,
0.037811279296875,
-0.006954193115234375,
0.0557861328125,
-0.0638427734375,
-0.044097900390625,
0.081298828125,
-0.07220458984375,
-0.11090087890625,
0.036834716796875,
-0.07464599609375,
0.08599853515625,
0.0770263671875,
0.11724853515625,
-0.048095703125,
0.004100799560546875,
0.056976318359375,
-0.00222015380859375,
0.053314208984375,
0.0187835693359375,
0.07415771484375,
0.00611114501953125,
0.075439453125,
-0.0255126953125,
-0.032958984375,
0.01751708984375,
0.04400634765625,
-0.09515380859375,
0.060882568359375,
0.0498046875,
-0.053436279296875,
-0.06890869140625,
0.0160980224609375,
-0.08038330078125,
0.047882080078125,
-0.017913818359375,
0.05224609375,
0.028167724609375,
0.04742431640625,
0.0194091796875,
-0.0177459716796875,
-0.01357269287109375,
-0.055084228515625,
-0.04730224609375,
0.047821044921875,
0.0255279541015625,
0.061859130859375,
0.03228759765625,
-0.0306854248046875,
0.03436279296875,
0.004486083984375,
0.01317596435546875,
-0.06414794921875,
0.0634765625,
-0.0594482421875,
0.0849609375,
0.08184814453125,
0.05548095703125,
0.0889892578125,
-0.00394439697265625,
-0.06903076171875,
-0.0799560546875,
0.06878662109375,
-0.06842041015625,
-0.0013322830200195312,
-0.01099395751953125,
0.0723876953125,
0.092529296875,
0.044219970703125,
0.07183837890625,
-0.052459716796875,
-0.05780029296875,
-0.0065460205078125,
-0.023284912109375,
0.0279998779296875,
0.02386474609375,
0.07275390625,
-0.032806396484375,
-0.0914306640625,
-0.0528564453125,
-0.042877197265625,
-0.0157928466796875,
-0.08660888671875,
-0.014251708984375,
-0.05267333984375,
0.08709716796875,
0.052093505859375,
0.08367919921875,
-0.0489501953125,
-0.09417724609375,
0.001651763916015625,
0.058441162109375,
0.0008358955383300781,
-0.08380126953125,
0.07806396484375,
-0.087890625,
0.07794189453125,
-0.0938720703125,
0.042144775390625,
0.10931396484375,
0.08056640625,
-0.11260986328125,
0.016326904296875,
-0.03155517578125,
-0.037811279296875,
-0.007171630859375,
-0.014404296875,
0.0401611328125,
-0.0902099609375,
0.00958251953125,
0.09234619140625,
-0.044219970703125,
-0.08544921875,
0.019866943359375,
0.031768798828125,
-0.03167724609375,
0.07122802734375,
0.060302734375,
0.02655029296875,
-0.06512451171875,
0.010833740234375,
0.07427978515625,
0.054931640625,
-0.144775390625,
-0.0272369384765625,
-0.06231689453125,
0.00670623779296875,
-0.07196044921875,
-0.027740478515625,
-0.0208892822265625,
0.053314208984375,
-0.0263824462890625,
-0.10467529296875,
-0.040924072265625,
-0.058349609375,
-0.0855712890625,
0.036102294921875,
-0.080322265625,
0.00036787986755371094,
0.09716796875,
0.08160400390625,
-0.004444122314453125,
-0.0182342529296875,
0.0017080307006835938,
-0.0240325927734375,
-0.1064453125,
-0.0242767333984375,
0.1016845703125,
0.054779052734375,
0.07080078125,
0.09344482421875,
-0.0782470703125,
-0.056488037109375,
0.0301361083984375,
0.02728271484375,
0.0518798828125,
0.04034423828125,
0.001880645751953125,
0.0709228515625,
-0.07098388671875,
0.1214599609375,
0.119873046875,
0.06732177734375,
-0.040008544921875,
-0.0195465087890625,
-0.072265625,
-0.09576416015625,
-0.07330322265625,
0.131591796875,
-0.037750244140625,
-0.0164031982421875,
0.01654052734375,
-0.1011962890625,
-0.04388427734375,
0.08135986328125,
0.021759033203125,
0.042083740234375,
0.0243377685546875,
0.00873565673828125,
-0.09259033203125,
-0.037384033203125,
0.050872802734375,
0.0706787109375,
0.0209503173828125,
-0.0650634765625,
-0.10595703125,
-0.046966552734375,
0.00244903564453125,
0.08599853515625,
0.08990478515625,
-0.060791015625,
0.05596923828125,
0.1077880859375,
0.0025577545166015625,
-0.08856201171875,
-0.038360595703125,
0.041351318359375,
0.060394287109375,
-0.0061492919921875,
0.0914306640625,
0.0290374755859375,
0.08489990234375,
-0.0208282470703125,
0.0894775390625,
0.07244873046875,
0.01229095458984375,
0.07232666015625,
0.020538330078125,
0.0723876953125,
0.08056640625,
-0.0889892578125,
0.023162841796875,
-0.007266998291015625,
0.11669921875,
0.0004973411560058594,
0.060638427734375,
-0.0885009765625,
0.02490234375,
0.06396484375,
0.05291748046875,
-0.06805419921875,
0.025970458984375,
0.06280517578125,
0.02337646484375,
0.057769775390625,
0.0215606689453125,
-0.029632568359375,
0.00334930419921875,
-0.03594970703125,
0.0086822509765625,
-0.023681640625,
-0.00037097930908203125,
0.044708251953125,
0.00601959228515625,
0.01959228515625,
0.03619384765625,
-0.0184783935546875,
-0.028900146484375,
0.00716400146484375,
-0.026885986328125,
-0.05731201171875,
0.0704345703125,
-0.049224853515625,
-0.014678955078125,
0.055450439453125,
0.01027679443359375,
-0.08868408203125,
0.055267333984375,
0.03204345703125,
-0.044769287109375,
0.0262908935546875,
-0.054840087890625,
-0.08758544921875,
-0.0772705078125,
0.05706787109375,
-0.04779052734375,
0.07855224609375,
-0.050628662109375,
-0.08050537109375,
-0.09075927734375,
0.0333251953125,
0.03533935546875,
-0.00860595703125,
-0.0753173828125,
0.05743408203125,
0.0152130126953125,
-0.0821533203125,
-0.0295562744140625,
0.06976318359375,
-0.007778167724609375,
0.017181396484375,
0.057830810546875,
0.04095458984375,
-0.05322265625,
-0.017303466796875,
-0.054229736328125,
-0.045166015625,
0.01763916015625,
0.0469970703125,
-0.08203125,
0.02587890625,
-0.0897216796875,
0.047210693359375,
-0.0190277099609375,
-0.0240631103515625,
-0.069580078125,
-0.037567138671875,
0.0655517578125,
-0.034088134765625,
-0.059967041015625,
0.0026454925537109375,
0.03424072265625,
0.06134033203125,
-0.0113983154296875,
-0.0177154541015625,
-0.0538330078125,
-0.017608642578125,
0.051239013671875,
-0.0157470703125,
-0.07574462890625,
0.0204620361328125,
-0.059295654296875,
-0.022064208984375,
-0.0811767578125,
-0.045501708984375,
-0.027679443359375,
0.0113983154296875,
0.09185791015625,
0.08270263671875,
-0.006565093994140625,
-0.0267791748046875,
0.05718994140625,
0.054290771484375,
-0.027862548828125,
-0.04901123046875,
-0.08636474609375,
0.08734130859375,
-0.00244903564453125,
0.0626220703125,
-0.023590087890625,
0.033233642578125,
-0.06756591796875,
0.08575439453125,
0.0677490234375,
0.0679931640625,
-0.09014892578125,
0.0143890380859375,
0.0203704833984375,
-0.0226287841796875,
0.041534423828125,
0.06585693359375,
-0.0230255126953125,
0.0246429443359375,
-0.00864410400390625,
-0.038055419921875,
0.059478759765625,
0.06085205078125,
0.0002837181091308594,
0.07391357421875,
-0.0247344970703125,
0.07550048828125,
-0.057373046875,
0.08575439453125,
0.114013671875,
0.08984375,
0.05914306640625,
0.035003662109375,
0.07061767578125,
0.04644775390625,
-0.07684326171875,
0.085205078125,
-0.09063720703125,
0.10552978515625,
-0.0382080078125,
0.0819091796875,
-0.0107574462890625,
-0.05230712890625,
-0.0187530517578125,
-0.0811767578125,
-0.035491943359375,
-0.04107666015625,
-0.04791259765625,
-0.01483154296875,
-0.0733642578125,
0.0845947265625,
-0.0816650390625,
0.10150146484375,
-0.033660888671875,
-0.05224609375,
-0.027984619140625,
0.0687255859375,
-0.0814208984375,
0.0005054473876953125,
0.058990478515625,
0.0119171142578125,
0.1275634765625,
-0.0657958984375,
-0.01299285888671875,
-0.01898193359375,
0.031982421875,
-0.01050567626953125,
0.06787109375,
-0.044830322265625,
0.13134765625,
-0.08026123046875,
-0.056549072265625,
0.0660400390625,
-0.08489990234375,
0.0992431640625,
0.041351318359375,
0.046051025390625,
0.061187744140625,
-0.00774383544921875,
0.06768798828125,
-0.0833740234375,
-0.01335906982421875,
-0.05194091796875,
0.0226593017578125,
0.0159912109375,
-0.0094451904296875,
-0.07232666015625,
0.014617919921875,
0.0217742919921875,
0.07537841796875,
-0.010986328125,
0.01499176025390625,
-0.10919189453125,
0.0853271484375,
-0.08380126953125,
0.0518798828125,
0.0455322265625,
0.06378173828125,
0.10589599609375,
-0.0570068359375,
0.00518798828125,
0.02410888671875,
-0.00927734375,
-0.07562255859375,
-0.0089874267578125,
-0.06646728515625,
0.023956298828125,
-0.027740478515625,
0.0234222412109375,
0.04486083984375,
-0.01513671875,
-0.0836181640625,
0.058319091796875,
-0.055908203125,
-0.01171112060546875,
0.01343536376953125,
-0.0167236328125,
-0.05596923828125,
-0.032440185546875,
0.0034275054931640625,
0.077880859375,
0.00023746490478515625,
-0.0775146484375,
-0.10748291015625,
-0.03717041015625,
0.032928466796875,
0.051361083984375,
-0.07159423828125,
0.0010433197021484375,
0.068603515625,
-0.0723876953125,
0.0088958740234375,
-0.10595703125,
0.05810546875,
0.01052093505859375,
0.115478515625,
-0.0164947509765625,
0.1036376953125,
0.0177764892578125,
-0.040435791015625,
-0.058380126953125,
0.01345062255859375,
0.0399169921875,
-0.01322174072265625,
0.029541015625,
0.0310516357421875,
0.044158935546875
# 36 "lenet.cpp" 2
 };
 static f_16 FC1_B[120] = {

# 1 "./fc_b.h" 1
-0.0112457275390625,
0.08270263671875,
0.0309600830078125,
-0.06390380859375,
-0.054168701171875,
0.07745361328125,
-0.0679931640625,
0.0406494140625,
-0.06304931640625,
-0.08538818359375,
-0.066162109375,
-0.007720947265625,
-0.08856201171875,
-0.06353759765625,
0.06451416015625,
-0.004016876220703125,
-0.056060791015625,
-0.053680419921875,
-0.002468109130859375,
-0.0859375,
-0.044677734375,
-0.06329345703125,
0.037750244140625,
-0.043365478515625,
0.06005859375,
0.0206756591796875,
0.0762939453125,
0.01556396484375,
0.0894775390625,
0.0484619140625,
-0.07110595703125,
0.09228515625,
0.01421356201171875,
-0.0275421142578125,
-0.07830810546875,
0.08905029296875,
0.052032470703125,
-0.0102996826171875,
-0.01384735107421875,
0.074462890625,
-0.05609130859375,
-0.06591796875,
-0.04547119140625,
-0.044036865234375,
-0.0291748046875,
0.0313720703125,
0.042572021484375,
-0.05718994140625,
-0.09002685546875,
-0.01419830322265625,
-0.0033016204833984375,
0.03179931640625,
-0.031097412109375,
-0.0452880859375,
-0.0083160400390625,
-0.065673828125,
0.09161376953125,
-0.08551025390625,
-0.0916748046875,
-0.0487060546875,
-0.01494598388671875,
-0.038970947265625,
0.09979248046875,
0.089599609375,
-0.0246124267578125,
0.0777587890625,
0.0989990234375,
-0.0297088623046875,
0.058349609375,
0.004695892333984375,
-0.03436279296875,
-0.078369140625,
0.09423828125,
-0.04791259765625,
0.049041748046875,
0.06524658203125,
-0.052459716796875,
0.045440673828125,
0.07781982421875,
-0.04693603515625,
0.076416015625,
0.10009765625,
-0.01548004150390625,
-0.1026611328125
# 39 "lenet.cpp" 2
 };
 static f_16 FC2_W[10][84] = {

# 1 "./fc1_w.h" 1
0.14306640625,
-0.12841796875,
0.1829833984375,
0.050567626953125,
-0.10650634765625,
-0.115478515625,
0.0281829833984375,
-0.04736328125,
-0.003936767578125,
0.1009521484375,
-0.049896240234375,
0.0045318603515625,
0.067138671875,
-0.10601806640625,
-0.003574371337890625,
0.147216796875,
-0.00885009765625,
-0.07073974609375,
-0.2109375,
-0.00530242919921875,
0.132080078125,
-0.0772705078125,
-0.08905029296875,
0.052764892578125,
0.11669921875,
-0.09661865234375,
0.0255584716796875,
0.06878662109375,
-0.040374755859375,
-0.072265625,
-0.13134765625,
0.0386962890625,
0.11126708984375,
-0.050048828125,
-0.044281005859375,
-0.03692626953125,
0.11126708984375,
0.01312255859375,
-0.042724609375,
-0.04815673828125,
-0.004894256591796875,
0.075927734375,
0.050018310546875,
0.10821533203125,
-0.09979248046875,
0.07135009765625,
-0.06500244140625,
0.042083740234375,
0.1256103515625,
0.10028076171875,
-0.02471923828125,
-0.06329345703125,
-0.0325927734375,
-0.0784912109375,
-0.1865234375,
-0.06561279296875,
-0.0034084320068359375,
0.007732391357421875,
-0.1512451171875,
-0.0255584716796875,
-0.051849365234375,
-0.08868408203125,
0.057769775390625,
-0.0203704833984375,
-0.089111328125,
-0.197021484375,
-0.11407470703125,
0.047637939453125,
0.12152099609375,
-0.0631103515625,
-0.1553955078125,
0.113037109375,
-0.18798828125,
0.046844482421875,
0.07830810546875,
0.054107666015625,
-0.05255126953125,
0.10565185546875,
0.0625,
0.107421875,
-0.0120391845703125,
-0.0158843994140625,
0.04168701171875,
0.059722900390625,
-0.1439208984375,
-0.06060791015625,
-0.06805419921875,
-0.057281494140625,
-0.08050537109375,
-0.06988525390625,
0.198486328125,
-0.1900634765625,
-0.054595947265625,
-0.03521728515625,
-0.0181121826171875,
-0.11004638671875,
0.057525634765625,
-0.07940673828125,
0.1641845703125,
0.050201416015625,
-0.028839111328125,
-0.09649658203125,
0.1435546875,
0.007419586181640625,
-0.07061767578125,
0.01294708251953125,
-0.06878662109375,
0.09527587890625,
-0.1558837890625,
0.10693359375,
0.054443359375,
-0.0743408203125,
-0.1375732421875,
0.09765625,
-0.187255859375,
0.1590576171875,
-0.0182342529296875,
0.0859375,
-0.069091796875,
0.1512451171875,
-0.04168701171875,
0.0460205078125,
-0.0176239013671875,
0.06915283203125,
0.09820556640625,
-0.01328277587890625,
0.0911865234375,
-0.158447265625,
-0.0184783935546875,
-0.097900390625,
-0.0308074951171875,
-0.07537841796875,
0.132568359375,
0.01096343994140625,
0.1707763671875,
-0.197265625,
-0.070068359375,
-0.120849609375,
-0.09295654296875,
0.0845947265625,
-0.09906005859375,
0.0278167724609375,
0.1573486328125,
-0.1279296875,
-0.146484375,
-0.1680908203125,
0.10357666015625,
0.210693359375,
0.031951904296875,
-0.0584716796875,
0.01447296142578125,
-0.059112548828125,
-0.048095703125,
0.036956787109375,
0.14404296875,
0.026611328125,
0.0245513916015625,
0.0362548828125,
-0.04241943359375,
-0.1544189453125,
0.058837890625,
-0.02972412109375,
0.08392333984375,
-0.05517578125,
0.046630859375,
0.1456298828125,
-0.09356689453125,
0.046783447265625,
-0.1353759765625,
-0.030731201171875,
0.043243408203125,
0.00894927978515625,
-0.096923828125,
0.0014829635620117188,
-0.1925048828125,
0.009521484375,
-0.0182647705078125,
0.03338623046875,
-0.07659912109375,
-0.1328125,
-0.048065185546875,
0.0180816650390625,
0.1563720703125,
-0.134521484375,
0.0628662109375,
-0.0478515625,
-0.1217041015625,
0.1820068359375,
0.11126708984375,
-0.058990478515625,
0.12457275390625,
0.041259765625,
0.072021484375,
0.0004546642303466797,
0.0899658203125,
-0.0226287841796875,
0.0303497314453125,
0.0282745361328125,
0.054962158203125,
0.09136962890625,
-0.050628662109375,
0.017547607421875,
0.06298828125,
0.1351318359375,
0.1580810546875,
-0.0263519287109375,
-0.00757598876953125,
-0.1378173828125,
-0.1031494140625,
0.055023193359375,
-0.07769775390625,
-0.056488037109375,
-0.003177642822265625,
-0.053802490234375,
0.10113525390625,
-0.0635986328125,
-0.1173095703125,
-0.12335205078125,
0.023284912109375,
0.07867431640625,
-0.064208984375,
-0.11602783203125,
-0.14599609375,
-0.07537841796875,
-0.124267578125,
-0.051361083984375,
-0.046295166015625,
-0.175537109375,
-0.1351318359375,
-0.12493896484375,
0.1480712890625,
0.1326904296875,
-0.039947509765625,
-0.135009765625,
0.155029296875,
-0.030029296875,
0.040283203125,
-0.01534271240234375,
-0.04071044921875,
-0.09307861328125,
0.0606689453125,
-0.0301666259765625,
0.024505615234375,
0.032257080078125,
0.1373291015625,
-0.060821533203125,
0.03814697265625,
-0.12115478515625,
-0.043609619140625,
-0.1593017578125,
-0.0782470703125,
-0.06536865234375,
-0.061004638671875,
0.1016845703125,
0.08349609375,
-0.055206298828125,
0.0743408203125,
-0.0374755859375,
-0.1102294921875,
0.0670166015625,
0.061004638671875,
0.0166473388671875,
-0.038330078125,
0.081298828125,
0.046356201171875,
-0.164794921875,
0.0819091796875,
-0.01995849609375,
-0.01454925537109375,
-0.1446533203125,
-0.180419921875,
-0.1783447265625,
-0.15283203125,
0.047119140625,
0.11846923828125,
-0.053253173828125,
0.0214691162109375,
0.037933349609375,
-0.0072174072265625,
-0.053436279296875,
-0.045654296875,
-0.016021728515625,
-0.00745391845703125,
-0.038848876953125,
0.0198974609375,
0.020355224609375,
-0.0275421142578125,
0.0626220703125,
-0.12274169921875,
-0.01922607421875,
0.0278778076171875,
-0.1513671875,
-0.043548583984375,
0.062469482421875,
-0.0689697265625,
0.154296875,
-0.0217437744140625,
0.10198974609375,
-0.0208892822265625,
-0.049072265625,
-0.0994873046875,
-0.078857421875,
0.1287841796875,
0.051300048828125,
0.09613037109375,
-0.1356201171875,
0.176025390625,
-0.07464599609375,
0.05364990234375,
0.034576416015625,
0.11322021484375,
0.04962158203125,
-0.0024585723876953125,
0.0191802978515625,
0.0013475418090820312,
-0.1771240234375,
0.013946533203125,
0.1517333984375,
0.140869140625,
0.0220947265625,
-0.16015625,
-0.06878662109375,
-0.206787109375,
0.153076171875,
0.06414794921875,
0.099853515625,
-0.1728515625,
-0.0087127685546875,
-0.04595947265625,
-0.06622314453125,
0.09796142578125,
0.1373291015625,
0.025360107421875,
0.033538818359375,
0.09918212890625,
-0.1328125,
0.10455322265625,
0.018463134765625,
-0.08453369140625,
0.0209808349609375,
-0.04180908203125,
-0.2200927734375,
0.1749267578125,
-0.1064453125,
0.07489013671875,
0.09429931640625,
0.054168701171875,
-0.056854248046875,
0.074462890625,
0.035858154296875,
-0.0325927734375,
-0.1258544921875,
0.0733642578125,
0.1461181640625,
0.06976318359375,
0.061126708984375,
-0.174560546875,
0.01291656494140625,
-0.02978515625,
-0.1824951171875,
0.1009521484375,
-0.039215087890625,
-0.068359375,
0.08935546875,
-0.0975341796875,
-0.04156494140625,
-0.006748199462890625,
-0.0210418701171875,
0.1339111328125,
0.09197998046875,
0.038848876953125,
0.07232666015625,
-0.08233642578125,
-0.0160980224609375,
0.09588623046875,
0.047637939453125,
0.0002034902572631836,
-0.11322021484375,
-0.01297760009765625,
0.01166534423828125,
0.027984619140625,
-0.07720947265625,
0.028564453125,
0.09088134765625,
0.060272216796875,
0.072265625,
-0.152099609375,
-0.12139892578125,
0.015106201171875,
0.0103302001953125,
0.1077880859375,
0.09564208984375,
0.09716796875,
-0.06610107421875,
0.1103515625,
0.0504150390625,
0.027679443359375,
-0.048828125,
-0.1595458984375,
0.0034351348876953125,
-0.10498046875,
-0.06988525390625,
0.0186004638671875,
0.09588623046875,
0.07049560546875,
-0.06915283203125,
0.1717529296875,
0.031585693359375,
0.05419921875,
0.0088958740234375,
0.1260986328125,
-0.08203125,
0.1004638671875,
-0.08251953125,
-0.10516357421875,
-0.1907958984375,
-0.00705718994140625,
-0.034881591796875,
0.01605224609375,
-0.08258056640625,
-0.049560546875,
-0.1690673828125,
0.143798828125,
-0.088623046875,
-0.04193115234375,
-0.09356689453125,
0.01007843017578125,
0.06231689453125,
-0.072265625,
0.09112548828125,
-0.08624267578125,
-0.002254486083984375,
-0.062744140625,
-0.07794189453125,
-0.0271759033203125,
0.12396240234375,
0.03057861328125,
-0.1717529296875,
0.1236572265625,
0.0640869140625,
0.0202789306640625,
0.08709716796875,
0.0025119781494140625,
-0.0141754150390625,
-0.0692138671875,
-0.098388671875,
-0.07025146484375,
0.04443359375,
-0.0219879150390625,
-0.06915283203125,
-0.16259765625,
-0.1656494140625,
-0.22021484375,
0.04254150390625,
0.0274810791015625,
-0.123291015625,
0.054718017578125,
0.1051025390625,
0.07159423828125,
0.0888671875,
0.016510009765625,
0.047210693359375,
0.06365966796875,
-0.002685546875,
-0.01800537109375,
0.03741455078125,
0.08758544921875,
-0.04925537109375,
-0.12030029296875,
0.1539306640625,
-0.037872314453125,
-0.01488494873046875,
0.05706787109375,
0.100341796875,
0.130859375,
-0.07794189453125,
0.08660888671875,
-0.023590087890625,
-0.035491943359375,
0.05474853515625,
0.1661376953125,
0.1932373046875,
0.050445556640625,
0.177490234375,
-0.0665283203125,
0.045501708984375,
-0.041290283203125,
0.0318603515625,
0.14892578125,
0.0992431640625,
0.0262603759765625,
0.059600830078125,
-0.06011962890625,
0.0288543701171875,
-0.1104736328125,
-0.1580810546875,
-0.08697509765625,
0.09564208984375,
0.06854248046875,
-0.06292724609375,
-0.0718994140625,
0.12371826171875,
0.006336212158203125,
-0.25048828125,
0.097412109375,
-0.2127685546875,
0.01708984375,
0.1348876953125,
0.05010986328125,
0.16650390625,
-0.057281494140625,
-0.1260986328125,
-0.02630615234375,
-0.1075439453125,
-0.0455322265625,
0.0758056640625,
-0.0152130126953125,
0.025543212890625,
0.144775390625,
-0.044769287109375,
-0.09930419921875,
0.0189056396484375,
0.038543701171875,
-0.0748291015625,
-0.0421142578125,
-0.095947265625,
-0.25439453125,
-0.1297607421875,
-0.10882568359375,
0.034576416015625,
0.0093994140625,
0.0703125,
-0.1500244140625,
0.0148773193359375,
0.01751708984375,
-0.019317626953125,
0.042205810546875,
0.04833984375,
0.06060791015625,
-0.1832275390625,
0.14404296875,
-0.10107421875,
0.044158935546875,
0.0367431640625,
-0.033477783203125,
0.1302490234375,
0.10052490234375,
0.0855712890625,
-0.008544921875,
0.055572509765625,
-0.10272216796875,
0.1025390625,
0.029205322265625,
0.0765380859375,
-0.15185546875,
0.1949462890625,
-0.0528564453125,
-0.12200927734375,
-0.11932373046875,
0.08294677734375,
-0.06658935546875,
-0.0850830078125,
-0.088134765625,
-0.095947265625,
0.158935546875,
-0.03546142578125,
-0.12286376953125,
-0.072509765625,
-0.03546142578125,
0.09844970703125,
-0.005191802978515625,
-0.1058349609375,
0.09454345703125,
-0.09454345703125,
-0.0222625732421875,
-0.11529541015625,
-0.1927490234375,
0.041015625,
0.038818359375,
0.040802001953125,
-0.00027632713317871094,
0.00698089599609375,
-0.021087646484375,
0.027984619140625,
0.135986328125,
-0.0265350341796875,
-0.031951904296875,
-0.06976318359375,
-0.035736083984375,
0.058624267578125,
0.044342041015625,
-0.1251220703125,
-0.045166015625,
0.2159423828125,
0.056976318359375,
0.0114288330078125,
0.04534912109375,
-0.043426513671875,
-0.01702880859375,
0.12890625,
-0.045928955078125,
0.0144500732421875,
-0.0207977294921875,
-0.15185546875,
-0.09979248046875,
0.1705322265625,
-0.10693359375,
0.02099609375,
0.1766357421875,
-0.0051727294921875,
0.0180511474609375,
-0.0029277801513671875,
-0.21435546875,
-0.10211181640625,
0.048919677734375,
0.0908203125,
-0.07647705078125,
0.0875244140625,
-0.162353515625,
-0.0291900634765625,
0.07550048828125,
0.093505859375,
-0.1082763671875,
0.0167388916015625,
-0.1419677734375,
0.10797119140625,
-0.044158935546875,
0.1302490234375,
-0.058380126953125,
-0.039703369140625,
-0.06329345703125,
-0.1942138671875,
0.00041985511779785156,
0.03826904296875,
0.01555633544921875,
0.01032257080078125,
-0.11492919921875,
0.039154052734375,
0.1422119140625,
0.045166015625,
0.1055908203125,
0.1024169921875,
0.1617431640625,
-0.052520751953125,
-0.1446533203125,
-0.0211029052734375,
-0.1630859375,
0.024200439453125,
-0.050689697265625,
0.06915283203125,
-0.1351318359375,
0.174072265625,
0.06524658203125,
-0.0166015625,
-0.0943603515625,
0.017547607421875,
0.0029754638671875,
-0.0210418701171875,
0.135498046875,
0.0986328125,
0.08099365234375,
-0.033660888671875,
0.037506103515625,
0.08770751953125,
-0.01354217529296875,
-0.08355712890625,
0.10009765625,
-0.140869140625,
-0.166748046875,
-0.026611328125,
0.08282470703125,
-0.10308837890625,
-0.0166778564453125,
0.1192626953125,
-0.0855712890625,
0.1416015625,
0.0595703125,
-0.05364990234375,
-0.171875,
-0.02581787109375,
0.02532958984375,
0.10894775390625,
-0.108154296875,
0.143798828125,
0.0031261444091796875,
-0.0247039794921875,
-0.0992431640625,
0.04620361328125,
-0.053619384765625,
-0.1287841796875,
0.14599609375,
0.02911376953125,
0.052032470703125,
-0.1065673828125,
-0.01374053955078125,
0.1556396484375,
0.079345703125,
-0.03192138671875,
0.0869140625,
-0.035369873046875,
-0.1494140625,
0.1427001953125,
0.1893310546875,
-0.110107421875,
-0.042755126953125,
-0.18603515625,
-0.0304107666015625,
-0.133056640625,
-0.026611328125,
0.02081298828125,
0.0771484375,
0.1768798828125,
0.02484130859375,
0.14990234375,
-0.06097412109375,
-0.052154541015625,
0.10711669921875,
0.10137939453125,
-0.10650634765625,
-0.07122802734375,
-0.1378173828125,
-0.245849609375,
-0.1483154296875,
-0.0853271484375,
0.0276641845703125,
0.042999267578125,
0.058868408203125,
0.04144287109375,
0.050048828125,
-0.0200347900390625,
-0.076904296875,
0.011383056640625,
0.05792236328125,
0.08148193359375,
-0.017822265625,
-0.051727294921875,
0.07989501953125,
-0.0958251953125,
0.13623046875,
0.07659912109375,
-0.1441650390625,
-0.050079345703125,
0.08544921875,
-0.038726806640625,
0.10662841796875,
-0.1019287109375,
-0.0220489501953125,
0.005828857421875,
-0.11328125,
0.0036792755126953125,
0.01525115966796875,
0.09881591796875,
-0.100341796875,
-0.02362060546875,
0.06524658203125,
0.1005859375,
-0.048095703125,
-0.07330322265625,
-0.130126953125,
-0.0738525390625,
-0.0303192138671875,
-0.30419921875,
-0.0439453125,
0.0196075439453125,
0.006618499755859375,
-0.059478759765625,
0.03912353515625,
-0.00783538818359375,
0.08160400390625,
0.07806396484375,
-0.2237548828125,
0.0157318115234375,
0.066650390625,
-0.0823974609375,
-0.087646484375,
-0.055572509765625,
-0.11102294921875,
0.082763671875,
-0.01373291015625,
-0.135986328125,
0.03533935546875,
-0.049041748046875,
0.06256103515625,
-0.0201873779296875,
0.11334228515625,
-0.1651611328125,
0.06695556640625,
-0.016143798828125,
-0.12646484375,
0.00353240966796875,
-0.031097412109375,
-0.018157958984375,
0.06378173828125,
-0.10137939453125,
-0.10760498046875,
-0.23828125,
-0.043426513671875,
-0.01097869873046875,
0.025360107421875,
0.034088134765625,
0.09735107421875,
-0.0139923095703125,
0.0164794921875,
-0.052825927734375,
0.12152099609375,
-0.10400390625,
0.1370849609375,
0.07421875,
-0.045745849609375,
0.0670166015625,
-0.068603515625,
-0.04632568359375,
0.1483154296875,
0.054168701171875,
-0.05792236328125,
0.039276123046875,
0.0914306640625,
0.08599853515625,
0.0224609375,
-0.1240234375,
0.0699462890625,
0.1510009765625,
-0.0819091796875,
0.105224609375,
0.04449462890625,
0.10107421875,
0.0579833984375,
0.02056884765625,
0.139892578125,
0.05157470703125,
0.09344482421875,
0.12353515625,
-0.0467529296875,
-0.045196533203125,
-0.10931396484375,
0.023529052734375,
-0.162353515625,
0.234130859375,
0.04345703125,
0.07965087890625
# 42 "lenet.cpp" 2
 };
 static f_16 FC2_B[10] = {

# 1 "./fc1_b.h" 1
-0.06585693359375,
0.00499725341796875,
-0.0029582977294921875,
-0.075439453125,
-0.045379638671875,
0.0631103515625,
0.035736083984375,
-0.027374267578125,
-0.04449462890625,
-0.0601806640625
# 45 "lenet.cpp" 2
 };

 conv1(input, K1_W, K1_B, C1_out);
 pool1(C1_out, P1_out);
 conv2(P1_out, K2_W, K2_B, C2_out);
 pool2(C2_out, P2_out);
 conv3(P2_out, K3_W, K3_B, C3_out);
 reshape(C3_out, Re_out);
 fc1(Re_out, FC1_W, FC1_B, FC1_out);
 fc2(FC1_out, FC2_W, FC2_B, FC2_out);
 softmax(FC2_out, Cout);
}
